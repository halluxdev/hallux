#!/bin/env python
# Copyright: Hallux team, 2023

# MAIN COMMAND-LINE EXECUTABLE
# - Runs checks in the current folder (linting / unit-tests / docstrings / compilation errors)
# - Extracts every single message
# - Makes a prompt for every message
# - Sends prompt to GPT, receives answer,
# - Changes code right in the codebase or sends this change as Github Web GUI proposal


from __future__ import annotations
import os
import sys
from typing import Final
import yaml
from pathlib import Path
import openai

from query_backend import QueryBackend, OpenAiChatGPT
from diff_target import DiffTarget, FilesystemTarget, GitCommitTarget, GithubProposalTraget
from cpp import CppProcessor
from python import PythonProcessor


def load_config() -> tuple[dict | None, Path | None]:
    curr_path = Path(os.getcwd())
    while not curr_path.joinpath(".hallux").exists() and curr_path.parent != curr_path:
        curr_path = curr_path.parent
    if not curr_path.joinpath(".hallux").exists():
        return None, None
    config_file = str(curr_path.joinpath(".hallux"))
    with open(config_file) as file_stream:
        yaml_dict = yaml.load(file_stream, Loader=yaml.CLoader)
    return yaml_dict, curr_path


class Hallux:
    def __init__(self, query_backend: QueryBackend, config: dict, base_path: Path, diff_target: DiffTarget):
        self.query_backend = query_backend
        self.config: Final[dict] = config
        self.base_path: Final[Path] = base_path
        self.diff_target: Final[DiffTarget] = diff_target
        self.debug: bool = True

    def process(self):
        if "python" in self.config.keys():
            python = PythonProcessor(self.query_backend, self.diff_target, self.base_path, self.config["python"], self.debug)
            python.process()
        if "cpp" in self.config.keys():
            cpp = CppProcessor(self.query_backend, self.diff_target, self.base_path, self.config["cpp"], self.debug)
            cpp.process()



if __name__ == "__main__":
    print("Hallux v0.1 - Convenient Coding Assistant")
    if len(sys.argv) < 2 or sys.argv[1] not in ["fix", "propose", "commit"]:
        print("Usage: hallux fix | hallux commit  | hallux propose Github_PullRequest_ID")
        exit(0)

    config, path = load_config()
    if config is None:
        print("Error: config file not found")
        exit(1)

    if not "backend" in config or "openai" not in config["backend"]:
        print("Backend is not properly configured")
        exit(2)

    query_backend: QueryBackend = OpenAiChatGPT(config["backend"]["openai"])

    target: DiffTarget

    if sys.argv[1] == "fix":
        target = FilesystemTarget()
    elif sys.argv[1] == "commit":
        target = GitCommitTarget()
    else:
        target = GithubProposalTraget(sys.argv[2])

    openai.api_key = os.getenv("OPENAI_API_KEY")

    hallux = Hallux(query_backend=query_backend, config=config, base_path=path, diff_target=target)

    hallux.process()

