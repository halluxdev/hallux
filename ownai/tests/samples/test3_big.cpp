namespace std
{
typedef long unsigned int size_t;
typedef long int ptrdiff_t;
typedef decltype(nullptr) nullptr_t;
}  // namespace std
namespace std
{
inline namespace __cxx11 __attribute__((__abi_tag__("cxx11"))) {}
}  // namespace std
namespace __gnu_cxx
{
inline namespace __cxx11 __attribute__((__abi_tag__("cxx11"))) {}
}  // namespace __gnu_cxx
typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;
typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;
typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;
typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;
typedef long int __quad_t;
typedef unsigned long int __u_quad_t;
typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct
{
  int __val[2];
} __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;
typedef int __daddr_t;
typedef int __key_t;
typedef int __clockid_t;
typedef void* __timer_t;
typedef long int __blksize_t;
typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;
typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;
typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;
typedef long int __fsword_t;
typedef long int __ssize_t;
typedef long int __syscall_slong_t;
typedef unsigned long int __syscall_ulong_t;
typedef __off64_t __loff_t;
typedef char* __caddr_t;
typedef long int __intptr_t;
typedef unsigned int __socklen_t;
typedef int __sig_atomic_t typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
typedef __int_least8_t int_least8_t;
typedef __int_least16_t int_least16_t;
typedef __int_least32_t int_least32_t;
typedef __int_least64_t int_least64_t;
typedef __uint_least8_t uint_least8_t;
typedef __uint_least16_t uint_least16_t;
typedef __uint_least32_t uint_least32_t;
typedef __uint_least64_t uint_least64_t;
typedef signed char int_fast8_t;
typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
typedef unsigned char uint_fast8_t;
typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
typedef long int intptr_t;
typedef unsigned long int uintptr_t;
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
namespace std
{
using ::int16_t;
using ::int32_t;
using ::int64_t;
using ::int8_t;
using ::int_fast16_t;
using ::int_fast32_t;
using ::int_fast64_t;
using ::int_fast8_t;
using ::int_least16_t;
using ::int_least32_t;
using ::int_least64_t;
using ::int_least8_t;
using ::intmax_t;
using ::intptr_t;
using ::uint16_t;
using ::uint32_t;
using ::uint64_t;
using ::uint8_t;
using ::uint_fast16_t;
using ::uint_fast32_t;
using ::uint_fast64_t;
using ::uint_fast8_t;
using ::uint_least16_t;
using ::uint_least32_t;
using ::uint_least64_t;
using ::uint_least8_t;
using ::uintmax_t;
using ::uintptr_t;
}  // namespace std
typedef long int ptrdiff_t;
typedef long unsigned int size_t;
typedef struct
{
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
} max_align_t;
typedef decltype(nullptr) nullptr_t;
extern "C++" {
namespace std
{
using ::max_align_t;
}
namespace std
{
enum class byte : unsigned char
{
};
template <typename _IntegerType>
struct __byte_operand
{
};
template <>
struct __byte_operand<bool>
{
  using __type = byte;
};
template <>
struct __byte_operand<char>
{
  using __type = byte;
};
template <>
struct __byte_operand<signed char>
{
  using __type = byte;
};
template <>
struct __byte_operand<unsigned char>
{
  using __type = byte;
};
template <>
struct __byte_operand<wchar_t>
{
  using __type = byte;
};
template <>
struct __byte_operand<char16_t>
{
  using __type = byte;
};
template <>
struct __byte_operand<char32_t>
{
  using __type = byte;
};
template <>
struct __byte_operand<short>
{
  using __type = byte;
};
template <>
struct __byte_operand<unsigned short>
{
  using __type = byte;
};
template <>
struct __byte_operand<int>
{
  using __type = byte;
};
template <>
struct __byte_operand<unsigned int>
{
  using __type = byte;
};
template <>
struct __byte_operand<long>
{
  using __type = byte;
};
template <>
struct __byte_operand<unsigned long>
{
  using __type = byte;
};
template <>
struct __byte_operand<long long>
{
  using __type = byte;
};
template <>
struct __byte_operand<unsigned long long>
{
  using __type = byte;
};
template <typename _IntegerType>
struct __byte_operand<const _IntegerType> : __byte_operand<_IntegerType>
{
};
template <typename _IntegerType>
struct __byte_operand<volatile _IntegerType> : __byte_operand<_IntegerType>
{
};
template <typename _IntegerType>
struct __byte_operand<const volatile _IntegerType> : __byte_operand<_IntegerType>
{
};
template <typename _IntegerType>
using __byte_op_t = typename __byte_operand<_IntegerType>::__type;
template <typename _IntegerType>
constexpr __byte_op_t<_IntegerType>& operator<<=(byte& __b, _IntegerType __shift) noexcept
{
  return __b = byte(static_cast<unsigned char>(__b) << __shift);
}
template <typename _IntegerType>
constexpr __byte_op_t<_IntegerType> operator<<(byte __b, _IntegerType __shift) noexcept
{
  return byte(static_cast<unsigned char>(__b) << __shift);
}
template <typename _IntegerType>
constexpr __byte_op_t<_IntegerType>& operator>>=(byte& __b, _IntegerType __shift) noexcept
{
  return __b = byte(static_cast<unsigned char>(__b) >> __shift);
}
template <typename _IntegerType>
constexpr __byte_op_t<_IntegerType> operator>>(byte __b, _IntegerType __shift) noexcept
{
  return byte(static_cast<unsigned char>(__b) >> __shift);
}
constexpr byte& operator|=(byte& __l, byte __r) noexcept
{
  return __l = byte(static_cast<unsigned char>(__l) | static_cast<unsigned char>(__r));
}
constexpr byte operator|(byte __l, byte __r) noexcept
{
  return byte(static_cast<unsigned char>(__l) | static_cast<unsigned char>(__r));
}
constexpr byte& operator&=(byte& __l, byte __r) noexcept
{
  return __l = byte(static_cast<unsigned char>(__l) & static_cast<unsigned char>(__r));
}
constexpr byte operator&(byte __l, byte __r) noexcept
{
  return byte(static_cast<unsigned char>(__l) & static_cast<unsigned char>(__r));
}
constexpr byte& operator^=(byte& __l, byte __r) noexcept
{
  return __l = byte(static_cast<unsigned char>(__l) ^ static_cast<unsigned char>(__r));
}
constexpr byte operator^(byte __l, byte __r) noexcept
{
  return byte(static_cast<unsigned char>(__l) ^ static_cast<unsigned char>(__r));
}
constexpr byte operator~(byte __b) noexcept
{
  return byte(~static_cast<unsigned char>(__b));
}
template <typename _IntegerType>
constexpr _IntegerType to_integer(__byte_op_t<_IntegerType> __b) noexcept
{
  return _IntegerType(__b);
}
}  // namespace std
}
namespace std __attribute__((__visibility__("default")))
{
  template <typename _Tp>
  inline constexpr _Tp* __addressof(_Tp & __r) noexcept
  {
    return __builtin_addressof(__r);
  }
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _Tp, _Tp __v>
  struct integral_constant
  {
    static constexpr _Tp value = __v;
    typedef _Tp value_type;
    typedef integral_constant<_Tp, __v> type;
    constexpr operator value_type() const noexcept { return value; }
    constexpr value_type operator()() const noexcept { return value; }
  };
  template <typename _Tp, _Tp __v>
  constexpr _Tp integral_constant<_Tp, __v>::value;
  typedef integral_constant<bool, true> true_type;
  typedef integral_constant<bool, false> false_type;
  template <bool __v>
  using __bool_constant = integral_constant<bool, __v>;
  template <bool __v>
  using bool_constant = integral_constant<bool, __v>;
  template <bool, typename, typename>
  struct conditional;
  template <typename...>
  struct __or_;
  template <>
  struct __or_<> : public false_type
  {
  };
  template <typename _B1>
  struct __or_<_B1> : public _B1
  {
  };
  template <typename _B1, typename _B2>
  struct __or_<_B1, _B2> : public conditional<_B1::value, _B1, _B2>::type
  {
  };
  template <typename _B1, typename _B2, typename _B3, typename... _Bn>
  struct __or_<_B1, _B2, _B3, _Bn...> : public conditional<_B1::value, _B1, __or_<_B2, _B3, _Bn...>>::type
  {
  };
  template <typename...>
  struct __and_;
  template <>
  struct __and_<> : public true_type
  {
  };
  template <typename _B1>
  struct __and_<_B1> : public _B1
  {
  };
  template <typename _B1, typename _B2>
  struct __and_<_B1, _B2> : public conditional<_B1::value, _B2, _B1>::type
  {
  };
  template <typename _B1, typename _B2, typename _B3, typename... _Bn>
  struct __and_<_B1, _B2, _B3, _Bn...> : public conditional<_B1::value, __and_<_B2, _B3, _Bn...>, _B1>::type
  {
  };
  template <typename _Pp>
  struct __not_ : public __bool_constant<!bool(_Pp::value)>
  {
  };
  template <typename... _Bn>
  inline constexpr bool __or_v = __or_<_Bn...>::value;
  template <typename... _Bn>
  inline constexpr bool __and_v = __and_<_Bn...>::value;
  template <typename... _Bn>
  struct conjunction : __and_<_Bn...>
  {
  };
  template <typename... _Bn>
  struct disjunction : __or_<_Bn...>
  {
  };
  template <typename _Pp>
  struct negation : __not_<_Pp>
  {
  };
  template <typename... _Bn>
  inline constexpr bool conjunction_v = conjunction<_Bn...>::value;
  template <typename... _Bn>
  inline constexpr bool disjunction_v = disjunction<_Bn...>::value;
  template <typename _Pp>
  inline constexpr bool negation_v = negation<_Pp>::value;
  template <typename _Tp>
  struct __success_type
  {
    typedef _Tp type;
  };
  struct __failure_type
  {
  };
  template <typename>
  struct remove_cv;
  template <typename>
  struct __is_void_helper : public false_type
  {
  };
  template <>
  struct __is_void_helper<void> : public true_type
  {
  };
  template <typename _Tp>
  struct is_void : public __is_void_helper<typename remove_cv<_Tp>::type>::type
  {
  };
  template <typename>
  struct __is_integral_helper : public false_type
  {
  };
  template <>
  struct __is_integral_helper<bool> : public true_type
  {
  };
  template <>
  struct __is_integral_helper<char> : public true_type
  {
  };
  template <>
  struct __is_integral_helper<signed char> : public true_type
  {
  };
  template <>
  struct __is_integral_helper<unsigned char> : public true_type
  {
  };
  template <>
  struct __is_integral_helper<wchar_t> : public true_type
  {
  };
  template <>
  struct __is_integral_helper<char16_t> : public true_type
  {
  };
  template <>
  struct __is_integral_helper<char32_t> : public true_type
  {
  };
  template <>
  struct __is_integral_helper<short> : public true_type
  {
  };
  template <>
  struct __is_integral_helper<unsigned short> : public true_type
  {
  };
  template <>
  struct __is_integral_helper<int> : public true_type
  {
  };
  template <>
  struct __is_integral_helper<unsigned int> : public true_type
  {
  };
  template <>
  struct __is_integral_helper<long> : public true_type
  {
  };
  template <>
  struct __is_integral_helper<unsigned long> : public true_type
  {
  };
  template <>
  struct __is_integral_helper<long long> : public true_type
  {
  };
  template <>
  struct __is_integral_helper<unsigned long long> : public true_type
  {
  };
  template <typename _Tp>
  struct is_integral : public __is_integral_helper<typename remove_cv<_Tp>::type>::type
  {
  };
  template <typename>
  struct __is_floating_point_helper : public false_type
  {
  };
  template <>
  struct __is_floating_point_helper<float> : public true_type
  {
  };
  template <>
  struct __is_floating_point_helper<double> : public true_type
  {
  };
  template <>
  struct __is_floating_point_helper<long double> : public true_type
  {
  };
  template <typename _Tp>
  struct is_floating_point : public __is_floating_point_helper<typename remove_cv<_Tp>::type>::type
  {
  };
  template <typename>
  struct is_array : public false_type
  {
  };
  template <typename _Tp, std::size_t _Size>
  struct is_array<_Tp[_Size]> : public true_type
  {
  };
  template <typename _Tp>
  struct is_array<_Tp[]> : public true_type
  {
  };
  template <typename>
  struct __is_pointer_helper : public false_type
  {
  };
  template <typename _Tp>
  struct __is_pointer_helper<_Tp*> : public true_type
  {
  };
  template <typename _Tp>
  struct is_pointer : public __is_pointer_helper<typename remove_cv<_Tp>::type>::type
  {
  };
  template <typename>
  struct is_lvalue_reference : public false_type
  {
  };
  template <typename _Tp>
  struct is_lvalue_reference<_Tp&> : public true_type
  {
  };
  template <typename>
  struct is_rvalue_reference : public false_type
  {
  };
  template <typename _Tp>
  struct is_rvalue_reference<_Tp&&> : public true_type
  {
  };
  template <typename>
  struct is_function;
  template <typename>
  struct __is_member_object_pointer_helper : public false_type
  {
  };
  template <typename _Tp, typename _Cp>
  struct __is_member_object_pointer_helper<_Tp _Cp::*> : public __not_<is_function<_Tp>>::type
  {
  };
  template <typename _Tp>
  struct is_member_object_pointer : public __is_member_object_pointer_helper<typename remove_cv<_Tp>::type>::type
  {
  };
  template <typename>
  struct __is_member_function_pointer_helper : public false_type
  {
  };
  template <typename _Tp, typename _Cp>
  struct __is_member_function_pointer_helper<_Tp _Cp::*> : public is_function<_Tp>::type
  {
  };
  template <typename _Tp>
  struct is_member_function_pointer : public __is_member_function_pointer_helper<typename remove_cv<_Tp>::type>::type
  {
  };
  template <typename _Tp>
  struct is_enum : public integral_constant<bool, __is_enum(_Tp)>
  {
  };
  template <typename _Tp>
  struct is_union : public integral_constant<bool, __is_union(_Tp)>
  {
  };
  template <typename _Tp>
  struct is_class : public integral_constant<bool, __is_class(_Tp)>
  {
  };
  template <typename>
  struct is_function : public false_type
  {
  };
  template <typename _Res, typename... _ArgTypes, bool _NE>
  struct is_function<_Res(_ArgTypes...) noexcept(_NE)> : public true_type
  {
  };
  template <typename _Res, typename... _ArgTypes, bool _NE>
  struct is_function<_Res(_ArgTypes...)& noexcept(_NE)> : public true_type
  {
  };
  template <typename _Res, typename... _ArgTypes, bool _NE>
  struct is_function<_Res(_ArgTypes...)&& noexcept(_NE)> : public true_type
  {
  };
  template <typename _Res, typename... _ArgTypes, bool _NE>
  struct is_function<_Res(_ArgTypes......) noexcept(_NE)> : public true_type
  {
  };
  template <typename _Res, typename... _ArgTypes, bool _NE>
  struct is_function<_Res(_ArgTypes......)& noexcept(_NE)> : public true_type
  {
  };
  template <typename _Res, typename... _ArgTypes, bool _NE>
  struct is_function<_Res(_ArgTypes......)&& noexcept(_NE)> : public true_type
  {
  };
  template <typename _Res, typename... _ArgTypes, bool _NE>
  struct is_function<_Res(_ArgTypes...) const noexcept(_NE)> : public true_type
  {
  };
  template <typename _Res, typename... _ArgTypes, bool _NE>
  struct is_function<_Res(_ArgTypes...) const& noexcept(_NE)> : public true_type
  {
  };
  template <typename _Res, typename... _ArgTypes, bool _NE>
  struct is_function<_Res(_ArgTypes...) const&& noexcept(_NE)> : public true_type
  {
  };
  template <typename _Res, typename... _ArgTypes, bool _NE>
  struct is_function<_Res(_ArgTypes......) const noexcept(_NE)> : public true_type
  {
  };
  template <typename _Res, typename... _ArgTypes, bool _NE>
  struct is_function<_Res(_ArgTypes......) const& noexcept(_NE)> : public true_type
  {
  };
  template <typename _Res, typename... _ArgTypes, bool _NE>
  struct is_function<_Res(_ArgTypes......) const&& noexcept(_NE)> : public true_type
  {
  };
  template <typename _Res, typename... _ArgTypes, bool _NE>
  struct is_function<_Res(_ArgTypes...) volatile noexcept(_NE)> : public true_type
  {
  };
  template <typename _Res, typename... _ArgTypes, bool _NE>
  struct is_function<_Res(_ArgTypes...) volatile& noexcept(_NE)> : public true_type
  {
  };
  template <typename _Res, typename... _ArgTypes, bool _NE>
  struct is_function<_Res(_ArgTypes...) volatile&& noexcept(_NE)> : public true_type
  {
  };
  template <typename _Res, typename... _ArgTypes, bool _NE>
  struct is_function<_Res(_ArgTypes......) volatile noexcept(_NE)> : public true_type
  {
  };
  template <typename _Res, typename... _ArgTypes, bool _NE>
  struct is_function<_Res(_ArgTypes......) volatile& noexcept(_NE)> : public true_type
  {
  };
  template <typename _Res, typename... _ArgTypes, bool _NE>
  struct is_function<_Res(_ArgTypes......) volatile&& noexcept(_NE)> : public true_type
  {
  };
  template <typename _Res, typename... _ArgTypes, bool _NE>
  struct is_function<_Res(_ArgTypes...) const volatile noexcept(_NE)> : public true_type
  {
  };
  template <typename _Res, typename... _ArgTypes, bool _NE>
  struct is_function<_Res(_ArgTypes...) const volatile& noexcept(_NE)> : public true_type
  {
  };
  template <typename _Res, typename... _ArgTypes, bool _NE>
  struct is_function<_Res(_ArgTypes...) const volatile&& noexcept(_NE)> : public true_type
  {
  };
  template <typename _Res, typename... _ArgTypes, bool _NE>
  struct is_function<_Res(_ArgTypes......) const volatile noexcept(_NE)> : public true_type
  {
  };
  template <typename _Res, typename... _ArgTypes, bool _NE>
  struct is_function<_Res(_ArgTypes......) const volatile& noexcept(_NE)> : public true_type
  {
  };
  template <typename _Res, typename... _ArgTypes, bool _NE>
  struct is_function<_Res(_ArgTypes......) const volatile&& noexcept(_NE)> : public true_type
  {
  };
  template <typename>
  struct __is_null_pointer_helper : public false_type
  {
  };
  template <>
  struct __is_null_pointer_helper<std::nullptr_t> : public true_type
  {
  };
  template <typename _Tp>
  struct is_null_pointer : public __is_null_pointer_helper<typename remove_cv<_Tp>::type>::type
  {
  };
  template <typename _Tp>
  struct __is_nullptr_t : public is_null_pointer<_Tp>
  {
  };
  template <typename _Tp>
  struct is_reference : public __or_<is_lvalue_reference<_Tp>, is_rvalue_reference<_Tp>>::type
  {
  };
  template <typename _Tp>
  struct is_arithmetic : public __or_<is_integral<_Tp>, is_floating_point<_Tp>>::type
  {
  };
  template <typename _Tp>
  struct is_fundamental : public __or_<is_arithmetic<_Tp>, is_void<_Tp>, is_null_pointer<_Tp>>::type
  {
  };
  template <typename _Tp>
  struct is_object : public __not_<__or_<is_function<_Tp>, is_reference<_Tp>, is_void<_Tp>>>::type
  {
  };
  template <typename>
  struct is_member_pointer;
  template <typename _Tp>
  struct is_scalar
      : public __or_<is_arithmetic<_Tp>, is_enum<_Tp>, is_pointer<_Tp>, is_member_pointer<_Tp>, is_null_pointer<_Tp>>::
            type
  {
  };
  template <typename _Tp>
  struct is_compound : public __not_<is_fundamental<_Tp>>::type
  {
  };
  template <typename _Tp>
  struct __is_member_pointer_helper : public false_type
  {
  };
  template <typename _Tp, typename _Cp>
  struct __is_member_pointer_helper<_Tp _Cp::*> : public true_type
  {
  };
  template <typename _Tp>
  struct is_member_pointer : public __is_member_pointer_helper<typename remove_cv<_Tp>::type>::type
  {
  };
  template <typename _Tp>
  struct __is_referenceable : public __or_<is_object<_Tp>, is_reference<_Tp>>::type
  {
  };
  template <typename _Res, typename... _Args, bool _NE>
  struct __is_referenceable<_Res(_Args...) noexcept(_NE)> : public true_type
  {
  };
  template <typename _Res, typename... _Args, bool _NE>
  struct __is_referenceable<_Res(_Args......) noexcept(_NE)> : public true_type
  {
  };
  template <typename>
  struct is_const : public false_type
  {
  };
  template <typename _Tp>
  struct is_const<_Tp const> : public true_type
  {
  };
  template <typename>
  struct is_volatile : public false_type
  {
  };
  template <typename _Tp>
  struct is_volatile<_Tp volatile> : public true_type
  {
  };
  template <typename _Tp>
  struct is_trivial : public integral_constant<bool, __is_trivial(_Tp)>
  {
  };
  template <typename _Tp>
  struct is_trivially_copyable : public integral_constant<bool, __is_trivially_copyable(_Tp)>
  {
  };
  template <typename _Tp>
  struct is_standard_layout : public integral_constant<bool, __is_standard_layout(_Tp)>
  {
  };
  template <typename _Tp>
  struct is_pod : public integral_constant<bool, __is_pod(_Tp)>
  {
  };
  template <typename _Tp>
  struct is_literal_type : public integral_constant<bool, __is_literal_type(_Tp)>
  {
  };
  template <typename _Tp>
  struct is_empty : public integral_constant<bool, __is_empty(_Tp)>
  {
  };
  template <typename _Tp>
  struct is_polymorphic : public integral_constant<bool, __is_polymorphic(_Tp)>
  {
  };
  template <typename _Tp>
  struct is_final : public integral_constant<bool, __is_final(_Tp)>
  {
  };
  template <typename _Tp>
  struct is_abstract : public integral_constant<bool, __is_abstract(_Tp)>
  {
  };
  template <typename _Tp, bool = is_arithmetic<_Tp>::value>
  struct __is_signed_helper : public false_type
  {
  };
  template <typename _Tp>
  struct __is_signed_helper<_Tp, true> : public integral_constant<bool, _Tp(-1) < _Tp(0)>
  {
  };
  template <typename _Tp>
  struct is_signed : public __is_signed_helper<_Tp>::type
  {
  };
  template <typename _Tp>
  struct is_unsigned : public __and_<is_arithmetic<_Tp>, __not_<is_signed<_Tp>>>
  {
  };
  template <typename _Tp, typename _Up = _Tp&&>
  _Up __declval(int);
  template <typename _Tp>
  _Tp __declval(long);
  template <typename _Tp>
  auto declval() noexcept->decltype(__declval<_Tp>(0));
  template <typename, unsigned = 0>
  struct extent;
  template <typename>
  struct remove_all_extents;
  template <typename _Tp>
  struct __is_array_known_bounds : public integral_constant<bool, (extent<_Tp>::value > 0)>
  {
  };
  template <typename _Tp>
  struct __is_array_unknown_bounds : public __and_<is_array<_Tp>, __not_<extent<_Tp>>>
  {
  };
  struct __do_is_destructible_impl
  {
    template <typename _Tp, typename = decltype(declval<_Tp&>().~_Tp())>
    static true_type __test(int);
    template <typename>
    static false_type __test(...);
  };
  template <typename _Tp>
  struct __is_destructible_impl : public __do_is_destructible_impl
  {
    typedef decltype(__test<_Tp>(0)) type;
  };
  template <typename _Tp,
            bool = __or_<is_void<_Tp>, __is_array_unknown_bounds<_Tp>, is_function<_Tp>>::value,
            bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
  struct __is_destructible_safe;
  template <typename _Tp>
  struct __is_destructible_safe<_Tp, false, false>
      : public __is_destructible_impl<typename remove_all_extents<_Tp>::type>::type
  {
  };
  template <typename _Tp>
  struct __is_destructible_safe<_Tp, true, false> : public false_type
  {
  };
  template <typename _Tp>
  struct __is_destructible_safe<_Tp, false, true> : public true_type
  {
  };
  template <typename _Tp>
  struct is_destructible : public __is_destructible_safe<_Tp>::type
  {
  };
  struct __do_is_nt_destructible_impl
  {
    template <typename _Tp>
    static __bool_constant<noexcept(declval<_Tp&>().~_Tp())> __test(int);
    template <typename>
    static false_type __test(...);
  };
  template <typename _Tp>
  struct __is_nt_destructible_impl : public __do_is_nt_destructible_impl
  {
    typedef decltype(__test<_Tp>(0)) type;
  };
  template <typename _Tp,
            bool = __or_<is_void<_Tp>, __is_array_unknown_bounds<_Tp>, is_function<_Tp>>::value,
            bool = __or_<is_reference<_Tp>, is_scalar<_Tp>>::value>
  struct __is_nt_destructible_safe;
  template <typename _Tp>
  struct __is_nt_destructible_safe<_Tp, false, false>
      : public __is_nt_destructible_impl<typename remove_all_extents<_Tp>::type>::type
  {
  };
  template <typename _Tp>
  struct __is_nt_destructible_safe<_Tp, true, false> : public false_type
  {
  };
  template <typename _Tp>
  struct __is_nt_destructible_safe<_Tp, false, true> : public true_type
  {
  };
  template <typename _Tp>
  struct is_nothrow_destructible : public __is_nt_destructible_safe<_Tp>::type
  {
  };
  template <typename _Tp, typename... _Args>
  struct is_constructible : public __bool_constant<__is_constructible(_Tp, _Args...)>
  {
  };
  template <typename _Tp>
  struct is_default_constructible : public is_constructible<_Tp>::type
  {
  };
  template <typename _Tp, bool = __is_referenceable<_Tp>::value>
  struct __is_copy_constructible_impl;
  template <typename _Tp>
  struct __is_copy_constructible_impl<_Tp, false> : public false_type
  {
  };
  template <typename _Tp>
  struct __is_copy_constructible_impl<_Tp, true> : public is_constructible<_Tp, const _Tp&>
  {
  };
  template <typename _Tp>
  struct is_copy_constructible : public __is_copy_constructible_impl<_Tp>
  {
  };
  template <typename _Tp, bool = __is_referenceable<_Tp>::value>
  struct __is_move_constructible_impl;
  template <typename _Tp>
  struct __is_move_constructible_impl<_Tp, false> : public false_type
  {
  };
  template <typename _Tp>
  struct __is_move_constructible_impl<_Tp, true> : public is_constructible<_Tp, _Tp&&>
  {
  };
  template <typename _Tp>
  struct is_move_constructible : public __is_move_constructible_impl<_Tp>
  {
  };
  template <bool, typename _Tp, typename... _Args>
  struct __is_nt_constructible_impl : public false_type
  {
  };
  template <typename _Tp, typename... _Args>
  struct __is_nt_constructible_impl<true, _Tp, _Args...>
      : public __bool_constant<noexcept(_Tp(std::declval<_Args>()...))>
  {
  };
  template <typename _Tp, typename _Arg>
  struct __is_nt_constructible_impl<true, _Tp, _Arg>
      : public __bool_constant<noexcept(static_cast<_Tp>(std::declval<_Arg>()))>
  {
  };
  template <typename _Tp>
  struct __is_nt_constructible_impl<true, _Tp> : public __bool_constant<noexcept(_Tp())>
  {
  };
  template <typename _Tp, size_t _Num>
  struct __is_nt_constructible_impl<true, _Tp[_Num]>
      : public __bool_constant<noexcept(typename remove_all_extents<_Tp>::type())>
  {
  };
  template <typename _Tp, typename... _Args>
  using __is_nothrow_constructible_impl = __is_nt_constructible_impl<__is_constructible(_Tp, _Args...), _Tp, _Args...>;
  template <typename _Tp, typename... _Args>
  struct is_nothrow_constructible : public __is_nothrow_constructible_impl<_Tp, _Args...>::type
  {
  };
  template <typename _Tp>
  struct is_nothrow_default_constructible : public __is_nothrow_constructible_impl<_Tp>::type
  {
  };
  template <typename _Tp, bool = __is_referenceable<_Tp>::value>
  struct __is_nothrow_copy_constructible_impl;
  template <typename _Tp>
  struct __is_nothrow_copy_constructible_impl<_Tp, false> : public false_type
  {
  };
  template <typename _Tp>
  struct __is_nothrow_copy_constructible_impl<_Tp, true> : public is_nothrow_constructible<_Tp, const _Tp&>
  {
  };
  template <typename _Tp>
  struct is_nothrow_copy_constructible : public __is_nothrow_copy_constructible_impl<_Tp>
  {
  };
  template <typename _Tp, bool = __is_referenceable<_Tp>::value>
  struct __is_nothrow_move_constructible_impl;
  template <typename _Tp>
  struct __is_nothrow_move_constructible_impl<_Tp, false> : public false_type
  {
  };
  template <typename _Tp>
  struct __is_nothrow_move_constructible_impl<_Tp, true> : public is_nothrow_constructible<_Tp, _Tp&&>
  {
  };
  template <typename _Tp>
  struct is_nothrow_move_constructible : public __is_nothrow_move_constructible_impl<_Tp>
  {
  };
  template <typename _Tp, typename _Up>
  struct is_assignable : public __bool_constant<__is_assignable(_Tp, _Up)>
  {
  };
  template <typename _Tp, bool = __is_referenceable<_Tp>::value>
  struct __is_copy_assignable_impl;
  template <typename _Tp>
  struct __is_copy_assignable_impl<_Tp, false> : public false_type
  {
  };
  template <typename _Tp>
  struct __is_copy_assignable_impl<_Tp, true> : public is_assignable<_Tp&, const _Tp&>
  {
  };
  template <typename _Tp>
  struct is_copy_assignable : public __is_copy_assignable_impl<_Tp>
  {
  };
  template <typename _Tp, bool = __is_referenceable<_Tp>::value>
  struct __is_move_assignable_impl;
  template <typename _Tp>
  struct __is_move_assignable_impl<_Tp, false> : public false_type
  {
  };
  template <typename _Tp>
  struct __is_move_assignable_impl<_Tp, true> : public is_assignable<_Tp&, _Tp&&>
  {
  };
  template <typename _Tp>
  struct is_move_assignable : public __is_move_assignable_impl<_Tp>
  {
  };
  template <typename _Tp, typename _Up>
  struct __is_nt_assignable_impl : public integral_constant<bool, noexcept(declval<_Tp>() = declval<_Up>())>
  {
  };
  template <typename _Tp, typename _Up>
  struct is_nothrow_assignable : public __and_<is_assignable<_Tp, _Up>, __is_nt_assignable_impl<_Tp, _Up>>
  {
  };
  template <typename _Tp, bool = __is_referenceable<_Tp>::value>
  struct __is_nt_copy_assignable_impl;
  template <typename _Tp>
  struct __is_nt_copy_assignable_impl<_Tp, false> : public false_type
  {
  };
  template <typename _Tp>
  struct __is_nt_copy_assignable_impl<_Tp, true> : public is_nothrow_assignable<_Tp&, const _Tp&>
  {
  };
  template <typename _Tp>
  struct is_nothrow_copy_assignable : public __is_nt_copy_assignable_impl<_Tp>
  {
  };
  template <typename _Tp, bool = __is_referenceable<_Tp>::value>
  struct __is_nt_move_assignable_impl;
  template <typename _Tp>
  struct __is_nt_move_assignable_impl<_Tp, false> : public false_type
  {
  };
  template <typename _Tp>
  struct __is_nt_move_assignable_impl<_Tp, true> : public is_nothrow_assignable<_Tp&, _Tp&&>
  {
  };
  template <typename _Tp>
  struct is_nothrow_move_assignable : public __is_nt_move_assignable_impl<_Tp>
  {
  };
  template <typename _Tp, typename... _Args>
  struct is_trivially_constructible : public __bool_constant<__is_trivially_constructible(_Tp, _Args...)>
  {
  };
  template <typename _Tp>
  struct is_trivially_default_constructible : public is_trivially_constructible<_Tp>::type
  {
  };
  struct __do_is_implicitly_default_constructible_impl
  {
    template <typename _Tp>
    static void __helper(const _Tp&);
    template <typename _Tp>
    static true_type __test(const _Tp&, decltype(__helper<const _Tp&>({}))* = 0);
    static false_type __test(...);
  };
  template <typename _Tp>
  struct __is_implicitly_default_constructible_impl : public __do_is_implicitly_default_constructible_impl
  {
    typedef decltype(__test(declval<_Tp>())) type;
  };
  template <typename _Tp>
  struct __is_implicitly_default_constructible_safe : public __is_implicitly_default_constructible_impl<_Tp>::type
  {
  };
  template <typename _Tp>
  struct __is_implicitly_default_constructible
      : public __and_<is_default_constructible<_Tp>, __is_implicitly_default_constructible_safe<_Tp>>
  {
  };
  template <typename _Tp, bool = __is_referenceable<_Tp>::value>
  struct __is_trivially_copy_constructible_impl;
  template <typename _Tp>
  struct __is_trivially_copy_constructible_impl<_Tp, false> : public false_type
  {
  };
  template <typename _Tp>
  struct __is_trivially_copy_constructible_impl<_Tp, true>
      : public __and_<is_copy_constructible<_Tp>,
                      integral_constant<bool, __is_trivially_constructible(_Tp, const _Tp&)>>
  {
  };
  template <typename _Tp>
  struct is_trivially_copy_constructible : public __is_trivially_copy_constructible_impl<_Tp>
  {
  };
  template <typename _Tp, bool = __is_referenceable<_Tp>::value>
  struct __is_trivially_move_constructible_impl;
  template <typename _Tp>
  struct __is_trivially_move_constructible_impl<_Tp, false> : public false_type
  {
  };
  template <typename _Tp>
  struct __is_trivially_move_constructible_impl<_Tp, true>
      : public __and_<is_move_constructible<_Tp>, integral_constant<bool, __is_trivially_constructible(_Tp, _Tp &&)>>
  {
  };
  template <typename _Tp>
  struct is_trivially_move_constructible : public __is_trivially_move_constructible_impl<_Tp>
  {
  };
  template <typename _Tp, typename _Up>
  struct is_trivially_assignable : public __bool_constant<__is_trivially_assignable(_Tp, _Up)>
  {
  };
  template <typename _Tp, bool = __is_referenceable<_Tp>::value>
  struct __is_trivially_copy_assignable_impl;
  template <typename _Tp>
  struct __is_trivially_copy_assignable_impl<_Tp, false> : public false_type
  {
  };
  template <typename _Tp>
  struct __is_trivially_copy_assignable_impl<_Tp, true>
      : public __bool_constant<__is_trivially_assignable(_Tp&, const _Tp&)>
  {
  };
  template <typename _Tp>
  struct is_trivially_copy_assignable : public __is_trivially_copy_assignable_impl<_Tp>
  {
  };
  template <typename _Tp, bool = __is_referenceable<_Tp>::value>
  struct __is_trivially_move_assignable_impl;
  template <typename _Tp>
  struct __is_trivially_move_assignable_impl<_Tp, false> : public false_type
  {
  };
  template <typename _Tp>
  struct __is_trivially_move_assignable_impl<_Tp, true>
      : public __bool_constant<__is_trivially_assignable(_Tp&, _Tp &&)>
  {
  };
  template <typename _Tp>
  struct is_trivially_move_assignable : public __is_trivially_move_assignable_impl<_Tp>
  {
  };
  template <typename _Tp>
  struct is_trivially_destructible : public __and_<is_destructible<_Tp>, __bool_constant<__has_trivial_destructor(_Tp)>>
  {
  };
  template <typename _Tp>
  struct has_virtual_destructor : public integral_constant<bool, __has_virtual_destructor(_Tp)>
  {
  };
  template <typename _Tp>
  struct alignment_of : public integral_constant<std::size_t, alignof(_Tp)>
  {
  };
  template <typename>
  struct rank : public integral_constant<std::size_t, 0>
  {
  };
  template <typename _Tp, std::size_t _Size>
  struct rank<_Tp[_Size]> : public integral_constant<std::size_t, 1 + rank<_Tp>::value>
  {
  };
  template <typename _Tp>
  struct rank<_Tp[]> : public integral_constant<std::size_t, 1 + rank<_Tp>::value>
  {
  };
  template <typename, unsigned _Uint>
  struct extent : public integral_constant<std::size_t, 0>
  {
  };
  template <typename _Tp, unsigned _Uint, std::size_t _Size>
  struct extent<_Tp[_Size], _Uint>
      : public integral_constant<std::size_t, _Uint == 0 ? _Size : extent<_Tp, _Uint - 1>::value>
  {
  };
  template <typename _Tp, unsigned _Uint>
  struct extent<_Tp[], _Uint> : public integral_constant<std::size_t, _Uint == 0 ? 0 : extent<_Tp, _Uint - 1>::value>
  {
  };
  template <typename, typename>
  struct is_same : public false_type
  {
  };
  template <typename _Tp>
  struct is_same<_Tp, _Tp> : public true_type
  {
  };
  template <typename _Base, typename _Derived>
  struct is_base_of : public integral_constant<bool, __is_base_of(_Base, _Derived)>
  {
  };
  template <typename _From, typename _To, bool = __or_<is_void<_From>, is_function<_To>, is_array<_To>>::value>
  struct __is_convertible_helper
  {
    typedef typename is_void<_To>::type type;
  };
  template <typename _From, typename _To>
  class __is_convertible_helper<_From, _To, false>
  {
    template <typename _To1>
    static void __test_aux(_To1) noexcept;
    template <typename _From1, typename _To1, typename = decltype(__test_aux<_To1>(std::declval<_From1>()))>
    static true_type __test(int);
    template <typename, typename>
    static false_type __test(...);

  public:
    typedef decltype(__test<_From, _To>(0)) type;
  };
  template <typename _From, typename _To>
  struct is_convertible : public __is_convertible_helper<_From, _To>::type
  {
  };
  template <typename _Tp>
  struct remove_const
  {
    typedef _Tp type;
  };
  template <typename _Tp>
  struct remove_const<_Tp const>
  {
    typedef _Tp type;
  };
  template <typename _Tp>
  struct remove_volatile
  {
    typedef _Tp type;
  };
  template <typename _Tp>
  struct remove_volatile<_Tp volatile>
  {
    typedef _Tp type;
  };
  template <typename _Tp>
  struct remove_cv
  {
    typedef typename remove_const<typename remove_volatile<_Tp>::type>::type type;
  };
  template <typename _Tp>
  struct add_const
  {
    typedef _Tp const type;
  };
  template <typename _Tp>
  struct add_volatile
  {
    typedef _Tp volatile type;
  };
  template <typename _Tp>
  struct add_cv
  {
    typedef typename add_const<typename add_volatile<_Tp>::type>::type type;
  };
  template <typename _Tp>
  using remove_const_t = typename remove_const<_Tp>::type;
  template <typename _Tp>
  using remove_volatile_t = typename remove_volatile<_Tp>::type;
  template <typename _Tp>
  using remove_cv_t = typename remove_cv<_Tp>::type;
  template <typename _Tp>
  using add_const_t = typename add_const<_Tp>::type;
  template <typename _Tp>
  using add_volatile_t = typename add_volatile<_Tp>::type;
  template <typename _Tp>
  using add_cv_t = typename add_cv<_Tp>::type;
  template <typename _Tp>
  struct remove_reference
  {
    typedef _Tp type;
  };
  template <typename _Tp>
  struct remove_reference<_Tp&>
  {
    typedef _Tp type;
  };
  template <typename _Tp>
  struct remove_reference<_Tp&&>
  {
    typedef _Tp type;
  };
  template <typename _Tp, bool = __is_referenceable<_Tp>::value>
  struct __add_lvalue_reference_helper
  {
    typedef _Tp type;
  };
  template <typename _Tp>
  struct __add_lvalue_reference_helper<_Tp, true>
  {
    typedef _Tp& type;
  };
  template <typename _Tp>
  struct add_lvalue_reference : public __add_lvalue_reference_helper<_Tp>
  {
  };
  template <typename _Tp, bool = __is_referenceable<_Tp>::value>
  struct __add_rvalue_reference_helper
  {
    typedef _Tp type;
  };
  template <typename _Tp>
  struct __add_rvalue_reference_helper<_Tp, true>
  {
    typedef _Tp&& type;
  };
  template <typename _Tp>
  struct add_rvalue_reference : public __add_rvalue_reference_helper<_Tp>
  {
  };
  template <typename _Tp>
  using remove_reference_t = typename remove_reference<_Tp>::type;
  template <typename _Tp>
  using add_lvalue_reference_t = typename add_lvalue_reference<_Tp>::type;
  template <typename _Tp>
  using add_rvalue_reference_t = typename add_rvalue_reference<_Tp>::type;
  template <typename _Unqualified, bool _IsConst, bool _IsVol>
  struct __cv_selector;
  template <typename _Unqualified>
  struct __cv_selector<_Unqualified, false, false>
  {
    typedef _Unqualified __type;
  };
  template <typename _Unqualified>
  struct __cv_selector<_Unqualified, false, true>
  {
    typedef volatile _Unqualified __type;
  };
  template <typename _Unqualified>
  struct __cv_selector<_Unqualified, true, false>
  {
    typedef const _Unqualified __type;
  };
  template <typename _Unqualified>
  struct __cv_selector<_Unqualified, true, true>
  {
    typedef const volatile _Unqualified __type;
  };
  template <typename _Qualified,
            typename _Unqualified,
            bool _IsConst = is_const<_Qualified>::value,
            bool _IsVol = is_volatile<_Qualified>::value>
  class __match_cv_qualifiers
  {
    typedef __cv_selector<_Unqualified, _IsConst, _IsVol> __match;

  public:
    typedef typename __match::__type __type;
  };
  template <typename _Tp>
  struct __make_unsigned
  {
    typedef _Tp __type;
  };
  template <>
  struct __make_unsigned<char>
  {
    typedef unsigned char __type;
  };
  template <>
  struct __make_unsigned<signed char>
  {
    typedef unsigned char __type;
  };
  template <>
  struct __make_unsigned<short>
  {
    typedef unsigned short __type;
  };
  template <>
  struct __make_unsigned<int>
  {
    typedef unsigned int __type;
  };
  template <>
  struct __make_unsigned<long>
  {
    typedef unsigned long __type;
  };
  template <>
  struct __make_unsigned<long long>
  {
    typedef unsigned long long __type;
  };
  template <typename _Tp, bool _IsInt = is_integral<_Tp>::value, bool _IsEnum = is_enum<_Tp>::value>
  class __make_unsigned_selector;
  template <typename _Tp>
  class __make_unsigned_selector<_Tp, true, false>
  {
    using __unsigned_type = typename __make_unsigned<typename remove_cv<_Tp>::type>::__type;

  public:
    using __type = typename __match_cv_qualifiers<_Tp, __unsigned_type>::__type;
  };
  class __make_unsigned_selector_base
  {
  protected:
    template <typename...>
    struct _List
    {
    };
    template <typename _Tp, typename... _Up>
    struct _List<_Tp, _Up...> : _List<_Up...>
    {
      static constexpr size_t __size = sizeof(_Tp);
    };
    template <size_t _Sz, typename _Tp, bool = (_Sz <= _Tp::__size)>
    struct __select;
    template <size_t _Sz, typename _Uint, typename... _UInts>
    struct __select<_Sz, _List<_Uint, _UInts...>, true>
    {
      using __type = _Uint;
    };
    template <size_t _Sz, typename _Uint, typename... _UInts>
    struct __select<_Sz, _List<_Uint, _UInts...>, false> : __select<_Sz, _List<_UInts...>>
    {
    };
  };
  template <typename _Tp>
  class __make_unsigned_selector<_Tp, false, true> : __make_unsigned_selector_base
  {
    using _UInts = _List<unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long>;
    using __unsigned_type = typename __select<sizeof(_Tp), _UInts>::__type;

  public:
    using __type = typename __match_cv_qualifiers<_Tp, __unsigned_type>::__type;
  };
  template <>
  struct __make_unsigned<wchar_t>
  {
    using __type = typename __make_unsigned_selector<wchar_t, false, true>::__type;
  };
  template <>
  struct __make_unsigned<char16_t>
  {
    using __type = typename __make_unsigned_selector<char16_t, false, true>::__type;
  };
  template <>
  struct __make_unsigned<char32_t>
  {
    using __type = typename __make_unsigned_selector<char32_t, false, true>::__type;
  };
  template <typename _Tp>
  struct make_unsigned
  {
    typedef typename __make_unsigned_selector<_Tp>::__type type;
  };
  template <>
  struct make_unsigned<bool>;
  template <typename _Tp>
  struct __make_signed
  {
    typedef _Tp __type;
  };
  template <>
  struct __make_signed<char>
  {
    typedef signed char __type;
  };
  template <>
  struct __make_signed<unsigned char>
  {
    typedef signed char __type;
  };
  template <>
  struct __make_signed<unsigned short>
  {
    typedef signed short __type;
  };
  template <>
  struct __make_signed<unsigned int>
  {
    typedef signed int __type;
  };
  template <>
  struct __make_signed<unsigned long>
  {
    typedef signed long __type;
  };
  template <>
  struct __make_signed<unsigned long long>
  {
    typedef signed long long __type;
  };
  template <typename _Tp, bool _IsInt = is_integral<_Tp>::value, bool _IsEnum = is_enum<_Tp>::value>
  class __make_signed_selector;
  template <typename _Tp>
  class __make_signed_selector<_Tp, true, false>
  {
    using __signed_type = typename __make_signed<typename remove_cv<_Tp>::type>::__type;

  public:
    using __type = typename __match_cv_qualifiers<_Tp, __signed_type>::__type;
  };
  template <typename _Tp>
  class __make_signed_selector<_Tp, false, true>
  {
    typedef typename __make_unsigned_selector<_Tp>::__type __unsigned_type;

  public:
    typedef typename __make_signed_selector<__unsigned_type>::__type __type;
  };
  template <>
  struct __make_signed<wchar_t>
  {
    using __type = typename __make_signed_selector<wchar_t, false, true>::__type;
  };
  template <>
  struct __make_signed<char16_t>
  {
    using __type = typename __make_signed_selector<char16_t, false, true>::__type;
  };
  template <>
  struct __make_signed<char32_t>
  {
    using __type = typename __make_signed_selector<char32_t, false, true>::__type;
  };
  template <typename _Tp>
  struct make_signed
  {
    typedef typename __make_signed_selector<_Tp>::__type type;
  };
  template <>
  struct make_signed<bool>;
  template <typename _Tp>
  using make_signed_t = typename make_signed<_Tp>::type;
  template <typename _Tp>
  using make_unsigned_t = typename make_unsigned<_Tp>::type;
  template <typename _Tp>
  struct remove_extent
  {
    typedef _Tp type;
  };
  template <typename _Tp, std::size_t _Size>
  struct remove_extent<_Tp[_Size]>
  {
    typedef _Tp type;
  };
  template <typename _Tp>
  struct remove_extent<_Tp[]>
  {
    typedef _Tp type;
  };
  template <typename _Tp>
  struct remove_all_extents
  {
    typedef _Tp type;
  };
  template <typename _Tp, std::size_t _Size>
  struct remove_all_extents<_Tp[_Size]>
  {
    typedef typename remove_all_extents<_Tp>::type type;
  };
  template <typename _Tp>
  struct remove_all_extents<_Tp[]>
  {
    typedef typename remove_all_extents<_Tp>::type type;
  };
  template <typename _Tp>
  using remove_extent_t = typename remove_extent<_Tp>::type;
  template <typename _Tp>
  using remove_all_extents_t = typename remove_all_extents<_Tp>::type;
  template <typename _Tp, typename>
  struct __remove_pointer_helper
  {
    typedef _Tp type;
  };
  template <typename _Tp, typename _Up>
  struct __remove_pointer_helper<_Tp, _Up*>
  {
    typedef _Up type;
  };
  template <typename _Tp>
  struct remove_pointer : public __remove_pointer_helper<_Tp, typename remove_cv<_Tp>::type>
  {
  };
  template <typename _Tp, bool = __or_<__is_referenceable<_Tp>, is_void<_Tp>>::value>
  struct __add_pointer_helper
  {
    typedef _Tp type;
  };
  template <typename _Tp>
  struct __add_pointer_helper<_Tp, true>
  {
    typedef typename remove_reference<_Tp>::type* type;
  };
  template <typename _Tp>
  struct add_pointer : public __add_pointer_helper<_Tp>
  {
  };
  template <typename _Tp>
  using remove_pointer_t = typename remove_pointer<_Tp>::type;
  template <typename _Tp>
  using add_pointer_t = typename add_pointer<_Tp>::type;
  template <std::size_t _Len>
  struct __aligned_storage_msa
  {
    union __type
    {
      unsigned char __data[_Len];
      struct __attribute__((__aligned__))
      {
      } __align;
    };
  };
  template <std::size_t _Len, std::size_t _Align = __alignof__(typename __aligned_storage_msa<_Len>::__type)>
  struct aligned_storage
  {
    union type
    {
      unsigned char __data[_Len];
      struct __attribute__((__aligned__((_Align))))
      {
      } __align;
    };
  };
  template <typename... _Types>
  struct __strictest_alignment
  {
    static const size_t _S_alignment = 0;
    static const size_t _S_size = 0;
  };
  template <typename _Tp, typename... _Types>
  struct __strictest_alignment<_Tp, _Types...>
  {
    static const size_t _S_alignment = alignof(_Tp) > __strictest_alignment<_Types...>::_S_alignment
                                           ? alignof(_Tp)
                                           : __strictest_alignment<_Types...>::_S_alignment;
    static const size_t _S_size = sizeof(_Tp) > __strictest_alignment<_Types...>::_S_size
                                      ? sizeof(_Tp)
                                      : __strictest_alignment<_Types...>::_S_size;
  };
  template <size_t _Len, typename... _Types>
  struct aligned_union
  {
  private:
    static_assert(sizeof...(_Types) != 0, "At least one type is required");
    using __strictest = __strictest_alignment<_Types...>;
    static const size_t _S_len = _Len > __strictest::_S_size ? _Len : __strictest::_S_size;

  public:
    static const size_t alignment_value = __strictest::_S_alignment;
    typedef typename aligned_storage<_S_len, alignment_value>::type type;
  };
  template <size_t _Len, typename... _Types>
  const size_t aligned_union<_Len, _Types...>::alignment_value;
  template <typename _Up, bool _IsArray = is_array<_Up>::value, bool _IsFunction = is_function<_Up>::value>
  struct __decay_selector;
  template <typename _Up>
  struct __decay_selector<_Up, false, false>
  {
    typedef typename remove_cv<_Up>::type __type;
  };
  template <typename _Up>
  struct __decay_selector<_Up, true, false>
  {
    typedef typename remove_extent<_Up>::type* __type;
  };
  template <typename _Up>
  struct __decay_selector<_Up, false, true>
  {
    typedef typename add_pointer<_Up>::type __type;
  };
  template <typename _Tp>
  class decay
  {
    typedef typename remove_reference<_Tp>::type __remove_type;

  public:
    typedef typename __decay_selector<__remove_type>::__type type;
  };
  template <typename _Tp>
  class reference_wrapper;
  template <typename _Tp>
  struct __strip_reference_wrapper
  {
    typedef _Tp __type;
  };
  template <typename _Tp>
  struct __strip_reference_wrapper<reference_wrapper<_Tp>>
  {
    typedef _Tp& __type;
  };
  template <typename _Tp>
  struct __decay_and_strip
  {
    typedef typename __strip_reference_wrapper<typename decay<_Tp>::type>::__type __type;
  };
  template <bool, typename _Tp = void>
  struct enable_if
  {
  };
  template <typename _Tp>
  struct enable_if<true, _Tp>
  {
    typedef _Tp type;
  };
  template <typename... _Cond>
  using _Require = typename enable_if<__and_<_Cond...>::value>::type;
  template <bool _Cond, typename _Iftrue, typename _Iffalse>
  struct conditional
  {
    typedef _Iftrue type;
  };
  template <typename _Iftrue, typename _Iffalse>
  struct conditional<false, _Iftrue, _Iffalse>
  {
    typedef _Iffalse type;
  };
  template <typename... _Tp>
  struct common_type;
  struct __do_common_type_impl
  {
    template <typename _Tp, typename _Up>
    static __success_type<typename decay<decltype(true ? std::declval<_Tp>() : std::declval<_Up>())>::type> _S_test(
        int);
    template <typename, typename>
    static __failure_type _S_test(...);
  };
  template <typename _Tp, typename _Up>
  struct __common_type_impl : private __do_common_type_impl
  {
    typedef decltype(_S_test<_Tp, _Up>(0)) type;
  };
  struct __do_member_type_wrapper
  {
    template <typename _Tp>
    static __success_type<typename _Tp::type> _S_test(int);
    template <typename>
    static __failure_type _S_test(...);
  };
  template <typename _Tp>
  struct __member_type_wrapper : private __do_member_type_wrapper
  {
    typedef decltype(_S_test<_Tp>(0)) type;
  };
  template <typename _CTp, typename... _Args>
  struct __expanded_common_type_wrapper
  {
    typedef common_type<typename _CTp::type, _Args...> type;
  };
  template <typename... _Args>
  struct __expanded_common_type_wrapper<__failure_type, _Args...>
  {
    typedef __failure_type type;
  };
  template <>
  struct common_type<>
  {
  };
  template <typename _Tp>
  struct common_type<_Tp> : common_type<_Tp, _Tp>
  {
  };
  template <typename _Tp, typename _Up>
  struct common_type<_Tp, _Up> : public __common_type_impl<_Tp, _Up>::type
  {
  };
  template <typename _Tp, typename _Up, typename... _Vp>
  struct common_type<_Tp, _Up, _Vp...>
      : public __expanded_common_type_wrapper<typename __member_type_wrapper<common_type<_Tp, _Up>>::type, _Vp...>::type
  {
  };
  template <typename _Tp, bool = is_enum<_Tp>::value>
  struct __underlying_type_impl
  {
    using type = __underlying_type(_Tp);
  };
  template <typename _Tp>
  struct __underlying_type_impl<_Tp, false>
  {
  };
  template <typename _Tp>
  struct underlying_type : public __underlying_type_impl<_Tp>
  {
  };
  template <typename _Tp>
  struct __declval_protector
  {
    static const bool __stop = false;
  };
  template <typename _Tp>
  auto declval() noexcept->decltype(__declval<_Tp>(0))
  {
    static_assert(__declval_protector<_Tp>::__stop, "declval() must not be used!");
    return __declval<_Tp>(0);
  }
  template <typename _Tp>
  using __remove_cvref_t = typename remove_cv<typename remove_reference<_Tp>::type>::type;
  template <typename _Signature>
  class result_of;
  struct __invoke_memfun_ref
  {
  };
  struct __invoke_memfun_deref
  {
  };
  struct __invoke_memobj_ref
  {
  };
  struct __invoke_memobj_deref
  {
  };
  struct __invoke_other
  {
  };
  template <typename _Tp, typename _Tag>
  struct __result_of_success : __success_type<_Tp>
  {
    using __invoke_type = _Tag;
  };
  struct __result_of_memfun_ref_impl
  {
    template <typename _Fp, typename _Tp1, typename... _Args>
    static __result_of_success<decltype((std::declval<_Tp1>().*std::declval<_Fp>())(std::declval<_Args>()...)),
                               __invoke_memfun_ref>
    _S_test(int);
    template <typename...>
    static __failure_type _S_test(...);
  };
  template <typename _MemPtr, typename _Arg, typename... _Args>
  struct __result_of_memfun_ref : private __result_of_memfun_ref_impl
  {
    typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
  };
  struct __result_of_memfun_deref_impl
  {
    template <typename _Fp, typename _Tp1, typename... _Args>
    static __result_of_success<decltype(((*std::declval<_Tp1>()).*std::declval<_Fp>())(std::declval<_Args>()...)),
                               __invoke_memfun_deref>
    _S_test(int);
    template <typename...>
    static __failure_type _S_test(...);
  };
  template <typename _MemPtr, typename _Arg, typename... _Args>
  struct __result_of_memfun_deref : private __result_of_memfun_deref_impl
  {
    typedef decltype(_S_test<_MemPtr, _Arg, _Args...>(0)) type;
  };
  struct __result_of_memobj_ref_impl
  {
    template <typename _Fp, typename _Tp1>
    static __result_of_success<decltype(std::declval<_Tp1>().*std::declval<_Fp>()), __invoke_memobj_ref> _S_test(int);
    template <typename, typename>
    static __failure_type _S_test(...);
  };
  template <typename _MemPtr, typename _Arg>
  struct __result_of_memobj_ref : private __result_of_memobj_ref_impl
  {
    typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
  };
  struct __result_of_memobj_deref_impl
  {
    template <typename _Fp, typename _Tp1>
    static __result_of_success<decltype((*std::declval<_Tp1>()).*std::declval<_Fp>()), __invoke_memobj_deref> _S_test(
        int);
    template <typename, typename>
    static __failure_type _S_test(...);
  };
  template <typename _MemPtr, typename _Arg>
  struct __result_of_memobj_deref : private __result_of_memobj_deref_impl
  {
    typedef decltype(_S_test<_MemPtr, _Arg>(0)) type;
  };
  template <typename _MemPtr, typename _Arg>
  struct __result_of_memobj;
  template <typename _Res, typename _Class, typename _Arg>
  struct __result_of_memobj<_Res _Class::*, _Arg>
  {
    typedef __remove_cvref_t<_Arg> _Argval;
    typedef _Res _Class::*_MemPtr;
    typedef typename conditional<__or_<is_same<_Argval, _Class>, is_base_of<_Class, _Argval>>::value,
                                 __result_of_memobj_ref<_MemPtr, _Arg>,
                                 __result_of_memobj_deref<_MemPtr, _Arg>>::type::type type;
  };
  template <typename _MemPtr, typename _Arg, typename... _Args>
  struct __result_of_memfun;
  template <typename _Res, typename _Class, typename _Arg, typename... _Args>
  struct __result_of_memfun<_Res _Class::*, _Arg, _Args...>
  {
    typedef typename remove_reference<_Arg>::type _Argval;
    typedef _Res _Class::*_MemPtr;
    typedef typename conditional<is_base_of<_Class, _Argval>::value,
                                 __result_of_memfun_ref<_MemPtr, _Arg, _Args...>,
                                 __result_of_memfun_deref<_MemPtr, _Arg, _Args...>>::type::type type;
  };
  template <typename _Tp, typename _Up = __remove_cvref_t<_Tp>>
  struct __inv_unwrap
  {
    using type = _Tp;
  };
  template <typename _Tp, typename _Up>
  struct __inv_unwrap<_Tp, reference_wrapper<_Up>>
  {
    using type = _Up&;
  };
  template <bool, bool, typename _Functor, typename... _ArgTypes>
  struct __result_of_impl
  {
    typedef __failure_type type;
  };
  template <typename _MemPtr, typename _Arg>
  struct __result_of_impl<true, false, _MemPtr, _Arg>
      : public __result_of_memobj<typename decay<_MemPtr>::type, typename __inv_unwrap<_Arg>::type>
  {
  };
  template <typename _MemPtr, typename _Arg, typename... _Args>
  struct __result_of_impl<false, true, _MemPtr, _Arg, _Args...>
      : public __result_of_memfun<typename decay<_MemPtr>::type, typename __inv_unwrap<_Arg>::type, _Args...>
  {
  };
  struct __result_of_other_impl
  {
    template <typename _Fn, typename... _Args>
    static __result_of_success<decltype(std::declval<_Fn>()(std::declval<_Args>()...)), __invoke_other> _S_test(int);
    template <typename...>
    static __failure_type _S_test(...);
  };
  template <typename _Functor, typename... _ArgTypes>
  struct __result_of_impl<false, false, _Functor, _ArgTypes...> : private __result_of_other_impl
  {
    typedef decltype(_S_test<_Functor, _ArgTypes...>(0)) type;
  };
  template <typename _Functor, typename... _ArgTypes>
  struct __invoke_result
      : public __result_of_impl<is_member_object_pointer<typename remove_reference<_Functor>::type>::value,
                                is_member_function_pointer<typename remove_reference<_Functor>::type>::value,
                                _Functor,
                                _ArgTypes...>::type
  {
  };
  template <typename _Functor, typename... _ArgTypes>
  struct result_of<_Functor(_ArgTypes...)> : public __invoke_result<_Functor, _ArgTypes...>
  {
  };
  template <size_t _Len, size_t _Align = __alignof__(typename __aligned_storage_msa<_Len>::__type)>
  using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;
  template <size_t _Len, typename... _Types>
  using aligned_union_t = typename aligned_union<_Len, _Types...>::type;
  template <typename _Tp>
  using decay_t = typename decay<_Tp>::type;
  template <bool _Cond, typename _Tp = void>
  using enable_if_t = typename enable_if<_Cond, _Tp>::type;
  template <bool _Cond, typename _Iftrue, typename _Iffalse>
  using conditional_t = typename conditional<_Cond, _Iftrue, _Iffalse>::type;
  template <typename... _Tp>
  using common_type_t = typename common_type<_Tp...>::type;
  template <typename _Tp>
  using underlying_type_t = typename underlying_type<_Tp>::type;
  template <typename _Tp>
  using result_of_t = typename result_of<_Tp>::type;
  template <bool _Cond, typename _Tp = void>
  using __enable_if_t = typename enable_if<_Cond, _Tp>::type;
  template <typename...>
  using __void_t = void;
  template <typename...>
  using void_t = void;
  template <typename _Default, typename _AlwaysVoid, template <typename...> class _Op, typename... _Args>
  struct __detector
  {
    using value_t = false_type;
    using type = _Default;
  };
  template <typename _Default, template <typename...> class _Op, typename... _Args>
  struct __detector<_Default, __void_t<_Op<_Args...>>, _Op, _Args...>
  {
    using value_t = true_type;
    using type = _Op<_Args...>;
  };
  template <typename _Default, template <typename...> class _Op, typename... _Args>
  using __detected_or = __detector<_Default, void, _Op, _Args...>;
  template <typename _Default, template <typename...> class _Op, typename... _Args>
  using __detected_or_t = typename __detected_or<_Default, _Op, _Args...>::type;
  template <typename _Tp>
  struct __is_swappable;
  template <typename _Tp>
  struct __is_nothrow_swappable;
  template <typename... _Elements>
  class tuple;
  template <typename>
  struct __is_tuple_like_impl : false_type
  {
  };
  template <typename... _Tps>
  struct __is_tuple_like_impl<tuple<_Tps...>> : true_type
  {
  };
  template <typename _Tp>
  struct __is_tuple_like : public __is_tuple_like_impl<__remove_cvref_t<_Tp>>::type
  {
  };
  template <typename _Tp>
  inline typename enable_if<
      __and_<__not_<__is_tuple_like<_Tp>>, is_move_constructible<_Tp>, is_move_assignable<_Tp>>::value>::type
  swap(_Tp&, _Tp&) noexcept(__and_<is_nothrow_move_constructible<_Tp>, is_nothrow_move_assignable<_Tp>>::value);
  template <typename _Tp, size_t _Nm>
  inline typename enable_if<__is_swappable<_Tp>::value>::type swap(
      _Tp(&__a)[_Nm], _Tp(&__b)[_Nm]) noexcept(__is_nothrow_swappable<_Tp>::value);
  namespace __swappable_details
  {
  using std::swap;
  struct __do_is_swappable_impl
  {
    template <typename _Tp, typename = decltype(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))>
    static true_type __test(int);
    template <typename>
    static false_type __test(...);
  };
  struct __do_is_nothrow_swappable_impl
  {
    template <typename _Tp>
    static __bool_constant<noexcept(swap(std::declval<_Tp&>(), std::declval<_Tp&>()))> __test(int);
    template <typename>
    static false_type __test(...);
  };
  }  // namespace __swappable_details
  template <typename _Tp>
  struct __is_swappable_impl : public __swappable_details::__do_is_swappable_impl
  {
    typedef decltype(__test<_Tp>(0)) type;
  };
  template <typename _Tp>
  struct __is_nothrow_swappable_impl : public __swappable_details::__do_is_nothrow_swappable_impl
  {
    typedef decltype(__test<_Tp>(0)) type;
  };
  template <typename _Tp>
  struct __is_swappable : public __is_swappable_impl<_Tp>::type
  {
  };
  template <typename _Tp>
  struct __is_nothrow_swappable : public __is_nothrow_swappable_impl<_Tp>::type
  {
  };
  template <typename _Tp>
  struct is_swappable : public __is_swappable_impl<_Tp>::type
  {
  };
  template <typename _Tp>
  struct is_nothrow_swappable : public __is_nothrow_swappable_impl<_Tp>::type
  {
  };
  template <typename _Tp>
  inline constexpr bool is_swappable_v = is_swappable<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_nothrow_swappable_v = is_nothrow_swappable<_Tp>::value;
  namespace __swappable_with_details
  {
  using std::swap;
  struct __do_is_swappable_with_impl
  {
    template <typename _Tp,
              typename _Up,
              typename = decltype(swap(std::declval<_Tp>(), std::declval<_Up>())),
              typename = decltype(swap(std::declval<_Up>(), std::declval<_Tp>()))>
    static true_type __test(int);
    template <typename, typename>
    static false_type __test(...);
  };
  struct __do_is_nothrow_swappable_with_impl
  {
    template <typename _Tp, typename _Up>
    static __bool_constant<noexcept(swap(std::declval<_Tp>(), std::declval<_Up>())) && noexcept(
        swap(std::declval<_Up>(), std::declval<_Tp>()))>
    __test(int);
    template <typename, typename>
    static false_type __test(...);
  };
  }  // namespace __swappable_with_details
  template <typename _Tp, typename _Up>
  struct __is_swappable_with_impl : public __swappable_with_details::__do_is_swappable_with_impl
  {
    typedef decltype(__test<_Tp, _Up>(0)) type;
  };
  template <typename _Tp>
  struct __is_swappable_with_impl<_Tp&, _Tp&> : public __swappable_details::__do_is_swappable_impl
  {
    typedef decltype(__test<_Tp&>(0)) type;
  };
  template <typename _Tp, typename _Up>
  struct __is_nothrow_swappable_with_impl : public __swappable_with_details::__do_is_nothrow_swappable_with_impl
  {
    typedef decltype(__test<_Tp, _Up>(0)) type;
  };
  template <typename _Tp>
  struct __is_nothrow_swappable_with_impl<_Tp&, _Tp&> : public __swappable_details::__do_is_nothrow_swappable_impl
  {
    typedef decltype(__test<_Tp&>(0)) type;
  };
  template <typename _Tp, typename _Up>
  struct is_swappable_with : public __is_swappable_with_impl<_Tp, _Up>::type
  {
  };
  template <typename _Tp, typename _Up>
  struct is_nothrow_swappable_with : public __is_nothrow_swappable_with_impl<_Tp, _Up>::type
  {
  };
  template <typename _Tp, typename _Up>
  inline constexpr bool is_swappable_with_v = is_swappable_with<_Tp, _Up>::value;
  template <typename _Tp, typename _Up>
  inline constexpr bool is_nothrow_swappable_with_v = is_nothrow_swappable_with<_Tp, _Up>::value;
  template <typename _Result, typename _Ret, bool = is_void<_Ret>::value, typename = void>
  struct __is_invocable_impl : false_type
  {
  };
  template <typename _Result, typename _Ret>
  struct __is_invocable_impl<_Result, _Ret, true, __void_t<typename _Result::type>> : true_type
  {
  };
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wctor-dtor-privacy"
  template <typename _Result, typename _Ret>
  struct __is_invocable_impl<_Result, _Ret, false, __void_t<typename _Result::type>>
  {
  private:
    static typename _Result::type _S_get();
    template <typename _Tp>
    static void _S_conv(_Tp);
    template <typename _Tp, typename = decltype(_S_conv<_Tp>(_S_get()))>
    static true_type _S_test(int);
    template <typename _Tp>
    static false_type _S_test(...);

  public:
    using type = decltype(_S_test<_Ret>(1));
  };
#pragma GCC diagnostic pop
  template <typename _Fn, typename... _ArgTypes>
  struct __is_invocable : __is_invocable_impl<__invoke_result<_Fn, _ArgTypes...>, void>::type
  {
  };
  template <typename _Fn, typename _Tp, typename... _Args>
  constexpr bool __call_is_nt(__invoke_memfun_ref)
  {
    using _Up = typename __inv_unwrap<_Tp>::type;
    return noexcept((std::declval<_Up>().*std::declval<_Fn>())(std::declval<_Args>()...));
  }
  template <typename _Fn, typename _Tp, typename... _Args>
  constexpr bool __call_is_nt(__invoke_memfun_deref)
  {
    return noexcept(((*std::declval<_Tp>()).*std::declval<_Fn>())(std::declval<_Args>()...));
  }
  template <typename _Fn, typename _Tp>
  constexpr bool __call_is_nt(__invoke_memobj_ref)
  {
    using _Up = typename __inv_unwrap<_Tp>::type;
    return noexcept(std::declval<_Up>().*std::declval<_Fn>());
  }
  template <typename _Fn, typename _Tp>
  constexpr bool __call_is_nt(__invoke_memobj_deref)
  {
    return noexcept((*std::declval<_Tp>()).*std::declval<_Fn>());
  }
  template <typename _Fn, typename... _Args>
  constexpr bool __call_is_nt(__invoke_other)
  {
    return noexcept(std::declval<_Fn>()(std::declval<_Args>()...));
  }
  template <typename _Result, typename _Fn, typename... _Args>
  struct __call_is_nothrow : __bool_constant<std::__call_is_nt<_Fn, _Args...>(typename _Result::__invoke_type{})>
  {
  };
  template <typename _Fn, typename... _Args>
  using __call_is_nothrow_ = __call_is_nothrow<__invoke_result<_Fn, _Args...>, _Fn, _Args...>;
  template <typename _Fn, typename... _Args>
  struct __is_nothrow_invocable : __and_<__is_invocable<_Fn, _Args...>, __call_is_nothrow_<_Fn, _Args...>>::type
  {
  };
  struct __nonesuch
  {
    __nonesuch() = delete;
    ~__nonesuch() = delete;
    __nonesuch(__nonesuch const&) = delete;
    void operator=(__nonesuch const&) = delete;
  };
  template <typename _Functor, typename... _ArgTypes>
  struct invoke_result : public __invoke_result<_Functor, _ArgTypes...>
  {
  };
  template <typename _Fn, typename... _Args>
  using invoke_result_t = typename invoke_result<_Fn, _Args...>::type;
  template <typename _Fn, typename... _ArgTypes>
  struct is_invocable : __is_invocable_impl<__invoke_result<_Fn, _ArgTypes...>, void>::type
  {
  };
  template <typename _Ret, typename _Fn, typename... _ArgTypes>
  struct is_invocable_r : __is_invocable_impl<__invoke_result<_Fn, _ArgTypes...>, _Ret>::type
  {
  };
  template <typename _Fn, typename... _ArgTypes>
  struct is_nothrow_invocable : __and_<__is_invocable_impl<__invoke_result<_Fn, _ArgTypes...>, void>,
                                       __call_is_nothrow_<_Fn, _ArgTypes...>>::type
  {
  };
  template <typename _Result, typename _Ret, typename = void>
  struct __is_nt_invocable_impl : false_type
  {
  };
  template <typename _Result, typename _Ret>
  struct __is_nt_invocable_impl<_Result, _Ret, __void_t<typename _Result::type>>
      : __or_<is_void<_Ret>,
              __and_<is_convertible<typename _Result::type, _Ret>,
                     is_nothrow_constructible<_Ret, typename _Result::type>>>
  {
  };
  template <typename _Ret, typename _Fn, typename... _ArgTypes>
  struct is_nothrow_invocable_r : __and_<__is_nt_invocable_impl<__invoke_result<_Fn, _ArgTypes...>, _Ret>,
                                         __call_is_nothrow_<_Fn, _ArgTypes...>>::type
  {
  };
  template <typename _Fn, typename... _Args>
  inline constexpr bool is_invocable_v = is_invocable<_Fn, _Args...>::value;
  template <typename _Fn, typename... _Args>
  inline constexpr bool is_nothrow_invocable_v = is_nothrow_invocable<_Fn, _Args...>::value;
  template <typename _Fn, typename... _Args>
  inline constexpr bool is_invocable_r_v = is_invocable_r<_Fn, _Args...>::value;
  template <typename _Fn, typename... _Args>
  inline constexpr bool is_nothrow_invocable_r_v = is_nothrow_invocable_r<_Fn, _Args...>::value;
  template <typename _Tp>
  inline constexpr bool is_void_v = is_void<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_null_pointer_v = is_null_pointer<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_integral_v = is_integral<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_floating_point_v = is_floating_point<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_array_v = is_array<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_pointer_v = is_pointer<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_lvalue_reference_v = is_lvalue_reference<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_rvalue_reference_v = is_rvalue_reference<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_member_object_pointer_v = is_member_object_pointer<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_member_function_pointer_v = is_member_function_pointer<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_enum_v = is_enum<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_union_v = is_union<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_class_v = is_class<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_function_v = is_function<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_reference_v = is_reference<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_arithmetic_v = is_arithmetic<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_fundamental_v = is_fundamental<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_object_v = is_object<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_scalar_v = is_scalar<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_compound_v = is_compound<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_member_pointer_v = is_member_pointer<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_const_v = is_const<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_volatile_v = is_volatile<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_trivial_v = is_trivial<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_trivially_copyable_v = is_trivially_copyable<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_standard_layout_v = is_standard_layout<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_pod_v = is_pod<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_literal_type_v = is_literal_type<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_empty_v = is_empty<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_polymorphic_v = is_polymorphic<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_abstract_v = is_abstract<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_final_v = is_final<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_signed_v = is_signed<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_unsigned_v = is_unsigned<_Tp>::value;
  template <typename _Tp, typename... _Args>
  inline constexpr bool is_constructible_v = is_constructible<_Tp, _Args...>::value;
  template <typename _Tp>
  inline constexpr bool is_default_constructible_v = is_default_constructible<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_copy_constructible_v = is_copy_constructible<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_move_constructible_v = is_move_constructible<_Tp>::value;
  template <typename _Tp, typename _Up>
  inline constexpr bool is_assignable_v = is_assignable<_Tp, _Up>::value;
  template <typename _Tp>
  inline constexpr bool is_copy_assignable_v = is_copy_assignable<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_move_assignable_v = is_move_assignable<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_destructible_v = is_destructible<_Tp>::value;
  template <typename _Tp, typename... _Args>
  inline constexpr bool is_trivially_constructible_v = is_trivially_constructible<_Tp, _Args...>::value;
  template <typename _Tp>
  inline constexpr bool is_trivially_default_constructible_v = is_trivially_default_constructible<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_trivially_copy_constructible_v = is_trivially_copy_constructible<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_trivially_move_constructible_v = is_trivially_move_constructible<_Tp>::value;
  template <typename _Tp, typename _Up>
  inline constexpr bool is_trivially_assignable_v = is_trivially_assignable<_Tp, _Up>::value;
  template <typename _Tp>
  inline constexpr bool is_trivially_copy_assignable_v = is_trivially_copy_assignable<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_trivially_move_assignable_v = is_trivially_move_assignable<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_trivially_destructible_v = is_trivially_destructible<_Tp>::value;
  template <typename _Tp, typename... _Args>
  inline constexpr bool is_nothrow_constructible_v = is_nothrow_constructible<_Tp, _Args...>::value;
  template <typename _Tp>
  inline constexpr bool is_nothrow_default_constructible_v = is_nothrow_default_constructible<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_nothrow_copy_constructible_v = is_nothrow_copy_constructible<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_nothrow_move_constructible_v = is_nothrow_move_constructible<_Tp>::value;
  template <typename _Tp, typename _Up>
  inline constexpr bool is_nothrow_assignable_v = is_nothrow_assignable<_Tp, _Up>::value;
  template <typename _Tp>
  inline constexpr bool is_nothrow_copy_assignable_v = is_nothrow_copy_assignable<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_nothrow_move_assignable_v = is_nothrow_move_assignable<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_nothrow_destructible_v = is_nothrow_destructible<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool has_virtual_destructor_v = has_virtual_destructor<_Tp>::value;
  template <typename _Tp>
  inline constexpr size_t alignment_of_v = alignment_of<_Tp>::value;
  template <typename _Tp>
  inline constexpr size_t rank_v = rank<_Tp>::value;
  template <typename _Tp, unsigned _Idx = 0>
  inline constexpr size_t extent_v = extent<_Tp, _Idx>::value;
  template <typename _Tp, typename _Up>
  inline constexpr bool is_same_v = is_same<_Tp, _Up>::value;
  template <typename _Base, typename _Derived>
  inline constexpr bool is_base_of_v = is_base_of<_Base, _Derived>::value;
  template <typename _From, typename _To>
  inline constexpr bool is_convertible_v = is_convertible<_From, _To>::value;
  template <typename _Tp>
  struct has_unique_object_representations
      : bool_constant<__has_unique_object_representations(remove_cv_t<remove_all_extents_t<_Tp>>)>
  {
  };
  template <typename _Tp>
  inline constexpr bool has_unique_object_representations_v = has_unique_object_representations<_Tp>::value;
  template <typename _Tp>
  struct is_aggregate : bool_constant<__is_aggregate(remove_cv_t<_Tp>)>
  {
  };
  template <typename _Tp>
  inline constexpr bool is_aggregate_v = is_aggregate<_Tp>::value;
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _Tp>
  constexpr _Tp&& forward(typename std::remove_reference<_Tp>::type & __t) noexcept
  {
    return static_cast<_Tp&&>(__t);
  }
  template <typename _Tp>
  constexpr _Tp&& forward(typename std::remove_reference<_Tp>::type && __t) noexcept
  {
    static_assert(!std::is_lvalue_reference<_Tp>::value,
                  "template argument"
                  " substituting _Tp is an lvalue reference type");
    return static_cast<_Tp&&>(__t);
  }
  template <typename _Tp>
  constexpr typename std::remove_reference<_Tp>::type&& move(_Tp && __t) noexcept
  {
    return static_cast<typename std::remove_reference<_Tp>::type&&>(__t);
  }
  template <typename _Tp>
  struct __move_if_noexcept_cond
      : public __and_<__not_<is_nothrow_move_constructible<_Tp>>, is_copy_constructible<_Tp>>::type
  {
  };
  template <typename _Tp>
  constexpr typename conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type move_if_noexcept(
      _Tp & __x) noexcept
  {
    return std::move(__x);
  }
  template <typename _Tp>
  inline constexpr _Tp* addressof(_Tp & __r) noexcept
  {
    return std::__addressof(__r);
  }
  template <typename _Tp>
  const _Tp* addressof(const _Tp&&) = delete;
  template <typename _Tp, typename _Up = _Tp>
  inline _Tp __exchange(_Tp & __obj, _Up && __new_val)
  {
    _Tp __old_val = std::move(__obj);
    __obj = std::forward<_Up>(__new_val);
    return __old_val;
  }
  template <typename _Tp>
  inline typename enable_if<
      __and_<__not_<__is_tuple_like<_Tp>>, is_move_constructible<_Tp>, is_move_assignable<_Tp>>::value>::type
      swap(_Tp & __a,
           _Tp & __b) noexcept(__and_<is_nothrow_move_constructible<_Tp>, is_nothrow_move_assignable<_Tp>>::value)
  {
    _Tp __tmp = std::move(__a);
    __a = std::move(__b);
    __b = std::move(__tmp);
  }
  template <typename _Tp, size_t _Nm>
  inline typename enable_if<__is_swappable<_Tp>::value>::type swap(
      _Tp(&__a)[_Nm], _Tp(&__b)[_Nm]) noexcept(__is_nothrow_swappable<_Tp>::value)
  {
    for (size_t __n = 0; __n < _Nm; ++__n)
      swap(__a[__n], __b[__n]);
  }
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _Arg, typename _Result>
  struct unary_function
  {
    typedef _Arg argument_type;
    typedef _Result result_type;
  };
  template <typename _Arg1, typename _Arg2, typename _Result>
  struct binary_function
  {
    typedef _Arg1 first_argument_type;
    typedef _Arg2 second_argument_type;
    typedef _Result result_type;
  };
  struct __is_transparent;
  template <typename _Tp = void>
  struct plus;
  template <typename _Tp = void>
  struct minus;
  template <typename _Tp = void>
  struct multiplies;
  template <typename _Tp = void>
  struct divides;
  template <typename _Tp = void>
  struct modulus;
  template <typename _Tp = void>
  struct negate;
  template <typename _Tp>
  struct plus : public binary_function<_Tp, _Tp, _Tp>
  {
    constexpr _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x + __y; }
  };
  template <typename _Tp>
  struct minus : public binary_function<_Tp, _Tp, _Tp>
  {
    constexpr _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x - __y; }
  };
  template <typename _Tp>
  struct multiplies : public binary_function<_Tp, _Tp, _Tp>
  {
    constexpr _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x * __y; }
  };
  template <typename _Tp>
  struct divides : public binary_function<_Tp, _Tp, _Tp>
  {
    constexpr _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x / __y; }
  };
  template <typename _Tp>
  struct modulus : public binary_function<_Tp, _Tp, _Tp>
  {
    constexpr _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x % __y; }
  };
  template <typename _Tp>
  struct negate : public unary_function<_Tp, _Tp>
  {
    constexpr _Tp operator()(const _Tp& __x) const { return -__x; }
  };
  template <>
  struct plus<void>
  {
    template <typename _Tp, typename _Up>
    constexpr auto operator()(_Tp&& __t, _Up&& __u) const
        noexcept(noexcept(std::forward<_Tp>(__t) + std::forward<_Up>(__u)))
            -> decltype(std::forward<_Tp>(__t) + std::forward<_Up>(__u))
    {
      return std::forward<_Tp>(__t) + std::forward<_Up>(__u);
    }
    typedef __is_transparent is_transparent;
  };
  template <>
  struct minus<void>
  {
    template <typename _Tp, typename _Up>
    constexpr auto operator()(_Tp&& __t, _Up&& __u) const
        noexcept(noexcept(std::forward<_Tp>(__t) - std::forward<_Up>(__u)))
            -> decltype(std::forward<_Tp>(__t) - std::forward<_Up>(__u))
    {
      return std::forward<_Tp>(__t) - std::forward<_Up>(__u);
    }
    typedef __is_transparent is_transparent;
  };
  template <>
  struct multiplies<void>
  {
    template <typename _Tp, typename _Up>
    constexpr auto operator()(_Tp&& __t, _Up&& __u) const
        noexcept(noexcept(std::forward<_Tp>(__t) * std::forward<_Up>(__u)))
            -> decltype(std::forward<_Tp>(__t) * std::forward<_Up>(__u))
    {
      return std::forward<_Tp>(__t) * std::forward<_Up>(__u);
    }
    typedef __is_transparent is_transparent;
  };
  template <>
  struct divides<void>
  {
    template <typename _Tp, typename _Up>
    constexpr auto operator()(_Tp&& __t, _Up&& __u) const
        noexcept(noexcept(std::forward<_Tp>(__t) / std::forward<_Up>(__u)))
            -> decltype(std::forward<_Tp>(__t) / std::forward<_Up>(__u))
    {
      return std::forward<_Tp>(__t) / std::forward<_Up>(__u);
    }
    typedef __is_transparent is_transparent;
  };
  template <>
  struct modulus<void>
  {
    template <typename _Tp, typename _Up>
    constexpr auto operator()(_Tp&& __t, _Up&& __u) const
        noexcept(noexcept(std::forward<_Tp>(__t) % std::forward<_Up>(__u)))
            -> decltype(std::forward<_Tp>(__t) % std::forward<_Up>(__u))
    {
      return std::forward<_Tp>(__t) % std::forward<_Up>(__u);
    }
    typedef __is_transparent is_transparent;
  };
  template <>
  struct negate<void>
  {
    template <typename _Tp>
    constexpr auto operator()(_Tp&& __t) const noexcept(noexcept(-std::forward<_Tp>(__t)))
        -> decltype(-std::forward<_Tp>(__t))
    {
      return -std::forward<_Tp>(__t);
    }
    typedef __is_transparent is_transparent;
  };
  template <typename _Tp = void>
  struct equal_to;
  template <typename _Tp = void>
  struct not_equal_to;
  template <typename _Tp = void>
  struct greater;
  template <typename _Tp = void>
  struct less;
  template <typename _Tp = void>
  struct greater_equal;
  template <typename _Tp = void>
  struct less_equal;
  template <typename _Tp>
  struct equal_to : public binary_function<_Tp, _Tp, bool>
  {
    constexpr bool operator()(const _Tp& __x, const _Tp& __y) const { return __x == __y; }
  };
  template <typename _Tp>
  struct not_equal_to : public binary_function<_Tp, _Tp, bool>
  {
    constexpr bool operator()(const _Tp& __x, const _Tp& __y) const { return __x != __y; }
  };
  template <typename _Tp>
  struct greater : public binary_function<_Tp, _Tp, bool>
  {
    constexpr bool operator()(const _Tp& __x, const _Tp& __y) const { return __x > __y; }
  };
  template <typename _Tp>
  struct less : public binary_function<_Tp, _Tp, bool>
  {
    constexpr bool operator()(const _Tp& __x, const _Tp& __y) const { return __x < __y; }
  };
  template <typename _Tp>
  struct greater_equal : public binary_function<_Tp, _Tp, bool>
  {
    constexpr bool operator()(const _Tp& __x, const _Tp& __y) const { return __x >= __y; }
  };
  template <typename _Tp>
  struct less_equal : public binary_function<_Tp, _Tp, bool>
  {
    constexpr bool operator()(const _Tp& __x, const _Tp& __y) const { return __x <= __y; }
  };
  template <typename _Tp>
  struct greater<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
  {
    constexpr bool operator()(_Tp* __x, _Tp* __y) const noexcept
    {
      if (__builtin_is_constant_evaluated())
        return __x > __y;
      return (long unsigned int)__x > (long unsigned int)__y;
    }
  };
  template <typename _Tp>
  struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
  {
    constexpr bool operator()(_Tp* __x, _Tp* __y) const noexcept
    {
      if (__builtin_is_constant_evaluated())
        return __x < __y;
      return (long unsigned int)__x < (long unsigned int)__y;
    }
  };
  template <typename _Tp>
  struct greater_equal<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
  {
    constexpr bool operator()(_Tp* __x, _Tp* __y) const noexcept
    {
      if (__builtin_is_constant_evaluated())
        return __x >= __y;
      return (long unsigned int)__x >= (long unsigned int)__y;
    }
  };
  template <typename _Tp>
  struct less_equal<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
  {
    constexpr bool operator()(_Tp* __x, _Tp* __y) const noexcept
    {
      if (__builtin_is_constant_evaluated())
        return __x <= __y;
      return (long unsigned int)__x <= (long unsigned int)__y;
    }
  };
  template <>
  struct equal_to<void>
  {
    template <typename _Tp, typename _Up>
    constexpr auto operator()(_Tp&& __t, _Up&& __u) const
        noexcept(noexcept(std::forward<_Tp>(__t) == std::forward<_Up>(__u)))
            -> decltype(std::forward<_Tp>(__t) == std::forward<_Up>(__u))
    {
      return std::forward<_Tp>(__t) == std::forward<_Up>(__u);
    }
    typedef __is_transparent is_transparent;
  };
  template <>
  struct not_equal_to<void>
  {
    template <typename _Tp, typename _Up>
    constexpr auto operator()(_Tp&& __t, _Up&& __u) const
        noexcept(noexcept(std::forward<_Tp>(__t) != std::forward<_Up>(__u)))
            -> decltype(std::forward<_Tp>(__t) != std::forward<_Up>(__u))
    {
      return std::forward<_Tp>(__t) != std::forward<_Up>(__u);
    }
    typedef __is_transparent is_transparent;
  };
  template <>
  struct greater<void>
  {
    template <typename _Tp, typename _Up>
    constexpr auto operator()(_Tp&& __t, _Up&& __u) const
        noexcept(noexcept(std::forward<_Tp>(__t) > std::forward<_Up>(__u)))
            -> decltype(std::forward<_Tp>(__t) > std::forward<_Up>(__u))
    {
      return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u), __ptr_cmp<_Tp, _Up>{});
    }
    template <typename _Tp, typename _Up>
    constexpr bool operator()(_Tp* __t, _Up* __u) const noexcept
    {
      return greater<common_type_t<_Tp*, _Up*>>{}(__t, __u);
    }
    typedef __is_transparent is_transparent;

  private:
    template <typename _Tp, typename _Up>
    static constexpr decltype(auto) _S_cmp(_Tp&& __t, _Up&& __u, false_type)
    {
      return std::forward<_Tp>(__t) > std::forward<_Up>(__u);
    }
    template <typename _Tp, typename _Up>
    static constexpr bool _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
    {
      return greater<const volatile void*>{}(static_cast<const volatile void*>(std::forward<_Tp>(__t)),
                                             static_cast<const volatile void*>(std::forward<_Up>(__u)));
    }
    template <typename _Tp, typename _Up, typename = void>
    struct __not_overloaded2 : true_type
    {
    };
    template <typename _Tp, typename _Up>
    struct __not_overloaded2<_Tp, _Up, __void_t<decltype(std::declval<_Tp>().operator>(std::declval<_Up>()))>>
        : false_type
    {
    };
    template <typename _Tp, typename _Up, typename = void>
    struct __not_overloaded : __not_overloaded2<_Tp, _Up>
    {
    };
    template <typename _Tp, typename _Up>
    struct __not_overloaded<_Tp, _Up, __void_t<decltype(operator>(std::declval<_Tp>(), std::declval<_Up>()))>>
        : false_type
    {
    };
    template <typename _Tp, typename _Up>
    using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
                             is_convertible<_Tp, const volatile void*>,
                             is_convertible<_Up, const volatile void*>>;
  };
  template <>
  struct less<void>
  {
    template <typename _Tp, typename _Up>
    constexpr auto operator()(_Tp&& __t, _Up&& __u) const
        noexcept(noexcept(std::forward<_Tp>(__t) < std::forward<_Up>(__u)))
            -> decltype(std::forward<_Tp>(__t) < std::forward<_Up>(__u))
    {
      return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u), __ptr_cmp<_Tp, _Up>{});
    }
    template <typename _Tp, typename _Up>
    constexpr bool operator()(_Tp* __t, _Up* __u) const noexcept
    {
      return less<common_type_t<_Tp*, _Up*>>{}(__t, __u);
    }
    typedef __is_transparent is_transparent;

  private:
    template <typename _Tp, typename _Up>
    static constexpr decltype(auto) _S_cmp(_Tp&& __t, _Up&& __u, false_type)
    {
      return std::forward<_Tp>(__t) < std::forward<_Up>(__u);
    }
    template <typename _Tp, typename _Up>
    static constexpr bool _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
    {
      return less<const volatile void*>{}(static_cast<const volatile void*>(std::forward<_Tp>(__t)),
                                          static_cast<const volatile void*>(std::forward<_Up>(__u)));
    }
    template <typename _Tp, typename _Up, typename = void>
    struct __not_overloaded2 : true_type
    {
    };
    template <typename _Tp, typename _Up>
    struct __not_overloaded2<_Tp, _Up, __void_t<decltype(std::declval<_Tp>().operator<(std::declval<_Up>()))>>
        : false_type
    {
    };
    template <typename _Tp, typename _Up, typename = void>
    struct __not_overloaded : __not_overloaded2<_Tp, _Up>
    {
    };
    template <typename _Tp, typename _Up>
    struct __not_overloaded<_Tp, _Up, __void_t<decltype(operator<(std::declval<_Tp>(), std::declval<_Up>()))>>
        : false_type
    {
    };
    template <typename _Tp, typename _Up>
    using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
                             is_convertible<_Tp, const volatile void*>,
                             is_convertible<_Up, const volatile void*>>;
  };
  template <>
  struct greater_equal<void>
  {
    template <typename _Tp, typename _Up>
    constexpr auto operator()(_Tp&& __t, _Up&& __u) const
        noexcept(noexcept(std::forward<_Tp>(__t) >= std::forward<_Up>(__u)))
            -> decltype(std::forward<_Tp>(__t) >= std::forward<_Up>(__u))
    {
      return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u), __ptr_cmp<_Tp, _Up>{});
    }
    template <typename _Tp, typename _Up>
    constexpr bool operator()(_Tp* __t, _Up* __u) const noexcept
    {
      return greater_equal<common_type_t<_Tp*, _Up*>>{}(__t, __u);
    }
    typedef __is_transparent is_transparent;

  private:
    template <typename _Tp, typename _Up>
    static constexpr decltype(auto) _S_cmp(_Tp&& __t, _Up&& __u, false_type)
    {
      return std::forward<_Tp>(__t) >= std::forward<_Up>(__u);
    }
    template <typename _Tp, typename _Up>
    static constexpr bool _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
    {
      return greater_equal<const volatile void*>{}(static_cast<const volatile void*>(std::forward<_Tp>(__t)),
                                                   static_cast<const volatile void*>(std::forward<_Up>(__u)));
    }
    template <typename _Tp, typename _Up, typename = void>
    struct __not_overloaded2 : true_type
    {
    };
    template <typename _Tp, typename _Up>
    struct __not_overloaded2<_Tp, _Up, __void_t<decltype(std::declval<_Tp>().operator>=(std::declval<_Up>()))>>
        : false_type
    {
    };
    template <typename _Tp, typename _Up, typename = void>
    struct __not_overloaded : __not_overloaded2<_Tp, _Up>
    {
    };
    template <typename _Tp, typename _Up>
    struct __not_overloaded<_Tp, _Up, __void_t<decltype(operator>=(std::declval<_Tp>(), std::declval<_Up>()))>>
        : false_type
    {
    };
    template <typename _Tp, typename _Up>
    using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
                             is_convertible<_Tp, const volatile void*>,
                             is_convertible<_Up, const volatile void*>>;
  };
  template <>
  struct less_equal<void>
  {
    template <typename _Tp, typename _Up>
    constexpr auto operator()(_Tp&& __t, _Up&& __u) const
        noexcept(noexcept(std::forward<_Tp>(__t) <= std::forward<_Up>(__u)))
            -> decltype(std::forward<_Tp>(__t) <= std::forward<_Up>(__u))
    {
      return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u), __ptr_cmp<_Tp, _Up>{});
    }
    template <typename _Tp, typename _Up>
    constexpr bool operator()(_Tp* __t, _Up* __u) const noexcept
    {
      return less_equal<common_type_t<_Tp*, _Up*>>{}(__t, __u);
    }
    typedef __is_transparent is_transparent;

  private:
    template <typename _Tp, typename _Up>
    static constexpr decltype(auto) _S_cmp(_Tp&& __t, _Up&& __u, false_type)
    {
      return std::forward<_Tp>(__t) <= std::forward<_Up>(__u);
    }
    template <typename _Tp, typename _Up>
    static constexpr bool _S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
    {
      return less_equal<const volatile void*>{}(static_cast<const volatile void*>(std::forward<_Tp>(__t)),
                                                static_cast<const volatile void*>(std::forward<_Up>(__u)));
    }
    template <typename _Tp, typename _Up, typename = void>
    struct __not_overloaded2 : true_type
    {
    };
    template <typename _Tp, typename _Up>
    struct __not_overloaded2<_Tp, _Up, __void_t<decltype(std::declval<_Tp>().operator<=(std::declval<_Up>()))>>
        : false_type
    {
    };
    template <typename _Tp, typename _Up, typename = void>
    struct __not_overloaded : __not_overloaded2<_Tp, _Up>
    {
    };
    template <typename _Tp, typename _Up>
    struct __not_overloaded<_Tp, _Up, __void_t<decltype(operator<=(std::declval<_Tp>(), std::declval<_Up>()))>>
        : false_type
    {
    };
    template <typename _Tp, typename _Up>
    using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
                             is_convertible<_Tp, const volatile void*>,
                             is_convertible<_Up, const volatile void*>>;
  };
  template <typename _Tp = void>
  struct logical_and;
  template <typename _Tp = void>
  struct logical_or;
  template <typename _Tp = void>
  struct logical_not;
  template <typename _Tp>
  struct logical_and : public binary_function<_Tp, _Tp, bool>
  {
    constexpr bool operator()(const _Tp& __x, const _Tp& __y) const { return __x && __y; }
  };
  template <typename _Tp>
  struct logical_or : public binary_function<_Tp, _Tp, bool>
  {
    constexpr bool operator()(const _Tp& __x, const _Tp& __y) const { return __x || __y; }
  };
  template <typename _Tp>
  struct logical_not : public unary_function<_Tp, bool>
  {
    constexpr bool operator()(const _Tp& __x) const { return !__x; }
  };
  template <>
  struct logical_and<void>
  {
    template <typename _Tp, typename _Up>
    constexpr auto operator()(_Tp&& __t, _Up&& __u) const
        noexcept(noexcept(std::forward<_Tp>(__t) && std::forward<_Up>(__u)))
            -> decltype(std::forward<_Tp>(__t) && std::forward<_Up>(__u))
    {
      return std::forward<_Tp>(__t) && std::forward<_Up>(__u);
    }
    typedef __is_transparent is_transparent;
  };
  template <>
  struct logical_or<void>
  {
    template <typename _Tp, typename _Up>
    constexpr auto operator()(_Tp&& __t, _Up&& __u) const
        noexcept(noexcept(std::forward<_Tp>(__t) || std::forward<_Up>(__u)))
            -> decltype(std::forward<_Tp>(__t) || std::forward<_Up>(__u))
    {
      return std::forward<_Tp>(__t) || std::forward<_Up>(__u);
    }
    typedef __is_transparent is_transparent;
  };
  template <>
  struct logical_not<void>
  {
    template <typename _Tp>
    constexpr auto operator()(_Tp&& __t) const noexcept(noexcept(!std::forward<_Tp>(__t)))
        -> decltype(!std::forward<_Tp>(__t))
    {
      return !std::forward<_Tp>(__t);
    }
    typedef __is_transparent is_transparent;
  };
  template <typename _Tp = void>
  struct bit_and;
  template <typename _Tp = void>
  struct bit_or;
  template <typename _Tp = void>
  struct bit_xor;
  template <typename _Tp = void>
  struct bit_not;
  template <typename _Tp>
  struct bit_and : public binary_function<_Tp, _Tp, _Tp>
  {
    constexpr _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x & __y; }
  };
  template <typename _Tp>
  struct bit_or : public binary_function<_Tp, _Tp, _Tp>
  {
    constexpr _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x | __y; }
  };
  template <typename _Tp>
  struct bit_xor : public binary_function<_Tp, _Tp, _Tp>
  {
    constexpr _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x ^ __y; }
  };
  template <typename _Tp>
  struct bit_not : public unary_function<_Tp, _Tp>
  {
    constexpr _Tp operator()(const _Tp& __x) const { return ~__x; }
  };
  template <>
  struct bit_and<void>
  {
    template <typename _Tp, typename _Up>
    constexpr auto operator()(_Tp&& __t, _Up&& __u) const
        noexcept(noexcept(std::forward<_Tp>(__t) & std::forward<_Up>(__u)))
            -> decltype(std::forward<_Tp>(__t) & std::forward<_Up>(__u))
    {
      return std::forward<_Tp>(__t) & std::forward<_Up>(__u);
    }
    typedef __is_transparent is_transparent;
  };
  template <>
  struct bit_or<void>
  {
    template <typename _Tp, typename _Up>
    constexpr auto operator()(_Tp&& __t, _Up&& __u) const
        noexcept(noexcept(std::forward<_Tp>(__t) | std::forward<_Up>(__u)))
            -> decltype(std::forward<_Tp>(__t) | std::forward<_Up>(__u))
    {
      return std::forward<_Tp>(__t) | std::forward<_Up>(__u);
    }
    typedef __is_transparent is_transparent;
  };
  template <>
  struct bit_xor<void>
  {
    template <typename _Tp, typename _Up>
    constexpr auto operator()(_Tp&& __t, _Up&& __u) const
        noexcept(noexcept(std::forward<_Tp>(__t) ^ std::forward<_Up>(__u)))
            -> decltype(std::forward<_Tp>(__t) ^ std::forward<_Up>(__u))
    {
      return std::forward<_Tp>(__t) ^ std::forward<_Up>(__u);
    }
    typedef __is_transparent is_transparent;
  };
  template <>
  struct bit_not<void>
  {
    template <typename _Tp>
    constexpr auto operator()(_Tp&& __t) const noexcept(noexcept(~std::forward<_Tp>(__t)))
        -> decltype(~std::forward<_Tp>(__t))
    {
      return ~std::forward<_Tp>(__t);
    }
    typedef __is_transparent is_transparent;
  };
  template <typename _Predicate>
  class unary_negate : public unary_function<typename _Predicate::argument_type, bool>
  {
  protected:
    _Predicate _M_pred;

  public:
    constexpr explicit unary_negate(const _Predicate& __x) : _M_pred(__x) {}
    constexpr bool operator()(const typename _Predicate::argument_type& __x) const { return !_M_pred(__x); }
  };
  template <typename _Predicate>
  constexpr inline unary_negate<_Predicate> not1(const _Predicate& __pred)
  {
    return unary_negate<_Predicate>(__pred);
  }
  template <typename _Predicate>
  class binary_negate : public binary_function<typename _Predicate::first_argument_type,
                                               typename _Predicate::second_argument_type,
                                               bool>
  {
  protected:
    _Predicate _M_pred;

  public:
    constexpr explicit binary_negate(const _Predicate& __x) : _M_pred(__x) {}
    constexpr bool operator()(const typename _Predicate::first_argument_type& __x,
                              const typename _Predicate::second_argument_type& __y) const
    {
      return !_M_pred(__x, __y);
    }
  };
  template <typename _Predicate>
  constexpr inline binary_negate<_Predicate> not2(const _Predicate& __pred)
  {
    return binary_negate<_Predicate>(__pred);
  }
  template <typename _Arg, typename _Result>
  class pointer_to_unary_function : public unary_function<_Arg, _Result>
  {
  protected:
    _Result (*_M_ptr)(_Arg);

  public:
    pointer_to_unary_function() {}
    explicit pointer_to_unary_function(_Result (*__x)(_Arg)) : _M_ptr(__x) {}
    _Result operator()(_Arg __x) const { return _M_ptr(__x); }
  };
  template <typename _Arg, typename _Result>
  inline pointer_to_unary_function<_Arg, _Result> ptr_fun(_Result(*__x)(_Arg))
  {
    return pointer_to_unary_function<_Arg, _Result>(__x);
  }
  template <typename _Arg1, typename _Arg2, typename _Result>
  class pointer_to_binary_function : public binary_function<_Arg1, _Arg2, _Result>
  {
  protected:
    _Result (*_M_ptr)(_Arg1, _Arg2);

  public:
    pointer_to_binary_function() {}
    explicit pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2)) : _M_ptr(__x) {}
    _Result operator()(_Arg1 __x, _Arg2 __y) const { return _M_ptr(__x, __y); }
  };
  template <typename _Arg1, typename _Arg2, typename _Result>
  inline pointer_to_binary_function<_Arg1, _Arg2, _Result> ptr_fun(_Result(*__x)(_Arg1, _Arg2))
  {
    return pointer_to_binary_function<_Arg1, _Arg2, _Result>(__x);
  }
  template <typename _Tp>
  struct _Identity : public unary_function<_Tp, _Tp>
  {
    _Tp& operator()(_Tp& __x) const { return __x; }
    const _Tp& operator()(const _Tp& __x) const { return __x; }
  };
  template <typename _Tp>
  struct _Identity<const _Tp> : _Identity<_Tp>
  {
  };
  template <typename _Pair>
  struct _Select1st : public unary_function<_Pair, typename _Pair::first_type>
  {
    typename _Pair::first_type& operator()(_Pair& __x) const { return __x.first; }
    const typename _Pair::first_type& operator()(const _Pair& __x) const { return __x.first; }
    template <typename _Pair2>
    typename _Pair2::first_type& operator()(_Pair2& __x) const
    {
      return __x.first;
    }
    template <typename _Pair2>
    const typename _Pair2::first_type& operator()(const _Pair2& __x) const
    {
      return __x.first;
    }
  };
  template <typename _Pair>
  struct _Select2nd : public unary_function<_Pair, typename _Pair::second_type>
  {
    typename _Pair::second_type& operator()(_Pair& __x) const { return __x.second; }
    const typename _Pair::second_type& operator()(const _Pair& __x) const { return __x.second; }
  };
  template <typename _Ret, typename _Tp>
  class mem_fun_t : public unary_function<_Tp*, _Ret>
  {
  public:
    explicit mem_fun_t(_Ret (_Tp::*__pf)()) : _M_f(__pf) {}
    _Ret operator()(_Tp* __p) const { return (__p->*_M_f)(); }

  private:
    _Ret (_Tp::*_M_f)();
  };
  template <typename _Ret, typename _Tp>
  class const_mem_fun_t : public unary_function<const _Tp*, _Ret>
  {
  public:
    explicit const_mem_fun_t(_Ret (_Tp::*__pf)() const) : _M_f(__pf) {}
    _Ret operator()(const _Tp* __p) const { return (__p->*_M_f)(); }

  private:
    _Ret (_Tp::*_M_f)() const;
  };
  template <typename _Ret, typename _Tp>
  class mem_fun_ref_t : public unary_function<_Tp, _Ret>
  {
  public:
    explicit mem_fun_ref_t(_Ret (_Tp::*__pf)()) : _M_f(__pf) {}
    _Ret operator()(_Tp& __r) const { return (__r.*_M_f)(); }

  private:
    _Ret (_Tp::*_M_f)();
  };
  template <typename _Ret, typename _Tp>
  class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>
  {
  public:
    explicit const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const) : _M_f(__pf) {}
    _Ret operator()(const _Tp& __r) const { return (__r.*_M_f)(); }

  private:
    _Ret (_Tp::*_M_f)() const;
  };
  template <typename _Ret, typename _Tp, typename _Arg>
  class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>
  {
  public:
    explicit mem_fun1_t(_Ret (_Tp::*__pf)(_Arg)) : _M_f(__pf) {}
    _Ret operator()(_Tp* __p, _Arg __x) const { return (__p->*_M_f)(__x); }

  private:
    _Ret (_Tp::*_M_f)(_Arg);
  };
  template <typename _Ret, typename _Tp, typename _Arg>
  class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>
  {
  public:
    explicit const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const) : _M_f(__pf) {}
    _Ret operator()(const _Tp* __p, _Arg __x) const { return (__p->*_M_f)(__x); }

  private:
    _Ret (_Tp::*_M_f)(_Arg) const;
  };
  template <typename _Ret, typename _Tp, typename _Arg>
  class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
  {
  public:
    explicit mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg)) : _M_f(__pf) {}
    _Ret operator()(_Tp& __r, _Arg __x) const { return (__r.*_M_f)(__x); }

  private:
    _Ret (_Tp::*_M_f)(_Arg);
  };
  template <typename _Ret, typename _Tp, typename _Arg>
  class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
  {
  public:
    explicit const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const) : _M_f(__pf) {}
    _Ret operator()(const _Tp& __r, _Arg __x) const { return (__r.*_M_f)(__x); }

  private:
    _Ret (_Tp::*_M_f)(_Arg) const;
  };
  template <typename _Ret, typename _Tp>
  inline mem_fun_t<_Ret, _Tp> mem_fun(_Ret(_Tp::*__f)())
  {
    return mem_fun_t<_Ret, _Tp>(__f);
  }
  template <typename _Ret, typename _Tp>
  inline const_mem_fun_t<_Ret, _Tp> mem_fun(_Ret(_Tp::*__f)() const)
  {
    return const_mem_fun_t<_Ret, _Tp>(__f);
  }
  template <typename _Ret, typename _Tp>
  inline mem_fun_ref_t<_Ret, _Tp> mem_fun_ref(_Ret(_Tp::*__f)())
  {
    return mem_fun_ref_t<_Ret, _Tp>(__f);
  }
  template <typename _Ret, typename _Tp>
  inline const_mem_fun_ref_t<_Ret, _Tp> mem_fun_ref(_Ret(_Tp::*__f)() const)
  {
    return const_mem_fun_ref_t<_Ret, _Tp>(__f);
  }
  template <typename _Ret, typename _Tp, typename _Arg>
  inline mem_fun1_t<_Ret, _Tp, _Arg> mem_fun(_Ret(_Tp::*__f)(_Arg))
  {
    return mem_fun1_t<_Ret, _Tp, _Arg>(__f);
  }
  template <typename _Ret, typename _Tp, typename _Arg>
  inline const_mem_fun1_t<_Ret, _Tp, _Arg> mem_fun(_Ret(_Tp::*__f)(_Arg) const)
  {
    return const_mem_fun1_t<_Ret, _Tp, _Arg>(__f);
  }
  template <typename _Ret, typename _Tp, typename _Arg>
  inline mem_fun1_ref_t<_Ret, _Tp, _Arg> mem_fun_ref(_Ret(_Tp::*__f)(_Arg))
  {
    return mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f);
  }
  template <typename _Ret, typename _Tp, typename _Arg>
  inline const_mem_fun1_ref_t<_Ret, _Tp, _Arg> mem_fun_ref(_Ret(_Tp::*__f)(_Arg) const)
  {
    return const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f);
  }
}  // namespace )
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
namespace std __attribute__((__visibility__("default")))
{
  template <typename _Operation>
  class binder1st : public unary_function<typename _Operation::second_argument_type, typename _Operation::result_type>
  {
  protected:
    _Operation op;
    typename _Operation::first_argument_type value;

  public:
    binder1st(const _Operation& __x, const typename _Operation::first_argument_type& __y) : op(__x), value(__y) {}
    typename _Operation::result_type operator()(const typename _Operation::second_argument_type& __x) const
    {
      return op(value, __x);
    }
    typename _Operation::result_type operator()(typename _Operation::second_argument_type& __x) const
    {
      return op(value, __x);
    }
  } __attribute__((__deprecated__));
  template <typename _Operation, typename _Tp>
  inline binder1st<_Operation> bind1st(const _Operation& __fn, const _Tp& __x)
  {
    typedef typename _Operation::first_argument_type _Arg1_type;
    return binder1st<_Operation>(__fn, _Arg1_type(__x));
  }
  template <typename _Operation>
  class binder2nd : public unary_function<typename _Operation::first_argument_type, typename _Operation::result_type>
  {
  protected:
    _Operation op;
    typename _Operation::second_argument_type value;

  public:
    binder2nd(const _Operation& __x, const typename _Operation::second_argument_type& __y) : op(__x), value(__y) {}
    typename _Operation::result_type operator()(const typename _Operation::first_argument_type& __x) const
    {
      return op(__x, value);
    }
    typename _Operation::result_type operator()(typename _Operation::first_argument_type& __x) const
    {
      return op(__x, value);
    }
  } __attribute__((__deprecated__));
  template <typename _Operation, typename _Tp>
  inline binder2nd<_Operation> bind2nd(const _Operation& __fn, const _Tp& __x)
  {
    typedef typename _Operation::second_argument_type _Arg2_type;
    return binder2nd<_Operation>(__fn, _Arg2_type(__x));
  }
}  // namespace )
#pragma GCC diagnostic pop
#pragma GCC visibility push(default)
#pragma GCC visibility push(default)
extern "C++" {
namespace std
{
class exception
{
public:
  exception() noexcept {}
  virtual ~exception() noexcept;
  exception(const exception&) = default;
  exception& operator=(const exception&) = default;
  exception(exception&&) = default;
  exception& operator=(exception&&) = default;
  virtual const char* what() const noexcept;
};
}  // namespace std
}
#pragma GCC visibility pop
extern "C++" {
namespace std
{
class bad_exception : public exception
{
public:
  bad_exception() noexcept {}
  virtual ~bad_exception() noexcept;
  virtual const char* what() const noexcept;
};
typedef void (*terminate_handler)();
typedef void (*unexpected_handler)();
terminate_handler set_terminate(terminate_handler) noexcept;
terminate_handler get_terminate() noexcept;
void terminate() noexcept __attribute__((__noreturn__));
unexpected_handler set_unexpected(unexpected_handler) noexcept;
unexpected_handler get_unexpected() noexcept;
void unexpected() __attribute__((__noreturn__));
[[__deprecated__]] bool uncaught_exception() noexcept __attribute__((__pure__));
int uncaught_exceptions() noexcept __attribute__((__pure__));
}  // namespace std
namespace __gnu_cxx
{
void __verbose_terminate_handler();
}
}
#pragma GCC visibility pop
#pragma GCC visibility push(default)
#pragma GCC visibility push(default)
namespace std
{
class type_info;
}
namespace __cxxabiv1
{
struct __cxa_refcounted_exception;
extern "C" {
void* __cxa_allocate_exception(size_t) noexcept;
void __cxa_free_exception(void*) noexcept;
__cxa_refcounted_exception* __cxa_init_primary_exception(void* object,
                                                         std::type_info* tinfo,
                                                         void (*dest)(void*)) noexcept;
}
}  // namespace __cxxabiv1
#pragma GCC visibility pop
namespace std
{
size_t _Hash_bytes(const void* __ptr, size_t __len, size_t __seed);
size_t _Fnv_hash_bytes(const void* __ptr, size_t __len, size_t __seed);
}  // namespace std
#pragma GCC visibility push(default)
extern "C++" {
namespace __cxxabiv1
{
class __class_type_info;
}
namespace std
{
class type_info
{
public:
  virtual ~type_info();
  const char* name() const noexcept { return __name[0] == '*' ? __name + 1 : __name; }
  bool before(const type_info& __arg) const noexcept
  {
    return (__name[0] == '*' && __arg.__name[0] == '*') ? __name < __arg.__name
                                                        : __builtin_strcmp(__name, __arg.__name) < 0;
  }
  bool operator==(const type_info& __arg) const noexcept
  {
    return ((__name == __arg.__name) || (__name[0] != '*' && __builtin_strcmp(__name, __arg.__name) == 0));
  }
  bool operator!=(const type_info& __arg) const noexcept { return !operator==(__arg); }
  size_t hash_code() const noexcept
  {
    return _Hash_bytes(name(), __builtin_strlen(name()), static_cast<size_t>(0xc70f6907UL));
  }
  virtual bool __is_pointer_p() const;
  virtual bool __is_function_p() const;
  virtual bool __do_catch(const type_info* __thr_type, void** __thr_obj, unsigned __outer) const;
  virtual bool __do_upcast(const __cxxabiv1::__class_type_info* __target, void** __obj_ptr) const;

protected:
  const char* __name;
  explicit type_info(const char* __n) : __name(__n) {}

private:
  type_info& operator=(const type_info&);
  type_info(const type_info&);
};
class bad_cast : public exception
{
public:
  bad_cast() noexcept {}
  virtual ~bad_cast() noexcept;
  virtual const char* what() const noexcept;
};
class bad_typeid : public exception
{
public:
  bad_typeid() noexcept {}
  virtual ~bad_typeid() noexcept;
  virtual const char* what() const noexcept;
};
}  // namespace std
}
#pragma GCC visibility pop
extern "C++" {
namespace std
{
class type_info;
namespace __exception_ptr
{
class exception_ptr;
}
using __exception_ptr::exception_ptr;
exception_ptr current_exception() noexcept;
template <typename _Ex>
exception_ptr make_exception_ptr(_Ex) noexcept;
void rethrow_exception(exception_ptr) __attribute__((__noreturn__));
namespace __exception_ptr
{
using std::rethrow_exception;
class exception_ptr
{
  void* _M_exception_object;
  explicit exception_ptr(void* __e) noexcept;
  void _M_addref() noexcept;
  void _M_release() noexcept;
  void* _M_get() const noexcept __attribute__((__pure__));
  friend exception_ptr std::current_exception() noexcept;
  friend void std::rethrow_exception(exception_ptr);
  template <typename _Ex>
  friend exception_ptr std::make_exception_ptr(_Ex) noexcept;

public:
  exception_ptr() noexcept;
  exception_ptr(const exception_ptr&) noexcept;
  exception_ptr(nullptr_t) noexcept : _M_exception_object(0) {}
  exception_ptr(exception_ptr&& __o) noexcept : _M_exception_object(__o._M_exception_object)
  {
    __o._M_exception_object = 0;
  }
  exception_ptr& operator=(const exception_ptr&) noexcept;
  exception_ptr& operator=(exception_ptr&& __o) noexcept
  {
    exception_ptr(static_cast<exception_ptr&&>(__o)).swap(*this);
    return *this;
  }
  ~exception_ptr() noexcept;
  void swap(exception_ptr&) noexcept;
  explicit operator bool() const { return _M_exception_object; }
  friend bool operator==(const exception_ptr&, const exception_ptr&) noexcept __attribute__((__pure__));
  const class std::type_info* __cxa_exception_type() const noexcept __attribute__((__pure__));
};
bool operator==(const exception_ptr&, const exception_ptr&) noexcept __attribute__((__pure__));
bool operator!=(const exception_ptr&, const exception_ptr&) noexcept __attribute__((__pure__));
inline void swap(exception_ptr& __lhs, exception_ptr& __rhs)
{
  __lhs.swap(__rhs);
}
template <typename _Ex>
inline void __dest_thunk(void* __x)
{
  static_cast<_Ex*>(__x)->~_Ex();
}
}  // namespace __exception_ptr
template <typename _Ex>
exception_ptr make_exception_ptr(_Ex __ex) noexcept
{
  void* __e = __cxxabiv1::__cxa_allocate_exception(sizeof(_Ex));
  (void)__cxxabiv1::__cxa_init_primary_exception(
      __e, const_cast<std::type_info*>(&typeid(__ex)), __exception_ptr::__dest_thunk<_Ex>);
  try
  {
    ::new (__e) _Ex(__ex);
    return exception_ptr(__e);
  }
  catch (...)
  {
    __cxxabiv1::__cxa_free_exception(__e);
    return current_exception();
  }
}
}  // namespace std
}
#pragma GCC visibility pop
#pragma GCC visibility push(default)
extern "C++" {
namespace std
{
class nested_exception
{
  exception_ptr _M_ptr;

public:
  nested_exception() noexcept : _M_ptr(current_exception()) {}
  nested_exception(const nested_exception&) noexcept = default;
  nested_exception& operator=(const nested_exception&) noexcept = default;
  virtual ~nested_exception() noexcept;
  [[noreturn]] void rethrow_nested() const
  {
    if (_M_ptr)
      rethrow_exception(_M_ptr);
    std::terminate();
  }
  exception_ptr nested_ptr() const noexcept { return _M_ptr; }
};
template <typename _Except>
struct _Nested_exception : public _Except, public nested_exception
{
  explicit _Nested_exception(const _Except& __ex) : _Except(__ex) {}
  explicit _Nested_exception(_Except&& __ex) : _Except(static_cast<_Except&&>(__ex)) {}
};
template <typename _Tp>
[[noreturn]] inline void __throw_with_nested_impl(_Tp&& __t, true_type)
{
  using _Up = typename remove_reference<_Tp>::type;
  throw _Nested_exception<_Up>{std::forward<_Tp>(__t)};
}
template <typename _Tp>
[[noreturn]] inline void __throw_with_nested_impl(_Tp&& __t, false_type)
{
  throw std::forward<_Tp>(__t);
}
template <typename _Tp>
[[noreturn]] inline void throw_with_nested(_Tp&& __t)
{
  using _Up = typename decay<_Tp>::type;
  using _CopyConstructible = __and_<is_copy_constructible<_Up>, is_move_constructible<_Up>>;
  static_assert(_CopyConstructible::value, "throw_with_nested argument must be CopyConstructible");
  using __nest = __and_<is_class<_Up>, __bool_constant<!__is_final(_Up)>, __not_<is_base_of<nested_exception, _Up>>>;
  std::__throw_with_nested_impl(std::forward<_Tp>(__t), __nest{});
}
template <typename _Tp>
using __rethrow_if_nested_cond = typename enable_if<
    __and_<is_polymorphic<_Tp>,
           __or_<__not_<is_base_of<nested_exception, _Tp>>, is_convertible<_Tp*, nested_exception*>>>::value>::type;
template <typename _Ex>
inline __rethrow_if_nested_cond<_Ex> __rethrow_if_nested_impl(const _Ex* __ptr)
{
  if (auto __ne_ptr = dynamic_cast<const nested_exception*>(__ptr))
    __ne_ptr->rethrow_nested();
}
inline void __rethrow_if_nested_impl(const void*) {}
template <typename _Ex>
inline void rethrow_if_nested(const _Ex& __ex)
{
  std::__rethrow_if_nested_impl(std::__addressof(__ex));
}
}  // namespace std
}
#pragma GCC visibility pop
#pragma GCC visibility push(default)
extern "C++" {
namespace std
{
class bad_alloc : public exception
{
public:
  bad_alloc() throw() {}
  bad_alloc(const bad_alloc&) = default;
  bad_alloc& operator=(const bad_alloc&) = default;
  virtual ~bad_alloc() throw();
  virtual const char* what() const throw();
};
class bad_array_new_length : public bad_alloc
{
public:
  bad_array_new_length() throw() {}
  virtual ~bad_array_new_length() throw();
  virtual const char* what() const throw();
};
enum class align_val_t : size_t
{
};
struct nothrow_t
{
  explicit nothrow_t() = default;
};
extern const nothrow_t nothrow;
typedef void (*new_handler)();
new_handler set_new_handler(new_handler) throw();
new_handler get_new_handler() noexcept;
}  // namespace std
[[__nodiscard__]] void* operator new(std::size_t) __attribute__((__externally_visible__));
[[__nodiscard__]] void* operator new[](std::size_t) __attribute__((__externally_visible__));
void operator delete(void*) noexcept __attribute__((__externally_visible__));
void operator delete[](void*) noexcept __attribute__((__externally_visible__));
void operator delete(void*, std::size_t) noexcept __attribute__((__externally_visible__));
void operator delete[](void*, std::size_t) noexcept __attribute__((__externally_visible__));
[[__nodiscard__]] void* operator new(std::size_t, const std::nothrow_t&) noexcept
    __attribute__((__externally_visible__, __malloc__));
[[__nodiscard__]] void* operator new[](std::size_t, const std::nothrow_t&) noexcept
    __attribute__((__externally_visible__, __malloc__));
void operator delete(void*, const std::nothrow_t&) noexcept __attribute__((__externally_visible__));
void operator delete[](void*, const std::nothrow_t&) noexcept __attribute__((__externally_visible__));
[[__nodiscard__]] void* operator new(std::size_t, std::align_val_t) __attribute__((__externally_visible__));
[[__nodiscard__]] void* operator new(std::size_t, std::align_val_t, const std::nothrow_t&) noexcept
    __attribute__((__externally_visible__, __malloc__));
void operator delete(void*, std::align_val_t) noexcept __attribute__((__externally_visible__));
void operator delete(void*, std::align_val_t, const std::nothrow_t&) noexcept __attribute__((__externally_visible__));
[[__nodiscard__]] void* operator new[](std::size_t, std::align_val_t) __attribute__((__externally_visible__));
[[__nodiscard__]] void* operator new[](std::size_t, std::align_val_t, const std::nothrow_t&) noexcept
    __attribute__((__externally_visible__, __malloc__));
void operator delete[](void*, std::align_val_t) noexcept __attribute__((__externally_visible__));
void operator delete[](void*, std::align_val_t, const std::nothrow_t&) noexcept __attribute__((__externally_visible__));
void operator delete(void*, std::size_t, std::align_val_t) noexcept __attribute__((__externally_visible__));
void operator delete[](void*, std::size_t, std::align_val_t) noexcept __attribute__((__externally_visible__));
[[__nodiscard__]] inline void* operator new(std::size_t, void* __p) noexcept
{
  return __p;
}
[[__nodiscard__]] inline void* operator new[](std::size_t, void* __p) noexcept
{
  return __p;
}
inline void operator delete(void*, void*) noexcept {}
inline void operator delete[](void*, void*) noexcept {}
}
namespace std
{
template <typename _Tp>
[[nodiscard]] constexpr _Tp* launder(_Tp* __p) noexcept
{
  return __builtin_launder(__p);
}
template <typename _Ret, typename... _Args, bool _NE>
void launder(_Ret (*)(_Args...) noexcept(_NE)) = delete;
template <typename _Ret, typename... _Args, bool _NE>
void launder(_Ret (*)(_Args......) noexcept(_NE)) = delete;
void launder(void*) = delete;
void launder(const void*) = delete;
void launder(volatile void*) = delete;
void launder(const volatile void*) = delete;
}  // namespace std
#pragma GCC visibility pop
namespace std __attribute__((__visibility__("default")))
{
  namespace rel_ops
  {
  template <class _Tp>
  inline bool operator!=(const _Tp& __x, const _Tp& __y)
  {
    return !(__x == __y);
  }
  template <class _Tp>
  inline bool operator>(const _Tp& __x, const _Tp& __y)
  {
    return __y < __x;
  }
  template <class _Tp>
  inline bool operator<=(const _Tp& __x, const _Tp& __y)
  {
    return !(__y < __x);
  }
  template <class _Tp>
  inline bool operator>=(const _Tp& __x, const _Tp& __y)
  {
    return !(__x < __y);
  }
  }  // namespace rel_ops
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  struct piecewise_construct_t
  {
    explicit piecewise_construct_t() = default;
  };
  inline constexpr piecewise_construct_t piecewise_construct = piecewise_construct_t();
  template <typename...>
  class tuple;
  template <std::size_t...>
  struct _Index_tuple;
  template <bool, typename _T1, typename _T2>
  struct _PCC
  {
    template <typename _U1, typename _U2>
    static constexpr bool _ConstructiblePair()
    {
      return __and_<is_constructible<_T1, const _U1&>, is_constructible<_T2, const _U2&>>::value;
    }
    template <typename _U1, typename _U2>
    static constexpr bool _ImplicitlyConvertiblePair()
    {
      return __and_<is_convertible<const _U1&, _T1>, is_convertible<const _U2&, _T2>>::value;
    }
    template <typename _U1, typename _U2>
    static constexpr bool _MoveConstructiblePair()
    {
      return __and_<is_constructible<_T1, _U1&&>, is_constructible<_T2, _U2&&>>::value;
    }
    template <typename _U1, typename _U2>
    static constexpr bool _ImplicitlyMoveConvertiblePair()
    {
      return __and_<is_convertible<_U1&&, _T1>, is_convertible<_U2&&, _T2>>::value;
    }
    template <bool __implicit, typename _U1, typename _U2>
    static constexpr bool _CopyMovePair()
    {
      using __do_converts = __and_<is_convertible<const _U1&, _T1>, is_convertible<_U2&&, _T2>>;
      using __converts = typename conditional<__implicit, __do_converts, __not_<__do_converts>>::type;
      return __and_<is_constructible<_T1, const _U1&>, is_constructible<_T2, _U2&&>, __converts>::value;
    }
    template <bool __implicit, typename _U1, typename _U2>
    static constexpr bool _MoveCopyPair()
    {
      using __do_converts = __and_<is_convertible<_U1&&, _T1>, is_convertible<const _U2&, _T2>>;
      using __converts = typename conditional<__implicit, __do_converts, __not_<__do_converts>>::type;
      return __and_<is_constructible<_T1, _U1&&>, is_constructible<_T2, const _U2&&>, __converts>::value;
    }
  };
  template <typename _T1, typename _T2>
  struct _PCC<false, _T1, _T2>
  {
    template <typename _U1, typename _U2>
    static constexpr bool _ConstructiblePair()
    {
      return false;
    }
    template <typename _U1, typename _U2>
    static constexpr bool _ImplicitlyConvertiblePair()
    {
      return false;
    }
    template <typename _U1, typename _U2>
    static constexpr bool _MoveConstructiblePair()
    {
      return false;
    }
    template <typename _U1, typename _U2>
    static constexpr bool _ImplicitlyMoveConvertiblePair()
    {
      return false;
    }
  };
  struct __nonesuch_no_braces : std::__nonesuch
  {
    explicit __nonesuch_no_braces(const __nonesuch&) = delete;
  };
  template <typename _U1, typename _U2>
  class __pair_base
  {
    template <typename _T1, typename _T2>
    friend struct pair;
    __pair_base() = default;
    ~__pair_base() = default;
    __pair_base(const __pair_base&) = default;
    __pair_base& operator=(const __pair_base&) = delete;
  };
  template <typename _T1, typename _T2>
  struct pair : private __pair_base<_T1, _T2>
  {
    typedef _T1 first_type;
    typedef _T2 second_type;
    _T1 first;
    _T2 second;
    template <typename _U1 = _T1,
              typename _U2 = _T2,
              typename enable_if<
                  __and_<__is_implicitly_default_constructible<_U1>, __is_implicitly_default_constructible<_U2>>::value,
                  bool>::type = true>
    constexpr pair() : first(), second()
    {
    }
    template <typename _U1 = _T1,
              typename _U2 = _T2,
              typename enable_if<__and_<is_default_constructible<_U1>,
                                        is_default_constructible<_U2>,
                                        __not_<__and_<__is_implicitly_default_constructible<_U1>,
                                                      __is_implicitly_default_constructible<_U2>>>>::value,
                                 bool>::type = false>
    explicit constexpr pair() : first(), second()
    {
    }
    using _PCCP = _PCC<true, _T1, _T2>;
    template <typename _U1 = _T1,
              typename _U2 = _T2,
              typename enable_if<_PCCP::template _ConstructiblePair<_U1, _U2>() &&
                                     _PCCP::template _ImplicitlyConvertiblePair<_U1, _U2>(),
                                 bool>::type = true>
    constexpr pair(const _T1& __a, const _T2& __b) : first(__a), second(__b)
    {
    }
    template <typename _U1 = _T1,
              typename _U2 = _T2,
              typename enable_if<_PCCP::template _ConstructiblePair<_U1, _U2>() &&
                                     !_PCCP::template _ImplicitlyConvertiblePair<_U1, _U2>(),
                                 bool>::type = false>
    explicit constexpr pair(const _T1& __a, const _T2& __b) : first(__a), second(__b)
    {
    }
    template <typename _U1, typename _U2>
    using _PCCFP = _PCC<!is_same<_T1, _U1>::value || !is_same<_T2, _U2>::value, _T1, _T2>;
    template <typename _U1,
              typename _U2,
              typename enable_if<_PCCFP<_U1, _U2>::template _ConstructiblePair<_U1, _U2>() &&
                                     _PCCFP<_U1, _U2>::template _ImplicitlyConvertiblePair<_U1, _U2>(),
                                 bool>::type = true>
    constexpr pair(const pair<_U1, _U2>& __p) : first(__p.first), second(__p.second)
    {
    }
    template <typename _U1,
              typename _U2,
              typename enable_if<_PCCFP<_U1, _U2>::template _ConstructiblePair<_U1, _U2>() &&
                                     !_PCCFP<_U1, _U2>::template _ImplicitlyConvertiblePair<_U1, _U2>(),
                                 bool>::type = false>
    explicit constexpr pair(const pair<_U1, _U2>& __p) : first(__p.first), second(__p.second)
    {
    }
    constexpr pair(const pair&) = default;
    constexpr pair(pair&&) = default;
    template <typename _U1, typename enable_if<_PCCP::template _MoveCopyPair<true, _U1, _T2>(), bool>::type = true>
    constexpr pair(_U1&& __x, const _T2& __y) : first(std::forward<_U1>(__x)), second(__y)
    {
    }
    template <typename _U1, typename enable_if<_PCCP::template _MoveCopyPair<false, _U1, _T2>(), bool>::type = false>
    explicit constexpr pair(_U1&& __x, const _T2& __y) : first(std::forward<_U1>(__x)), second(__y)
    {
    }
    template <typename _U2, typename enable_if<_PCCP::template _CopyMovePair<true, _T1, _U2>(), bool>::type = true>
    constexpr pair(const _T1& __x, _U2&& __y) : first(__x), second(std::forward<_U2>(__y))
    {
    }
    template <typename _U2, typename enable_if<_PCCP::template _CopyMovePair<false, _T1, _U2>(), bool>::type = false>
    explicit pair(const _T1& __x, _U2&& __y) : first(__x), second(std::forward<_U2>(__y))
    {
    }
    template <typename _U1,
              typename _U2,
              typename enable_if<_PCCP::template _MoveConstructiblePair<_U1, _U2>() &&
                                     _PCCP::template _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                                 bool>::type = true>
    constexpr pair(_U1&& __x, _U2&& __y) : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
    {
    }
    template <typename _U1,
              typename _U2,
              typename enable_if<_PCCP::template _MoveConstructiblePair<_U1, _U2>() &&
                                     !_PCCP::template _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                                 bool>::type = false>
    explicit constexpr pair(_U1&& __x, _U2&& __y) : first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
    {
    }
    template <typename _U1,
              typename _U2,
              typename enable_if<_PCCFP<_U1, _U2>::template _MoveConstructiblePair<_U1, _U2>() &&
                                     _PCCFP<_U1, _U2>::template _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                                 bool>::type = true>
    constexpr pair(pair<_U1, _U2>&& __p) : first(std::forward<_U1>(__p.first)), second(std::forward<_U2>(__p.second))
    {
    }
    template <typename _U1,
              typename _U2,
              typename enable_if<_PCCFP<_U1, _U2>::template _MoveConstructiblePair<_U1, _U2>() &&
                                     !_PCCFP<_U1, _U2>::template _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                                 bool>::type = false>
    explicit constexpr pair(pair<_U1, _U2>&& __p)
        : first(std::forward<_U1>(__p.first)), second(std::forward<_U2>(__p.second))
    {
    }
    template <typename... _Args1, typename... _Args2>
    pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);
    pair& operator=(typename conditional<__and_<is_copy_assignable<_T1>, is_copy_assignable<_T2>>::value,
                                         const pair&,
                                         const __nonesuch_no_braces&>::type __p)
    {
      first = __p.first;
      second = __p.second;
      return *this;
    }
    pair& operator=(typename conditional<__and_<is_move_assignable<_T1>, is_move_assignable<_T2>>::value,
                                         pair&&,
                                         __nonesuch_no_braces&&>::type
                        __p) noexcept(__and_<is_nothrow_move_assignable<_T1>, is_nothrow_move_assignable<_T2>>::value)
    {
      first = std::forward<first_type>(__p.first);
      second = std::forward<second_type>(__p.second);
      return *this;
    }
    template <typename _U1, typename _U2>
    typename enable_if<__and_<is_assignable<_T1&, const _U1&>, is_assignable<_T2&, const _U2&>>::value, pair&>::type
    operator=(const pair<_U1, _U2>& __p)
    {
      first = __p.first;
      second = __p.second;
      return *this;
    }
    template <typename _U1, typename _U2>
    typename enable_if<__and_<is_assignable<_T1&, _U1&&>, is_assignable<_T2&, _U2&&>>::value, pair&>::type operator=(
        pair<_U1, _U2>&& __p)
    {
      first = std::forward<_U1>(__p.first);
      second = std::forward<_U2>(__p.second);
      return *this;
    }
    void swap(pair& __p) noexcept(__and_<__is_nothrow_swappable<_T1>, __is_nothrow_swappable<_T2>>::value)
    {
      using std::swap;
      swap(first, __p.first);
      swap(second, __p.second);
    }

  private:
    template <typename... _Args1, std::size_t... _Indexes1, typename... _Args2, std::size_t... _Indexes2>
    pair(tuple<_Args1...>&, tuple<_Args2...>&, _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>);
  };
  template <typename _T1, typename _T2>
  pair(_T1, _T2) -> pair<_T1, _T2>;
  template <typename _T1, typename _T2>
  inline constexpr bool operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
  {
    return __x.first == __y.first && __x.second == __y.second;
  }
  template <typename _T1, typename _T2>
  inline constexpr bool operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
  {
    return __x.first < __y.first || (!(__y.first < __x.first) && __x.second < __y.second);
  }
  template <typename _T1, typename _T2>
  inline constexpr bool operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
  {
    return !(__x == __y);
  }
  template <typename _T1, typename _T2>
  inline constexpr bool operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
  {
    return __y < __x;
  }
  template <typename _T1, typename _T2>
  inline constexpr bool operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
  {
    return !(__y < __x);
  }
  template <typename _T1, typename _T2>
  inline constexpr bool operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
  {
    return !(__x < __y);
  }
  template <typename _T1, typename _T2>
  inline typename enable_if<__and_<__is_swappable<_T1>, __is_swappable<_T2>>::value>::type swap(
      pair<_T1, _T2> & __x, pair<_T1, _T2> & __y) noexcept(noexcept(__x.swap(__y)))
  {
    __x.swap(__y);
  }
  template <typename _T1, typename _T2>
  typename enable_if<!__and_<__is_swappable<_T1>, __is_swappable<_T2>>::value>::type swap(pair<_T1, _T2>&,
                                                                                          pair<_T1, _T2>&) = delete;
  template <typename _T1, typename _T2>
  constexpr pair<typename __decay_and_strip<_T1>::__type, typename __decay_and_strip<_T2>::__type> make_pair(_T1 && __x,
                                                                                                             _T2 && __y)
  {
    typedef typename __decay_and_strip<_T1>::__type __ds_type1;
    typedef typename __decay_and_strip<_T2>::__type __ds_type2;
    typedef pair<__ds_type1, __ds_type2> __pair_type;
    return __pair_type(std::forward<_T1>(__x), std::forward<_T2>(__y));
  }
}  // namespace )
#pragma GCC visibility push(default)
namespace std
{
template <class _E>
class initializer_list
{
public:
  typedef _E value_type;
  typedef const _E& reference;
  typedef const _E& const_reference;
  typedef size_t size_type;
  typedef const _E* iterator;
  typedef const _E* const_iterator;

private:
  iterator _M_array;
  size_type _M_len;
  constexpr initializer_list(const_iterator __a, size_type __l) : _M_array(__a), _M_len(__l) {}

public:
  constexpr initializer_list() noexcept : _M_array(0), _M_len(0) {}
  constexpr size_type size() const noexcept { return _M_len; }
  constexpr const_iterator begin() const noexcept { return _M_array; }
  constexpr const_iterator end() const noexcept { return begin() + size(); }
};
template <class _Tp>
constexpr const _Tp* begin(initializer_list<_Tp> __ils) noexcept
{
  return __ils.begin();
}
template <class _Tp>
constexpr const _Tp* end(initializer_list<_Tp> __ils) noexcept
{
  return __ils.end();
}
}  // namespace std
#pragma GCC visibility pop
namespace std __attribute__((__visibility__("default")))
{
  template <typename _Tp>
  struct tuple_size;
  template <typename _Tp,
            typename _Up = typename remove_cv<_Tp>::type,
            typename = typename enable_if<is_same<_Tp, _Up>::value>::type,
            size_t = tuple_size<_Tp>::value>
  using __enable_if_has_tuple_size = _Tp;
  template <typename _Tp>
  struct tuple_size<const __enable_if_has_tuple_size<_Tp>> : public tuple_size<_Tp>
  {
  };
  template <typename _Tp>
  struct tuple_size<volatile __enable_if_has_tuple_size<_Tp>> : public tuple_size<_Tp>
  {
  };
  template <typename _Tp>
  struct tuple_size<const volatile __enable_if_has_tuple_size<_Tp>> : public tuple_size<_Tp>
  {
  };
  template <std::size_t __i, typename _Tp>
  struct tuple_element;
  template <std::size_t __i, typename _Tp>
  using __tuple_element_t = typename tuple_element<__i, _Tp>::type;
  template <std::size_t __i, typename _Tp>
  struct tuple_element<__i, const _Tp>
  {
    typedef typename add_const<__tuple_element_t<__i, _Tp>>::type type;
  };
  template <std::size_t __i, typename _Tp>
  struct tuple_element<__i, volatile _Tp>
  {
    typedef typename add_volatile<__tuple_element_t<__i, _Tp>>::type type;
  };
  template <std::size_t __i, typename _Tp>
  struct tuple_element<__i, const volatile _Tp>
  {
    typedef typename add_cv<__tuple_element_t<__i, _Tp>>::type type;
  };
  template <std::size_t __i, typename _Tp>
  using tuple_element_t = typename tuple_element<__i, _Tp>::type;
  template <typename _T1, typename _T2>
  struct __is_tuple_like_impl<std::pair<_T1, _T2>> : true_type
  {
  };
  template <class _Tp1, class _Tp2>
  struct tuple_size<std::pair<_Tp1, _Tp2>> : public integral_constant<std::size_t, 2>
  {
  };
  template <class _Tp1, class _Tp2>
  struct tuple_element<0, std::pair<_Tp1, _Tp2>>
  {
    typedef _Tp1 type;
  };
  template <class _Tp1, class _Tp2>
  struct tuple_element<1, std::pair<_Tp1, _Tp2>>
  {
    typedef _Tp2 type;
  };
  template <std::size_t _Int>
  struct __pair_get;
  template <>
  struct __pair_get<0>
  {
    template <typename _Tp1, typename _Tp2>
    static constexpr _Tp1& __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
    {
      return __pair.first;
    }
    template <typename _Tp1, typename _Tp2>
    static constexpr _Tp1&& __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept
    {
      return std::forward<_Tp1>(__pair.first);
    }
    template <typename _Tp1, typename _Tp2>
    static constexpr const _Tp1& __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
    {
      return __pair.first;
    }
    template <typename _Tp1, typename _Tp2>
    static constexpr const _Tp1&& __const_move_get(const std::pair<_Tp1, _Tp2>&& __pair) noexcept
    {
      return std::forward<const _Tp1>(__pair.first);
    }
  };
  template <>
  struct __pair_get<1>
  {
    template <typename _Tp1, typename _Tp2>
    static constexpr _Tp2& __get(std::pair<_Tp1, _Tp2>& __pair) noexcept
    {
      return __pair.second;
    }
    template <typename _Tp1, typename _Tp2>
    static constexpr _Tp2&& __move_get(std::pair<_Tp1, _Tp2>&& __pair) noexcept
    {
      return std::forward<_Tp2>(__pair.second);
    }
    template <typename _Tp1, typename _Tp2>
    static constexpr const _Tp2& __const_get(const std::pair<_Tp1, _Tp2>& __pair) noexcept
    {
      return __pair.second;
    }
    template <typename _Tp1, typename _Tp2>
    static constexpr const _Tp2&& __const_move_get(const std::pair<_Tp1, _Tp2>&& __pair) noexcept
    {
      return std::forward<const _Tp2>(__pair.second);
    }
  };
  template <std::size_t _Int, class _Tp1, class _Tp2>
  constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type& get(std::pair<_Tp1, _Tp2> & __in) noexcept
  {
    return __pair_get<_Int>::__get(__in);
  }
  template <std::size_t _Int, class _Tp1, class _Tp2>
  constexpr typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&& get(std::pair<_Tp1, _Tp2> && __in) noexcept
  {
    return __pair_get<_Int>::__move_get(std::move(__in));
  }
  template <std::size_t _Int, class _Tp1, class _Tp2>
  constexpr const typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type& get(
      const std::pair<_Tp1, _Tp2>& __in) noexcept
  {
    return __pair_get<_Int>::__const_get(__in);
  }
  template <std::size_t _Int, class _Tp1, class _Tp2>
  constexpr const typename tuple_element<_Int, std::pair<_Tp1, _Tp2>>::type&& get(
      const std::pair<_Tp1, _Tp2>&& __in) noexcept
  {
    return __pair_get<_Int>::__const_move_get(std::move(__in));
  }
  template <typename _Tp, typename _Up>
  constexpr _Tp& get(pair<_Tp, _Up> & __p) noexcept
  {
    return __p.first;
  }
  template <typename _Tp, typename _Up>
  constexpr const _Tp& get(const pair<_Tp, _Up>& __p) noexcept
  {
    return __p.first;
  }
  template <typename _Tp, typename _Up>
  constexpr _Tp&& get(pair<_Tp, _Up> && __p) noexcept
  {
    return std::move(__p.first);
  }
  template <typename _Tp, typename _Up>
  constexpr const _Tp&& get(const pair<_Tp, _Up>&& __p) noexcept
  {
    return std::move(__p.first);
  }
  template <typename _Tp, typename _Up>
  constexpr _Tp& get(pair<_Up, _Tp> & __p) noexcept
  {
    return __p.second;
  }
  template <typename _Tp, typename _Up>
  constexpr const _Tp& get(const pair<_Up, _Tp>& __p) noexcept
  {
    return __p.second;
  }
  template <typename _Tp, typename _Up>
  constexpr _Tp&& get(pair<_Up, _Tp> && __p) noexcept
  {
    return std::move(__p.second);
  }
  template <typename _Tp, typename _Up>
  constexpr const _Tp&& get(const pair<_Up, _Tp>&& __p) noexcept
  {
    return std::move(__p.second);
  }
  template <typename _Tp, typename _Up = _Tp>
  inline _Tp exchange(_Tp & __obj, _Up && __new_val)
  {
    return std::__exchange(__obj, std::forward<_Up>(__new_val));
  }
  template <size_t... _Indexes>
  struct _Index_tuple
  {
  };
  template <size_t _Num>
  struct _Build_index_tuple
  {
    using __type = _Index_tuple<__integer_pack(_Num)...>;
  };
  template <typename _Tp, _Tp... _Idx>
  struct integer_sequence
  {
    typedef _Tp value_type;
    static constexpr size_t size() noexcept { return sizeof...(_Idx); }
  };
  template <typename _Tp, _Tp _Num>
  using make_integer_sequence = integer_sequence<_Tp, __integer_pack(_Num)...>;
  template <size_t... _Idx>
  using index_sequence = integer_sequence<size_t, _Idx...>;
  template <size_t _Num>
  using make_index_sequence = make_integer_sequence<size_t, _Num>;
  template <typename... _Types>
  using index_sequence_for = make_index_sequence<sizeof...(_Types)>;
  struct in_place_t
  {
    explicit in_place_t() = default;
  };
  inline constexpr in_place_t in_place{};
  template <typename _Tp>
  struct in_place_type_t
  {
    explicit in_place_type_t() = default;
  };
  template <typename _Tp>
  inline constexpr in_place_type_t<_Tp> in_place_type{};
  template <size_t _Idx>
  struct in_place_index_t
  {
    explicit in_place_index_t() = default;
  };
  template <size_t _Idx>
  inline constexpr in_place_index_t<_Idx> in_place_index{};
  template <typename>
  struct __is_in_place_type_impl : false_type
  {
  };
  template <typename _Tp>
  struct __is_in_place_type_impl<in_place_type_t<_Tp>> : true_type
  {
  };
  template <typename _Tp>
  struct __is_in_place_type : public __is_in_place_type_impl<_Tp>
  {
  };
  template <typename _Tp>
  constexpr add_const_t<_Tp>& as_const(_Tp & __t) noexcept
  {
    return __t;
  }
  template <typename _Tp>
  void as_const(const _Tp&&) = delete;
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename>
  class allocator;
  template <>
  class allocator<void>;
  template <typename, typename>
  struct uses_allocator;
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <class _CharT>
  struct char_traits;
  template <>
  struct char_traits<char>;
  template <>
  struct char_traits<wchar_t>;
  template <>
  struct char_traits<char16_t>;
  template <>
  struct char_traits<char32_t>;
  namespace __cxx11
  {
  template <typename _CharT, typename _Traits = char_traits<_CharT>, typename _Alloc = allocator<_CharT>>
  class basic_string;
  }
  typedef basic_string<char> string;
  typedef basic_string<wchar_t> wstring;
  typedef basic_string<char16_t> u16string;
  typedef basic_string<char32_t> u32string;
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  void __throw_bad_exception(void) __attribute__((__noreturn__));
  void __throw_bad_alloc(void) __attribute__((__noreturn__));
  void __throw_bad_cast(void) __attribute__((__noreturn__));
  void __throw_bad_typeid(void) __attribute__((__noreturn__));
  void __throw_logic_error(const char*) __attribute__((__noreturn__));
  void __throw_domain_error(const char*) __attribute__((__noreturn__));
  void __throw_invalid_argument(const char*) __attribute__((__noreturn__));
  void __throw_length_error(const char*) __attribute__((__noreturn__));
  void __throw_out_of_range(const char*) __attribute__((__noreturn__));
  void __throw_out_of_range_fmt(const char*, ...) __attribute__((__noreturn__))
  __attribute__((__format__(__gnu_printf__, 1, 2)));
  void __throw_runtime_error(const char*) __attribute__((__noreturn__));
  void __throw_range_error(const char*) __attribute__((__noreturn__));
  void __throw_overflow_error(const char*) __attribute__((__noreturn__));
  void __throw_underflow_error(const char*) __attribute__((__noreturn__));
  void __throw_ios_failure(const char*) __attribute__((__noreturn__));
  void __throw_ios_failure(const char*, int) __attribute__((__noreturn__));
  void __throw_system_error(int) __attribute__((__noreturn__));
  void __throw_future_error(int) __attribute__((__noreturn__));
  void __throw_bad_function_call() __attribute__((__noreturn__));
}  // namespace )
extern "C++" {
namespace std __attribute__((__visibility__("default")))
{
  struct __true_type
  {
  };
  struct __false_type
  {
  };
  template <bool>
  struct __truth_type
  {
    typedef __false_type __type;
  };
  template <>
  struct __truth_type<true>
  {
    typedef __true_type __type;
  };
  template <class _Sp, class _Tp>
  struct __traitor
  {
    enum
    {
      __value = bool(_Sp::__value) || bool(_Tp::__value)
    };
    typedef typename __truth_type<__value>::__type __type;
  };
  template <typename, typename>
  struct __are_same
  {
    enum
    {
      __value = 0
    };
    typedef __false_type __type;
  };
  template <typename _Tp>
  struct __are_same<_Tp, _Tp>
  {
    enum
    {
      __value = 1
    };
    typedef __true_type __type;
  };
  template <typename _Tp>
  struct __is_void
  {
    enum
    {
      __value = 0
    };
    typedef __false_type __type;
  };
  template <>
  struct __is_void<void>
  {
    enum
    {
      __value = 1
    };
    typedef __true_type __type;
  };
  template <typename _Tp>
  struct __is_integer
  {
    enum
    {
      __value = 0
    };
    typedef __false_type __type;
  };
  template <>
  struct __is_integer<bool>
  {
    enum
    {
      __value = 1
    };
    typedef __true_type __type;
  };
  template <>
  struct __is_integer<char>
  {
    enum
    {
      __value = 1
    };
    typedef __true_type __type;
  };
  template <>
  struct __is_integer<signed char>
  {
    enum
    {
      __value = 1
    };
    typedef __true_type __type;
  };
  template <>
  struct __is_integer<unsigned char>
  {
    enum
    {
      __value = 1
    };
    typedef __true_type __type;
  };
  template <>
  struct __is_integer<wchar_t>
  {
    enum
    {
      __value = 1
    };
    typedef __true_type __type;
  };
  template <>
  struct __is_integer<char16_t>
  {
    enum
    {
      __value = 1
    };
    typedef __true_type __type;
  };
  template <>
  struct __is_integer<char32_t>
  {
    enum
    {
      __value = 1
    };
    typedef __true_type __type;
  };
  template <>
  struct __is_integer<short>
  {
    enum
    {
      __value = 1
    };
    typedef __true_type __type;
  };
  template <>
  struct __is_integer<unsigned short>
  {
    enum
    {
      __value = 1
    };
    typedef __true_type __type;
  };
  template <>
  struct __is_integer<int>
  {
    enum
    {
      __value = 1
    };
    typedef __true_type __type;
  };
  template <>
  struct __is_integer<unsigned int>
  {
    enum
    {
      __value = 1
    };
    typedef __true_type __type;
  };
  template <>
  struct __is_integer<long>
  {
    enum
    {
      __value = 1
    };
    typedef __true_type __type;
  };
  template <>
  struct __is_integer<unsigned long>
  {
    enum
    {
      __value = 1
    };
    typedef __true_type __type;
  };
  template <>
  struct __is_integer<long long>
  {
    enum
    {
      __value = 1
    };
    typedef __true_type __type;
  };
  template <>
  struct __is_integer<unsigned long long>
  {
    enum
    {
      __value = 1
    };
    typedef __true_type __type;
  };
  template <typename _Tp>
  struct __is_floating
  {
    enum
    {
      __value = 0
    };
    typedef __false_type __type;
  };
  template <>
  struct __is_floating<float>
  {
    enum
    {
      __value = 1
    };
    typedef __true_type __type;
  };
  template <>
  struct __is_floating<double>
  {
    enum
    {
      __value = 1
    };
    typedef __true_type __type;
  };
  template <>
  struct __is_floating<long double>
  {
    enum
    {
      __value = 1
    };
    typedef __true_type __type;
  };
  template <typename _Tp>
  struct __is_pointer
  {
    enum
    {
      __value = 0
    };
    typedef __false_type __type;
  };
  template <typename _Tp>
  struct __is_pointer<_Tp*>
  {
    enum
    {
      __value = 1
    };
    typedef __true_type __type;
  };
  template <typename _Tp>
  struct __is_arithmetic : public __traitor<__is_integer<_Tp>, __is_floating<_Tp>>{};
  template <typename _Tp>
  struct __is_scalar : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp>>{};
  template <typename _Tp>
  struct __is_char
  {
    enum
    {
      __value = 0
    };
    typedef __false_type __type;
  };
  template <>
  struct __is_char<char>
  {
    enum
    {
      __value = 1
    };
    typedef __true_type __type;
  };
  template <>
  struct __is_char<wchar_t>
  {
    enum
    {
      __value = 1
    };
    typedef __true_type __type;
  };
  template <typename _Tp>
  struct __is_byte
  {
    enum
    {
      __value = 0
    };
    typedef __false_type __type;
  };
  template <>
  struct __is_byte<char>
  {
    enum
    {
      __value = 1
    };
    typedef __true_type __type;
  };
  template <>
  struct __is_byte<signed char>
  {
    enum
    {
      __value = 1
    };
    typedef __true_type __type;
  };
  template <>
  struct __is_byte<unsigned char>
  {
    enum
    {
      __value = 1
    };
    typedef __true_type __type;
  };
  enum class byte : unsigned char;
  template <>
  struct __is_byte<byte>
  {
    enum
    {
      __value = 1
    };
    typedef __true_type __type;
  };
  template <typename _Tp>
  struct __is_move_iterator
  {
    enum
    {
      __value = 0
    };
    typedef __false_type __type;
  };
  template <typename _Iterator>
  inline _Iterator __miter_base(_Iterator __it)
  {
    return __it;
  }
}  // namespace )
}
extern "C++" {
namespace __gnu_cxx __attribute__((__visibility__("default")))
{
  template <bool, typename>
  struct __enable_if
  {
  };
  template <typename _Tp>
  struct __enable_if<true, _Tp>
  {
    typedef _Tp __type;
  };
  template <bool _Cond, typename _Iftrue, typename _Iffalse>
  struct __conditional_type
  {
    typedef _Iftrue __type;
  };
  template <typename _Iftrue, typename _Iffalse>
  struct __conditional_type<false, _Iftrue, _Iffalse>
  {
    typedef _Iffalse __type;
  };
  template <typename _Tp>
  struct __add_unsigned
  {
  private:
    typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

  public:
    typedef typename __if_type::__type __type;
  };
  template <>
  struct __add_unsigned<char>
  {
    typedef unsigned char __type;
  };
  template <>
  struct __add_unsigned<signed char>
  {
    typedef unsigned char __type;
  };
  template <>
  struct __add_unsigned<short>
  {
    typedef unsigned short __type;
  };
  template <>
  struct __add_unsigned<int>
  {
    typedef unsigned int __type;
  };
  template <>
  struct __add_unsigned<long>
  {
    typedef unsigned long __type;
  };
  template <>
  struct __add_unsigned<long long>
  {
    typedef unsigned long long __type;
  };
  template <>
  struct __add_unsigned<bool>;
  template <>
  struct __add_unsigned<wchar_t>;
  template <typename _Tp>
  struct __remove_unsigned
  {
  private:
    typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

  public:
    typedef typename __if_type::__type __type;
  };
  template <>
  struct __remove_unsigned<char>
  {
    typedef signed char __type;
  };
  template <>
  struct __remove_unsigned<unsigned char>
  {
    typedef signed char __type;
  };
  template <>
  struct __remove_unsigned<unsigned short>
  {
    typedef short __type;
  };
  template <>
  struct __remove_unsigned<unsigned int>
  {
    typedef int __type;
  };
  template <>
  struct __remove_unsigned<unsigned long>
  {
    typedef long __type;
  };
  template <>
  struct __remove_unsigned<unsigned long long>
  {
    typedef long long __type;
  };
  template <>
  struct __remove_unsigned<bool>;
  template <>
  struct __remove_unsigned<wchar_t>;
  template <typename _Type>
  inline bool __is_null_pointer(_Type * __ptr)
  {
    return __ptr == 0;
  }
  template <typename _Type>
  inline bool __is_null_pointer(_Type)
  {
    return false;
  }
  inline bool __is_null_pointer(std::nullptr_t) { return true; }
  template <typename _Tp, bool = std::__is_integer<_Tp>::__value>
  struct __promote
  {
    typedef double __type;
  };
  template <typename _Tp>
  struct __promote<_Tp, false>
  {
  };
  template <>
  struct __promote<long double>
  {
    typedef long double __type;
  };
  template <>
  struct __promote<double>
  {
    typedef double __type;
  };
  template <>
  struct __promote<float>
  {
    typedef float __type;
  };
  template <typename _Tp,
            typename _Up,
            typename _Tp2 = typename __promote<_Tp>::__type,
            typename _Up2 = typename __promote<_Up>::__type>
  struct __promote_2
  {
    typedef __typeof__(_Tp2() + _Up2()) __type;
  };
  template <typename _Tp,
            typename _Up,
            typename _Vp,
            typename _Tp2 = typename __promote<_Tp>::__type,
            typename _Up2 = typename __promote<_Up>::__type,
            typename _Vp2 = typename __promote<_Vp>::__type>
  struct __promote_3
  {
    typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
  };
  template <typename _Tp,
            typename _Up,
            typename _Vp,
            typename _Wp,
            typename _Tp2 = typename __promote<_Tp>::__type,
            typename _Up2 = typename __promote<_Up>::__type,
            typename _Vp2 = typename __promote<_Vp>::__type,
            typename _Wp2 = typename __promote<_Wp>::__type>
  struct __promote_4
  {
    typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
  };
}  // namespace )
}
namespace __gnu_cxx __attribute__((__visibility__("default")))
{
  template <typename _Tp>
  struct __is_integer_nonstrict : public std::__is_integer<_Tp>
  {
    using std::__is_integer<_Tp>::__value;
    enum
    {
      __width = __value ? sizeof(_Tp) * 8 : 0
    };
  };
  template <typename _Value>
  struct __numeric_traits_integer
  {
    static_assert(__is_integer_nonstrict<_Value>::__value, "invalid specialization");
    static const bool __is_signed = (_Value)(-1) < 0;
    static const int __digits = __is_integer_nonstrict<_Value>::__width - __is_signed;
    static const _Value __max = __is_signed ? (((((_Value)1 << (__digits - 1)) - 1) << 1) + 1) : ~(_Value)0;
    static const _Value __min = __is_signed ? -__max - 1 : (_Value)0;
  };
  template <typename _Value>
  const _Value __numeric_traits_integer<_Value>::__min;
  template <typename _Value>
  const _Value __numeric_traits_integer<_Value>::__max;
  template <typename _Value>
  const bool __numeric_traits_integer<_Value>::__is_signed;
  template <typename _Value>
  const int __numeric_traits_integer<_Value>::__digits;
  template <>
  struct __is_integer_nonstrict<__int128>
  {
    enum
    {
      __value = 1
    };
    typedef std::__true_type __type;
    enum
    {
      __width = 128
    };
  };
  template <>
  struct __is_integer_nonstrict<unsigned __int128>
  {
    enum
    {
      __value = 1
    };
    typedef std::__true_type __type;
    enum
    {
      __width = 128
    };
  };
  template <typename _Tp>
  using __int_traits = __numeric_traits_integer<_Tp>;
  template <typename _Value>
  struct __numeric_traits_floating
  {
    static const int __max_digits10 =
        (2 + (std::__are_same<_Value, float>::__value ? 24 : std::__are_same<_Value, double>::__value ? 53 : 64) *
                 643L / 2136);
    static const bool __is_signed = true;
    static const int __digits10 =
        (std::__are_same<_Value, float>::__value ? 6 : std::__are_same<_Value, double>::__value ? 15 : 18);
    static const int __max_exponent10 =
        (std::__are_same<_Value, float>::__value ? 38 : std::__are_same<_Value, double>::__value ? 308 : 4932);
  };
  template <typename _Value>
  const int __numeric_traits_floating<_Value>::__max_digits10;
  template <typename _Value>
  const bool __numeric_traits_floating<_Value>::__is_signed;
  template <typename _Value>
  const int __numeric_traits_floating<_Value>::__digits10;
  template <typename _Value>
  const int __numeric_traits_floating<_Value>::__max_exponent10;
  template <typename _Value>
  struct __numeric_traits : public __conditional_type<std::__is_integer<_Value>::__value,
                                                      __numeric_traits_integer<_Value>,
                                                      __numeric_traits_floating<_Value>>::__type
  {
  };
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  struct input_iterator_tag
  {
  };
  struct output_iterator_tag
  {
  };
  struct forward_iterator_tag : public input_iterator_tag
  {
  };
  struct bidirectional_iterator_tag : public forward_iterator_tag
  {
  };
  struct random_access_iterator_tag : public bidirectional_iterator_tag
  {
  };
  template <typename _Category,
            typename _Tp,
            typename _Distance = ptrdiff_t,
            typename _Pointer = _Tp*,
            typename _Reference = _Tp&>
  struct iterator
  {
    typedef _Category iterator_category;
    typedef _Tp value_type;
    typedef _Distance difference_type;
    typedef _Pointer pointer;
    typedef _Reference reference;
  };
  template <typename _Iterator, typename = __void_t<>>
  struct __iterator_traits
  {
  };
  template <typename _Iterator>
  struct __iterator_traits<_Iterator,
                           __void_t<typename _Iterator::iterator_category,
                                    typename _Iterator::value_type,
                                    typename _Iterator::difference_type,
                                    typename _Iterator::pointer,
                                    typename _Iterator::reference>>
  {
    typedef typename _Iterator::iterator_category iterator_category;
    typedef typename _Iterator::value_type value_type;
    typedef typename _Iterator::difference_type difference_type;
    typedef typename _Iterator::pointer pointer;
    typedef typename _Iterator::reference reference;
  };
  template <typename _Iterator>
  struct iterator_traits : public __iterator_traits<_Iterator>
  {
  };
  template <typename _Tp>
  struct iterator_traits<_Tp*>
  {
    typedef random_access_iterator_tag iterator_category;
    typedef _Tp value_type;
    typedef ptrdiff_t difference_type;
    typedef _Tp* pointer;
    typedef _Tp& reference;
  };
  template <typename _Tp>
  struct iterator_traits<const _Tp*>
  {
    typedef random_access_iterator_tag iterator_category;
    typedef _Tp value_type;
    typedef ptrdiff_t difference_type;
    typedef const _Tp* pointer;
    typedef const _Tp& reference;
  };
  template <typename _Iter>
  inline constexpr typename iterator_traits<_Iter>::iterator_category __iterator_category(const _Iter&)
  {
    return typename iterator_traits<_Iter>::iterator_category();
  }
  template <typename _InIter>
  using _RequireInputIter = typename enable_if<
      is_convertible<typename iterator_traits<_InIter>::iterator_category, input_iterator_tag>::value>::type;
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename>
  struct _List_iterator;
  template <typename>
  struct _List_const_iterator;
  template <typename _InputIterator>
  inline constexpr typename iterator_traits<_InputIterator>::difference_type __distance(
      _InputIterator __first, _InputIterator __last, input_iterator_tag)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last)
    {
      ++__first;
      ++__n;
    }
    return __n;
  }
  template <typename _RandomAccessIterator>
  inline constexpr typename iterator_traits<_RandomAccessIterator>::difference_type __distance(
      _RandomAccessIterator __first, _RandomAccessIterator __last, random_access_iterator_tag)
  {
    return __last - __first;
  }
  template <typename _Tp>
  ptrdiff_t __distance(std::_List_iterator<_Tp>, std::_List_iterator<_Tp>, input_iterator_tag);
  template <typename _Tp>
  ptrdiff_t __distance(std::_List_const_iterator<_Tp>, std::_List_const_iterator<_Tp>, input_iterator_tag);
  template <typename _InputIterator>
  inline constexpr typename iterator_traits<_InputIterator>::difference_type distance(_InputIterator __first,
                                                                                      _InputIterator __last)
  {
    return std::__distance(__first, __last, std::__iterator_category(__first));
  }
  template <typename _InputIterator, typename _Distance>
  inline constexpr void __advance(_InputIterator & __i, _Distance __n, input_iterator_tag)
  {
    ;
    while (__n--)
      ++__i;
  }
  template <typename _BidirectionalIterator, typename _Distance>
  inline constexpr void __advance(_BidirectionalIterator & __i, _Distance __n, bidirectional_iterator_tag)
  {
    if (__n > 0)
      while (__n--)
        ++__i;
    else
      while (__n++)
        --__i;
  }
  template <typename _RandomAccessIterator, typename _Distance>
  inline constexpr void __advance(_RandomAccessIterator & __i, _Distance __n, random_access_iterator_tag)
  {
    if (__builtin_constant_p(__n) && __n == 1)
      ++__i;
    else if (__builtin_constant_p(__n) && __n == -1)
      --__i;
    else
      __i += __n;
  }
  template <typename _InputIterator, typename _Distance>
  inline constexpr void advance(_InputIterator & __i, _Distance __n)
  {
    typename iterator_traits<_InputIterator>::difference_type __d = __n;
    std::__advance(__i, __d, std::__iterator_category(__i));
  }
  template <typename _InputIterator>
  inline constexpr _InputIterator next(_InputIterator __x,
                                       typename iterator_traits<_InputIterator>::difference_type __n = 1)
  {
    std::advance(__x, __n);
    return __x;
  }
  template <typename _BidirectionalIterator>
  inline constexpr _BidirectionalIterator prev(
      _BidirectionalIterator __x, typename iterator_traits<_BidirectionalIterator>::difference_type __n = 1)
  {
    std::advance(__x, -__n);
    return __x;
  }
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  class __undefined;
  template <typename _Tp>
  struct __get_first_arg
  {
    using type = __undefined;
  };
  template <template <typename, typename...> class _Template, typename _Tp, typename... _Types>
  struct __get_first_arg<_Template<_Tp, _Types...>>
  {
    using type = _Tp;
  };
  template <typename _Tp>
  using __get_first_arg_t = typename __get_first_arg<_Tp>::type;
  template <typename _Tp, typename _Up>
  struct __replace_first_arg
  {
  };
  template <template <typename, typename...> class _Template, typename _Up, typename _Tp, typename... _Types>
  struct __replace_first_arg<_Template<_Tp, _Types...>, _Up>
  {
    using type = _Template<_Up, _Types...>;
  };
  template <typename _Tp, typename _Up>
  using __replace_first_arg_t = typename __replace_first_arg<_Tp, _Up>::type;
  template <typename _Tp>
  using __make_not_void = typename conditional<is_void<_Tp>::value, __undefined, _Tp>::type;
  template <typename _Ptr>
  struct pointer_traits
  {
  private:
    template <typename _Tp>
    using __element_type = typename _Tp::element_type;
    template <typename _Tp>
    using __difference_type = typename _Tp::difference_type;
    template <typename _Tp, typename _Up, typename = void>
    struct __rebind : __replace_first_arg<_Tp, _Up>
    {
    };
    template <typename _Tp, typename _Up>
    struct __rebind<_Tp, _Up, __void_t<typename _Tp::template rebind<_Up>>>
    {
      using type = typename _Tp::template rebind<_Up>;
    };

  public:
    using pointer = _Ptr;
    using element_type = __detected_or_t<__get_first_arg_t<_Ptr>, __element_type, _Ptr>;
    using difference_type = __detected_or_t<ptrdiff_t, __difference_type, _Ptr>;
    template <typename _Up>
    using rebind = typename __rebind<_Ptr, _Up>::type;
    static _Ptr pointer_to(__make_not_void<element_type>& __e) { return _Ptr::pointer_to(__e); }
    static_assert(!is_same<element_type, __undefined>::value,
                  "pointer type defines element_type or is like SomePointer<T, Args>");
  };
  template <typename _Tp>
  struct pointer_traits<_Tp*>
  {
    typedef _Tp* pointer;
    typedef _Tp element_type;
    typedef ptrdiff_t difference_type;
    template <typename _Up>
    using rebind = _Up*;
    static pointer pointer_to(__make_not_void<element_type>& __r) noexcept { return std::addressof(__r); }
  };
  template <typename _Ptr, typename _Tp>
  using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;
  template <typename _Tp>
  constexpr _Tp* __to_address(_Tp * __ptr) noexcept
  {
    static_assert(!std::is_function<_Tp>::value, "not a function pointer");
    return __ptr;
  }
  template <typename _Ptr>
  constexpr typename std::pointer_traits<_Ptr>::element_type* __to_address(const _Ptr& __ptr)
  {
    return std::__to_address(__ptr.operator->());
  }
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _Iterator>
  class reverse_iterator : public iterator<typename iterator_traits<_Iterator>::iterator_category,
                                           typename iterator_traits<_Iterator>::value_type,
                                           typename iterator_traits<_Iterator>::difference_type,
                                           typename iterator_traits<_Iterator>::pointer,
                                           typename iterator_traits<_Iterator>::reference>
  {
  protected:
    _Iterator current;
    typedef iterator_traits<_Iterator> __traits_type;

  public:
    typedef _Iterator iterator_type;
    typedef typename __traits_type::difference_type difference_type;
    typedef typename __traits_type::pointer pointer;
    typedef typename __traits_type::reference reference;
    constexpr reverse_iterator() : current() {}
    explicit constexpr reverse_iterator(iterator_type __x) : current(__x) {}
    constexpr reverse_iterator(const reverse_iterator& __x) : current(__x.current) {}
    reverse_iterator& operator=(const reverse_iterator&) = default;
    template <typename _Iter>
    constexpr reverse_iterator(const reverse_iterator<_Iter>& __x) : current(__x.base())
    {
    }
    constexpr iterator_type base() const { return current; }
    constexpr reference operator*() const
    {
      _Iterator __tmp = current;
      return *--__tmp;
    }
    constexpr pointer operator->() const
    {
      _Iterator __tmp = current;
      --__tmp;
      return _S_to_pointer(__tmp);
    }
    constexpr reverse_iterator& operator++()
    {
      --current;
      return *this;
    }
    constexpr reverse_iterator operator++(int)
    {
      reverse_iterator __tmp = *this;
      --current;
      return __tmp;
    }
    constexpr reverse_iterator& operator--()
    {
      ++current;
      return *this;
    }
    constexpr reverse_iterator operator--(int)
    {
      reverse_iterator __tmp = *this;
      ++current;
      return __tmp;
    }
    constexpr reverse_iterator operator+(difference_type __n) const { return reverse_iterator(current - __n); }
    constexpr reverse_iterator& operator+=(difference_type __n)
    {
      current -= __n;
      return *this;
    }
    constexpr reverse_iterator operator-(difference_type __n) const { return reverse_iterator(current + __n); }
    constexpr reverse_iterator& operator-=(difference_type __n)
    {
      current += __n;
      return *this;
    }
    constexpr reference operator[](difference_type __n) const { return *(*this + __n); }

  private:
    template <typename _Tp>
    static constexpr _Tp* _S_to_pointer(_Tp* __p)
    {
      return __p;
    }
    template <typename _Tp>
    static constexpr pointer _S_to_pointer(_Tp __t)
    {
      return __t.operator->();
    }
  };
  template <typename _Iterator>
  inline constexpr bool operator==(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
  {
    return __x.base() == __y.base();
  }
  template <typename _Iterator>
  inline constexpr bool operator<(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
  {
    return __y.base() < __x.base();
  }
  template <typename _Iterator>
  inline constexpr bool operator!=(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
  {
    return !(__x == __y);
  }
  template <typename _Iterator>
  inline constexpr bool operator>(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
  {
    return __y < __x;
  }
  template <typename _Iterator>
  inline constexpr bool operator<=(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
  {
    return !(__y < __x);
  }
  template <typename _Iterator>
  inline constexpr bool operator>=(const reverse_iterator<_Iterator>& __x, const reverse_iterator<_Iterator>& __y)
  {
    return !(__x < __y);
  }
  template <typename _IteratorL, typename _IteratorR>
  inline constexpr bool operator==(const reverse_iterator<_IteratorL>& __x, const reverse_iterator<_IteratorR>& __y)
  {
    return __x.base() == __y.base();
  }
  template <typename _IteratorL, typename _IteratorR>
  inline constexpr bool operator<(const reverse_iterator<_IteratorL>& __x, const reverse_iterator<_IteratorR>& __y)
  {
    return __y.base() < __x.base();
  }
  template <typename _IteratorL, typename _IteratorR>
  inline constexpr bool operator!=(const reverse_iterator<_IteratorL>& __x, const reverse_iterator<_IteratorR>& __y)
  {
    return !(__x == __y);
  }
  template <typename _IteratorL, typename _IteratorR>
  inline constexpr bool operator>(const reverse_iterator<_IteratorL>& __x, const reverse_iterator<_IteratorR>& __y)
  {
    return __y < __x;
  }
  template <typename _IteratorL, typename _IteratorR>
  inline constexpr bool operator<=(const reverse_iterator<_IteratorL>& __x, const reverse_iterator<_IteratorR>& __y)
  {
    return !(__y < __x);
  }
  template <typename _IteratorL, typename _IteratorR>
  inline constexpr bool operator>=(const reverse_iterator<_IteratorL>& __x, const reverse_iterator<_IteratorR>& __y)
  {
    return !(__x < __y);
  }
  template <typename _IteratorL, typename _IteratorR>
  inline constexpr auto operator-(const reverse_iterator<_IteratorL>& __x, const reverse_iterator<_IteratorR>& __y)
      ->decltype(__y.base() - __x.base())
  {
    return __y.base() - __x.base();
  }
  template <typename _Iterator>
  inline constexpr reverse_iterator<_Iterator> operator+(typename reverse_iterator<_Iterator>::difference_type __n,
                                                         const reverse_iterator<_Iterator>& __x)
  {
    return reverse_iterator<_Iterator>(__x.base() - __n);
  }
  template <typename _Iterator>
  inline constexpr reverse_iterator<_Iterator> __make_reverse_iterator(_Iterator __i)
  {
    return reverse_iterator<_Iterator>(__i);
  }
  template <typename _Iterator>
  inline constexpr reverse_iterator<_Iterator> make_reverse_iterator(_Iterator __i)
  {
    return reverse_iterator<_Iterator>(__i);
  }
  template <typename _Iterator>
  auto __niter_base(reverse_iterator<_Iterator> __it)->decltype(__make_reverse_iterator(__niter_base(__it.base())))
  {
    return __make_reverse_iterator(__niter_base(__it.base()));
  }
  template <typename _Iterator>
  struct __is_move_iterator<reverse_iterator<_Iterator>> : __is_move_iterator<_Iterator>
  {
  };
  template <typename _Iterator>
  auto __miter_base(reverse_iterator<_Iterator> __it)->decltype(__make_reverse_iterator(__miter_base(__it.base())))
  {
    return __make_reverse_iterator(__miter_base(__it.base()));
  }
  template <typename _Container>
  class back_insert_iterator : public iterator<output_iterator_tag, void, void, void, void>
  {
  protected:
    _Container* container;

  public:
    typedef _Container container_type;
    explicit back_insert_iterator(_Container& __x) : container(std::__addressof(__x)) {}
    back_insert_iterator& operator=(const typename _Container::value_type& __value)
    {
      container->push_back(__value);
      return *this;
    }
    back_insert_iterator& operator=(typename _Container::value_type&& __value)
    {
      container->push_back(std::move(__value));
      return *this;
    }
    back_insert_iterator& operator*() { return *this; }
    back_insert_iterator& operator++() { return *this; }
    back_insert_iterator operator++(int) { return *this; }
  };
  template <typename _Container>
  inline back_insert_iterator<_Container> back_inserter(_Container & __x)
  {
    return back_insert_iterator<_Container>(__x);
  }
  template <typename _Container>
  class front_insert_iterator : public iterator<output_iterator_tag, void, void, void, void>
  {
  protected:
    _Container* container;

  public:
    typedef _Container container_type;
    explicit front_insert_iterator(_Container& __x) : container(std::__addressof(__x)) {}
    front_insert_iterator& operator=(const typename _Container::value_type& __value)
    {
      container->push_front(__value);
      return *this;
    }
    front_insert_iterator& operator=(typename _Container::value_type&& __value)
    {
      container->push_front(std::move(__value));
      return *this;
    }
    front_insert_iterator& operator*() { return *this; }
    front_insert_iterator& operator++() { return *this; }
    front_insert_iterator operator++(int) { return *this; }
  };
  template <typename _Container>
  inline front_insert_iterator<_Container> front_inserter(_Container & __x)
  {
    return front_insert_iterator<_Container>(__x);
  }
  template <typename _Container>
  class insert_iterator : public iterator<output_iterator_tag, void, void, void, void>
  {
  protected:
    _Container* container;
    typename _Container::iterator iter;

  public:
    typedef _Container container_type;
    insert_iterator(_Container& __x, typename _Container::iterator __i) : container(std::__addressof(__x)), iter(__i) {}
    insert_iterator& operator=(const typename _Container::value_type& __value)
    {
      iter = container->insert(iter, __value);
      ++iter;
      return *this;
    }
    insert_iterator& operator=(typename _Container::value_type&& __value)
    {
      iter = container->insert(iter, std::move(__value));
      ++iter;
      return *this;
    }
    insert_iterator& operator*() { return *this; }
    insert_iterator& operator++() { return *this; }
    insert_iterator& operator++(int) { return *this; }
  };
  template <typename _Container>
  inline insert_iterator<_Container> inserter(_Container & __x, typename _Container::iterator __i)
  {
    return insert_iterator<_Container>(__x, __i);
  }
}  // namespace )
namespace __gnu_cxx __attribute__((__visibility__("default")))
{
  using std::iterator;
  using std::iterator_traits;
  template <typename _Iterator, typename _Container>
  class __normal_iterator
  {
  protected:
    _Iterator _M_current;
    typedef iterator_traits<_Iterator> __traits_type;

  public:
    typedef _Iterator iterator_type;
    typedef typename __traits_type::iterator_category iterator_category;
    typedef typename __traits_type::value_type value_type;
    typedef typename __traits_type::difference_type difference_type;
    typedef typename __traits_type::reference reference;
    typedef typename __traits_type::pointer pointer;
    constexpr __normal_iterator() noexcept : _M_current(_Iterator()) {}
    explicit __normal_iterator(const _Iterator& __i) noexcept : _M_current(__i) {}
    template <typename _Iter>
    __normal_iterator(
        const __normal_iterator<_Iter,
                                typename __enable_if<(std::__are_same<_Iter, typename _Container::pointer>::__value),
                                                     _Container>::__type>& __i) noexcept
        : _M_current(__i.base())
    {
    }
    reference operator*() const noexcept { return *_M_current; }
    pointer operator->() const noexcept { return _M_current; }
    __normal_iterator& operator++() noexcept
    {
      ++_M_current;
      return *this;
    }
    __normal_iterator operator++(int) noexcept { return __normal_iterator(_M_current++); }
    __normal_iterator& operator--() noexcept
    {
      --_M_current;
      return *this;
    }
    __normal_iterator operator--(int) noexcept { return __normal_iterator(_M_current--); }
    reference operator[](difference_type __n) const noexcept { return _M_current[__n]; }
    __normal_iterator& operator+=(difference_type __n) noexcept
    {
      _M_current += __n;
      return *this;
    }
    __normal_iterator operator+(difference_type __n) const noexcept { return __normal_iterator(_M_current + __n); }
    __normal_iterator& operator-=(difference_type __n) noexcept
    {
      _M_current -= __n;
      return *this;
    }
    __normal_iterator operator-(difference_type __n) const noexcept { return __normal_iterator(_M_current - __n); }
    const _Iterator& base() const noexcept { return _M_current; }
  };
  template <typename _IteratorL, typename _IteratorR, typename _Container>
  inline bool operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
                         const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept
  {
    return __lhs.base() == __rhs.base();
  }
  template <typename _Iterator, typename _Container>
  inline bool operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
                         const __normal_iterator<_Iterator, _Container>& __rhs) noexcept
  {
    return __lhs.base() == __rhs.base();
  }
  template <typename _IteratorL, typename _IteratorR, typename _Container>
  inline bool operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
                         const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept
  {
    return __lhs.base() != __rhs.base();
  }
  template <typename _Iterator, typename _Container>
  inline bool operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
                         const __normal_iterator<_Iterator, _Container>& __rhs) noexcept
  {
    return __lhs.base() != __rhs.base();
  }
  template <typename _IteratorL, typename _IteratorR, typename _Container>
  inline bool operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
                        const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept
  {
    return __lhs.base() < __rhs.base();
  }
  template <typename _Iterator, typename _Container>
  inline bool operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
                        const __normal_iterator<_Iterator, _Container>& __rhs) noexcept
  {
    return __lhs.base() < __rhs.base();
  }
  template <typename _IteratorL, typename _IteratorR, typename _Container>
  inline bool operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
                        const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept
  {
    return __lhs.base() > __rhs.base();
  }
  template <typename _Iterator, typename _Container>
  inline bool operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
                        const __normal_iterator<_Iterator, _Container>& __rhs) noexcept
  {
    return __lhs.base() > __rhs.base();
  }
  template <typename _IteratorL, typename _IteratorR, typename _Container>
  inline bool operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
                         const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept
  {
    return __lhs.base() <= __rhs.base();
  }
  template <typename _Iterator, typename _Container>
  inline bool operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
                         const __normal_iterator<_Iterator, _Container>& __rhs) noexcept
  {
    return __lhs.base() <= __rhs.base();
  }
  template <typename _IteratorL, typename _IteratorR, typename _Container>
  inline bool operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
                         const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept
  {
    return __lhs.base() >= __rhs.base();
  }
  template <typename _Iterator, typename _Container>
  inline bool operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
                         const __normal_iterator<_Iterator, _Container>& __rhs) noexcept
  {
    return __lhs.base() >= __rhs.base();
  }
  template <typename _IteratorL, typename _IteratorR, typename _Container>
  inline auto operator-(
      const __normal_iterator<_IteratorL, _Container>& __lhs,
      const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept->decltype(__lhs.base() - __rhs.base())
  {
    return __lhs.base() - __rhs.base();
  }
  template <typename _Iterator, typename _Container>
  inline typename __normal_iterator<_Iterator, _Container>::difference_type operator-(
      const __normal_iterator<_Iterator, _Container>& __lhs,
      const __normal_iterator<_Iterator, _Container>& __rhs) noexcept
  {
    return __lhs.base() - __rhs.base();
  }
  template <typename _Iterator, typename _Container>
  inline __normal_iterator<_Iterator, _Container> operator+(
      typename __normal_iterator<_Iterator, _Container>::difference_type __n,
      const __normal_iterator<_Iterator, _Container>& __i) noexcept
  {
    return __normal_iterator<_Iterator, _Container>(__i.base() + __n);
  }
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _Iterator, typename _Container>
  _Iterator __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it) noexcept(
      std::is_nothrow_copy_constructible<_Iterator>::value)
  {
    return __it.base();
  }
  template <typename _Iterator>
  class move_iterator
  {
  protected:
    _Iterator _M_current;
    typedef iterator_traits<_Iterator> __traits_type;
    typedef typename __traits_type::reference __base_ref;

  public:
    typedef _Iterator iterator_type;
    typedef typename __traits_type::iterator_category iterator_category;
    typedef typename __traits_type::value_type value_type;
    typedef typename __traits_type::difference_type difference_type;
    typedef _Iterator pointer;
    typedef typename conditional<is_reference<__base_ref>::value,
                                 typename remove_reference<__base_ref>::type&&,
                                 __base_ref>::type reference;
    constexpr move_iterator() : _M_current() {}
    explicit constexpr move_iterator(iterator_type __i) : _M_current(__i) {}
    template <typename _Iter>
    constexpr move_iterator(const move_iterator<_Iter>& __i) : _M_current(__i.base())
    {
    }
    constexpr iterator_type base() const { return _M_current; }
    constexpr reference operator*() const { return static_cast<reference>(*_M_current); }
    constexpr pointer operator->() const { return _M_current; }
    constexpr move_iterator& operator++()
    {
      ++_M_current;
      return *this;
    }
    constexpr move_iterator operator++(int)
    {
      move_iterator __tmp = *this;
      ++_M_current;
      return __tmp;
    }
    constexpr move_iterator& operator--()
    {
      --_M_current;
      return *this;
    }
    constexpr move_iterator operator--(int)
    {
      move_iterator __tmp = *this;
      --_M_current;
      return __tmp;
    }
    constexpr move_iterator operator+(difference_type __n) const { return move_iterator(_M_current + __n); }
    constexpr move_iterator& operator+=(difference_type __n)
    {
      _M_current += __n;
      return *this;
    }
    constexpr move_iterator operator-(difference_type __n) const { return move_iterator(_M_current - __n); }
    constexpr move_iterator& operator-=(difference_type __n)
    {
      _M_current -= __n;
      return *this;
    }
    constexpr reference operator[](difference_type __n) const { return std::move(_M_current[__n]); }
  };
  template <typename _IteratorL, typename _IteratorR>
  inline constexpr bool operator==(const move_iterator<_IteratorL>& __x, const move_iterator<_IteratorR>& __y)
  {
    return __x.base() == __y.base();
  }
  template <typename _Iterator>
  inline constexpr bool operator==(const move_iterator<_Iterator>& __x, const move_iterator<_Iterator>& __y)
  {
    return __x.base() == __y.base();
  }
  template <typename _IteratorL, typename _IteratorR>
  inline constexpr bool operator!=(const move_iterator<_IteratorL>& __x, const move_iterator<_IteratorR>& __y)
  {
    return !(__x == __y);
  }
  template <typename _Iterator>
  inline constexpr bool operator!=(const move_iterator<_Iterator>& __x, const move_iterator<_Iterator>& __y)
  {
    return !(__x == __y);
  }
  template <typename _IteratorL, typename _IteratorR>
  inline constexpr bool operator<(const move_iterator<_IteratorL>& __x, const move_iterator<_IteratorR>& __y)
  {
    return __x.base() < __y.base();
  }
  template <typename _Iterator>
  inline constexpr bool operator<(const move_iterator<_Iterator>& __x, const move_iterator<_Iterator>& __y)
  {
    return __x.base() < __y.base();
  }
  template <typename _IteratorL, typename _IteratorR>
  inline constexpr bool operator<=(const move_iterator<_IteratorL>& __x, const move_iterator<_IteratorR>& __y)
  {
    return !(__y < __x);
  }
  template <typename _Iterator>
  inline constexpr bool operator<=(const move_iterator<_Iterator>& __x, const move_iterator<_Iterator>& __y)
  {
    return !(__y < __x);
  }
  template <typename _IteratorL, typename _IteratorR>
  inline constexpr bool operator>(const move_iterator<_IteratorL>& __x, const move_iterator<_IteratorR>& __y)
  {
    return __y < __x;
  }
  template <typename _Iterator>
  inline constexpr bool operator>(const move_iterator<_Iterator>& __x, const move_iterator<_Iterator>& __y)
  {
    return __y < __x;
  }
  template <typename _IteratorL, typename _IteratorR>
  inline constexpr bool operator>=(const move_iterator<_IteratorL>& __x, const move_iterator<_IteratorR>& __y)
  {
    return !(__x < __y);
  }
  template <typename _Iterator>
  inline constexpr bool operator>=(const move_iterator<_Iterator>& __x, const move_iterator<_Iterator>& __y)
  {
    return !(__x < __y);
  }
  template <typename _IteratorL, typename _IteratorR>
  inline constexpr auto operator-(const move_iterator<_IteratorL>& __x, const move_iterator<_IteratorR>& __y)
      ->decltype(__x.base() - __y.base())
  {
    return __x.base() - __y.base();
  }
  template <typename _Iterator>
  inline constexpr move_iterator<_Iterator> operator+(typename move_iterator<_Iterator>::difference_type __n,
                                                      const move_iterator<_Iterator>& __x)
  {
    return __x + __n;
  }
  template <typename _Iterator>
  inline constexpr move_iterator<_Iterator> make_move_iterator(_Iterator __i)
  {
    return move_iterator<_Iterator>(__i);
  }
  template <typename _Iterator,
            typename _ReturnType =
                typename conditional<__move_if_noexcept_cond<typename iterator_traits<_Iterator>::value_type>::value,
                                     _Iterator,
                                     move_iterator<_Iterator>>::type>
  inline constexpr _ReturnType __make_move_if_noexcept_iterator(_Iterator __i)
  {
    return _ReturnType(__i);
  }
  template <typename _Tp,
            typename _ReturnType =
                typename conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp*, move_iterator<_Tp*>>::type>
  inline constexpr _ReturnType __make_move_if_noexcept_iterator(_Tp * __i)
  {
    return _ReturnType(__i);
  }
  template <typename _Iterator>
  auto __niter_base(move_iterator<_Iterator> __it)->decltype(make_move_iterator(__niter_base(__it.base())))
  {
    return make_move_iterator(__niter_base(__it.base()));
  }
  template <typename _Iterator>
  struct __is_move_iterator<move_iterator<_Iterator>>
  {
    enum
    {
      __value = 1
    };
    typedef __true_type __type;
  };
  template <typename _Iterator>
  auto __miter_base(move_iterator<_Iterator> __it)->decltype(__miter_base(__it.base()))
  {
    return __miter_base(__it.base());
  }
  template <typename _InputIterator>
  using __iter_key_t = remove_const_t<typename iterator_traits<_InputIterator>::value_type::first_type>;
  template <typename _InputIterator>
  using __iter_val_t = typename iterator_traits<_InputIterator>::value_type::second_type;
  template <typename _T1, typename _T2>
  struct pair;
  template <typename _InputIterator>
  using __iter_to_alloc_t = pair<add_const_t<__iter_key_t<_InputIterator>>, __iter_val_t<_InputIterator>>;
}  // namespace )
namespace std
{
namespace __debug
{
}
}  // namespace std
namespace __gnu_debug
{
using namespace std::__debug;
}
namespace __gnu_cxx
{
namespace __ops
{
struct _Iter_less_iter
{
  template <typename _Iterator1, typename _Iterator2>
  constexpr bool operator()(_Iterator1 __it1, _Iterator2 __it2) const
  {
    return *__it1 < *__it2;
  }
};
constexpr inline _Iter_less_iter __iter_less_iter()
{
  return _Iter_less_iter();
}
struct _Iter_less_val
{
  constexpr _Iter_less_val() = default;
  explicit _Iter_less_val(_Iter_less_iter) {}
  template <typename _Iterator, typename _Value>
  bool operator()(_Iterator __it, _Value& __val) const
  {
    return *__it < __val;
  }
};
inline _Iter_less_val __iter_less_val()
{
  return _Iter_less_val();
}
inline _Iter_less_val __iter_comp_val(_Iter_less_iter)
{
  return _Iter_less_val();
}
struct _Val_less_iter
{
  constexpr _Val_less_iter() = default;
  explicit _Val_less_iter(_Iter_less_iter) {}
  template <typename _Value, typename _Iterator>
  bool operator()(_Value& __val, _Iterator __it) const
  {
    return __val < *__it;
  }
};
inline _Val_less_iter __val_less_iter()
{
  return _Val_less_iter();
}
inline _Val_less_iter __val_comp_iter(_Iter_less_iter)
{
  return _Val_less_iter();
}
struct _Iter_equal_to_iter
{
  template <typename _Iterator1, typename _Iterator2>
  bool operator()(_Iterator1 __it1, _Iterator2 __it2) const
  {
    return *__it1 == *__it2;
  }
};
inline _Iter_equal_to_iter __iter_equal_to_iter()
{
  return _Iter_equal_to_iter();
}
struct _Iter_equal_to_val
{
  template <typename _Iterator, typename _Value>
  bool operator()(_Iterator __it, _Value& __val) const
  {
    return *__it == __val;
  }
};
inline _Iter_equal_to_val __iter_equal_to_val()
{
  return _Iter_equal_to_val();
}
inline _Iter_equal_to_val __iter_comp_val(_Iter_equal_to_iter)
{
  return _Iter_equal_to_val();
}
template <typename _Compare>
struct _Iter_comp_iter
{
  _Compare _M_comp;
  explicit constexpr _Iter_comp_iter(_Compare __comp) : _M_comp(std::move(__comp)) {}
  template <typename _Iterator1, typename _Iterator2>
  constexpr bool operator()(_Iterator1 __it1, _Iterator2 __it2)
  {
    return bool(_M_comp(*__it1, *__it2));
  }
};
template <typename _Compare>
constexpr inline _Iter_comp_iter<_Compare> __iter_comp_iter(_Compare __comp)
{
  return _Iter_comp_iter<_Compare>(std::move(__comp));
}
template <typename _Compare>
struct _Iter_comp_val
{
  _Compare _M_comp;
  explicit _Iter_comp_val(_Compare __comp) : _M_comp(std::move(__comp)) {}
  explicit _Iter_comp_val(const _Iter_comp_iter<_Compare>& __comp) : _M_comp(__comp._M_comp) {}
  explicit _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp) : _M_comp(std::move(__comp._M_comp)) {}
  template <typename _Iterator, typename _Value>
  bool operator()(_Iterator __it, _Value& __val)
  {
    return bool(_M_comp(*__it, __val));
  }
};
template <typename _Compare>
inline _Iter_comp_val<_Compare> __iter_comp_val(_Compare __comp)
{
  return _Iter_comp_val<_Compare>(std::move(__comp));
}
template <typename _Compare>
inline _Iter_comp_val<_Compare> __iter_comp_val(_Iter_comp_iter<_Compare> __comp)
{
  return _Iter_comp_val<_Compare>(std::move(__comp));
}
template <typename _Compare>
struct _Val_comp_iter
{
  _Compare _M_comp;
  explicit _Val_comp_iter(_Compare __comp) : _M_comp(std::move(__comp)) {}
  explicit _Val_comp_iter(const _Iter_comp_iter<_Compare>& __comp) : _M_comp(__comp._M_comp) {}
  explicit _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp) : _M_comp(std::move(__comp._M_comp)) {}
  template <typename _Value, typename _Iterator>
  bool operator()(_Value& __val, _Iterator __it)
  {
    return bool(_M_comp(__val, *__it));
  }
};
template <typename _Compare>
inline _Val_comp_iter<_Compare> __val_comp_iter(_Compare __comp)
{
  return _Val_comp_iter<_Compare>(std::move(__comp));
}
template <typename _Compare>
inline _Val_comp_iter<_Compare> __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
{
  return _Val_comp_iter<_Compare>(std::move(__comp));
}
template <typename _Value>
struct _Iter_equals_val
{
  _Value& _M_value;
  explicit _Iter_equals_val(_Value& __value) : _M_value(__value) {}
  template <typename _Iterator>
  bool operator()(_Iterator __it)
  {
    return *__it == _M_value;
  }
};
template <typename _Value>
inline _Iter_equals_val<_Value> __iter_equals_val(_Value& __val)
{
  return _Iter_equals_val<_Value>(__val);
}
template <typename _Iterator1>
struct _Iter_equals_iter
{
  _Iterator1 _M_it1;
  explicit _Iter_equals_iter(_Iterator1 __it1) : _M_it1(__it1) {}
  template <typename _Iterator2>
  bool operator()(_Iterator2 __it2)
  {
    return *__it2 == *_M_it1;
  }
};
template <typename _Iterator>
inline _Iter_equals_iter<_Iterator> __iter_comp_iter(_Iter_equal_to_iter, _Iterator __it)
{
  return _Iter_equals_iter<_Iterator>(__it);
}
template <typename _Predicate>
struct _Iter_pred
{
  _Predicate _M_pred;
  explicit _Iter_pred(_Predicate __pred) : _M_pred(std::move(__pred)) {}
  template <typename _Iterator>
  bool operator()(_Iterator __it)
  {
    return bool(_M_pred(*__it));
  }
};
template <typename _Predicate>
inline _Iter_pred<_Predicate> __pred_iter(_Predicate __pred)
{
  return _Iter_pred<_Predicate>(std::move(__pred));
}
template <typename _Compare, typename _Value>
struct _Iter_comp_to_val
{
  _Compare _M_comp;
  _Value& _M_value;
  _Iter_comp_to_val(_Compare __comp, _Value& __value) : _M_comp(std::move(__comp)), _M_value(__value) {}
  template <typename _Iterator>
  bool operator()(_Iterator __it)
  {
    return bool(_M_comp(*__it, _M_value));
  }
};
template <typename _Compare, typename _Value>
_Iter_comp_to_val<_Compare, _Value> __iter_comp_val(_Compare __comp, _Value& __val)
{
  return _Iter_comp_to_val<_Compare, _Value>(std::move(__comp), __val);
}
template <typename _Compare, typename _Iterator1>
struct _Iter_comp_to_iter
{
  _Compare _M_comp;
  _Iterator1 _M_it1;
  _Iter_comp_to_iter(_Compare __comp, _Iterator1 __it1) : _M_comp(std::move(__comp)), _M_it1(__it1) {}
  template <typename _Iterator2>
  bool operator()(_Iterator2 __it2)
  {
    return bool(_M_comp(*__it2, *_M_it1));
  }
};
template <typename _Compare, typename _Iterator>
inline _Iter_comp_to_iter<_Compare, _Iterator> __iter_comp_iter(_Iter_comp_iter<_Compare> __comp, _Iterator __it)
{
  return _Iter_comp_to_iter<_Compare, _Iterator>(std::move(__comp._M_comp), __it);
}
template <typename _Predicate>
struct _Iter_negate
{
  _Predicate _M_pred;
  explicit _Iter_negate(_Predicate __pred) : _M_pred(std::move(__pred)) {}
  template <typename _Iterator>
  bool operator()(_Iterator __it)
  {
    return !bool(_M_pred(*__it));
  }
};
template <typename _Predicate>
inline _Iter_negate<_Predicate> __negate(_Iter_pred<_Predicate> __pred)
{
  return _Iter_negate<_Predicate>(std::move(__pred._M_pred));
}
}  // namespace __ops
}  // namespace __gnu_cxx
namespace std __attribute__((__visibility__("default")))
{
  template <typename _ForwardIterator1, typename _ForwardIterator2>
  inline void iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
  {
    swap(*__a, *__b);
  }
  template <typename _ForwardIterator1, typename _ForwardIterator2>
  _ForwardIterator2 swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2)
  {
    ;
    for (; __first1 != __last1; ++__first1, (void)++__first2)
      std::iter_swap(__first1, __first2);
    return __first2;
  }
  template <typename _Tp>
  constexpr inline const _Tp& min(const _Tp& __a, const _Tp& __b)
  {
    if (__b < __a)
      return __b;
    return __a;
  }
  template <typename _Tp>
  constexpr inline const _Tp& max(const _Tp& __a, const _Tp& __b)
  {
    if (__a < __b)
      return __b;
    return __a;
  }
  template <typename _Tp, typename _Compare>
  constexpr inline const _Tp& min(const _Tp& __a, const _Tp& __b, _Compare __comp)
  {
    if (__comp(__b, __a))
      return __b;
    return __a;
  }
  template <typename _Tp, typename _Compare>
  constexpr inline const _Tp& max(const _Tp& __a, const _Tp& __b, _Compare __comp)
  {
    if (__comp(__a, __b))
      return __b;
    return __a;
  }
  template <typename _Iterator>
  inline _Iterator __niter_base(_Iterator __it) noexcept(std::is_nothrow_copy_constructible<_Iterator>::value)
  {
    return __it;
  }
  template <typename _From, typename _To>
  inline _From __niter_wrap(_From __from, _To __res)
  {
    return __from + (__res - std::__niter_base(__from));
  }
  template <typename _Iterator>
  inline _Iterator __niter_wrap(const _Iterator&, _Iterator __res)
  {
    return __res;
  }
  template <bool _IsMove, bool _IsSimple, typename _Category>
  struct __copy_move
  {
    template <typename _II, typename _OI>
    static _OI __copy_m(_II __first, _II __last, _OI __result)
    {
      for (; __first != __last; ++__result, (void)++__first)
        *__result = *__first;
      return __result;
    }
  };
  template <typename _Category>
  struct __copy_move<true, false, _Category>
  {
    template <typename _II, typename _OI>
    static _OI __copy_m(_II __first, _II __last, _OI __result)
    {
      for (; __first != __last; ++__result, (void)++__first)
        *__result = std::move(*__first);
      return __result;
    }
  };
  template <>
  struct __copy_move<false, false, random_access_iterator_tag>
  {
    template <typename _II, typename _OI>
    static _OI __copy_m(_II __first, _II __last, _OI __result)
    {
      typedef typename iterator_traits<_II>::difference_type _Distance;
      for (_Distance __n = __last - __first; __n > 0; --__n)
      {
        *__result = *__first;
        ++__first;
        ++__result;
      }
      return __result;
    }
  };
  template <>
  struct __copy_move<true, false, random_access_iterator_tag>
  {
    template <typename _II, typename _OI>
    static _OI __copy_m(_II __first, _II __last, _OI __result)
    {
      typedef typename iterator_traits<_II>::difference_type _Distance;
      for (_Distance __n = __last - __first; __n > 0; --__n)
      {
        *__result = std::move(*__first);
        ++__first;
        ++__result;
      }
      return __result;
    }
  };
  template <bool _IsMove>
  struct __copy_move<_IsMove, true, random_access_iterator_tag>
  {
    template <typename _Tp>
    static _Tp* __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
    {
      using __assignable = conditional<_IsMove, is_move_assignable<_Tp>, is_copy_assignable<_Tp>>;
      static_assert(__assignable::type::value, "type is not assignable");
      const ptrdiff_t _Num = __last - __first;
      if (_Num)
        __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
      return __result + _Num;
    }
  };
  template <bool _IsMove, typename _II, typename _OI>
  inline _OI __copy_move_a(_II __first, _II __last, _OI __result)
  {
    typedef typename iterator_traits<_II>::value_type _ValueTypeI;
    typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
    typedef typename iterator_traits<_II>::iterator_category _Category;
    const bool __simple = (__is_trivially_copyable(_ValueTypeI) && __is_pointer<_II>::__value &&
                           __is_pointer<_OI>::__value && __are_same<_ValueTypeI, _ValueTypeO>::__value);
    return std::__copy_move<_IsMove, __simple, _Category>::__copy_m(__first, __last, __result);
  }
  template <typename _CharT>
  struct char_traits;
  template <typename _CharT, typename _Traits>
  class istreambuf_iterator;
  template <typename _CharT, typename _Traits>
  class ostreambuf_iterator;
  template <bool _IsMove, typename _CharT>
  typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, ostreambuf_iterator<_CharT, char_traits<_CharT>>>::__type
  __copy_move_a2(_CharT*, _CharT*, ostreambuf_iterator<_CharT, char_traits<_CharT>>);
  template <bool _IsMove, typename _CharT>
  typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, ostreambuf_iterator<_CharT, char_traits<_CharT>>>::__type
  __copy_move_a2(const _CharT*, const _CharT*, ostreambuf_iterator<_CharT, char_traits<_CharT>>);
  template <bool _IsMove, typename _CharT>
  typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, _CharT*>::__type __copy_move_a2(
      istreambuf_iterator<_CharT, char_traits<_CharT>>, istreambuf_iterator<_CharT, char_traits<_CharT>>, _CharT*);
  template <bool _IsMove, typename _II, typename _OI>
  inline _OI __copy_move_a2(_II __first, _II __last, _OI __result)
  {
    return std::__niter_wrap(__result,
                             std::__copy_move_a<_IsMove>(
                                 std::__niter_base(__first), std::__niter_base(__last), std::__niter_base(__result)));
  }
  template <typename _II, typename _OI>
  inline _OI copy(_II __first, _II __last, _OI __result)
  {
    ;
    return std::__copy_move_a2<__is_move_iterator<_II>::__value>(
        std::__miter_base(__first), std::__miter_base(__last), __result);
  }
  template <typename _II, typename _OI>
  inline _OI move(_II __first, _II __last, _OI __result)
  {
    ;
    return std::__copy_move_a2<true>(std::__miter_base(__first), std::__miter_base(__last), __result);
  }
  template <bool, bool, typename>
  struct __copy_move_backward
  {
    template <typename _BI1, typename _BI2>
    static _BI2 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      while (__first != __last)
        *--__result = *--__last;
      return __result;
    }
  };
  template <typename _Category>
  struct __copy_move_backward<true, false, _Category>
  {
    template <typename _BI1, typename _BI2>
    static _BI2 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      while (__first != __last)
        *--__result = std::move(*--__last);
      return __result;
    }
  };
  template <>
  struct __copy_move_backward<false, false, random_access_iterator_tag>
  {
    template <typename _BI1, typename _BI2>
    static _BI2 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      typename iterator_traits<_BI1>::difference_type __n;
      for (__n = __last - __first; __n > 0; --__n)
        *--__result = *--__last;
      return __result;
    }
  };
  template <>
  struct __copy_move_backward<true, false, random_access_iterator_tag>
  {
    template <typename _BI1, typename _BI2>
    static _BI2 __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      typename iterator_traits<_BI1>::difference_type __n;
      for (__n = __last - __first; __n > 0; --__n)
        *--__result = std::move(*--__last);
      return __result;
    }
  };
  template <bool _IsMove>
  struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
  {
    template <typename _Tp>
    static _Tp* __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
    {
      using __assignable = conditional<_IsMove, is_move_assignable<_Tp>, is_copy_assignable<_Tp>>;
      static_assert(__assignable::type::value, "type is not assignable");
      const ptrdiff_t _Num = __last - __first;
      if (_Num)
        __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
      return __result - _Num;
    }
  };
  template <bool _IsMove, typename _BI1, typename _BI2>
  inline _BI2 __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
  {
    typedef typename iterator_traits<_BI1>::value_type _ValueType1;
    typedef typename iterator_traits<_BI2>::value_type _ValueType2;
    typedef typename iterator_traits<_BI1>::iterator_category _Category;
    const bool __simple = (__is_trivially_copyable(_ValueType1) && __is_pointer<_BI1>::__value &&
                           __is_pointer<_BI2>::__value && __are_same<_ValueType1, _ValueType2>::__value);
    return std::__copy_move_backward<_IsMove, __simple, _Category>::__copy_move_b(__first, __last, __result);
  }
  template <bool _IsMove, typename _BI1, typename _BI2>
  inline _BI2 __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
  {
    return std::__niter_wrap(__result,
                             std::__copy_move_backward_a<_IsMove>(
                                 std::__niter_base(__first), std::__niter_base(__last), std::__niter_base(__result)));
  }
  template <typename _BI1, typename _BI2>
  inline _BI2 copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
  {
    ;
    return std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>(
        std::__miter_base(__first), std::__miter_base(__last), __result);
  }
  template <typename _BI1, typename _BI2>
  inline _BI2 move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
  {
    ;
    return std::__copy_move_backward_a2<true>(std::__miter_base(__first), std::__miter_base(__last), __result);
  }
  template <typename _ForwardIterator, typename _Tp>
  inline typename __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type __fill_a(
      _ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
  {
    for (; __first != __last; ++__first)
      *__first = __value;
  }
  template <typename _ForwardIterator, typename _Tp>
  inline typename __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type __fill_a(
      _ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
  {
    const _Tp __tmp = __value;
    for (; __first != __last; ++__first)
      *__first = __tmp;
  }
  template <typename _Tp>
  inline typename __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type __fill_a(
      _Tp * __first, _Tp * __last, const _Tp& __c)
  {
    const _Tp __tmp = __c;
    if (const size_t __len = __last - __first)
      __builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
  }
  template <typename _ForwardIterator, typename _Tp>
  inline void fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
  {
    ;
    std::__fill_a(std::__niter_base(__first), std::__niter_base(__last), __value);
  }
  template <typename _OutputIterator, typename _Size, typename _Tp>
  inline typename __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type __fill_n_a(
      _OutputIterator __first, _Size __n, const _Tp& __value)
  {
    for (__decltype(__n + 0) __niter = __n; __niter > 0; --__niter, (void)++__first)
      *__first = __value;
    return __first;
  }
  template <typename _OutputIterator, typename _Size, typename _Tp>
  inline typename __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type __fill_n_a(
      _OutputIterator __first, _Size __n, const _Tp& __value)
  {
    const _Tp __tmp = __value;
    for (__decltype(__n + 0) __niter = __n; __niter > 0; --__niter, (void)++__first)
      *__first = __tmp;
    return __first;
  }
  template <typename _Size, typename _Tp>
  inline typename __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, _Tp*>::__type __fill_n_a(
      _Tp * __first, _Size __n, const _Tp& __c)
  {
    std::__fill_a(__first, __first + __n, __c);
    return __first + __n;
  }
  template <typename _OI, typename _Size, typename _Tp>
  inline _OI fill_n(_OI __first, _Size __n, const _Tp& __value)
  {
    ;
    return std::__niter_wrap(__first, std::__fill_n_a(std::__niter_base(__first), __n, __value));
  }
  template <bool _BoolType>
  struct __equal
  {
    template <typename _II1, typename _II2>
    static bool equal(_II1 __first1, _II1 __last1, _II2 __first2)
    {
      for (; __first1 != __last1; ++__first1, (void)++__first2)
        if (!(*__first1 == *__first2))
          return false;
      return true;
    }
  };
  template <>
  struct __equal<true>
  {
    template <typename _Tp>
    static bool equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
    {
      if (const size_t __len = (__last1 - __first1))
        return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
      return true;
    }
  };
  template <typename _II1, typename _II2>
  inline bool __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)
  {
    typedef typename iterator_traits<_II1>::value_type _ValueType1;
    typedef typename iterator_traits<_II2>::value_type _ValueType2;
    const bool __simple =
        ((__is_integer<_ValueType1>::__value || __is_pointer<_ValueType1>::__value) && __is_pointer<_II1>::__value &&
         __is_pointer<_II2>::__value && __are_same<_ValueType1, _ValueType2>::__value);
    return std::__equal<__simple>::equal(__first1, __last1, __first2);
  }
  template <typename, typename>
  struct __lc_rai
  {
    template <typename _II1, typename _II2>
    static _II1 __newlast1(_II1, _II1 __last1, _II2, _II2)
    {
      return __last1;
    }
    template <typename _II>
    static bool __cnd2(_II __first, _II __last)
    {
      return __first != __last;
    }
  };
  template <>
  struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>
  {
    template <typename _RAI1, typename _RAI2>
    static _RAI1 __newlast1(_RAI1 __first1, _RAI1 __last1, _RAI2 __first2, _RAI2 __last2)
    {
      const typename iterator_traits<_RAI1>::difference_type __diff1 = __last1 - __first1;
      const typename iterator_traits<_RAI2>::difference_type __diff2 = __last2 - __first2;
      return __diff2 < __diff1 ? __first1 + __diff2 : __last1;
    }
    template <typename _RAI>
    static bool __cnd2(_RAI, _RAI)
    {
      return true;
    }
  };
  template <typename _II1, typename _II2, typename _Compare>
  bool __lexicographical_compare_impl(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2, _Compare __comp)
  {
    typedef typename iterator_traits<_II1>::iterator_category _Category1;
    typedef typename iterator_traits<_II2>::iterator_category _Category2;
    typedef std::__lc_rai<_Category1, _Category2> __rai_type;
    __last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2);
    for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2); ++__first1, (void)++__first2)
    {
      if (__comp(__first1, __first2))
        return true;
      if (__comp(__first2, __first1))
        return false;
    }
    return __first1 == __last1 && __first2 != __last2;
  }
  template <bool _BoolType>
  struct __lexicographical_compare
  {
    template <typename _II1, typename _II2>
    static bool __lc(_II1, _II1, _II2, _II2);
  };
  template <bool _BoolType>
  template <typename _II1, typename _II2>
  bool __lexicographical_compare<_BoolType>::__lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
  {
    return std::__lexicographical_compare_impl(
        __first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_less_iter());
  }
  template <>
  struct __lexicographical_compare<true>
  {
    template <typename _Tp, typename _Up>
    static bool __lc(const _Tp* __first1, const _Tp* __last1, const _Up* __first2, const _Up* __last2)
    {
      const size_t __len1 = __last1 - __first1;
      const size_t __len2 = __last2 - __first2;
      if (const size_t __len = std::min(__len1, __len2))
        if (int __result = __builtin_memcmp(__first1, __first2, __len))
          return __result < 0;
      return __len1 < __len2;
    }
  };
  template <typename _II1, typename _II2>
  inline bool __lexicographical_compare_aux(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
  {
    typedef typename iterator_traits<_II1>::value_type _ValueType1;
    typedef typename iterator_traits<_II2>::value_type _ValueType2;
    const bool __simple = (__is_byte<_ValueType1>::__value && __is_byte<_ValueType2>::__value &&
                           !__gnu_cxx::__numeric_traits<_ValueType1>::__is_signed &&
                           !__gnu_cxx::__numeric_traits<_ValueType2>::__is_signed && __is_pointer<_II1>::__value &&
                           __is_pointer<_II2>::__value);
    return std::__lexicographical_compare<__simple>::__lc(__first1, __last1, __first2, __last2);
  }
  template <typename _ForwardIterator, typename _Tp, typename _Compare>
  _ForwardIterator __lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __val, _Compare __comp)
  {
    typedef typename iterator_traits<_ForwardIterator>::difference_type _DistanceType;
    _DistanceType __len = std::distance(__first, __last);
    while (__len > 0)
    {
      _DistanceType __half = __len >> 1;
      _ForwardIterator __middle = __first;
      std::advance(__middle, __half);
      if (__comp(__middle, __val))
      {
        __first = __middle;
        ++__first;
        __len = __len - __half - 1;
      }
      else
        __len = __half;
    }
    return __first;
  }
  template <typename _ForwardIterator, typename _Tp>
  inline _ForwardIterator lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __val)
  {
    ;
    return std::__lower_bound(__first, __last, __val, __gnu_cxx::__ops::__iter_less_val());
  }
  inline constexpr int __lg(int __n) { return (int)sizeof(int) * 8 - 1 - __builtin_clz(__n); }
  inline constexpr unsigned __lg(unsigned __n) { return (int)sizeof(int) * 8 - 1 - __builtin_clz(__n); }
  inline constexpr long __lg(long __n) { return (int)sizeof(long) * 8 - 1 - __builtin_clzl(__n); }
  inline constexpr unsigned long __lg(unsigned long __n) { return (int)sizeof(long) * 8 - 1 - __builtin_clzl(__n); }
  inline constexpr long long __lg(long long __n) { return (int)sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }
  inline constexpr unsigned long long __lg(unsigned long long __n)
  {
    return (int)sizeof(long long) * 8 - 1 - __builtin_clzll(__n);
  }
  template <typename _II1, typename _II2>
  inline bool equal(_II1 __first1, _II1 __last1, _II2 __first2)
  {
    ;
    return std::__equal_aux(std::__niter_base(__first1), std::__niter_base(__last1), std::__niter_base(__first2));
  }
  template <typename _IIter1, typename _IIter2, typename _BinaryPredicate>
  inline bool equal(_IIter1 __first1, _IIter1 __last1, _IIter2 __first2, _BinaryPredicate __binary_pred)
  {
    ;
    for (; __first1 != __last1; ++__first1, (void)++__first2)
      if (!bool(__binary_pred(*__first1, *__first2)))
        return false;
    return true;
  }
  template <typename _II1, typename _II2>
  inline bool __equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
  {
    using _RATag = random_access_iterator_tag;
    using _Cat1 = typename iterator_traits<_II1>::iterator_category;
    using _Cat2 = typename iterator_traits<_II2>::iterator_category;
    using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;
    if (_RAIters())
    {
      auto __d1 = std::distance(__first1, __last1);
      auto __d2 = std::distance(__first2, __last2);
      if (__d1 != __d2)
        return false;
      return std::equal(__first1, __last1, __first2);
    }
    for (; __first1 != __last1 && __first2 != __last2; ++__first1, (void)++__first2)
      if (!(*__first1 == *__first2))
        return false;
    return __first1 == __last1 && __first2 == __last2;
  }
  template <typename _II1, typename _II2, typename _BinaryPredicate>
  inline bool __equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2, _BinaryPredicate __binary_pred)
  {
    using _RATag = random_access_iterator_tag;
    using _Cat1 = typename iterator_traits<_II1>::iterator_category;
    using _Cat2 = typename iterator_traits<_II2>::iterator_category;
    using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;
    if (_RAIters())
    {
      auto __d1 = std::distance(__first1, __last1);
      auto __d2 = std::distance(__first2, __last2);
      if (__d1 != __d2)
        return false;
      return std::equal(__first1, __last1, __first2, __binary_pred);
    }
    for (; __first1 != __last1 && __first2 != __last2; ++__first1, (void)++__first2)
      if (!bool(__binary_pred(*__first1, *__first2)))
        return false;
    return __first1 == __last1 && __first2 == __last2;
  }
  template <typename _II1, typename _II2>
  inline bool equal(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
  {
    ;
    ;
    return std::__equal4(__first1, __last1, __first2, __last2);
  }
  template <typename _IIter1, typename _IIter2, typename _BinaryPredicate>
  inline bool equal(
      _IIter1 __first1, _IIter1 __last1, _IIter2 __first2, _IIter2 __last2, _BinaryPredicate __binary_pred)
  {
    ;
    ;
    return std::__equal4(__first1, __last1, __first2, __last2, __binary_pred);
  }
  template <typename _II1, typename _II2>
  inline bool lexicographical_compare(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
  {
    ;
    ;
    return std::__lexicographical_compare_aux(std::__niter_base(__first1),
                                              std::__niter_base(__last1),
                                              std::__niter_base(__first2),
                                              std::__niter_base(__last2));
  }
  template <typename _II1, typename _II2, typename _Compare>
  inline bool lexicographical_compare(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2, _Compare __comp)
  {
    ;
    ;
    return std::__lexicographical_compare_impl(
        __first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__comp));
  }
  template <typename _InputIterator1, typename _InputIterator2, typename _BinaryPredicate>
  pair<_InputIterator1, _InputIterator2> __mismatch(
      _InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _BinaryPredicate __binary_pred)
  {
    while (__first1 != __last1 && __binary_pred(__first1, __first2))
    {
      ++__first1;
      ++__first2;
    }
    return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
  }
  template <typename _InputIterator1, typename _InputIterator2>
  inline pair<_InputIterator1, _InputIterator2> mismatch(
      _InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2)
  {
    ;
    return std::__mismatch(__first1, __last1, __first2, __gnu_cxx::__ops::__iter_equal_to_iter());
  }
  template <typename _InputIterator1, typename _InputIterator2, typename _BinaryPredicate>
  inline pair<_InputIterator1, _InputIterator2> mismatch(
      _InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _BinaryPredicate __binary_pred)
  {
    ;
    return std::__mismatch(__first1, __last1, __first2, __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
  }
  template <typename _InputIterator1, typename _InputIterator2, typename _BinaryPredicate>
  pair<_InputIterator1, _InputIterator2> __mismatch(_InputIterator1 __first1,
                                                    _InputIterator1 __last1,
                                                    _InputIterator2 __first2,
                                                    _InputIterator2 __last2,
                                                    _BinaryPredicate __binary_pred)
  {
    while (__first1 != __last1 && __first2 != __last2 && __binary_pred(__first1, __first2))
    {
      ++__first1;
      ++__first2;
    }
    return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
  }
  template <typename _InputIterator1, typename _InputIterator2>
  inline pair<_InputIterator1, _InputIterator2> mismatch(
      _InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2)
  {
    ;
    ;
    return std::__mismatch(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_equal_to_iter());
  }
  template <typename _InputIterator1, typename _InputIterator2, typename _BinaryPredicate>
  inline pair<_InputIterator1, _InputIterator2> mismatch(_InputIterator1 __first1,
                                                         _InputIterator1 __last1,
                                                         _InputIterator2 __first2,
                                                         _InputIterator2 __last2,
                                                         _BinaryPredicate __binary_pred)
  {
    ;
    ;
    return std::__mismatch(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
  }
}  // namespace )
typedef _Complex float __cfloat128 __attribute__((__mode__(__TC__)));
typedef __float128 _Float128;
typedef float _Float32;
typedef double _Float64;
typedef double _Float32x;
typedef long double _Float64x;
typedef __builtin_va_list __gnuc_va_list;
typedef unsigned int wint_t;
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
typedef __mbstate_t mbstate_t;
struct _IO_FILE;
typedef struct _IO_FILE __FILE;
struct _IO_FILE;
typedef struct _IO_FILE FILE;
struct __locale_struct
{
  struct __locale_data* __locales[13];
  const unsigned short int* __ctype_b;
  const int* __ctype_tolower;
  const int* __ctype_toupper;
  const char* __names[13];
};
typedef struct __locale_struct* __locale_t;
typedef __locale_t locale_t;
extern "C" {
struct tm;
extern wchar_t* wcscpy(wchar_t* __restrict __dest, const wchar_t* __restrict __src) throw()
    __attribute__((__nonnull__(1, 2)));
extern wchar_t* wcsncpy(wchar_t* __restrict __dest, const wchar_t* __restrict __src, size_t __n) throw()
    __attribute__((__nonnull__(1, 2)));
extern wchar_t* wcscat(wchar_t* __restrict __dest, const wchar_t* __restrict __src) throw()
    __attribute__((__nonnull__(1, 2)));
extern wchar_t* wcsncat(wchar_t* __restrict __dest, const wchar_t* __restrict __src, size_t __n) throw()
    __attribute__((__nonnull__(1, 2)));
extern int wcscmp(const wchar_t* __s1, const wchar_t* __s2) throw() __attribute__((__pure__))
__attribute__((__nonnull__(1, 2)));
extern int wcsncmp(const wchar_t* __s1, const wchar_t* __s2, size_t __n) throw() __attribute__((__pure__))
__attribute__((__nonnull__(1, 2)));
extern int wcscasecmp(const wchar_t* __s1, const wchar_t* __s2) throw();
extern int wcsncasecmp(const wchar_t* __s1, const wchar_t* __s2, size_t __n) throw();
extern int wcscasecmp_l(const wchar_t* __s1, const wchar_t* __s2, locale_t __loc) throw();
extern int wcsncasecmp_l(const wchar_t* __s1, const wchar_t* __s2, size_t __n, locale_t __loc) throw();
extern int wcscoll(const wchar_t* __s1, const wchar_t* __s2) throw();
extern size_t wcsxfrm(wchar_t* __restrict __s1, const wchar_t* __restrict __s2, size_t __n) throw();
extern int wcscoll_l(const wchar_t* __s1, const wchar_t* __s2, locale_t __loc) throw();
extern size_t wcsxfrm_l(wchar_t* __s1, const wchar_t* __s2, size_t __n, locale_t __loc) throw();
extern wchar_t* wcsdup(const wchar_t* __s) throw() __attribute__((__malloc__));
extern "C++" wchar_t* wcschr(wchar_t* __wcs, wchar_t __wc) throw() __asm("wcschr") __attribute__((__pure__));
extern "C++" const wchar_t* wcschr(const wchar_t* __wcs, wchar_t __wc) throw() __asm("wcschr")
    __attribute__((__pure__));
extern "C++" wchar_t* wcsrchr(wchar_t* __wcs, wchar_t __wc) throw() __asm("wcsrchr") __attribute__((__pure__));
extern "C++" const wchar_t* wcsrchr(const wchar_t* __wcs, wchar_t __wc) throw() __asm("wcsrchr")
    __attribute__((__pure__));
extern wchar_t* wcschrnul(const wchar_t* __s, wchar_t __wc) throw() __attribute__((__pure__));
extern size_t wcscspn(const wchar_t* __wcs, const wchar_t* __reject) throw() __attribute__((__pure__));
extern size_t wcsspn(const wchar_t* __wcs, const wchar_t* __accept) throw() __attribute__((__pure__));
extern "C++" wchar_t* wcspbrk(wchar_t* __wcs, const wchar_t* __accept) throw() __asm("wcspbrk")
    __attribute__((__pure__));
extern "C++" const wchar_t* wcspbrk(const wchar_t* __wcs, const wchar_t* __accept) throw() __asm("wcspbrk")
    __attribute__((__pure__));
extern "C++" wchar_t* wcsstr(wchar_t* __haystack, const wchar_t* __needle) throw() __asm("wcsstr")
    __attribute__((__pure__));
extern "C++" const wchar_t* wcsstr(const wchar_t* __haystack, const wchar_t* __needle) throw() __asm("wcsstr")
    __attribute__((__pure__));
extern wchar_t* wcstok(wchar_t* __restrict __s, const wchar_t* __restrict __delim, wchar_t** __restrict __ptr) throw();
extern size_t wcslen(const wchar_t* __s) throw() __attribute__((__pure__));
extern "C++" wchar_t* wcswcs(wchar_t* __haystack, const wchar_t* __needle) throw() __asm("wcswcs")
    __attribute__((__pure__));
extern "C++" const wchar_t* wcswcs(const wchar_t* __haystack, const wchar_t* __needle) throw() __asm("wcswcs")
    __attribute__((__pure__));
extern size_t wcsnlen(const wchar_t* __s, size_t __maxlen) throw() __attribute__((__pure__));
extern "C++" wchar_t* wmemchr(wchar_t* __s, wchar_t __c, size_t __n) throw() __asm("wmemchr") __attribute__((__pure__));
extern "C++" const wchar_t* wmemchr(const wchar_t* __s, wchar_t __c, size_t __n) throw() __asm("wmemchr")
    __attribute__((__pure__));
extern int wmemcmp(const wchar_t* __s1, const wchar_t* __s2, size_t __n) throw() __attribute__((__pure__));
extern wchar_t* wmemcpy(wchar_t* __restrict __s1, const wchar_t* __restrict __s2, size_t __n) throw();
extern wchar_t* wmemmove(wchar_t* __s1, const wchar_t* __s2, size_t __n) throw();
extern wchar_t* wmemset(wchar_t* __s, wchar_t __c, size_t __n) throw();
extern wchar_t* wmempcpy(wchar_t* __restrict __s1, const wchar_t* __restrict __s2, size_t __n) throw();
extern wint_t btowc(int __c) throw();
extern int wctob(wint_t __c) throw();
extern int mbsinit(const mbstate_t* __ps) throw() __attribute__((__pure__));
extern size_t mbrtowc(wchar_t* __restrict __pwc,
                      const char* __restrict __s,
                      size_t __n,
                      mbstate_t* __restrict __p) throw();
extern size_t wcrtomb(char* __restrict __s, wchar_t __wc, mbstate_t* __restrict __ps) throw();
extern size_t __mbrlen(const char* __restrict __s, size_t __n, mbstate_t* __restrict __ps) throw();
extern size_t mbrlen(const char* __restrict __s, size_t __n, mbstate_t* __restrict __ps) throw();
extern wint_t __btowc_alias(int __c) __asm("btowc");
extern __inline __attribute__((__gnu_inline__)) wint_t __attribute__((__leaf__)) btowc(int __c) throw()
{
  return (__builtin_constant_p(__c) && __c >= '\0' && __c <= '\x7f' ? (wint_t)__c : __btowc_alias(__c));
}
extern int __wctob_alias(wint_t __c) __asm("wctob");
extern __inline __attribute__((__gnu_inline__)) int __attribute__((__leaf__)) wctob(wint_t __wc) throw()
{
  return (__builtin_constant_p(__wc) && __wc >= L'\0' && __wc <= L'\x7f' ? (int)__wc : __wctob_alias(__wc));
}
extern __inline __attribute__((__gnu_inline__)) size_t __attribute__((__leaf__))
mbrlen(const char* __restrict __s, size_t __n, mbstate_t* __restrict __ps) throw()
{
  return (__ps != __null ? mbrtowc(__null, __s, __n, __ps) : __mbrlen(__s, __n, __null));
}
extern size_t mbsrtowcs(wchar_t* __restrict __dst,
                        const char** __restrict __src,
                        size_t __len,
                        mbstate_t* __restrict __ps) throw();
extern size_t wcsrtombs(char* __restrict __dst,
                        const wchar_t** __restrict __src,
                        size_t __len,
                        mbstate_t* __restrict __ps) throw();
extern size_t mbsnrtowcs(wchar_t* __restrict __dst,
                         const char** __restrict __src,
                         size_t __nmc,
                         size_t __len,
                         mbstate_t* __restrict __ps) throw();
extern size_t wcsnrtombs(char* __restrict __dst,
                         const wchar_t** __restrict __src,
                         size_t __nwc,
                         size_t __len,
                         mbstate_t* __restrict __ps) throw();
extern int wcwidth(wchar_t __c) throw();
extern int wcswidth(const wchar_t* __s, size_t __n) throw();
extern double wcstod(const wchar_t* __restrict __nptr, wchar_t** __restrict __endptr) throw();
extern float wcstof(const wchar_t* __restrict __nptr, wchar_t** __restrict __endptr) throw();
extern long double wcstold(const wchar_t* __restrict __nptr, wchar_t** __restrict __endptr) throw();
extern _Float32 wcstof32(const wchar_t* __restrict __nptr, wchar_t** __restrict __endptr) throw();
extern _Float64 wcstof64(const wchar_t* __restrict __nptr, wchar_t** __restrict __endptr) throw();
extern _Float128 wcstof128(const wchar_t* __restrict __nptr, wchar_t** __restrict __endptr) throw();
extern _Float32x wcstof32x(const wchar_t* __restrict __nptr, wchar_t** __restrict __endptr) throw();
extern _Float64x wcstof64x(const wchar_t* __restrict __nptr, wchar_t** __restrict __endptr) throw();
extern long int wcstol(const wchar_t* __restrict __nptr, wchar_t** __restrict __endptr, int __base) throw();
extern unsigned long int wcstoul(const wchar_t* __restrict __nptr, wchar_t** __restrict __endptr, int __base) throw();
__extension__ extern long long int wcstoll(const wchar_t* __restrict __nptr,
                                           wchar_t** __restrict __endptr,
                                           int __base) throw();
__extension__ extern unsigned long long int wcstoull(const wchar_t* __restrict __nptr,
                                                     wchar_t** __restrict __endptr,
                                                     int __base) throw();
__extension__ extern long long int wcstoq(const wchar_t* __restrict __nptr,
                                          wchar_t** __restrict __endptr,
                                          int __base) throw();
__extension__ extern unsigned long long int wcstouq(const wchar_t* __restrict __nptr,
                                                    wchar_t** __restrict __endptr,
                                                    int __base) throw();
extern long int wcstol_l(const wchar_t* __restrict __nptr,
                         wchar_t** __restrict __endptr,
                         int __base,
                         locale_t __loc) throw();
extern unsigned long int wcstoul_l(const wchar_t* __restrict __nptr,
                                   wchar_t** __restrict __endptr,
                                   int __base,
                                   locale_t __loc) throw();
__extension__ extern long long int wcstoll_l(const wchar_t* __restrict __nptr,
                                             wchar_t** __restrict __endptr,
                                             int __base,
                                             locale_t __loc) throw();
__extension__ extern unsigned long long int wcstoull_l(const wchar_t* __restrict __nptr,
                                                       wchar_t** __restrict __endptr,
                                                       int __base,
                                                       locale_t __loc) throw();
extern double wcstod_l(const wchar_t* __restrict __nptr, wchar_t** __restrict __endptr, locale_t __loc) throw();
extern float wcstof_l(const wchar_t* __restrict __nptr, wchar_t** __restrict __endptr, locale_t __loc) throw();
extern long double wcstold_l(const wchar_t* __restrict __nptr, wchar_t** __restrict __endptr, locale_t __loc) throw();
extern _Float32 wcstof32_l(const wchar_t* __restrict __nptr, wchar_t** __restrict __endptr, locale_t __loc) throw();
extern _Float64 wcstof64_l(const wchar_t* __restrict __nptr, wchar_t** __restrict __endptr, locale_t __loc) throw();
extern _Float128 wcstof128_l(const wchar_t* __restrict __nptr, wchar_t** __restrict __endptr, locale_t __loc) throw();
extern _Float32x wcstof32x_l(const wchar_t* __restrict __nptr, wchar_t** __restrict __endptr, locale_t __loc) throw();
extern _Float64x wcstof64x_l(const wchar_t* __restrict __nptr, wchar_t** __restrict __endptr, locale_t __loc) throw();
extern wchar_t* wcpcpy(wchar_t* __restrict __dest, const wchar_t* __restrict __src) throw();
extern wchar_t* wcpncpy(wchar_t* __restrict __dest, const wchar_t* __restrict __src, size_t __n) throw();
extern __FILE* open_wmemstream(wchar_t** __bufloc, size_t* __sizeloc) throw();
extern int fwide(__FILE* __fp, int __mode) throw();
extern int fwprintf(__FILE* __restrict __stream, const wchar_t* __restrict __format, ...);
extern int wprintf(const wchar_t* __restrict __format, ...);
extern int swprintf(wchar_t* __restrict __s, size_t __n, const wchar_t* __restrict __format, ...) throw();
extern int vfwprintf(__FILE* __restrict __s, const wchar_t* __restrict __format, __gnuc_va_list __arg);
extern int vwprintf(const wchar_t* __restrict __format, __gnuc_va_list __arg);
extern int vswprintf(wchar_t* __restrict __s,
                     size_t __n,
                     const wchar_t* __restrict __format,
                     __gnuc_va_list __arg) throw();
extern int fwscanf(__FILE* __restrict __stream, const wchar_t* __restrict __format, ...);
extern int wscanf(const wchar_t* __restrict __format, ...);
extern int swscanf(const wchar_t* __restrict __s, const wchar_t* __restrict __format, ...) throw();
extern int fwscanf(__FILE* __restrict __stream, const wchar_t* __restrict __format, ...) __asm__(
    ""
    "__isoc99_fwscanf");
extern int wscanf(const wchar_t* __restrict __format, ...) __asm__(
    ""
    "__isoc99_wscanf");
extern int swscanf(const wchar_t* __restrict __s, const wchar_t* __restrict __format, ...) throw() __asm__(
    ""
    "__isoc99_swscanf");
extern int vfwscanf(__FILE* __restrict __s, const wchar_t* __restrict __format, __gnuc_va_list __arg);
extern int vwscanf(const wchar_t* __restrict __format, __gnuc_va_list __arg);
extern int vswscanf(const wchar_t* __restrict __s, const wchar_t* __restrict __format, __gnuc_va_list __arg) throw();
extern int vfwscanf(__FILE* __restrict __s, const wchar_t* __restrict __format, __gnuc_va_list __arg) __asm__(
    ""
    "__isoc99_vfwscanf");
extern int vwscanf(const wchar_t* __restrict __format, __gnuc_va_list __arg) __asm__(
    ""
    "__isoc99_vwscanf");
extern int
vswscanf(const wchar_t* __restrict __s, const wchar_t* __restrict __format, __gnuc_va_list __arg) throw() __asm__(
    ""
    "__isoc99_vswscanf");
extern wint_t fgetwc(__FILE* __stream);
extern wint_t getwc(__FILE* __stream);
extern wint_t getwchar(void);
extern wint_t fputwc(wchar_t __wc, __FILE* __stream);
extern wint_t putwc(wchar_t __wc, __FILE* __stream);
extern wint_t putwchar(wchar_t __wc);
extern wchar_t* fgetws(wchar_t* __restrict __ws, int __n, __FILE* __restrict __stream);
extern int fputws(const wchar_t* __restrict __ws, __FILE* __restrict __stream);
extern wint_t ungetwc(wint_t __wc, __FILE* __stream);
extern wint_t getwc_unlocked(__FILE* __stream);
extern wint_t getwchar_unlocked(void);
extern wint_t fgetwc_unlocked(__FILE* __stream);
extern wint_t fputwc_unlocked(wchar_t __wc, __FILE* __stream);
extern wint_t putwc_unlocked(wchar_t __wc, __FILE* __stream);
extern wint_t putwchar_unlocked(wchar_t __wc);
extern wchar_t* fgetws_unlocked(wchar_t* __restrict __ws, int __n, __FILE* __restrict __stream);
extern int fputws_unlocked(const wchar_t* __restrict __ws, __FILE* __restrict __stream);
extern size_t wcsftime(wchar_t* __restrict __s,
                       size_t __maxsize,
                       const wchar_t* __restrict __format,
                       const struct tm* __restrict __tp) throw();
extern size_t wcsftime_l(wchar_t* __restrict __s,
                         size_t __maxsize,
                         const wchar_t* __restrict __format,
                         const struct tm* __restrict __tp,
                         locale_t __loc) throw();
extern wchar_t* __wmemcpy_chk(wchar_t* __restrict __s1,
                              const wchar_t* __restrict __s2,
                              size_t __n,
                              size_t __ns1) throw();
extern wchar_t* __wmemcpy_alias(wchar_t* __restrict __s1, const wchar_t* __restrict __s2, size_t __n) throw() __asm__(
    ""
    "wmemcpy");
extern wchar_t*
__wmemcpy_chk_warn(wchar_t* __restrict __s1, const wchar_t* __restrict __s2, size_t __n, size_t __ns1) throw() __asm__(
    ""
    "__wmemcpy_chk")
    __attribute__((__warning__("wmemcpy called with length bigger than size of destination "
                               "buffer")));
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__))
wchar_t* __attribute__((__leaf__)) wmemcpy(wchar_t* __restrict __s1, const wchar_t* __restrict __s2, size_t __n) throw()
{
  if (__builtin_object_size(__s1, 0) != (size_t)-1)
  {
    if (!__builtin_constant_p(__n))
      return __wmemcpy_chk(__s1, __s2, __n, __builtin_object_size(__s1, 0) / sizeof(wchar_t));
    if (__n > __builtin_object_size(__s1, 0) / sizeof(wchar_t))
      return __wmemcpy_chk_warn(__s1, __s2, __n, __builtin_object_size(__s1, 0) / sizeof(wchar_t));
  }
  return __wmemcpy_alias(__s1, __s2, __n);
}
extern wchar_t* __wmemmove_chk(wchar_t* __s1, const wchar_t* __s2, size_t __n, size_t __ns1) throw();
extern wchar_t* __wmemmove_alias(wchar_t* __s1, const wchar_t* __s2, size_t __n) throw() __asm__(
    ""
    "wmemmove");
extern wchar_t* __wmemmove_chk_warn(wchar_t* __s1, const wchar_t* __s2, size_t __n, size_t __ns1) throw() __asm__(
    ""
    "__wmemmove_chk")
    __attribute__((__warning__("wmemmove called with length bigger than size of destination "
                               "buffer")));
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__))
wchar_t* __attribute__((__leaf__)) wmemmove(wchar_t* __s1, const wchar_t* __s2, size_t __n) throw()
{
  if (__builtin_object_size(__s1, 0) != (size_t)-1)
  {
    if (!__builtin_constant_p(__n))
      return __wmemmove_chk(__s1, __s2, __n, __builtin_object_size(__s1, 0) / sizeof(wchar_t));
    if (__n > __builtin_object_size(__s1, 0) / sizeof(wchar_t))
      return __wmemmove_chk_warn(__s1, __s2, __n, __builtin_object_size(__s1, 0) / sizeof(wchar_t));
  }
  return __wmemmove_alias(__s1, __s2, __n);
}
extern wchar_t* __wmempcpy_chk(wchar_t* __restrict __s1,
                               const wchar_t* __restrict __s2,
                               size_t __n,
                               size_t __ns1) throw();
extern wchar_t* __wmempcpy_alias(wchar_t* __restrict __s1, const wchar_t* __restrict __s2, size_t __n) throw() __asm__(
    ""
    "wmempcpy");
extern wchar_t*
__wmempcpy_chk_warn(wchar_t* __restrict __s1, const wchar_t* __restrict __s2, size_t __n, size_t __ns1) throw() __asm__(
    ""
    "__wmempcpy_chk")
    __attribute__((__warning__("wmempcpy called with length bigger than size of destination "
                               "buffer")));
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__))
wchar_t* __attribute__((__leaf__))
wmempcpy(wchar_t* __restrict __s1, const wchar_t* __restrict __s2, size_t __n) throw()
{
  if (__builtin_object_size(__s1, 0) != (size_t)-1)
  {
    if (!__builtin_constant_p(__n))
      return __wmempcpy_chk(__s1, __s2, __n, __builtin_object_size(__s1, 0) / sizeof(wchar_t));
    if (__n > __builtin_object_size(__s1, 0) / sizeof(wchar_t))
      return __wmempcpy_chk_warn(__s1, __s2, __n, __builtin_object_size(__s1, 0) / sizeof(wchar_t));
  }
  return __wmempcpy_alias(__s1, __s2, __n);
}
extern wchar_t* __wmemset_chk(wchar_t* __s, wchar_t __c, size_t __n, size_t __ns) throw();
extern wchar_t* __wmemset_alias(wchar_t* __s, wchar_t __c, size_t __n) throw() __asm__(
    ""
    "wmemset");
extern wchar_t* __wmemset_chk_warn(wchar_t* __s, wchar_t __c, size_t __n, size_t __ns) throw() __asm__(
    ""
    "__wmemset_chk")
    __attribute__((__warning__("wmemset called with length bigger than size of destination "
                               "buffer")));
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__))
wchar_t* __attribute__((__leaf__)) wmemset(wchar_t* __s, wchar_t __c, size_t __n) throw()
{
  if (__builtin_object_size(__s, 0) != (size_t)-1)
  {
    if (!__builtin_constant_p(__n))
      return __wmemset_chk(__s, __c, __n, __builtin_object_size(__s, 0) / sizeof(wchar_t));
    if (__n > __builtin_object_size(__s, 0) / sizeof(wchar_t))
      return __wmemset_chk_warn(__s, __c, __n, __builtin_object_size(__s, 0) / sizeof(wchar_t));
  }
  return __wmemset_alias(__s, __c, __n);
}
extern wchar_t* __wcscpy_chk(wchar_t* __restrict __dest, const wchar_t* __restrict __src, size_t __n) throw();
extern wchar_t* __wcscpy_alias(wchar_t* __restrict __dest, const wchar_t* __restrict __src) throw() __asm__(
    ""
    "wcscpy");
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__))
wchar_t* __attribute__((__leaf__)) wcscpy(wchar_t* __restrict __dest, const wchar_t* __restrict __src) throw()
{
  if (__builtin_object_size(__dest, 2 > 1) != (size_t)-1)
    return __wcscpy_chk(__dest, __src, __builtin_object_size(__dest, 2 > 1) / sizeof(wchar_t));
  return __wcscpy_alias(__dest, __src);
}
extern wchar_t* __wcpcpy_chk(wchar_t* __restrict __dest, const wchar_t* __restrict __src, size_t __destlen) throw();
extern wchar_t* __wcpcpy_alias(wchar_t* __restrict __dest, const wchar_t* __restrict __src) throw() __asm__(
    ""
    "wcpcpy");
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__))
wchar_t* __attribute__((__leaf__)) wcpcpy(wchar_t* __restrict __dest, const wchar_t* __restrict __src) throw()
{
  if (__builtin_object_size(__dest, 2 > 1) != (size_t)-1)
    return __wcpcpy_chk(__dest, __src, __builtin_object_size(__dest, 2 > 1) / sizeof(wchar_t));
  return __wcpcpy_alias(__dest, __src);
}
extern wchar_t* __wcsncpy_chk(wchar_t* __restrict __dest,
                              const wchar_t* __restrict __src,
                              size_t __n,
                              size_t __destlen) throw();
extern wchar_t*
__wcsncpy_alias(wchar_t* __restrict __dest, const wchar_t* __restrict __src, size_t __n) throw() __asm__(
    ""
    "wcsncpy");
extern wchar_t*
__wcsncpy_chk_warn(wchar_t* __restrict __dest, const wchar_t* __restrict __src, size_t __n, size_t __destlen) throw() __asm__(
    ""
    "__wcsncpy_chk")
    __attribute__((__warning__("wcsncpy called with length bigger than size of destination "
                               "buffer")));
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__))
wchar_t* __attribute__((__leaf__))
wcsncpy(wchar_t* __restrict __dest, const wchar_t* __restrict __src, size_t __n) throw()
{
  if (__builtin_object_size(__dest, 2 > 1) != (size_t)-1)
  {
    if (!__builtin_constant_p(__n))
      return __wcsncpy_chk(__dest, __src, __n, __builtin_object_size(__dest, 2 > 1) / sizeof(wchar_t));
    if (__n > __builtin_object_size(__dest, 2 > 1) / sizeof(wchar_t))
      return __wcsncpy_chk_warn(__dest, __src, __n, __builtin_object_size(__dest, 2 > 1) / sizeof(wchar_t));
  }
  return __wcsncpy_alias(__dest, __src, __n);
}
extern wchar_t* __wcpncpy_chk(wchar_t* __restrict __dest,
                              const wchar_t* __restrict __src,
                              size_t __n,
                              size_t __destlen) throw();
extern wchar_t*
__wcpncpy_alias(wchar_t* __restrict __dest, const wchar_t* __restrict __src, size_t __n) throw() __asm__(
    ""
    "wcpncpy");
extern wchar_t*
__wcpncpy_chk_warn(wchar_t* __restrict __dest, const wchar_t* __restrict __src, size_t __n, size_t __destlen) throw() __asm__(
    ""
    "__wcpncpy_chk")
    __attribute__((__warning__("wcpncpy called with length bigger than size of destination "
                               "buffer")));
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__))
wchar_t* __attribute__((__leaf__))
wcpncpy(wchar_t* __restrict __dest, const wchar_t* __restrict __src, size_t __n) throw()
{
  if (__builtin_object_size(__dest, 2 > 1) != (size_t)-1)
  {
    if (!__builtin_constant_p(__n))
      return __wcpncpy_chk(__dest, __src, __n, __builtin_object_size(__dest, 2 > 1) / sizeof(wchar_t));
    if (__n > __builtin_object_size(__dest, 2 > 1) / sizeof(wchar_t))
      return __wcpncpy_chk_warn(__dest, __src, __n, __builtin_object_size(__dest, 2 > 1) / sizeof(wchar_t));
  }
  return __wcpncpy_alias(__dest, __src, __n);
}
extern wchar_t* __wcscat_chk(wchar_t* __restrict __dest, const wchar_t* __restrict __src, size_t __destlen) throw();
extern wchar_t* __wcscat_alias(wchar_t* __restrict __dest, const wchar_t* __restrict __src) throw() __asm__(
    ""
    "wcscat");
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__))
wchar_t* __attribute__((__leaf__)) wcscat(wchar_t* __restrict __dest, const wchar_t* __restrict __src) throw()
{
  if (__builtin_object_size(__dest, 2 > 1) != (size_t)-1)
    return __wcscat_chk(__dest, __src, __builtin_object_size(__dest, 2 > 1) / sizeof(wchar_t));
  return __wcscat_alias(__dest, __src);
}
extern wchar_t* __wcsncat_chk(wchar_t* __restrict __dest,
                              const wchar_t* __restrict __src,
                              size_t __n,
                              size_t __destlen) throw();
extern wchar_t*
__wcsncat_alias(wchar_t* __restrict __dest, const wchar_t* __restrict __src, size_t __n) throw() __asm__(
    ""
    "wcsncat");
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__))
wchar_t* __attribute__((__leaf__))
wcsncat(wchar_t* __restrict __dest, const wchar_t* __restrict __src, size_t __n) throw()
{
  if (__builtin_object_size(__dest, 2 > 1) != (size_t)-1)
    return __wcsncat_chk(__dest, __src, __n, __builtin_object_size(__dest, 2 > 1) / sizeof(wchar_t));
  return __wcsncat_alias(__dest, __src, __n);
}
extern int __swprintf_chk(wchar_t* __restrict __s,
                          size_t __n,
                          int __flag,
                          size_t __s_len,
                          const wchar_t* __restrict __format,
                          ...) throw();
extern int __swprintf_alias(wchar_t* __restrict __s, size_t __n, const wchar_t* __restrict __fmt, ...) throw() __asm__(
    ""
    "swprintf");
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__)) int
    __attribute__((__leaf__))
    swprintf(wchar_t* __restrict __s, size_t __n, const wchar_t* __restrict __fmt, ...) throw()
{
  if (__builtin_object_size(__s, 2 > 1) != (size_t)-1 || 2 > 1)
    return __swprintf_chk(
        __s, __n, 2 - 1, __builtin_object_size(__s, 2 > 1) / sizeof(wchar_t), __fmt, __builtin_va_arg_pack());
  return __swprintf_alias(__s, __n, __fmt, __builtin_va_arg_pack());
}
extern int __vswprintf_chk(wchar_t* __restrict __s,
                           size_t __n,
                           int __flag,
                           size_t __s_len,
                           const wchar_t* __restrict __format,
                           __gnuc_va_list __arg) throw();
extern int
__vswprintf_alias(wchar_t* __restrict __s, size_t __n, const wchar_t* __restrict __fmt, __gnuc_va_list __ap) throw() __asm__(
    ""
    "vswprintf");
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__)) int
    __attribute__((__leaf__))
    vswprintf(wchar_t* __restrict __s, size_t __n, const wchar_t* __restrict __fmt, __gnuc_va_list __ap) throw()
{
  if (__builtin_object_size(__s, 2 > 1) != (size_t)-1 || 2 > 1)
    return __vswprintf_chk(__s, __n, 2 - 1, __builtin_object_size(__s, 2 > 1) / sizeof(wchar_t), __fmt, __ap);
  return __vswprintf_alias(__s, __n, __fmt, __ap);
}
extern int __fwprintf_chk(__FILE* __restrict __stream, int __flag, const wchar_t* __restrict __format, ...);
extern int __wprintf_chk(int __flag, const wchar_t* __restrict __format, ...);
extern int __vfwprintf_chk(__FILE* __restrict __stream,
                           int __flag,
                           const wchar_t* __restrict __format,
                           __gnuc_va_list __ap);
extern int __vwprintf_chk(int __flag, const wchar_t* __restrict __format, __gnuc_va_list __ap);
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__)) int
wprintf(const wchar_t* __restrict __fmt, ...)
{
  return __wprintf_chk(2 - 1, __fmt, __builtin_va_arg_pack());
}
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__)) int
fwprintf(__FILE* __restrict __stream, const wchar_t* __restrict __fmt, ...)
{
  return __fwprintf_chk(__stream, 2 - 1, __fmt, __builtin_va_arg_pack());
}
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__)) int
vwprintf(const wchar_t* __restrict __fmt, __gnuc_va_list __ap)
{
  return __vwprintf_chk(2 - 1, __fmt, __ap);
}
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__)) int
vfwprintf(__FILE* __restrict __stream, const wchar_t* __restrict __fmt, __gnuc_va_list __ap)
{
  return __vfwprintf_chk(__stream, 2 - 1, __fmt, __ap);
}
extern wchar_t* __fgetws_chk(wchar_t* __restrict __s, size_t __size, int __n, __FILE* __restrict __stream)
    __attribute__((__warn_unused_result__));
extern wchar_t* __fgetws_alias(wchar_t* __restrict __s, int __n, __FILE* __restrict __stream) __asm__(
    ""
    "fgetws") __attribute__((__warn_unused_result__));
extern wchar_t* __fgetws_chk_warn(wchar_t* __restrict __s, size_t __size, int __n, __FILE* __restrict __stream) __asm__(
    ""
    "__fgetws_chk")
    __attribute__((__warn_unused_result__)) __attribute__((__warning__("fgetws called with bigger size than length "
                                                                       "of destination buffer")));
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__))
__attribute__((__warn_unused_result__)) wchar_t*
fgetws(wchar_t* __restrict __s, int __n, __FILE* __restrict __stream)
{
  if (__builtin_object_size(__s, 2 > 1) != (size_t)-1)
  {
    if (!__builtin_constant_p(__n) || __n <= 0)
      return __fgetws_chk(__s, __builtin_object_size(__s, 2 > 1) / sizeof(wchar_t), __n, __stream);
    if ((size_t)__n > __builtin_object_size(__s, 2 > 1) / sizeof(wchar_t))
      return __fgetws_chk_warn(__s, __builtin_object_size(__s, 2 > 1) / sizeof(wchar_t), __n, __stream);
  }
  return __fgetws_alias(__s, __n, __stream);
}
extern wchar_t* __fgetws_unlocked_chk(wchar_t* __restrict __s, size_t __size, int __n, __FILE* __restrict __stream)
    __attribute__((__warn_unused_result__));
extern wchar_t* __fgetws_unlocked_alias(wchar_t* __restrict __s, int __n, __FILE* __restrict __stream) __asm__(
    ""
    "fgetws_unlocked") __attribute__((__warn_unused_result__));
extern wchar_t*
__fgetws_unlocked_chk_warn(wchar_t* __restrict __s, size_t __size, int __n, __FILE* __restrict __stream) __asm__(
    ""
    "__fgetws_unlocked_chk")
    __attribute__((__warn_unused_result__))
    __attribute__((__warning__("fgetws_unlocked called with bigger size than length "
                               "of destination buffer")));
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__))
__attribute__((__warn_unused_result__)) wchar_t*
fgetws_unlocked(wchar_t* __restrict __s, int __n, __FILE* __restrict __stream)
{
  if (__builtin_object_size(__s, 2 > 1) != (size_t)-1)
  {
    if (!__builtin_constant_p(__n) || __n <= 0)
      return __fgetws_unlocked_chk(__s, __builtin_object_size(__s, 2 > 1) / sizeof(wchar_t), __n, __stream);
    if ((size_t)__n > __builtin_object_size(__s, 2 > 1) / sizeof(wchar_t))
      return __fgetws_unlocked_chk_warn(__s, __builtin_object_size(__s, 2 > 1) / sizeof(wchar_t), __n, __stream);
  }
  return __fgetws_unlocked_alias(__s, __n, __stream);
}
extern size_t __wcrtomb_chk(char* __restrict __s, wchar_t __wchar, mbstate_t* __restrict __p, size_t __buflen) throw()
    __attribute__((__warn_unused_result__));
extern size_t __wcrtomb_alias(char* __restrict __s, wchar_t __wchar, mbstate_t* __restrict __ps) throw() __asm__(
    ""
    "wcrtomb") __attribute__((__warn_unused_result__));
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__))
__attribute__((__warn_unused_result__)) size_t __attribute__((__leaf__))
wcrtomb(char* __restrict __s, wchar_t __wchar, mbstate_t* __restrict __ps) throw()
{
  if (__builtin_object_size(__s, 2 > 1) != (size_t)-1 && 16 > __builtin_object_size(__s, 2 > 1))
    return __wcrtomb_chk(__s, __wchar, __ps, __builtin_object_size(__s, 2 > 1));
  return __wcrtomb_alias(__s, __wchar, __ps);
}
extern size_t __mbsrtowcs_chk(wchar_t* __restrict __dst,
                              const char** __restrict __src,
                              size_t __len,
                              mbstate_t* __restrict __ps,
                              size_t __dstlen) throw();
extern size_t
__mbsrtowcs_alias(wchar_t* __restrict __dst, const char** __restrict __src, size_t __len, mbstate_t* __restrict __ps) throw() __asm__(
    ""
    "mbsrtowcs");
extern size_t
__mbsrtowcs_chk_warn(wchar_t* __restrict __dst, const char** __restrict __src, size_t __len, mbstate_t* __restrict __ps, size_t __dstlen) throw() __asm__(
    ""
    "__mbsrtowcs_chk")
    __attribute__((__warning__("mbsrtowcs called with dst buffer smaller than len "
                               "* sizeof (wchar_t)")));
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__))
size_t __attribute__((__leaf__))
mbsrtowcs(wchar_t* __restrict __dst, const char** __restrict __src, size_t __len, mbstate_t* __restrict __ps) throw()
{
  if (__builtin_object_size(__dst, 2 > 1) != (size_t)-1)
  {
    if (!__builtin_constant_p(__len))
      return __mbsrtowcs_chk(__dst, __src, __len, __ps, __builtin_object_size(__dst, 2 > 1) / sizeof(wchar_t));
    if (__len > __builtin_object_size(__dst, 2 > 1) / sizeof(wchar_t))
      return __mbsrtowcs_chk_warn(__dst, __src, __len, __ps, __builtin_object_size(__dst, 2 > 1) / sizeof(wchar_t));
  }
  return __mbsrtowcs_alias(__dst, __src, __len, __ps);
}
extern size_t __wcsrtombs_chk(char* __restrict __dst,
                              const wchar_t** __restrict __src,
                              size_t __len,
                              mbstate_t* __restrict __ps,
                              size_t __dstlen) throw();
extern size_t
__wcsrtombs_alias(char* __restrict __dst, const wchar_t** __restrict __src, size_t __len, mbstate_t* __restrict __ps) throw() __asm__(
    ""
    "wcsrtombs");
extern size_t
__wcsrtombs_chk_warn(char* __restrict __dst, const wchar_t** __restrict __src, size_t __len, mbstate_t* __restrict __ps, size_t __dstlen) throw() __asm__(
    ""
    "__wcsrtombs_chk") __attribute__((__warning__("wcsrtombs called with dst buffer smaller than len")));
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__))
size_t __attribute__((__leaf__))
wcsrtombs(char* __restrict __dst, const wchar_t** __restrict __src, size_t __len, mbstate_t* __restrict __ps) throw()
{
  if (__builtin_object_size(__dst, 2 > 1) != (size_t)-1)
  {
    if (!__builtin_constant_p(__len))
      return __wcsrtombs_chk(__dst, __src, __len, __ps, __builtin_object_size(__dst, 2 > 1));
    if (__len > __builtin_object_size(__dst, 2 > 1))
      return __wcsrtombs_chk_warn(__dst, __src, __len, __ps, __builtin_object_size(__dst, 2 > 1));
  }
  return __wcsrtombs_alias(__dst, __src, __len, __ps);
}
extern size_t __mbsnrtowcs_chk(wchar_t* __restrict __dst,
                               const char** __restrict __src,
                               size_t __nmc,
                               size_t __len,
                               mbstate_t* __restrict __ps,
                               size_t __dstlen) throw();
extern size_t
__mbsnrtowcs_alias(wchar_t* __restrict __dst, const char** __restrict __src, size_t __nmc, size_t __len, mbstate_t* __restrict __ps) throw() __asm__(
    ""
    "mbsnrtowcs");
extern size_t
__mbsnrtowcs_chk_warn(wchar_t* __restrict __dst, const char** __restrict __src, size_t __nmc, size_t __len, mbstate_t* __restrict __ps, size_t __dstlen) throw() __asm__(
    ""
    "__mbsnrtowcs_chk")
    __attribute__((__warning__("mbsnrtowcs called with dst buffer smaller than len "
                               "* sizeof (wchar_t)")));
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__))
size_t __attribute__((__leaf__)) mbsnrtowcs(wchar_t* __restrict __dst,
                                            const char** __restrict __src,
                                            size_t __nmc,
                                            size_t __len,
                                            mbstate_t* __restrict __ps) throw()
{
  if (__builtin_object_size(__dst, 2 > 1) != (size_t)-1)
  {
    if (!__builtin_constant_p(__len))
      return __mbsnrtowcs_chk(__dst, __src, __nmc, __len, __ps, __builtin_object_size(__dst, 2 > 1) / sizeof(wchar_t));
    if (__len > __builtin_object_size(__dst, 2 > 1) / sizeof(wchar_t))
      return __mbsnrtowcs_chk_warn(
          __dst, __src, __nmc, __len, __ps, __builtin_object_size(__dst, 2 > 1) / sizeof(wchar_t));
  }
  return __mbsnrtowcs_alias(__dst, __src, __nmc, __len, __ps);
}
extern size_t __wcsnrtombs_chk(char* __restrict __dst,
                               const wchar_t** __restrict __src,
                               size_t __nwc,
                               size_t __len,
                               mbstate_t* __restrict __ps,
                               size_t __dstlen) throw();
extern size_t
__wcsnrtombs_alias(char* __restrict __dst, const wchar_t** __restrict __src, size_t __nwc, size_t __len, mbstate_t* __restrict __ps) throw() __asm__(
    ""
    "wcsnrtombs");
extern size_t
__wcsnrtombs_chk_warn(char* __restrict __dst, const wchar_t** __restrict __src, size_t __nwc, size_t __len, mbstate_t* __restrict __ps, size_t __dstlen) throw() __asm__(
    ""
    "__wcsnrtombs_chk") __attribute__((__warning__("wcsnrtombs called with dst buffer smaller than len")));
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__))
size_t __attribute__((__leaf__)) wcsnrtombs(char* __restrict __dst,
                                            const wchar_t** __restrict __src,
                                            size_t __nwc,
                                            size_t __len,
                                            mbstate_t* __restrict __ps) throw()
{
  if (__builtin_object_size(__dst, 2 > 1) != (size_t)-1)
  {
    if (!__builtin_constant_p(__len))
      return __wcsnrtombs_chk(__dst, __src, __nwc, __len, __ps, __builtin_object_size(__dst, 2 > 1));
    if (__len > __builtin_object_size(__dst, 2 > 1))
      return __wcsnrtombs_chk_warn(__dst, __src, __nwc, __len, __ps, __builtin_object_size(__dst, 2 > 1));
  }
  return __wcsnrtombs_alias(__dst, __src, __nwc, __len, __ps);
}
}
namespace std
{
using ::mbstate_t;
}
extern "C++" {
namespace std __attribute__((__visibility__("default")))
{
  using ::btowc;
  using ::fgetwc;
  using ::fgetws;
  using ::fputwc;
  using ::fputws;
  using ::fwide;
  using ::fwprintf;
  using ::fwscanf;
  using ::getwc;
  using ::getwchar;
  using ::mbrlen;
  using ::mbrtowc;
  using ::mbsinit;
  using ::mbsrtowcs;
  using ::putwc;
  using ::putwchar;
  using ::swprintf;
  using ::swscanf;
  using ::ungetwc;
  using ::vfwprintf;
  using ::vfwscanf;
  using ::vswprintf;
  using ::vswscanf;
  using ::vwprintf;
  using ::vwscanf;
  using ::wcrtomb;
  using ::wcscat;
  using ::wcschr;
  using ::wcscmp;
  using ::wcscoll;
  using ::wcscpy;
  using ::wcscspn;
  using ::wcsftime;
  using ::wcslen;
  using ::wcsncat;
  using ::wcsncmp;
  using ::wcsncpy;
  using ::wcspbrk;
  using ::wcsrchr;
  using ::wcsrtombs;
  using ::wcsspn;
  using ::wcsstr;
  using ::wcstod;
  using ::wcstof;
  using ::wcstok;
  using ::wcstol;
  using ::wcstoul;
  using ::wcsxfrm;
  using ::wctob;
  using ::wint_t;
  using ::wmemchr;
  using ::wmemcmp;
  using ::wmemcpy;
  using ::wmemmove;
  using ::wmemset;
  using ::wprintf;
  using ::wscanf;
}  // namespace )
}
namespace __gnu_cxx
{
using ::wcstold;
using ::wcstoll;
using ::wcstoull;
}  // namespace __gnu_cxx
namespace std
{
using ::__gnu_cxx::wcstold;
using ::__gnu_cxx::wcstoll;
using ::__gnu_cxx::wcstoull;
}  // namespace std
namespace std
{
using std::vfwscanf;
using std::vswscanf;
using std::vwscanf;
using std::wcstof;
using std::wcstold;
using std::wcstoll;
using std::wcstoull;
}  // namespace std
namespace std __attribute__((__visibility__("default")))
{
  typedef long streamoff;
  typedef ptrdiff_t streamsize;
  template <typename _StateT>
  class fpos
  {
  private:
    streamoff _M_off;
    _StateT _M_state;

  public:
    fpos() : _M_off(0), _M_state() {}
    fpos(streamoff __off) : _M_off(__off), _M_state() {}
    fpos(const fpos&) = default;
    fpos& operator=(const fpos&) = default;
    ~fpos() = default;
    operator streamoff() const { return _M_off; }
    void state(_StateT __st) { _M_state = __st; }
    _StateT state() const { return _M_state; }
    fpos& operator+=(streamoff __off)
    {
      _M_off += __off;
      return *this;
    }
    fpos& operator-=(streamoff __off)
    {
      _M_off -= __off;
      return *this;
    }
    fpos operator+(streamoff __off) const
    {
      fpos __pos(*this);
      __pos += __off;
      return __pos;
    }
    fpos operator-(streamoff __off) const
    {
      fpos __pos(*this);
      __pos -= __off;
      return __pos;
    }
    streamoff operator-(const fpos& __other) const { return _M_off - __other._M_off; }
  };
  template <typename _StateT>
  inline bool operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
  {
    return streamoff(__lhs) == streamoff(__rhs);
  }
  template <typename _StateT>
  inline bool operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
  {
    return streamoff(__lhs) != streamoff(__rhs);
  }
  typedef fpos<mbstate_t> streampos;
  typedef fpos<mbstate_t> wstreampos;
  typedef fpos<mbstate_t> u16streampos;
  typedef fpos<mbstate_t> u32streampos;
}  // namespace )
namespace __gnu_cxx __attribute__((__visibility__("default")))
{
  template <typename _CharT>
  struct _Char_types
  {
    typedef unsigned long int_type;
    typedef std::streampos pos_type;
    typedef std::streamoff off_type;
    typedef std::mbstate_t state_type;
  };
  template <typename _CharT>
  struct char_traits
  {
    typedef _CharT char_type;
    typedef typename _Char_types<_CharT>::int_type int_type;
    typedef typename _Char_types<_CharT>::pos_type pos_type;
    typedef typename _Char_types<_CharT>::off_type off_type;
    typedef typename _Char_types<_CharT>::state_type state_type;
    static constexpr void assign(char_type& __c1, const char_type& __c2) { __c1 = __c2; }
    static constexpr bool eq(const char_type& __c1, const char_type& __c2) { return __c1 == __c2; }
    static constexpr bool lt(const char_type& __c1, const char_type& __c2) { return __c1 < __c2; }
    static constexpr int compare(const char_type* __s1, const char_type* __s2, std::size_t __n);
    static constexpr std::size_t length(const char_type* __s);
    static constexpr const char_type* find(const char_type* __s, std::size_t __n, const char_type& __a);
    static char_type* move(char_type* __s1, const char_type* __s2, std::size_t __n);
    static char_type* copy(char_type* __s1, const char_type* __s2, std::size_t __n);
    static char_type* assign(char_type* __s, std::size_t __n, char_type __a);
    static constexpr char_type to_char_type(const int_type& __c) { return static_cast<char_type>(__c); }
    static constexpr int_type to_int_type(const char_type& __c) { return static_cast<int_type>(__c); }
    static constexpr bool eq_int_type(const int_type& __c1, const int_type& __c2) { return __c1 == __c2; }
    static constexpr int_type eof() { return static_cast<int_type>(-1); }
    static constexpr int_type not_eof(const int_type& __c)
    {
      return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type());
    }
  };
  template <typename _CharT>
  constexpr int char_traits<_CharT>::compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
  {
    for (std::size_t __i = 0; __i < __n; ++__i)
      if (lt(__s1[__i], __s2[__i]))
        return -1;
      else if (lt(__s2[__i], __s1[__i]))
        return 1;
    return 0;
  }
  template <typename _CharT>
  constexpr std::size_t char_traits<_CharT>::length(const char_type* __p)
  {
    std::size_t __i = 0;
    while (!eq(__p[__i], char_type()))
      ++__i;
    return __i;
  }
  template <typename _CharT>
  constexpr const typename char_traits<_CharT>::char_type* char_traits<_CharT>::find(
      const char_type* __s, std::size_t __n, const char_type& __a)
  {
    for (std::size_t __i = 0; __i < __n; ++__i)
      if (eq(__s[__i], __a))
        return __s + __i;
    return 0;
  }
  template <typename _CharT>
  typename char_traits<_CharT>::char_type* char_traits<_CharT>::move(
      char_type * __s1, const char_type* __s2, std::size_t __n)
  {
    if (__n == 0)
      return __s1;
    return static_cast<_CharT*>(__builtin_memmove(__s1, __s2, __n * sizeof(char_type)));
  }
  template <typename _CharT>
  typename char_traits<_CharT>::char_type* char_traits<_CharT>::copy(
      char_type * __s1, const char_type* __s2, std::size_t __n)
  {
    std::copy(__s2, __s2 + __n, __s1);
    return __s1;
  }
  template <typename _CharT>
  typename char_traits<_CharT>::char_type* char_traits<_CharT>::assign(char_type * __s, std::size_t __n, char_type __a)
  {
    std::fill_n(__s, __n, __a);
    return __s;
  }
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _CharT>
  static inline __attribute__((__always_inline__)) constexpr bool __constant_string_p(const _CharT* __s)
  {
    (void)__s;
    return __builtin_is_constant_evaluated();
  }
  template <typename _CharT>
  static inline __attribute__((__always_inline__)) constexpr bool __constant_char_array_p(const _CharT* __a, size_t __n)
  {
    (void)__a;
    (void)__n;
    return __builtin_is_constant_evaluated();
  }
  template <class _CharT>
  struct char_traits : public __gnu_cxx::char_traits<_CharT>
  {
  };
  template <>
  struct char_traits<char>
  {
    typedef char char_type;
    typedef int int_type;
    typedef streampos pos_type;
    typedef streamoff off_type;
    typedef mbstate_t state_type;
    static constexpr void assign(char_type& __c1, const char_type& __c2) noexcept { __c1 = __c2; }
    static constexpr bool eq(const char_type& __c1, const char_type& __c2) noexcept { return __c1 == __c2; }
    static constexpr bool lt(const char_type& __c1, const char_type& __c2) noexcept
    {
      return (static_cast<unsigned char>(__c1) < static_cast<unsigned char>(__c2));
    }
    static constexpr int compare(const char_type* __s1, const char_type* __s2, size_t __n)
    {
      if (__n == 0)
        return 0;
      if (__builtin_constant_p(__n) && __constant_char_array_p(__s1, __n) && __constant_char_array_p(__s2, __n))
      {
        for (size_t __i = 0; __i < __n; ++__i)
          if (lt(__s1[__i], __s2[__i]))
            return -1;
          else if (lt(__s2[__i], __s1[__i]))
            return 1;
        return 0;
      }
      return __builtin_memcmp(__s1, __s2, __n);
    }
    static constexpr size_t length(const char_type* __s)
    {
      if (__constant_string_p(__s))
        return __gnu_cxx::char_traits<char_type>::length(__s);
      return __builtin_strlen(__s);
    }
    static constexpr const char_type* find(const char_type* __s, size_t __n, const char_type& __a)
    {
      if (__n == 0)
        return 0;
      if (__builtin_constant_p(__n) && __builtin_constant_p(__a) && __constant_char_array_p(__s, __n))
        return __gnu_cxx::char_traits<char_type>::find(__s, __n, __a);
      return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n));
    }
    static char_type* move(char_type* __s1, const char_type* __s2, size_t __n)
    {
      if (__n == 0)
        return __s1;
      return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n));
    }
    static char_type* copy(char_type* __s1, const char_type* __s2, size_t __n)
    {
      if (__n == 0)
        return __s1;
      return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
    }
    static char_type* assign(char_type* __s, size_t __n, char_type __a)
    {
      if (__n == 0)
        return __s;
      return static_cast<char_type*>(__builtin_memset(__s, __a, __n));
    }
    static constexpr char_type to_char_type(const int_type& __c) noexcept { return static_cast<char_type>(__c); }
    static constexpr int_type to_int_type(const char_type& __c) noexcept
    {
      return static_cast<int_type>(static_cast<unsigned char>(__c));
    }
    static constexpr bool eq_int_type(const int_type& __c1, const int_type& __c2) noexcept { return __c1 == __c2; }
    static constexpr int_type eof() noexcept { return static_cast<int_type>(-1); }
    static constexpr int_type not_eof(const int_type& __c) noexcept { return (__c == eof()) ? 0 : __c; }
  };
  template <>
  struct char_traits<wchar_t>
  {
    typedef wchar_t char_type;
    typedef wint_t int_type;
    typedef streamoff off_type;
    typedef wstreampos pos_type;
    typedef mbstate_t state_type;
    static constexpr void assign(char_type& __c1, const char_type& __c2) noexcept { __c1 = __c2; }
    static constexpr bool eq(const char_type& __c1, const char_type& __c2) noexcept { return __c1 == __c2; }
    static constexpr bool lt(const char_type& __c1, const char_type& __c2) noexcept { return __c1 < __c2; }
    static constexpr int compare(const char_type* __s1, const char_type* __s2, size_t __n)
    {
      if (__n == 0)
        return 0;
      if (__builtin_constant_p(__n) && __constant_char_array_p(__s1, __n) && __constant_char_array_p(__s2, __n))
        return __gnu_cxx::char_traits<char_type>::compare(__s1, __s2, __n);
      return wmemcmp(__s1, __s2, __n);
    }
    static constexpr size_t length(const char_type* __s)
    {
      if (__constant_string_p(__s))
        return __gnu_cxx::char_traits<char_type>::length(__s);
      return wcslen(__s);
    }
    static constexpr const char_type* find(const char_type* __s, size_t __n, const char_type& __a)
    {
      if (__n == 0)
        return 0;
      if (__builtin_constant_p(__n) && __builtin_constant_p(__a) && __constant_char_array_p(__s, __n))
        return __gnu_cxx::char_traits<char_type>::find(__s, __n, __a);
      return wmemchr(__s, __a, __n);
    }
    static char_type* move(char_type* __s1, const char_type* __s2, size_t __n)
    {
      if (__n == 0)
        return __s1;
      return wmemmove(__s1, __s2, __n);
    }
    static char_type* copy(char_type* __s1, const char_type* __s2, size_t __n)
    {
      if (__n == 0)
        return __s1;
      return wmemcpy(__s1, __s2, __n);
    }
    static char_type* assign(char_type* __s, size_t __n, char_type __a)
    {
      if (__n == 0)
        return __s;
      return wmemset(__s, __a, __n);
    }
    static constexpr char_type to_char_type(const int_type& __c) noexcept { return char_type(__c); }
    static constexpr int_type to_int_type(const char_type& __c) noexcept { return int_type(__c); }
    static constexpr bool eq_int_type(const int_type& __c1, const int_type& __c2) noexcept { return __c1 == __c2; }
    static constexpr int_type eof() noexcept { return static_cast<int_type>((0xffffffffu)); }
    static constexpr int_type not_eof(const int_type& __c) noexcept { return eq_int_type(__c, eof()) ? 0 : __c; }
  };
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <>
  struct char_traits<char16_t>
  {
    typedef char16_t char_type;
    typedef uint_least16_t int_type;
    typedef streamoff off_type;
    typedef u16streampos pos_type;
    typedef mbstate_t state_type;
    static constexpr void assign(char_type& __c1, const char_type& __c2) noexcept { __c1 = __c2; }
    static constexpr bool eq(const char_type& __c1, const char_type& __c2) noexcept { return __c1 == __c2; }
    static constexpr bool lt(const char_type& __c1, const char_type& __c2) noexcept { return __c1 < __c2; }
    static constexpr int compare(const char_type* __s1, const char_type* __s2, size_t __n)
    {
      for (size_t __i = 0; __i < __n; ++__i)
        if (lt(__s1[__i], __s2[__i]))
          return -1;
        else if (lt(__s2[__i], __s1[__i]))
          return 1;
      return 0;
    }
    static constexpr size_t length(const char_type* __s)
    {
      size_t __i = 0;
      while (!eq(__s[__i], char_type()))
        ++__i;
      return __i;
    }
    static constexpr const char_type* find(const char_type* __s, size_t __n, const char_type& __a)
    {
      for (size_t __i = 0; __i < __n; ++__i)
        if (eq(__s[__i], __a))
          return __s + __i;
      return 0;
    }
    static char_type* move(char_type* __s1, const char_type* __s2, size_t __n)
    {
      if (__n == 0)
        return __s1;
      return (static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
    }
    static char_type* copy(char_type* __s1, const char_type* __s2, size_t __n)
    {
      if (__n == 0)
        return __s1;
      return (static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
    }
    static char_type* assign(char_type* __s, size_t __n, char_type __a)
    {
      for (size_t __i = 0; __i < __n; ++__i)
        assign(__s[__i], __a);
      return __s;
    }
    static constexpr char_type to_char_type(const int_type& __c) noexcept { return char_type(__c); }
    static constexpr int_type to_int_type(const char_type& __c) noexcept
    {
      return __c == eof() ? int_type(0xfffd) : int_type(__c);
    }
    static constexpr bool eq_int_type(const int_type& __c1, const int_type& __c2) noexcept { return __c1 == __c2; }
    static constexpr int_type eof() noexcept { return static_cast<int_type>(-1); }
    static constexpr int_type not_eof(const int_type& __c) noexcept { return eq_int_type(__c, eof()) ? 0 : __c; }
  };
  template <>
  struct char_traits<char32_t>
  {
    typedef char32_t char_type;
    typedef uint_least32_t int_type;
    typedef streamoff off_type;
    typedef u32streampos pos_type;
    typedef mbstate_t state_type;
    static constexpr void assign(char_type& __c1, const char_type& __c2) noexcept { __c1 = __c2; }
    static constexpr bool eq(const char_type& __c1, const char_type& __c2) noexcept { return __c1 == __c2; }
    static constexpr bool lt(const char_type& __c1, const char_type& __c2) noexcept { return __c1 < __c2; }
    static constexpr int compare(const char_type* __s1, const char_type* __s2, size_t __n)
    {
      for (size_t __i = 0; __i < __n; ++__i)
        if (lt(__s1[__i], __s2[__i]))
          return -1;
        else if (lt(__s2[__i], __s1[__i]))
          return 1;
      return 0;
    }
    static constexpr size_t length(const char_type* __s)
    {
      size_t __i = 0;
      while (!eq(__s[__i], char_type()))
        ++__i;
      return __i;
    }
    static constexpr const char_type* find(const char_type* __s, size_t __n, const char_type& __a)
    {
      for (size_t __i = 0; __i < __n; ++__i)
        if (eq(__s[__i], __a))
          return __s + __i;
      return 0;
    }
    static char_type* move(char_type* __s1, const char_type* __s2, size_t __n)
    {
      if (__n == 0)
        return __s1;
      return (static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n * sizeof(char_type))));
    }
    static char_type* copy(char_type* __s1, const char_type* __s2, size_t __n)
    {
      if (__n == 0)
        return __s1;
      return (static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
    }
    static char_type* assign(char_type* __s, size_t __n, char_type __a)
    {
      for (size_t __i = 0; __i < __n; ++__i)
        assign(__s[__i], __a);
      return __s;
    }
    static constexpr char_type to_char_type(const int_type& __c) noexcept { return char_type(__c); }
    static constexpr int_type to_int_type(const char_type& __c) noexcept { return int_type(__c); }
    static constexpr bool eq_int_type(const int_type& __c1, const int_type& __c2) noexcept { return __c1 == __c2; }
    static constexpr int_type eof() noexcept { return static_cast<int_type>(-1); }
    static constexpr int_type not_eof(const int_type& __c) noexcept { return eq_int_type(__c, eof()) ? 0 : __c; }
  };
}  // namespace )
namespace __gnu_cxx __attribute__((__visibility__("default")))
{
  using std::ptrdiff_t;
  using std::size_t;
  template <typename _Tp>
  class new_allocator
  {
  public:
    typedef size_t size_type;
    typedef ptrdiff_t difference_type;
    typedef _Tp* pointer;
    typedef const _Tp* const_pointer;
    typedef _Tp& reference;
    typedef const _Tp& const_reference;
    typedef _Tp value_type;
    template <typename _Tp1>
    struct rebind
    {
      typedef new_allocator<_Tp1> other;
    };
    typedef std::true_type propagate_on_container_move_assignment;
    new_allocator() noexcept {}
    new_allocator(const new_allocator&) noexcept {}
    template <typename _Tp1>
    new_allocator(const new_allocator<_Tp1>&) noexcept
    {
    }
    ~new_allocator() noexcept {}
    pointer address(reference __x) const noexcept { return std::__addressof(__x); }
    const_pointer address(const_reference __x) const noexcept { return std::__addressof(__x); }
    [[__nodiscard__]] pointer allocate(size_type __n, const void* = static_cast<const void*>(0))
    {
      if (__n > this->max_size())
        std::__throw_bad_alloc();
      if (alignof(_Tp) > 16)
      {
        std::align_val_t __al = std::align_val_t(alignof(_Tp));
        return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
      }
      return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    }
    void deallocate(pointer __p, size_type)
    {
      if (alignof(_Tp) > 16)
      {
        ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        return;
      }
      ::operator delete(__p);
    }
    size_type max_size() const noexcept { return size_t(0x7fffffffffffffffL) / sizeof(_Tp); }
    template <typename _Up, typename... _Args>
    void construct(_Up* __p, _Args&&... __args) noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    {
      ::new ((void*)__p) _Up(std::forward<_Args>(__args)...);
    }
    template <typename _Up>
    void destroy(_Up* __p) noexcept(std::is_nothrow_destructible<_Up>::value)
    {
      __p->~_Up();
    }
    template <typename _Up>
    friend bool operator==(const new_allocator&, const new_allocator<_Up>&) noexcept
    {
      return true;
    }
    template <typename _Up>
    friend bool operator!=(const new_allocator&, const new_allocator<_Up>&) noexcept
    {
      return false;
    }
  };
}  // namespace )
namespace std
{
template <typename _Tp>
using __allocator_base = __gnu_cxx::new_allocator<_Tp>;
}
namespace std __attribute__((__visibility__("default")))
{
  template <>
  class allocator<void>
  {
  public:
    typedef size_t size_type;
    typedef ptrdiff_t difference_type;
    typedef void* pointer;
    typedef const void* const_pointer;
    typedef void value_type;
    template <typename _Tp1>
    struct rebind
    {
      typedef allocator<_Tp1> other;
    };
    typedef true_type propagate_on_container_move_assignment;
    typedef true_type is_always_equal;
    template <typename _Up, typename... _Args>
    void construct(_Up* __p, _Args&&... __args) noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    {
      ::new ((void*)__p) _Up(std::forward<_Args>(__args)...);
    }
    template <typename _Up>
    void destroy(_Up* __p) noexcept(std::is_nothrow_destructible<_Up>::value)
    {
      __p->~_Up();
    }
  };
  template <typename _Tp>
  class allocator : public __allocator_base<_Tp>
  {
  public:
    typedef size_t size_type;
    typedef ptrdiff_t difference_type;
    typedef _Tp* pointer;
    typedef const _Tp* const_pointer;
    typedef _Tp& reference;
    typedef const _Tp& const_reference;
    typedef _Tp value_type;
    template <typename _Tp1>
    struct rebind
    {
      typedef allocator<_Tp1> other;
    };
    typedef true_type propagate_on_container_move_assignment;
    typedef true_type is_always_equal;
    allocator() noexcept {}
    allocator(const allocator& __a) noexcept : __allocator_base<_Tp>(__a) {}
    allocator& operator=(const allocator&) = default;
    template <typename _Tp1>
    allocator(const allocator<_Tp1>&) noexcept
    {
    }
    ~allocator() noexcept {}
    friend bool operator==(const allocator&, const allocator&) noexcept { return true; }
    friend bool operator!=(const allocator&, const allocator&) noexcept { return false; }
  };
  template <typename _T1, typename _T2>
  inline bool operator==(const allocator<_T1>&, const allocator<_T2>&) noexcept
  {
    return true;
  }
  template <typename _T1, typename _T2>
  inline bool operator!=(const allocator<_T1>&, const allocator<_T2>&) noexcept
  {
    return false;
  }
  template <typename _Tp>
  class allocator<const _Tp>
  {
  public:
    typedef _Tp value_type;
    template <typename _Up>
    allocator(const allocator<_Up>&)
    {
    }
  };
  template <typename _Tp>
  class allocator<volatile _Tp>
  {
  public:
    typedef _Tp value_type;
    template <typename _Up>
    allocator(const allocator<_Up>&)
    {
    }
  };
  template <typename _Tp>
  class allocator<const volatile _Tp>
  {
  public:
    typedef _Tp value_type;
    template <typename _Up>
    allocator(const allocator<_Up>&)
    {
    }
  };
  extern template class allocator<char>;
  extern template class allocator<wchar_t>;
  template <typename _Alloc, bool = __is_empty(_Alloc)>
  struct __alloc_swap
  {
    static void _S_do_it(_Alloc&, _Alloc&) noexcept {}
  };
  template <typename _Alloc>
  struct __alloc_swap<_Alloc, false>
  {
    static void _S_do_it(_Alloc& __one, _Alloc& __two) noexcept
    {
      if (__one != __two)
        swap(__one, __two);
    }
  };
  template <typename _Alloc, bool = __is_empty(_Alloc)>
  struct __alloc_neq
  {
    static bool _S_do_it(const _Alloc&, const _Alloc&) { return false; }
  };
  template <typename _Alloc>
  struct __alloc_neq<_Alloc, false>
  {
    static bool _S_do_it(const _Alloc& __one, const _Alloc& __two) { return __one != __two; }
  };
  template <typename _Tp,
            bool = __or_<is_copy_constructible<typename _Tp::value_type>,
                         is_nothrow_move_constructible<typename _Tp::value_type>>::value>
  struct __shrink_to_fit_aux
  {
    static bool _S_do_it(_Tp&) noexcept { return false; }
  };
  template <typename _Tp>
  struct __shrink_to_fit_aux<_Tp, true>
  {
    static bool _S_do_it(_Tp& __c) noexcept
    {
      try
      {
        _Tp(__make_move_if_noexcept_iterator(__c.begin()),
            __make_move_if_noexcept_iterator(__c.end()),
            __c.get_allocator())
            .swap(__c);
        return true;
      }
      catch (...)
      {
        return false;
      }
    }
  };
}  // namespace )
extern "C" {
struct lconv
{
  char* decimal_point;
  char* thousands_sep;
  char* grouping;
  char* int_curr_symbol;
  char* currency_symbol;
  char* mon_decimal_point;
  char* mon_thousands_sep;
  char* mon_grouping;
  char* positive_sign;
  char* negative_sign;
  char int_frac_digits;
  char frac_digits;
  char p_cs_precedes;
  char p_sep_by_space;
  char n_cs_precedes;
  char n_sep_by_space;
  char p_sign_posn;
  char n_sign_posn;
  char int_p_cs_precedes;
  char int_p_sep_by_space;
  char int_n_cs_precedes;
  char int_n_sep_by_space;
  char int_p_sign_posn;
  char int_n_sign_posn;
};
extern char* setlocale(int __category, const char* __locale) throw();
extern struct lconv* localeconv(void) throw();
extern locale_t newlocale(int __category_mask, const char* __locale, locale_t __base) throw();
extern locale_t duplocale(locale_t __dataset) throw();
extern void freelocale(locale_t __dataset) throw();
extern locale_t uselocale(locale_t __dataset) throw();
}
namespace std
{
using ::lconv;
using ::localeconv;
using ::setlocale;
}  // namespace std
namespace __gnu_cxx __attribute__((__visibility__("default")))
{
  extern "C" __typeof(uselocale) __uselocale;
}
namespace std __attribute__((__visibility__("default")))
{
  typedef __locale_t __c_locale;
  inline int __convert_from_v(const __c_locale& __cloc __attribute__((__unused__)),
                              char* __out,
                              const int __size __attribute__((__unused__)),
                              const char* __fmt,
                              ...)
  {
    __c_locale __old = __gnu_cxx::__uselocale(__cloc);
    __builtin_va_list __args;
    __builtin_va_start(__args, __fmt);
    const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args);
    __builtin_va_end(__args);
    __gnu_cxx::__uselocale(__old);
    return __ret;
  }
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  class ios_base;
  template <typename _CharT, typename _Traits = char_traits<_CharT>>
  class basic_ios;
  template <typename _CharT, typename _Traits = char_traits<_CharT>>
  class basic_streambuf;
  template <typename _CharT, typename _Traits = char_traits<_CharT>>
  class basic_istream;
  template <typename _CharT, typename _Traits = char_traits<_CharT>>
  class basic_ostream;
  template <typename _CharT, typename _Traits = char_traits<_CharT>>
  class basic_iostream;
  namespace __cxx11
  {
  template <typename _CharT, typename _Traits = char_traits<_CharT>, typename _Alloc = allocator<_CharT>>
  class basic_stringbuf;
  template <typename _CharT, typename _Traits = char_traits<_CharT>, typename _Alloc = allocator<_CharT>>
  class basic_istringstream;
  template <typename _CharT, typename _Traits = char_traits<_CharT>, typename _Alloc = allocator<_CharT>>
  class basic_ostringstream;
  template <typename _CharT, typename _Traits = char_traits<_CharT>, typename _Alloc = allocator<_CharT>>
  class basic_stringstream;
  }  // namespace __cxx11
  template <typename _CharT, typename _Traits = char_traits<_CharT>>
  class basic_filebuf;
  template <typename _CharT, typename _Traits = char_traits<_CharT>>
  class basic_ifstream;
  template <typename _CharT, typename _Traits = char_traits<_CharT>>
  class basic_ofstream;
  template <typename _CharT, typename _Traits = char_traits<_CharT>>
  class basic_fstream;
  template <typename _CharT, typename _Traits = char_traits<_CharT>>
  class istreambuf_iterator;
  template <typename _CharT, typename _Traits = char_traits<_CharT>>
  class ostreambuf_iterator;
  typedef basic_ios<char> ios;
  typedef basic_streambuf<char> streambuf;
  typedef basic_istream<char> istream;
  typedef basic_ostream<char> ostream;
  typedef basic_iostream<char> iostream;
  typedef basic_stringbuf<char> stringbuf;
  typedef basic_istringstream<char> istringstream;
  typedef basic_ostringstream<char> ostringstream;
  typedef basic_stringstream<char> stringstream;
  typedef basic_filebuf<char> filebuf;
  typedef basic_ifstream<char> ifstream;
  typedef basic_ofstream<char> ofstream;
  typedef basic_fstream<char> fstream;
  typedef basic_ios<wchar_t> wios;
  typedef basic_streambuf<wchar_t> wstreambuf;
  typedef basic_istream<wchar_t> wistream;
  typedef basic_ostream<wchar_t> wostream;
  typedef basic_iostream<wchar_t> wiostream;
  typedef basic_stringbuf<wchar_t> wstringbuf;
  typedef basic_istringstream<wchar_t> wistringstream;
  typedef basic_ostringstream<wchar_t> wostringstream;
  typedef basic_stringstream<wchar_t> wstringstream;
  typedef basic_filebuf<wchar_t> wfilebuf;
  typedef basic_ifstream<wchar_t> wifstream;
  typedef basic_ofstream<wchar_t> wofstream;
  typedef basic_fstream<wchar_t> wfstream;
}  // namespace )
extern "C" {
enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
extern const unsigned short int** __ctype_b_loc(void) throw() __attribute__((__const__));
extern const __int32_t** __ctype_tolower_loc(void) throw() __attribute__((__const__));
extern const __int32_t** __ctype_toupper_loc(void) throw() __attribute__((__const__));
extern int isalnum(int) throw();
extern int isalpha(int) throw();
extern int iscntrl(int) throw();
extern int isdigit(int) throw();
extern int islower(int) throw();
extern int isgraph(int) throw();
extern int isprint(int) throw();
extern int ispunct(int) throw();
extern int isspace(int) throw();
extern int isupper(int) throw();
extern int isxdigit(int) throw();
extern int tolower(int __c) throw();
extern int toupper(int __c) throw();
extern int isblank(int) throw();
extern int isctype(int __c, int __mask) throw();
extern int isascii(int __c) throw();
extern int toascii(int __c) throw();
extern int _toupper(int) throw();
extern int _tolower(int) throw();
extern int isalnum_l(int, locale_t) throw();
extern int isalpha_l(int, locale_t) throw();
extern int iscntrl_l(int, locale_t) throw();
extern int isdigit_l(int, locale_t) throw();
extern int islower_l(int, locale_t) throw();
extern int isgraph_l(int, locale_t) throw();
extern int isprint_l(int, locale_t) throw();
extern int ispunct_l(int, locale_t) throw();
extern int isspace_l(int, locale_t) throw();
extern int isupper_l(int, locale_t) throw();
extern int isxdigit_l(int, locale_t) throw();
extern int isblank_l(int, locale_t) throw();
extern int __tolower_l(int __c, locale_t __l) throw();
extern int tolower_l(int __c, locale_t __l) throw();
extern int __toupper_l(int __c, locale_t __l) throw();
extern int toupper_l(int __c, locale_t __l) throw();
}
namespace std
{
using ::isalnum;
using ::isalpha;
using ::iscntrl;
using ::isdigit;
using ::isgraph;
using ::islower;
using ::isprint;
using ::ispunct;
using ::isspace;
using ::isupper;
using ::isxdigit;
using ::tolower;
using ::toupper;
}  // namespace std
namespace std
{
using ::isblank;
}
namespace std __attribute__((__visibility__("default")))
{
  class locale;
  template <typename _Facet>
  bool has_facet(const locale&) throw();
  template <typename _Facet>
  const _Facet& use_facet(const locale&);
  template <typename _CharT>
  bool isspace(_CharT, const locale&);
  template <typename _CharT>
  bool isprint(_CharT, const locale&);
  template <typename _CharT>
  bool iscntrl(_CharT, const locale&);
  template <typename _CharT>
  bool isupper(_CharT, const locale&);
  template <typename _CharT>
  bool islower(_CharT, const locale&);
  template <typename _CharT>
  bool isalpha(_CharT, const locale&);
  template <typename _CharT>
  bool isdigit(_CharT, const locale&);
  template <typename _CharT>
  bool ispunct(_CharT, const locale&);
  template <typename _CharT>
  bool isxdigit(_CharT, const locale&);
  template <typename _CharT>
  bool isalnum(_CharT, const locale&);
  template <typename _CharT>
  bool isgraph(_CharT, const locale&);
  template <typename _CharT>
  bool isblank(_CharT, const locale&);
  template <typename _CharT>
  _CharT toupper(_CharT, const locale&);
  template <typename _CharT>
  _CharT tolower(_CharT, const locale&);
  class ctype_base;
  template <typename _CharT>
  class ctype;
  template <>
  class ctype<char>;
  template <>
  class ctype<wchar_t>;
  template <typename _CharT>
  class ctype_byname;
  class codecvt_base;
  template <typename _InternT, typename _ExternT, typename _StateT>
  class codecvt;
  template <>
  class codecvt<char, char, mbstate_t>;
  template <>
  class codecvt<wchar_t, char, mbstate_t>;
  template <>
  class codecvt<char16_t, char, mbstate_t>;
  template <>
  class codecvt<char32_t, char, mbstate_t>;
  template <typename _InternT, typename _ExternT, typename _StateT>
  class codecvt_byname;
  template <typename _CharT, typename _InIter = istreambuf_iterator<_CharT>>
  class num_get;
  template <typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT>>
  class num_put;
  namespace __cxx11
  {
  template <typename _CharT>
  class numpunct;
  template <typename _CharT>
  class numpunct_byname;
  }  // namespace __cxx11
  namespace __cxx11
  {
  template <typename _CharT>
  class collate;
  template <typename _CharT>
  class collate_byname;
  }  // namespace __cxx11
  class time_base;
  namespace __cxx11
  {
  template <typename _CharT, typename _InIter = istreambuf_iterator<_CharT>>
  class time_get;
  template <typename _CharT, typename _InIter = istreambuf_iterator<_CharT>>
  class time_get_byname;
  }  // namespace __cxx11
  template <typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT>>
  class time_put;
  template <typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT>>
  class time_put_byname;
  class money_base;
  namespace __cxx11
  {
  template <typename _CharT, typename _InIter = istreambuf_iterator<_CharT>>
  class money_get;
  template <typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT>>
  class money_put;
  }  // namespace __cxx11
  namespace __cxx11
  {
  template <typename _CharT, bool _Intl = false>
  class moneypunct;
  template <typename _CharT, bool _Intl = false>
  class moneypunct_byname;
  }  // namespace __cxx11
  class messages_base;
  namespace __cxx11
  {
  template <typename _CharT>
  class messages;
  template <typename _CharT>
  class messages_byname;
  }  // namespace __cxx11
}  // namespace )
#pragma GCC visibility push(default)
namespace __cxxabiv1
{
class __forced_unwind
{
  virtual ~__forced_unwind() throw();
  virtual void __pure_dummy() = 0;
};
}  // namespace __cxxabiv1
#pragma GCC visibility pop
namespace std __attribute__((__visibility__("default")))
{
  template <typename _CharT, typename _Traits>
  inline void __ostream_write(basic_ostream<_CharT, _Traits> & __out, const _CharT* __s, streamsize __n)
  {
    typedef basic_ostream<_CharT, _Traits> __ostream_type;
    typedef typename __ostream_type::ios_base __ios_base;
    const streamsize __put = __out.rdbuf()->sputn(__s, __n);
    if (__put != __n)
      __out.setstate(__ios_base::badbit);
  }
  template <typename _CharT, typename _Traits>
  inline void __ostream_fill(basic_ostream<_CharT, _Traits> & __out, streamsize __n)
  {
    typedef basic_ostream<_CharT, _Traits> __ostream_type;
    typedef typename __ostream_type::ios_base __ios_base;
    const _CharT __c = __out.fill();
    for (; __n > 0; --__n)
    {
      const typename _Traits::int_type __put = __out.rdbuf()->sputc(__c);
      if (_Traits::eq_int_type(__put, _Traits::eof()))
      {
        __out.setstate(__ios_base::badbit);
        break;
      }
    }
  }
  template <typename _CharT, typename _Traits>
  basic_ostream<_CharT, _Traits>& __ostream_insert(
      basic_ostream<_CharT, _Traits> & __out, const _CharT* __s, streamsize __n)
  {
    typedef basic_ostream<_CharT, _Traits> __ostream_type;
    typedef typename __ostream_type::ios_base __ios_base;
    typename __ostream_type::sentry __cerb(__out);
    if (__cerb)
    {
      try
      {
        const streamsize __w = __out.width();
        if (__w > __n)
        {
          const bool __left = ((__out.flags() & __ios_base::adjustfield) == __ios_base::left);
          if (!__left)
            __ostream_fill(__out, __w - __n);
          if (__out.good())
            __ostream_write(__out, __s, __n);
          if (__left && __out.good())
            __ostream_fill(__out, __w - __n);
        }
        else
          __ostream_write(__out, __s, __n);
        __out.width(0);
      }
      catch (__cxxabiv1::__forced_unwind&)
      {
        __out._M_setstate(__ios_base::badbit);
        throw;
      }
      catch (...)
      {
        __out._M_setstate(__ios_base::badbit);
      }
    }
    return __out;
  }
  extern template ostream& __ostream_insert(ostream&, const char*, streamsize);
  extern template wostream& __ostream_insert(wostream&, const wchar_t*, streamsize);
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _Container>
  inline constexpr auto begin(_Container & __cont)->decltype(__cont.begin())
  {
    return __cont.begin();
  }
  template <typename _Container>
  inline constexpr auto begin(const _Container& __cont)->decltype(__cont.begin())
  {
    return __cont.begin();
  }
  template <typename _Container>
  inline constexpr auto end(_Container & __cont)->decltype(__cont.end())
  {
    return __cont.end();
  }
  template <typename _Container>
  inline constexpr auto end(const _Container& __cont)->decltype(__cont.end())
  {
    return __cont.end();
  }
  template <typename _Tp, size_t _Nm>
  inline constexpr _Tp* begin(_Tp(&__arr)[_Nm]) noexcept
  {
    return __arr;
  }
  template <typename _Tp, size_t _Nm>
  inline constexpr _Tp* end(_Tp(&__arr)[_Nm]) noexcept
  {
    return __arr + _Nm;
  }
  template <typename _Tp>
  class valarray;
  template <typename _Tp>
  _Tp* begin(valarray<_Tp>&);
  template <typename _Tp>
  const _Tp* begin(const valarray<_Tp>&);
  template <typename _Tp>
  _Tp* end(valarray<_Tp>&);
  template <typename _Tp>
  const _Tp* end(const valarray<_Tp>&);
  template <typename _Container>
  inline constexpr auto cbegin(const _Container& __cont) noexcept(noexcept(std::begin(__cont)))
      ->decltype(std::begin(__cont))
  {
    return std::begin(__cont);
  }
  template <typename _Container>
  inline constexpr auto cend(const _Container& __cont) noexcept(noexcept(std::end(__cont)))->decltype(std::end(__cont))
  {
    return std::end(__cont);
  }
  template <typename _Container>
  inline constexpr auto rbegin(_Container & __cont)->decltype(__cont.rbegin())
  {
    return __cont.rbegin();
  }
  template <typename _Container>
  inline constexpr auto rbegin(const _Container& __cont)->decltype(__cont.rbegin())
  {
    return __cont.rbegin();
  }
  template <typename _Container>
  inline constexpr auto rend(_Container & __cont)->decltype(__cont.rend())
  {
    return __cont.rend();
  }
  template <typename _Container>
  inline constexpr auto rend(const _Container& __cont)->decltype(__cont.rend())
  {
    return __cont.rend();
  }
  template <typename _Tp, size_t _Nm>
  inline constexpr reverse_iterator<_Tp*> rbegin(_Tp(&__arr)[_Nm]) noexcept
  {
    return reverse_iterator<_Tp*>(__arr + _Nm);
  }
  template <typename _Tp, size_t _Nm>
  inline constexpr reverse_iterator<_Tp*> rend(_Tp(&__arr)[_Nm]) noexcept
  {
    return reverse_iterator<_Tp*>(__arr);
  }
  template <typename _Tp>
  inline constexpr reverse_iterator<const _Tp*> rbegin(initializer_list<_Tp> __il) noexcept
  {
    return reverse_iterator<const _Tp*>(__il.end());
  }
  template <typename _Tp>
  inline constexpr reverse_iterator<const _Tp*> rend(initializer_list<_Tp> __il) noexcept
  {
    return reverse_iterator<const _Tp*>(__il.begin());
  }
  template <typename _Container>
  inline constexpr auto crbegin(const _Container& __cont)->decltype(std::rbegin(__cont))
  {
    return std::rbegin(__cont);
  }
  template <typename _Container>
  inline constexpr auto crend(const _Container& __cont)->decltype(std::rend(__cont))
  {
    return std::rend(__cont);
  }
  template <typename _Container>
  constexpr auto size(const _Container& __cont) noexcept(noexcept(__cont.size()))->decltype(__cont.size())
  {
    return __cont.size();
  }
  template <typename _Tp, size_t _Nm>
  constexpr size_t size(const _Tp(&)[_Nm]) noexcept
  {
    return _Nm;
  }
  template <typename _Container>
  [[nodiscard]] constexpr auto empty(const _Container& __cont) noexcept(noexcept(__cont.empty()))
      ->decltype(__cont.empty())
  {
    return __cont.empty();
  }
  template <typename _Tp, size_t _Nm>
  [[nodiscard]] constexpr bool empty(const _Tp(&)[_Nm]) noexcept
  {
    return false;
  }
  template <typename _Tp>
  [[nodiscard]] constexpr bool empty(initializer_list<_Tp> __il) noexcept
  {
    return __il.size() == 0;
  }
  template <typename _Container>
  constexpr auto data(_Container & __cont) noexcept(noexcept(__cont.data()))->decltype(__cont.data())
  {
    return __cont.data();
  }
  template <typename _Container>
  constexpr auto data(const _Container& __cont) noexcept(noexcept(__cont.data()))->decltype(__cont.data())
  {
    return __cont.data();
  }
  template <typename _Tp, size_t _Nm>
  constexpr _Tp* data(_Tp(&__array)[_Nm]) noexcept
  {
    return __array;
  }
  template <typename _Tp>
  constexpr const _Tp* data(initializer_list<_Tp> __il) noexcept
  {
    return __il.begin();
  }
}  // namespace )
#pragma GCC visibility push(default)
typedef __time_t time_t;
struct timespec
{
  __time_t tv_sec;
  __syscall_slong_t tv_nsec;
};
typedef __pid_t pid_t;
struct sched_param
{
  int sched_priority;
};
extern "C" {
extern int clone(int (*__fn)(void* __arg), void* __child_stack, int __flags, void* __arg, ...) throw();
extern int unshare(int __flags) throw();
extern int sched_getcpu(void) throw();
extern int getcpu(unsigned int*, unsigned int*) throw();
extern int setns(int __fd, int __nstype) throw();
}
typedef unsigned long int __cpu_mask;
typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof(__cpu_mask))];
} cpu_set_t;
extern "C" {
extern int __sched_cpucount(size_t __setsize, const cpu_set_t* __setp) throw();
extern cpu_set_t* __sched_cpualloc(size_t __count) throw() __attribute__((__warn_unused_result__));
extern void __sched_cpufree(cpu_set_t* __set) throw();
}
extern "C" {
extern int sched_setparam(__pid_t __pid, const struct sched_param* __param) throw();
extern int sched_getparam(__pid_t __pid, struct sched_param* __param) throw();
extern int sched_setscheduler(__pid_t __pid, int __policy, const struct sched_param* __param) throw();
extern int sched_getscheduler(__pid_t __pid) throw();
extern int sched_yield(void) throw();
extern int sched_get_priority_max(int __algorithm) throw();
extern int sched_get_priority_min(int __algorithm) throw();
extern int sched_rr_get_interval(__pid_t __pid, struct timespec* __t) throw();
extern int sched_setaffinity(__pid_t __pid, size_t __cpusetsize, const cpu_set_t* __cpuset) throw();
extern int sched_getaffinity(__pid_t __pid, size_t __cpusetsize, cpu_set_t* __cpuset) throw();
}
struct timeval
{
  __time_t tv_sec;
  __suseconds_t tv_usec;
};
struct timex
{
  unsigned int modes;
  __syscall_slong_t offset;
  __syscall_slong_t freq;
  __syscall_slong_t maxerror;
  __syscall_slong_t esterror;
  int status;
  __syscall_slong_t constant;
  __syscall_slong_t precision;
  __syscall_slong_t tolerance;
  struct timeval time;
  __syscall_slong_t tick;
  __syscall_slong_t ppsfreq;
  __syscall_slong_t jitter;
  int shift;
  __syscall_slong_t stabil;
  __syscall_slong_t jitcnt;
  __syscall_slong_t calcnt;
  __syscall_slong_t errcnt;
  __syscall_slong_t stbcnt;
  int tai;
  int : 32;
  int : 32;
  int : 32;
  int : 32;
  int : 32;
  int : 32;
  int : 32;
  int : 32;
  int : 32;
  int : 32;
  int : 32;
};
extern "C" {
extern int clock_adjtime(__clockid_t __clock_id, struct timex* __utx) throw();
}
typedef __clock_t clock_t;
struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;
  long int tm_gmtoff;
  const char* tm_zone;
};
typedef __clockid_t clockid_t;
typedef __timer_t timer_t;
struct itimerspec
{
  struct timespec it_interval;
  struct timespec it_value;
};
struct sigevent;
extern "C" {
extern clock_t clock(void) throw();
extern time_t time(time_t* __timer) throw();
extern double difftime(time_t __time1, time_t __time0) throw() __attribute__((__const__));
extern time_t mktime(struct tm* __tp) throw();
extern size_t strftime(char* __restrict __s,
                       size_t __maxsize,
                       const char* __restrict __format,
                       const struct tm* __restrict __tp) throw();
extern char* strptime(const char* __restrict __s, const char* __restrict __fmt, struct tm* __tp) throw();
extern size_t strftime_l(char* __restrict __s,
                         size_t __maxsize,
                         const char* __restrict __format,
                         const struct tm* __restrict __tp,
                         locale_t __loc) throw();
extern char* strptime_l(const char* __restrict __s,
                        const char* __restrict __fmt,
                        struct tm* __tp,
                        locale_t __loc) throw();
extern struct tm* gmtime(const time_t* __timer) throw();
extern struct tm* localtime(const time_t* __timer) throw();
extern struct tm* gmtime_r(const time_t* __restrict __timer, struct tm* __restrict __tp) throw();
extern struct tm* localtime_r(const time_t* __restrict __timer, struct tm* __restrict __tp) throw();
extern char* asctime(const struct tm* __tp) throw();
extern char* ctime(const time_t* __timer) throw();
extern char* asctime_r(const struct tm* __restrict __tp, char* __restrict __buf) throw();
extern char* ctime_r(const time_t* __restrict __timer, char* __restrict __buf) throw();
extern char* __tzname[2];
extern int __daylight;
extern long int __timezone;
extern char* tzname[2];
extern void tzset(void) throw();
extern int daylight;
extern long int timezone;
extern time_t timegm(struct tm* __tp) throw();
extern time_t timelocal(struct tm* __tp) throw();
extern int dysize(int __year) throw() __attribute__((__const__));
extern int nanosleep(const struct timespec* __requested_time, struct timespec* __remaining);
extern int clock_getres(clockid_t __clock_id, struct timespec* __res) throw();
extern int clock_gettime(clockid_t __clock_id, struct timespec* __tp) throw();
extern int clock_settime(clockid_t __clock_id, const struct timespec* __tp) throw();
extern int clock_nanosleep(clockid_t __clock_id, int __flags, const struct timespec* __req, struct timespec* __rem);
extern int clock_getcpuclockid(pid_t __pid, clockid_t* __clock_id) throw();
extern int timer_create(clockid_t __clock_id, struct sigevent* __restrict __evp, timer_t* __restrict __timerid) throw();
extern int timer_delete(timer_t __timerid) throw();
extern int timer_settime(timer_t __timerid,
                         int __flags,
                         const struct itimerspec* __restrict __value,
                         struct itimerspec* __restrict __ovalue) throw();
extern int timer_gettime(timer_t __timerid, struct itimerspec* __value) throw();
extern int timer_getoverrun(timer_t __timerid) throw();
extern int timespec_get(struct timespec* __ts, int __base) throw() __attribute__((__nonnull__(1)));
extern int getdate_err;
extern struct tm* getdate(const char* __string);
extern int getdate_r(const char* __restrict __string, struct tm* __restrict __resbufp);
}
typedef struct __pthread_internal_list
{
  struct __pthread_internal_list* __prev;
  struct __pthread_internal_list* __next;
} __pthread_list_t;
typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist* __next;
} __pthread_slist_t;
struct __pthread_mutex_s
{
  int __lock;
  unsigned int __count;
  int __owner;
  unsigned int __nusers;
  int __kind;
  short __spins;
  short __elision;
  __pthread_list_t __list;
};
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;
  int __cur_writer;
  int __shared;
  signed char __rwelision;
  unsigned char __pad1[7];
  unsigned long int __pad2;
  unsigned int __flags;
};
struct __pthread_cond_s
{
  __extension__ union
  {
    __extension__ unsigned long long int __wseq;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __wseq32;
  };
  __extension__ union
  {
    __extension__ unsigned long long int __g1_start;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __g1_start32;
  };
  unsigned int __g_refs[2];
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};
typedef unsigned long int pthread_t;
typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;
typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;
typedef unsigned int pthread_key_t;
typedef int pthread_once_t;
union pthread_attr_t
{
  char __size[56];
  long int __align;
};
typedef union pthread_attr_t pthread_attr_t;
typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;
typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;
typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;
typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;
typedef volatile int pthread_spinlock_t;
typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;
typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
typedef long int __jmp_buf[8];
enum
{
  PTHREAD_CREATE_JOINABLE,
  PTHREAD_CREATE_DETACHED
};
enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL,
  PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP
};
enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};
enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
enum
{
  PTHREAD_INHERIT_SCHED,
  PTHREAD_EXPLICIT_SCHED
};
enum
{
  PTHREAD_SCOPE_SYSTEM,
  PTHREAD_SCOPE_PROCESS
};
enum
{
  PTHREAD_PROCESS_PRIVATE,
  PTHREAD_PROCESS_SHARED
};
struct _pthread_cleanup_buffer
{
  void (*__routine)(void*);
  void* __arg;
  int __canceltype;
  struct _pthread_cleanup_buffer* __prev;
};
enum
{
  PTHREAD_CANCEL_ENABLE,
  PTHREAD_CANCEL_DISABLE
};
enum
{
  PTHREAD_CANCEL_DEFERRED,
  PTHREAD_CANCEL_ASYNCHRONOUS
};
extern "C" {
extern int pthread_create(pthread_t* __restrict __newthread,
                          const pthread_attr_t* __restrict __attr,
                          void* (*__start_routine)(void*),
                          void* __restrict __arg) throw() __attribute__((__nonnull__(1, 3)));
extern void pthread_exit(void* __retval) __attribute__((__noreturn__));
extern int pthread_join(pthread_t __th, void** __thread_return);
extern int pthread_tryjoin_np(pthread_t __th, void** __thread_return) throw();
extern int pthread_timedjoin_np(pthread_t __th, void** __thread_return, const struct timespec* __abstime);
extern int pthread_clockjoin_np(pthread_t __th,
                                void** __thread_return,
                                clockid_t __clockid,
                                const struct timespec* __abstime);
extern int pthread_detach(pthread_t __th) throw();
extern pthread_t pthread_self(void) throw() __attribute__((__const__));
extern int pthread_equal(pthread_t __thread1, pthread_t __thread2) throw() __attribute__((__const__));
extern int pthread_attr_init(pthread_attr_t* __attr) throw() __attribute__((__nonnull__(1)));
extern int pthread_attr_destroy(pthread_attr_t* __attr) throw() __attribute__((__nonnull__(1)));
extern int pthread_attr_getdetachstate(const pthread_attr_t* __attr, int* __detachstate) throw()
    __attribute__((__nonnull__(1, 2)));
extern int pthread_attr_setdetachstate(pthread_attr_t* __attr, int __detachstate) throw()
    __attribute__((__nonnull__(1)));
extern int pthread_attr_getguardsize(const pthread_attr_t* __attr, size_t* __guardsize) throw()
    __attribute__((__nonnull__(1, 2)));
extern int pthread_attr_setguardsize(pthread_attr_t* __attr, size_t __guardsize) throw()
    __attribute__((__nonnull__(1)));
extern int pthread_attr_getschedparam(const pthread_attr_t* __restrict __attr,
                                      struct sched_param* __restrict __param) throw()
    __attribute__((__nonnull__(1, 2)));
extern int pthread_attr_setschedparam(pthread_attr_t* __restrict __attr,
                                      const struct sched_param* __restrict __param) throw()
    __attribute__((__nonnull__(1, 2)));
extern int pthread_attr_getschedpolicy(const pthread_attr_t* __restrict __attr, int* __restrict __policy) throw()
    __attribute__((__nonnull__(1, 2)));
extern int pthread_attr_setschedpolicy(pthread_attr_t* __attr, int __policy) throw() __attribute__((__nonnull__(1)));
extern int pthread_attr_getinheritsched(const pthread_attr_t* __restrict __attr, int* __restrict __inherit) throw()
    __attribute__((__nonnull__(1, 2)));
extern int pthread_attr_setinheritsched(pthread_attr_t* __attr, int __inherit) throw() __attribute__((__nonnull__(1)));
extern int pthread_attr_getscope(const pthread_attr_t* __restrict __attr, int* __restrict __scope) throw()
    __attribute__((__nonnull__(1, 2)));
extern int pthread_attr_setscope(pthread_attr_t* __attr, int __scope) throw() __attribute__((__nonnull__(1)));
extern int pthread_attr_getstackaddr(const pthread_attr_t* __restrict __attr, void** __restrict __stackaddr) throw()
    __attribute__((__nonnull__(1, 2))) __attribute__((__deprecated__));
extern int pthread_attr_setstackaddr(pthread_attr_t* __attr, void* __stackaddr) throw() __attribute__((__nonnull__(1)))
__attribute__((__deprecated__));
extern int pthread_attr_getstacksize(const pthread_attr_t* __restrict __attr, size_t* __restrict __stacksize) throw()
    __attribute__((__nonnull__(1, 2)));
extern int pthread_attr_setstacksize(pthread_attr_t* __attr, size_t __stacksize) throw()
    __attribute__((__nonnull__(1)));
extern int pthread_attr_getstack(const pthread_attr_t* __restrict __attr,
                                 void** __restrict __stackaddr,
                                 size_t* __restrict __stacksize) throw() __attribute__((__nonnull__(1, 2, 3)));
extern int pthread_attr_setstack(pthread_attr_t* __attr, void* __stackaddr, size_t __stacksize) throw()
    __attribute__((__nonnull__(1)));
extern int pthread_attr_setaffinity_np(pthread_attr_t* __attr, size_t __cpusetsize, const cpu_set_t* __cpuset) throw()
    __attribute__((__nonnull__(1, 3)));
extern int pthread_attr_getaffinity_np(const pthread_attr_t* __attr, size_t __cpusetsize, cpu_set_t* __cpuset) throw()
    __attribute__((__nonnull__(1, 3)));
extern int pthread_getattr_default_np(pthread_attr_t* __attr) throw() __attribute__((__nonnull__(1)));
extern int pthread_setattr_default_np(const pthread_attr_t* __attr) throw() __attribute__((__nonnull__(1)));
extern int pthread_getattr_np(pthread_t __th, pthread_attr_t* __attr) throw() __attribute__((__nonnull__(2)));
extern int pthread_setschedparam(pthread_t __target_thread, int __policy, const struct sched_param* __param) throw()
    __attribute__((__nonnull__(3)));
extern int pthread_getschedparam(pthread_t __target_thread,
                                 int* __restrict __policy,
                                 struct sched_param* __restrict __param) throw() __attribute__((__nonnull__(2, 3)));
extern int pthread_setschedprio(pthread_t __target_thread, int __prio) throw();
extern int pthread_getname_np(pthread_t __target_thread, char* __buf, size_t __buflen) throw()
    __attribute__((__nonnull__(2)));
extern int pthread_setname_np(pthread_t __target_thread, const char* __name) throw() __attribute__((__nonnull__(2)));
extern int pthread_getconcurrency(void) throw();
extern int pthread_setconcurrency(int __level) throw();
extern int pthread_yield(void) throw();
extern int pthread_setaffinity_np(pthread_t __th, size_t __cpusetsize, const cpu_set_t* __cpuset) throw()
    __attribute__((__nonnull__(3)));
extern int pthread_getaffinity_np(pthread_t __th, size_t __cpusetsize, cpu_set_t* __cpuset) throw()
    __attribute__((__nonnull__(3)));
extern int pthread_once(pthread_once_t* __once_control, void (*__init_routine)(void))
    __attribute__((__nonnull__(1, 2)));
extern int pthread_setcancelstate(int __state, int* __oldstate);
extern int pthread_setcanceltype(int __type, int* __oldtype);
extern int pthread_cancel(pthread_t __th);
extern void pthread_testcancel(void);
typedef struct
{
  struct
  {
    __jmp_buf __cancel_jmp_buf;
    int __mask_was_saved;
  } __cancel_jmp_buf[1];
  void* __pad[4];
} __pthread_unwind_buf_t __attribute__((__aligned__));
struct __pthread_cleanup_frame
{
  void (*__cancel_routine)(void*);
  void* __cancel_arg;
  int __do_it;
  int __cancel_type;
};
class __pthread_cleanup_class
{
  void (*__cancel_routine)(void*);
  void* __cancel_arg;
  int __do_it;
  int __cancel_type;

public:
  __pthread_cleanup_class(void (*__fct)(void*), void* __arg) : __cancel_routine(__fct), __cancel_arg(__arg), __do_it(1)
  {
  }
  ~__pthread_cleanup_class()
  {
    if (__do_it)
      __cancel_routine(__cancel_arg);
  }
  void __setdoit(int __newval) { __do_it = __newval; }
  void __defer() { pthread_setcanceltype(PTHREAD_CANCEL_DEFERRED, &__cancel_type); }
  void __restore() const { pthread_setcanceltype(__cancel_type, 0); }
};
struct __jmp_buf_tag;
extern int __sigsetjmp(struct __jmp_buf_tag* __env, int __savemask) throw();
extern int pthread_mutex_init(pthread_mutex_t* __mutex, const pthread_mutexattr_t* __mutexattr) throw()
    __attribute__((__nonnull__(1)));
extern int pthread_mutex_destroy(pthread_mutex_t* __mutex) throw() __attribute__((__nonnull__(1)));
extern int pthread_mutex_trylock(pthread_mutex_t* __mutex) throw() __attribute__((__nonnull__(1)));
extern int pthread_mutex_lock(pthread_mutex_t* __mutex) throw() __attribute__((__nonnull__(1)));
extern int pthread_mutex_timedlock(pthread_mutex_t* __restrict __mutex,
                                   const struct timespec* __restrict __abstime) throw()
    __attribute__((__nonnull__(1, 2)));
extern int pthread_mutex_clocklock(pthread_mutex_t* __restrict __mutex,
                                   clockid_t __clockid,
                                   const struct timespec* __restrict __abstime) throw()
    __attribute__((__nonnull__(1, 3)));
extern int pthread_mutex_unlock(pthread_mutex_t* __mutex) throw() __attribute__((__nonnull__(1)));
extern int pthread_mutex_getprioceiling(const pthread_mutex_t* __restrict __mutex,
                                        int* __restrict __prioceiling) throw() __attribute__((__nonnull__(1, 2)));
extern int pthread_mutex_setprioceiling(pthread_mutex_t* __restrict __mutex,
                                        int __prioceiling,
                                        int* __restrict __old_ceiling) throw() __attribute__((__nonnull__(1, 3)));
extern int pthread_mutex_consistent(pthread_mutex_t* __mutex) throw() __attribute__((__nonnull__(1)));
extern int pthread_mutex_consistent_np(pthread_mutex_t* __mutex) throw() __attribute__((__nonnull__(1)));
extern int pthread_mutexattr_init(pthread_mutexattr_t* __attr) throw() __attribute__((__nonnull__(1)));
extern int pthread_mutexattr_destroy(pthread_mutexattr_t* __attr) throw() __attribute__((__nonnull__(1)));
extern int pthread_mutexattr_getpshared(const pthread_mutexattr_t* __restrict __attr, int* __restrict __pshared) throw()
    __attribute__((__nonnull__(1, 2)));
extern int pthread_mutexattr_setpshared(pthread_mutexattr_t* __attr, int __pshared) throw()
    __attribute__((__nonnull__(1)));
extern int pthread_mutexattr_gettype(const pthread_mutexattr_t* __restrict __attr, int* __restrict __kind) throw()
    __attribute__((__nonnull__(1, 2)));
extern int pthread_mutexattr_settype(pthread_mutexattr_t* __attr, int __kind) throw() __attribute__((__nonnull__(1)));
extern int pthread_mutexattr_getprotocol(const pthread_mutexattr_t* __restrict __attr,
                                         int* __restrict __protocol) throw() __attribute__((__nonnull__(1, 2)));
extern int pthread_mutexattr_setprotocol(pthread_mutexattr_t* __attr, int __protocol) throw()
    __attribute__((__nonnull__(1)));
extern int pthread_mutexattr_getprioceiling(const pthread_mutexattr_t* __restrict __attr,
                                            int* __restrict __prioceiling) throw() __attribute__((__nonnull__(1, 2)));
extern int pthread_mutexattr_setprioceiling(pthread_mutexattr_t* __attr, int __prioceiling) throw()
    __attribute__((__nonnull__(1)));
extern int pthread_mutexattr_getrobust(const pthread_mutexattr_t* __attr, int* __robustness) throw()
    __attribute__((__nonnull__(1, 2)));
extern int pthread_mutexattr_getrobust_np(const pthread_mutexattr_t* __attr, int* __robustness) throw()
    __attribute__((__nonnull__(1, 2)));
extern int pthread_mutexattr_setrobust(pthread_mutexattr_t* __attr, int __robustness) throw()
    __attribute__((__nonnull__(1)));
extern int pthread_mutexattr_setrobust_np(pthread_mutexattr_t* __attr, int __robustness) throw()
    __attribute__((__nonnull__(1)));
extern int pthread_rwlock_init(pthread_rwlock_t* __restrict __rwlock,
                               const pthread_rwlockattr_t* __restrict __attr) throw() __attribute__((__nonnull__(1)));
extern int pthread_rwlock_destroy(pthread_rwlock_t* __rwlock) throw() __attribute__((__nonnull__(1)));
extern int pthread_rwlock_rdlock(pthread_rwlock_t* __rwlock) throw() __attribute__((__nonnull__(1)));
extern int pthread_rwlock_tryrdlock(pthread_rwlock_t* __rwlock) throw() __attribute__((__nonnull__(1)));
extern int pthread_rwlock_timedrdlock(pthread_rwlock_t* __restrict __rwlock,
                                      const struct timespec* __restrict __abstime) throw()
    __attribute__((__nonnull__(1, 2)));
extern int pthread_rwlock_clockrdlock(pthread_rwlock_t* __restrict __rwlock,
                                      clockid_t __clockid,
                                      const struct timespec* __restrict __abstime) throw()
    __attribute__((__nonnull__(1, 3)));
extern int pthread_rwlock_wrlock(pthread_rwlock_t* __rwlock) throw() __attribute__((__nonnull__(1)));
extern int pthread_rwlock_trywrlock(pthread_rwlock_t* __rwlock) throw() __attribute__((__nonnull__(1)));
extern int pthread_rwlock_timedwrlock(pthread_rwlock_t* __restrict __rwlock,
                                      const struct timespec* __restrict __abstime) throw()
    __attribute__((__nonnull__(1, 2)));
extern int pthread_rwlock_clockwrlock(pthread_rwlock_t* __restrict __rwlock,
                                      clockid_t __clockid,
                                      const struct timespec* __restrict __abstime) throw()
    __attribute__((__nonnull__(1, 3)));
extern int pthread_rwlock_unlock(pthread_rwlock_t* __rwlock) throw() __attribute__((__nonnull__(1)));
extern int pthread_rwlockattr_init(pthread_rwlockattr_t* __attr) throw() __attribute__((__nonnull__(1)));
extern int pthread_rwlockattr_destroy(pthread_rwlockattr_t* __attr) throw() __attribute__((__nonnull__(1)));
extern int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t* __restrict __attr,
                                         int* __restrict __pshared) throw() __attribute__((__nonnull__(1, 2)));
extern int pthread_rwlockattr_setpshared(pthread_rwlockattr_t* __attr, int __pshared) throw()
    __attribute__((__nonnull__(1)));
extern int pthread_rwlockattr_getkind_np(const pthread_rwlockattr_t* __restrict __attr, int* __restrict __pref) throw()
    __attribute__((__nonnull__(1, 2)));
extern int pthread_rwlockattr_setkind_np(pthread_rwlockattr_t* __attr, int __pref) throw()
    __attribute__((__nonnull__(1)));
extern int pthread_cond_init(pthread_cond_t* __restrict __cond,
                             const pthread_condattr_t* __restrict __cond_attr) throw() __attribute__((__nonnull__(1)));
extern int pthread_cond_destroy(pthread_cond_t* __cond) throw() __attribute__((__nonnull__(1)));
extern int pthread_cond_signal(pthread_cond_t* __cond) throw() __attribute__((__nonnull__(1)));
extern int pthread_cond_broadcast(pthread_cond_t* __cond) throw() __attribute__((__nonnull__(1)));
extern int pthread_cond_wait(pthread_cond_t* __restrict __cond, pthread_mutex_t* __restrict __mutex)
    __attribute__((__nonnull__(1, 2)));
extern int pthread_cond_timedwait(pthread_cond_t* __restrict __cond,
                                  pthread_mutex_t* __restrict __mutex,
                                  const struct timespec* __restrict __abstime) __attribute__((__nonnull__(1, 2, 3)));
extern int pthread_cond_clockwait(pthread_cond_t* __restrict __cond,
                                  pthread_mutex_t* __restrict __mutex,
                                  __clockid_t __clock_id,
                                  const struct timespec* __restrict __abstime) __attribute__((__nonnull__(1, 2, 4)));
extern int pthread_condattr_init(pthread_condattr_t* __attr) throw() __attribute__((__nonnull__(1)));
extern int pthread_condattr_destroy(pthread_condattr_t* __attr) throw() __attribute__((__nonnull__(1)));
extern int pthread_condattr_getpshared(const pthread_condattr_t* __restrict __attr, int* __restrict __pshared) throw()
    __attribute__((__nonnull__(1, 2)));
extern int pthread_condattr_setpshared(pthread_condattr_t* __attr, int __pshared) throw()
    __attribute__((__nonnull__(1)));
extern int pthread_condattr_getclock(const pthread_condattr_t* __restrict __attr,
                                     __clockid_t* __restrict __clock_id) throw() __attribute__((__nonnull__(1, 2)));
extern int pthread_condattr_setclock(pthread_condattr_t* __attr, __clockid_t __clock_id) throw()
    __attribute__((__nonnull__(1)));
extern int pthread_spin_init(pthread_spinlock_t* __lock, int __pshared) throw() __attribute__((__nonnull__(1)));
extern int pthread_spin_destroy(pthread_spinlock_t* __lock) throw() __attribute__((__nonnull__(1)));
extern int pthread_spin_lock(pthread_spinlock_t* __lock) throw() __attribute__((__nonnull__(1)));
extern int pthread_spin_trylock(pthread_spinlock_t* __lock) throw() __attribute__((__nonnull__(1)));
extern int pthread_spin_unlock(pthread_spinlock_t* __lock) throw() __attribute__((__nonnull__(1)));
extern int pthread_barrier_init(pthread_barrier_t* __restrict __barrier,
                                const pthread_barrierattr_t* __restrict __attr,
                                unsigned int __count) throw() __attribute__((__nonnull__(1)));
extern int pthread_barrier_destroy(pthread_barrier_t* __barrier) throw() __attribute__((__nonnull__(1)));
extern int pthread_barrier_wait(pthread_barrier_t* __barrier) throw() __attribute__((__nonnull__(1)));
extern int pthread_barrierattr_init(pthread_barrierattr_t* __attr) throw() __attribute__((__nonnull__(1)));
extern int pthread_barrierattr_destroy(pthread_barrierattr_t* __attr) throw() __attribute__((__nonnull__(1)));
extern int pthread_barrierattr_getpshared(const pthread_barrierattr_t* __restrict __attr,
                                          int* __restrict __pshared) throw() __attribute__((__nonnull__(1, 2)));
extern int pthread_barrierattr_setpshared(pthread_barrierattr_t* __attr, int __pshared) throw()
    __attribute__((__nonnull__(1)));
extern int pthread_key_create(pthread_key_t* __key, void (*__destr_function)(void*)) throw()
    __attribute__((__nonnull__(1)));
extern int pthread_key_delete(pthread_key_t __key) throw();
extern void* pthread_getspecific(pthread_key_t __key) throw();
extern int pthread_setspecific(pthread_key_t __key, const void* __pointer) throw();
extern int pthread_getcpuclockid(pthread_t __thread_id, __clockid_t* __clock_id) throw()
    __attribute__((__nonnull__(2)));
extern int pthread_atfork(void (*__prepare)(void), void (*__parent)(void), void (*__child)(void)) throw();
extern __inline __attribute__((__gnu_inline__)) int __attribute__((__leaf__))
pthread_equal(pthread_t __thread1, pthread_t __thread2) throw()
{
  return __thread1 == __thread2;
}
}
typedef pthread_t __gthread_t;
typedef pthread_key_t __gthread_key_t;
typedef pthread_once_t __gthread_once_t;
typedef pthread_mutex_t __gthread_mutex_t;
typedef pthread_mutex_t __gthread_recursive_mutex_t;
typedef pthread_cond_t __gthread_cond_t;
typedef struct timespec __gthread_time_t;
static __typeof(pthread_once) __gthrw_pthread_once __attribute__((__weakref__("pthread_once"), __copy__(pthread_once)));
static __typeof(pthread_getspecific) __gthrw_pthread_getspecific
    __attribute__((__weakref__("pthread_getspecific"), __copy__(pthread_getspecific)));
static __typeof(pthread_setspecific) __gthrw_pthread_setspecific
    __attribute__((__weakref__("pthread_setspecific"), __copy__(pthread_setspecific)));
static __typeof(pthread_create) __gthrw_pthread_create
    __attribute__((__weakref__("pthread_create"), __copy__(pthread_create)));
static __typeof(pthread_join) __gthrw_pthread_join __attribute__((__weakref__("pthread_join"), __copy__(pthread_join)));
static __typeof(pthread_equal) __gthrw_pthread_equal
    __attribute__((__weakref__("pthread_equal"), __copy__(pthread_equal)));
static __typeof(pthread_self) __gthrw_pthread_self __attribute__((__weakref__("pthread_self"), __copy__(pthread_self)));
static __typeof(pthread_detach) __gthrw_pthread_detach
    __attribute__((__weakref__("pthread_detach"), __copy__(pthread_detach)));
static __typeof(pthread_cancel) __gthrw_pthread_cancel
    __attribute__((__weakref__("pthread_cancel"), __copy__(pthread_cancel)));
static __typeof(sched_yield) __gthrw_sched_yield __attribute__((__weakref__("sched_yield"), __copy__(sched_yield)));
static __typeof(pthread_mutex_lock) __gthrw_pthread_mutex_lock
    __attribute__((__weakref__("pthread_mutex_lock"), __copy__(pthread_mutex_lock)));
static __typeof(pthread_mutex_trylock) __gthrw_pthread_mutex_trylock
    __attribute__((__weakref__("pthread_mutex_trylock"), __copy__(pthread_mutex_trylock)));
static __typeof(pthread_mutex_timedlock) __gthrw_pthread_mutex_timedlock
    __attribute__((__weakref__("pthread_mutex_timedlock"), __copy__(pthread_mutex_timedlock)));
static __typeof(pthread_mutex_unlock) __gthrw_pthread_mutex_unlock
    __attribute__((__weakref__("pthread_mutex_unlock"), __copy__(pthread_mutex_unlock)));
static __typeof(pthread_mutex_init) __gthrw_pthread_mutex_init
    __attribute__((__weakref__("pthread_mutex_init"), __copy__(pthread_mutex_init)));
static __typeof(pthread_mutex_destroy) __gthrw_pthread_mutex_destroy
    __attribute__((__weakref__("pthread_mutex_destroy"), __copy__(pthread_mutex_destroy)));
static __typeof(pthread_cond_init) __gthrw_pthread_cond_init
    __attribute__((__weakref__("pthread_cond_init"), __copy__(pthread_cond_init)));
static __typeof(pthread_cond_broadcast) __gthrw_pthread_cond_broadcast
    __attribute__((__weakref__("pthread_cond_broadcast"), __copy__(pthread_cond_broadcast)));
static __typeof(pthread_cond_signal) __gthrw_pthread_cond_signal
    __attribute__((__weakref__("pthread_cond_signal"), __copy__(pthread_cond_signal)));
static __typeof(pthread_cond_wait) __gthrw_pthread_cond_wait
    __attribute__((__weakref__("pthread_cond_wait"), __copy__(pthread_cond_wait)));
static __typeof(pthread_cond_timedwait) __gthrw_pthread_cond_timedwait
    __attribute__((__weakref__("pthread_cond_timedwait"), __copy__(pthread_cond_timedwait)));
static __typeof(pthread_cond_destroy) __gthrw_pthread_cond_destroy
    __attribute__((__weakref__("pthread_cond_destroy"), __copy__(pthread_cond_destroy)));
static __typeof(pthread_key_create) __gthrw_pthread_key_create
    __attribute__((__weakref__("pthread_key_create"), __copy__(pthread_key_create)));
static __typeof(pthread_key_delete) __gthrw_pthread_key_delete
    __attribute__((__weakref__("pthread_key_delete"), __copy__(pthread_key_delete)));
static __typeof(pthread_mutexattr_init) __gthrw_pthread_mutexattr_init
    __attribute__((__weakref__("pthread_mutexattr_init"), __copy__(pthread_mutexattr_init)));
static __typeof(pthread_mutexattr_settype) __gthrw_pthread_mutexattr_settype
    __attribute__((__weakref__("pthread_mutexattr_settype"), __copy__(pthread_mutexattr_settype)));
static __typeof(pthread_mutexattr_destroy) __gthrw_pthread_mutexattr_destroy
    __attribute__((__weakref__("pthread_mutexattr_destroy"), __copy__(pthread_mutexattr_destroy)));
static __typeof(pthread_key_create) __gthrw___pthread_key_create
    __attribute__((__weakref__("__pthread_key_create"), __copy__(pthread_key_create)));
static inline int __gthread_active_p(void)
{
  static void* const __gthread_active_ptr = __extension__(void*) & __gthrw___pthread_key_create;
  return __gthread_active_ptr != 0;
}
static inline int __gthread_create(__gthread_t* __threadid, void* (*__func)(void*), void* __args)
{
  return __gthrw_pthread_create(__threadid, __null, __func, __args);
}
static inline int __gthread_join(__gthread_t __threadid, void** __value_ptr)
{
  return __gthrw_pthread_join(__threadid, __value_ptr);
}
static inline int __gthread_detach(__gthread_t __threadid)
{
  return __gthrw_pthread_detach(__threadid);
}
static inline int __gthread_equal(__gthread_t __t1, __gthread_t __t2)
{
  return __gthrw_pthread_equal(__t1, __t2);
}
static inline __gthread_t __gthread_self(void)
{
  return __gthrw_pthread_self();
}
static inline int __gthread_yield(void)
{
  return __gthrw_sched_yield();
}
static inline int __gthread_once(__gthread_once_t* __once, void (*__func)(void))
{
  if (__gthread_active_p())
    return __gthrw_pthread_once(__once, __func);
  else
    return -1;
}
static inline int __gthread_key_create(__gthread_key_t* __key, void (*__dtor)(void*))
{
  return __gthrw_pthread_key_create(__key, __dtor);
}
static inline int __gthread_key_delete(__gthread_key_t __key)
{
  return __gthrw_pthread_key_delete(__key);
}
static inline void* __gthread_getspecific(__gthread_key_t __key)
{
  return __gthrw_pthread_getspecific(__key);
}
static inline int __gthread_setspecific(__gthread_key_t __key, const void* __ptr)
{
  return __gthrw_pthread_setspecific(__key, __ptr);
}
static inline void __gthread_mutex_init_function(__gthread_mutex_t* __mutex)
{
  if (__gthread_active_p())
    __gthrw_pthread_mutex_init(__mutex, __null);
}
static inline int __gthread_mutex_destroy(__gthread_mutex_t* __mutex)
{
  if (__gthread_active_p())
    return __gthrw_pthread_mutex_destroy(__mutex);
  else
    return 0;
}
static inline int __gthread_mutex_lock(__gthread_mutex_t* __mutex)
{
  if (__gthread_active_p())
    return __gthrw_pthread_mutex_lock(__mutex);
  else
    return 0;
}
static inline int __gthread_mutex_trylock(__gthread_mutex_t* __mutex)
{
  if (__gthread_active_p())
    return __gthrw_pthread_mutex_trylock(__mutex);
  else
    return 0;
}
static inline int __gthread_mutex_timedlock(__gthread_mutex_t* __mutex, const __gthread_time_t* __abs_timeout)
{
  if (__gthread_active_p())
    return __gthrw_pthread_mutex_timedlock(__mutex, __abs_timeout);
  else
    return 0;
}
static inline int __gthread_mutex_unlock(__gthread_mutex_t* __mutex)
{
  if (__gthread_active_p())
    return __gthrw_pthread_mutex_unlock(__mutex);
  else
    return 0;
}
static inline int __gthread_recursive_mutex_lock(__gthread_recursive_mutex_t* __mutex)
{
  return __gthread_mutex_lock(__mutex);
}
static inline int __gthread_recursive_mutex_trylock(__gthread_recursive_mutex_t* __mutex)
{
  return __gthread_mutex_trylock(__mutex);
}
static inline int __gthread_recursive_mutex_timedlock(__gthread_recursive_mutex_t* __mutex,
                                                      const __gthread_time_t* __abs_timeout)
{
  return __gthread_mutex_timedlock(__mutex, __abs_timeout);
}
static inline int __gthread_recursive_mutex_unlock(__gthread_recursive_mutex_t* __mutex)
{
  return __gthread_mutex_unlock(__mutex);
}
static inline int __gthread_recursive_mutex_destroy(__gthread_recursive_mutex_t* __mutex)
{
  return __gthread_mutex_destroy(__mutex);
}
static inline int __gthread_cond_broadcast(__gthread_cond_t* __cond)
{
  return __gthrw_pthread_cond_broadcast(__cond);
}
static inline int __gthread_cond_signal(__gthread_cond_t* __cond)
{
  return __gthrw_pthread_cond_signal(__cond);
}
static inline int __gthread_cond_wait(__gthread_cond_t* __cond, __gthread_mutex_t* __mutex)
{
  return __gthrw_pthread_cond_wait(__cond, __mutex);
}
static inline int __gthread_cond_timedwait(__gthread_cond_t* __cond,
                                           __gthread_mutex_t* __mutex,
                                           const __gthread_time_t* __abs_timeout)
{
  return __gthrw_pthread_cond_timedwait(__cond, __mutex, __abs_timeout);
}
static inline int __gthread_cond_wait_recursive(__gthread_cond_t* __cond, __gthread_recursive_mutex_t* __mutex)
{
  return __gthread_cond_wait(__cond, __mutex);
}
static inline int __gthread_cond_destroy(__gthread_cond_t* __cond)
{
  return __gthrw_pthread_cond_destroy(__cond);
}
#pragma GCC visibility pop
typedef int _Atomic_word;
namespace __gnu_cxx __attribute__((__visibility__("default")))
{
  static inline _Atomic_word __exchange_and_add(volatile _Atomic_word * __mem, int __val)
  {
    return __atomic_fetch_add(__mem, __val, 4);
  }
  static inline void __atomic_add(volatile _Atomic_word * __mem, int __val) { __atomic_fetch_add(__mem, __val, 4); }
  static inline _Atomic_word __exchange_and_add_single(_Atomic_word * __mem, int __val)
  {
    _Atomic_word __result = *__mem;
    *__mem += __val;
    return __result;
  }
  static inline void __atomic_add_single(_Atomic_word * __mem, int __val) { *__mem += __val; }
  static inline _Atomic_word __attribute__((__unused__)) __exchange_and_add_dispatch(_Atomic_word * __mem, int __val)
  {
    if (__gthread_active_p())
      return __exchange_and_add(__mem, __val);
    else
      return __exchange_and_add_single(__mem, __val);
  }
  static inline void __attribute__((__unused__)) __atomic_add_dispatch(_Atomic_word * __mem, int __val)
  {
    if (__gthread_active_p())
      __atomic_add(__mem, __val);
    else
      __atomic_add_single(__mem, __val);
  }
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  struct __allocator_traits_base
  {
    template <typename _Tp, typename _Up, typename = void>
    struct __rebind : __replace_first_arg<_Tp, _Up>
    {
    };
    template <typename _Tp, typename _Up>
    struct __rebind<_Tp, _Up, __void_t<typename _Tp::template rebind<_Up>::other>>
    {
      using type = typename _Tp::template rebind<_Up>::other;
    };

  protected:
    template <typename _Tp>
    using __pointer = typename _Tp::pointer;
    template <typename _Tp>
    using __c_pointer = typename _Tp::const_pointer;
    template <typename _Tp>
    using __v_pointer = typename _Tp::void_pointer;
    template <typename _Tp>
    using __cv_pointer = typename _Tp::const_void_pointer;
    template <typename _Tp>
    using __pocca = typename _Tp::propagate_on_container_copy_assignment;
    template <typename _Tp>
    using __pocma = typename _Tp::propagate_on_container_move_assignment;
    template <typename _Tp>
    using __pocs = typename _Tp::propagate_on_container_swap;
    template <typename _Tp>
    using __equal = typename _Tp::is_always_equal;
  };
  template <typename _Alloc, typename _Up>
  using __alloc_rebind = typename __allocator_traits_base::template __rebind<_Alloc, _Up>::type;
  template <typename _Alloc>
  struct allocator_traits : __allocator_traits_base
  {
    typedef _Alloc allocator_type;
    typedef typename _Alloc::value_type value_type;
    using pointer = __detected_or_t<value_type*, __pointer, _Alloc>;

  private:
    template <template <typename> class _Func, typename _Tp, typename = void>
    struct _Ptr
    {
      using type = typename pointer_traits<pointer>::template rebind<_Tp>;
    };
    template <template <typename> class _Func, typename _Tp>
    struct _Ptr<_Func, _Tp, __void_t<_Func<_Alloc>>>
    {
      using type = _Func<_Alloc>;
    };
    template <typename _A2, typename _PtrT, typename = void>
    struct _Diff
    {
      using type = typename pointer_traits<_PtrT>::difference_type;
    };
    template <typename _A2, typename _PtrT>
    struct _Diff<_A2, _PtrT, __void_t<typename _A2::difference_type>>
    {
      using type = typename _A2::difference_type;
    };
    template <typename _A2, typename _DiffT, typename = void>
    struct _Size : make_unsigned<_DiffT>
    {
    };
    template <typename _A2, typename _DiffT>
    struct _Size<_A2, _DiffT, __void_t<typename _A2::size_type>>
    {
      using type = typename _A2::size_type;
    };

  public:
    using const_pointer = typename _Ptr<__c_pointer, const value_type>::type;
    using void_pointer = typename _Ptr<__v_pointer, void>::type;
    using const_void_pointer = typename _Ptr<__cv_pointer, const void>::type;
    using difference_type = typename _Diff<_Alloc, pointer>::type;
    using size_type = typename _Size<_Alloc, difference_type>::type;
    using propagate_on_container_copy_assignment = __detected_or_t<false_type, __pocca, _Alloc>;
    using propagate_on_container_move_assignment = __detected_or_t<false_type, __pocma, _Alloc>;
    using propagate_on_container_swap = __detected_or_t<false_type, __pocs, _Alloc>;
    using is_always_equal = __detected_or_t<typename is_empty<_Alloc>::type, __equal, _Alloc>;
    template <typename _Tp>
    using rebind_alloc = __alloc_rebind<_Alloc, _Tp>;
    template <typename _Tp>
    using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;

  private:
    template <typename _Alloc2>
    static auto _S_allocate(_Alloc2& __a, size_type __n, const_void_pointer __hint, int)
        -> decltype(__a.allocate(__n, __hint))
    {
      return __a.allocate(__n, __hint);
    }
    template <typename _Alloc2>
    static pointer _S_allocate(_Alloc2& __a, size_type __n, const_void_pointer, ...)
    {
      return __a.allocate(__n);
    }
    template <typename _Tp, typename... _Args>
    struct __construct_helper
    {
      template <typename _Alloc2,
                typename = decltype(std::declval<_Alloc2*>()->construct(std::declval<_Tp*>(),
                                                                        std::declval<_Args>()...))>
      static true_type __test(int);
      template <typename>
      static false_type __test(...);
      using type = decltype(__test<_Alloc>(0));
    };
    template <typename _Tp, typename... _Args>
    using __has_construct = typename __construct_helper<_Tp, _Args...>::type;
    template <typename _Tp, typename... _Args>
    static _Require<__has_construct<_Tp, _Args...>> _S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args) noexcept(
        noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
    {
      __a.construct(__p, std::forward<_Args>(__args)...);
    }
    template <typename _Tp, typename... _Args>
    static _Require<__and_<__not_<__has_construct<_Tp, _Args...>>, is_constructible<_Tp, _Args...>>>
    _S_construct(_Alloc&, _Tp* __p, _Args&&... __args) noexcept(std::is_nothrow_constructible<_Tp, _Args...>::value)
    {
      ::new ((void*)__p) _Tp(std::forward<_Args>(__args)...);
    }
    template <typename _Alloc2, typename _Tp>
    static auto _S_destroy(_Alloc2& __a, _Tp* __p, int) noexcept(noexcept(__a.destroy(__p)))
        -> decltype(__a.destroy(__p))
    {
      __a.destroy(__p);
    }
    template <typename _Alloc2, typename _Tp>
    static void _S_destroy(_Alloc2&, _Tp* __p, ...) noexcept(std::is_nothrow_destructible<_Tp>::value)
    {
      __p->~_Tp();
    }
    template <typename _Alloc2>
    static auto _S_max_size(_Alloc2& __a, int) -> decltype(__a.max_size())
    {
      return __a.max_size();
    }
    template <typename _Alloc2>
    static size_type _S_max_size(_Alloc2&, ...)
    {
      return __gnu_cxx::__numeric_traits<size_type>::__max / sizeof(value_type);
    }
    template <typename _Alloc2>
    static auto _S_select(_Alloc2& __a, int) -> decltype(__a.select_on_container_copy_construction())
    {
      return __a.select_on_container_copy_construction();
    }
    template <typename _Alloc2>
    static _Alloc2 _S_select(_Alloc2& __a, ...)
    {
      return __a;
    }

  public:
    [[__nodiscard__]] static pointer allocate(_Alloc& __a, size_type __n) { return __a.allocate(__n); }
    [[__nodiscard__]] static pointer allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)
    {
      return _S_allocate(__a, __n, __hint, 0);
    }
    static void deallocate(_Alloc& __a, pointer __p, size_type __n) { __a.deallocate(__p, __n); }
    template <typename _Tp, typename... _Args>
    static auto construct(_Alloc& __a,
                          _Tp* __p,
                          _Args&&... __args) noexcept(noexcept(_S_construct(__a, __p, std::forward<_Args>(__args)...)))
        -> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
    {
      _S_construct(__a, __p, std::forward<_Args>(__args)...);
    }
    template <typename _Tp>
    static void destroy(_Alloc& __a, _Tp* __p) noexcept(noexcept(_S_destroy(__a, __p, 0)))
    {
      _S_destroy(__a, __p, 0);
    }
    static size_type max_size(const _Alloc& __a) noexcept { return _S_max_size(__a, 0); }
    static _Alloc select_on_container_copy_construction(const _Alloc& __rhs) { return _S_select(__rhs, 0); }
  };
  template <typename _Tp>
  struct allocator_traits<allocator<_Tp>>
  {
    using allocator_type = allocator<_Tp>;
    using value_type = _Tp;
    using pointer = _Tp*;
    using const_pointer = const _Tp*;
    using void_pointer = void*;
    using const_void_pointer = const void*;
    using difference_type = std::ptrdiff_t;
    using size_type = std::size_t;
    using propagate_on_container_copy_assignment = false_type;
    using propagate_on_container_move_assignment = true_type;
    using propagate_on_container_swap = false_type;
    using is_always_equal = true_type;
    template <typename _Up>
    using rebind_alloc = allocator<_Up>;
    template <typename _Up>
    using rebind_traits = allocator_traits<allocator<_Up>>;
    [[__nodiscard__]] static pointer allocate(allocator_type& __a, size_type __n) { return __a.allocate(__n); }
    [[__nodiscard__]] static pointer allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)
    {
      return __a.allocate(__n, __hint);
    }
    static void deallocate(allocator_type& __a, pointer __p, size_type __n) { __a.deallocate(__p, __n); }
    template <typename _Up, typename... _Args>
    static void construct(allocator_type& __a,
                          _Up* __p,
                          _Args&&... __args) noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
    {
      __a.construct(__p, std::forward<_Args>(__args)...);
    }
    template <typename _Up>
    static void destroy(allocator_type& __a, _Up* __p) noexcept(noexcept(__a.destroy(__p)))
    {
      __a.destroy(__p);
    }
    static size_type max_size(const allocator_type& __a) noexcept { return __a.max_size(); }
    static allocator_type select_on_container_copy_construction(const allocator_type& __rhs) { return __rhs; }
  };
  template <typename _Alloc>
  inline void __do_alloc_on_copy(_Alloc & __one, const _Alloc& __two, true_type)
  {
    __one = __two;
  }
  template <typename _Alloc>
  inline void __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
  {
  }
  template <typename _Alloc>
  inline void __alloc_on_copy(_Alloc & __one, const _Alloc& __two)
  {
    typedef allocator_traits<_Alloc> __traits;
    typedef typename __traits::propagate_on_container_copy_assignment __pocca;
    __do_alloc_on_copy(__one, __two, __pocca());
  }
  template <typename _Alloc>
  inline _Alloc __alloc_on_copy(const _Alloc& __a)
  {
    typedef allocator_traits<_Alloc> __traits;
    return __traits::select_on_container_copy_construction(__a);
  }
  template <typename _Alloc>
  inline void __do_alloc_on_move(_Alloc & __one, _Alloc & __two, true_type)
  {
    __one = std::move(__two);
  }
  template <typename _Alloc>
  inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
  {
  }
  template <typename _Alloc>
  inline void __alloc_on_move(_Alloc & __one, _Alloc & __two)
  {
    typedef allocator_traits<_Alloc> __traits;
    typedef typename __traits::propagate_on_container_move_assignment __pocma;
    __do_alloc_on_move(__one, __two, __pocma());
  }
  template <typename _Alloc>
  inline void __do_alloc_on_swap(_Alloc & __one, _Alloc & __two, true_type)
  {
    using std::swap;
    swap(__one, __two);
  }
  template <typename _Alloc>
  inline void __do_alloc_on_swap(_Alloc&, _Alloc&, false_type)
  {
  }
  template <typename _Alloc>
  inline void __alloc_on_swap(_Alloc & __one, _Alloc & __two)
  {
    typedef allocator_traits<_Alloc> __traits;
    typedef typename __traits::propagate_on_container_swap __pocs;
    __do_alloc_on_swap(__one, __two, __pocs());
  }
  template <typename _Alloc,
            typename _Tp,
            typename _ValueT = __remove_cvref_t<typename _Alloc::value_type>,
            typename = void>
  struct __is_alloc_insertable_impl : false_type
  {
  };
  template <typename _Alloc, typename _Tp, typename _ValueT>
  struct __is_alloc_insertable_impl<_Alloc,
                                    _Tp,
                                    _ValueT,
                                    __void_t<decltype(allocator_traits<_Alloc>::construct(
                                        std::declval<_Alloc&>(), std::declval<_ValueT*>(), std::declval<_Tp>()))>>
      : true_type
  {
  };
  template <typename _Alloc>
  struct __is_copy_insertable : __is_alloc_insertable_impl<_Alloc, typename _Alloc::value_type const&>::type
  {
  };
  template <typename _Tp>
  struct __is_copy_insertable<allocator<_Tp>> : is_copy_constructible<_Tp>
  {
  };
  template <typename _Alloc>
  struct __is_move_insertable : __is_alloc_insertable_impl<_Alloc, typename _Alloc::value_type>::type
  {
  };
  template <typename _Tp>
  struct __is_move_insertable<allocator<_Tp>> : is_move_constructible<_Tp>
  {
  };
  template <typename _Alloc, typename = void>
  struct __is_allocator : false_type
  {
  };
  template <typename _Alloc>
  struct __is_allocator<_Alloc,
                        __void_t<typename _Alloc::value_type, decltype(std::declval<_Alloc&>().allocate(size_t{}))>>
      : true_type
  {
  };
  template <typename _Alloc>
  using _RequireAllocator = typename enable_if<__is_allocator<_Alloc>::value, _Alloc>::type;
  template <typename _Alloc>
  using _RequireNotAllocator = typename enable_if<!__is_allocator<_Alloc>::value, _Alloc>::type;
}  // namespace )
namespace __gnu_cxx __attribute__((__visibility__("default")))
{
  template <typename _Alloc, typename = typename _Alloc::value_type>
  struct __alloc_traits : std::allocator_traits<_Alloc>
  {
    typedef _Alloc allocator_type;
    typedef std::allocator_traits<_Alloc> _Base_type;
    typedef typename _Base_type::value_type value_type;
    typedef typename _Base_type::pointer pointer;
    typedef typename _Base_type::const_pointer const_pointer;
    typedef typename _Base_type::size_type size_type;
    typedef typename _Base_type::difference_type difference_type;
    typedef value_type& reference;
    typedef const value_type& const_reference;
    using _Base_type::allocate;
    using _Base_type::construct;
    using _Base_type::deallocate;
    using _Base_type::destroy;
    using _Base_type::max_size;

  private:
    template <typename _Ptr>
    using __is_custom_pointer = std::__and_<std::is_same<pointer, _Ptr>, std::__not_<std::is_pointer<_Ptr>>>;

  public:
    template <typename _Ptr, typename... _Args>
    static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
    construct(_Alloc& __a, _Ptr __p, _Args&&... __args) noexcept(
        noexcept(_Base_type::construct(__a, std::__to_address(__p), std::forward<_Args>(__args)...)))
    {
      _Base_type::construct(__a, std::__to_address(__p), std::forward<_Args>(__args)...);
    }
    template <typename _Ptr>
    static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type destroy(_Alloc& __a, _Ptr __p) noexcept(
        noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
    {
      _Base_type::destroy(__a, std::__to_address(__p));
    }
    static _Alloc _S_select_on_copy(const _Alloc& __a)
    {
      return _Base_type::select_on_container_copy_construction(__a);
    }
    static void _S_on_swap(_Alloc& __a, _Alloc& __b) { std::__alloc_on_swap(__a, __b); }
    static constexpr bool _S_propagate_on_copy_assign()
    {
      return _Base_type::propagate_on_container_copy_assignment::value;
    }
    static constexpr bool _S_propagate_on_move_assign()
    {
      return _Base_type::propagate_on_container_move_assignment::value;
    }
    static constexpr bool _S_propagate_on_swap() { return _Base_type::propagate_on_container_swap::value; }
    static constexpr bool _S_always_equal() { return _Base_type::is_always_equal::value; }
    static constexpr bool _S_nothrow_move() { return _S_propagate_on_move_assign() || _S_always_equal(); }
    template <typename _Tp>
    struct rebind
    {
      typedef typename _Base_type::template rebind_alloc<_Tp> other;
    };
  };
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  enum float_round_style
  {
    round_indeterminate = -1,
    round_toward_zero = 0,
    round_to_nearest = 1,
    round_toward_infinity = 2,
    round_toward_neg_infinity = 3
  };
  enum float_denorm_style
  {
    denorm_indeterminate = -1,
    denorm_absent = 0,
    denorm_present = 1
  };
  struct __numeric_limits_base
  {
    static constexpr bool is_specialized = false;
    static constexpr int digits = 0;
    static constexpr int digits10 = 0;
    static constexpr int max_digits10 = 0;
    static constexpr bool is_signed = false;
    static constexpr bool is_integer = false;
    static constexpr bool is_exact = false;
    static constexpr int radix = 0;
    static constexpr int min_exponent = 0;
    static constexpr int min_exponent10 = 0;
    static constexpr int max_exponent = 0;
    static constexpr int max_exponent10 = 0;
    static constexpr bool has_infinity = false;
    static constexpr bool has_quiet_NaN = false;
    static constexpr bool has_signaling_NaN = false;
    static constexpr float_denorm_style has_denorm = denorm_absent;
    static constexpr bool has_denorm_loss = false;
    static constexpr bool is_iec559 = false;
    static constexpr bool is_bounded = false;
    static constexpr bool is_modulo = false;
    static constexpr bool traps = false;
    static constexpr bool tinyness_before = false;
    static constexpr float_round_style round_style = round_toward_zero;
  };
  template <typename _Tp>
  struct numeric_limits : public __numeric_limits_base
  {
    static constexpr _Tp min() noexcept { return _Tp(); }
    static constexpr _Tp max() noexcept { return _Tp(); }
    static constexpr _Tp lowest() noexcept { return _Tp(); }
    static constexpr _Tp epsilon() noexcept { return _Tp(); }
    static constexpr _Tp round_error() noexcept { return _Tp(); }
    static constexpr _Tp infinity() noexcept { return _Tp(); }
    static constexpr _Tp quiet_NaN() noexcept { return _Tp(); }
    static constexpr _Tp signaling_NaN() noexcept { return _Tp(); }
    static constexpr _Tp denorm_min() noexcept { return _Tp(); }
  };
  template <typename _Tp>
  struct numeric_limits<const _Tp> : public numeric_limits<_Tp>
  {
  };
  template <typename _Tp>
  struct numeric_limits<volatile _Tp> : public numeric_limits<_Tp>
  {
  };
  template <typename _Tp>
  struct numeric_limits<const volatile _Tp> : public numeric_limits<_Tp>
  {
  };
  template <>
  struct numeric_limits<bool>
  {
    static constexpr bool is_specialized = true;
    static constexpr bool min() noexcept { return false; }
    static constexpr bool max() noexcept { return true; }
    static constexpr bool lowest() noexcept { return min(); }
    static constexpr int digits = 1;
    static constexpr int digits10 = 0;
    static constexpr int max_digits10 = 0;
    static constexpr bool is_signed = false;
    static constexpr bool is_integer = true;
    static constexpr bool is_exact = true;
    static constexpr int radix = 2;
    static constexpr bool epsilon() noexcept { return false; }
    static constexpr bool round_error() noexcept { return false; }
    static constexpr int min_exponent = 0;
    static constexpr int min_exponent10 = 0;
    static constexpr int max_exponent = 0;
    static constexpr int max_exponent10 = 0;
    static constexpr bool has_infinity = false;
    static constexpr bool has_quiet_NaN = false;
    static constexpr bool has_signaling_NaN = false;
    static constexpr float_denorm_style has_denorm = denorm_absent;
    static constexpr bool has_denorm_loss = false;
    static constexpr bool infinity() noexcept { return false; }
    static constexpr bool quiet_NaN() noexcept { return false; }
    static constexpr bool signaling_NaN() noexcept { return false; }
    static constexpr bool denorm_min() noexcept { return false; }
    static constexpr bool is_iec559 = false;
    static constexpr bool is_bounded = true;
    static constexpr bool is_modulo = false;
    static constexpr bool traps = true;
    static constexpr bool tinyness_before = false;
    static constexpr float_round_style round_style = round_toward_zero;
  };
  template <>
  struct numeric_limits<char>
  {
    static constexpr bool is_specialized = true;
    static constexpr char min() noexcept
    {
      return (((char)(-1) < 0)
                  ? -(((char)(-1) < 0) ? (((((char)1 << ((sizeof(char) * 8 - ((char)(-1) < 0)) - 1)) - 1) << 1) + 1)
                                       : ~(char)0) -
                        1
                  : (char)0);
    }
    static constexpr char max() noexcept
    {
      return (((char)(-1) < 0) ? (((((char)1 << ((sizeof(char) * 8 - ((char)(-1) < 0)) - 1)) - 1) << 1) + 1)
                               : ~(char)0);
    }
    static constexpr char lowest() noexcept { return min(); }
    static constexpr int digits = (sizeof(char) * 8 - ((char)(-1) < 0));
    static constexpr int digits10 = ((sizeof(char) * 8 - ((char)(-1) < 0)) * 643L / 2136);
    static constexpr int max_digits10 = 0;
    static constexpr bool is_signed = ((char)(-1) < 0);
    static constexpr bool is_integer = true;
    static constexpr bool is_exact = true;
    static constexpr int radix = 2;
    static constexpr char epsilon() noexcept { return 0; }
    static constexpr char round_error() noexcept { return 0; }
    static constexpr int min_exponent = 0;
    static constexpr int min_exponent10 = 0;
    static constexpr int max_exponent = 0;
    static constexpr int max_exponent10 = 0;
    static constexpr bool has_infinity = false;
    static constexpr bool has_quiet_NaN = false;
    static constexpr bool has_signaling_NaN = false;
    static constexpr float_denorm_style has_denorm = denorm_absent;
    static constexpr bool has_denorm_loss = false;
    static constexpr char infinity() noexcept { return char(); }
    static constexpr char quiet_NaN() noexcept { return char(); }
    static constexpr char signaling_NaN() noexcept { return char(); }
    static constexpr char denorm_min() noexcept { return static_cast<char>(0); }
    static constexpr bool is_iec559 = false;
    static constexpr bool is_bounded = true;
    static constexpr bool is_modulo = !is_signed;
    static constexpr bool traps = true;
    static constexpr bool tinyness_before = false;
    static constexpr float_round_style round_style = round_toward_zero;
  };
  template <>
  struct numeric_limits<signed char>
  {
    static constexpr bool is_specialized = true;
    static constexpr signed char min() noexcept { return -0x7f - 1; }
    static constexpr signed char max() noexcept { return 0x7f; }
    static constexpr signed char lowest() noexcept { return min(); }
    static constexpr int digits = (sizeof(signed char) * 8 - ((signed char)(-1) < 0));
    static constexpr int digits10 = ((sizeof(signed char) * 8 - ((signed char)(-1) < 0)) * 643L / 2136);
    static constexpr int max_digits10 = 0;
    static constexpr bool is_signed = true;
    static constexpr bool is_integer = true;
    static constexpr bool is_exact = true;
    static constexpr int radix = 2;
    static constexpr signed char epsilon() noexcept { return 0; }
    static constexpr signed char round_error() noexcept { return 0; }
    static constexpr int min_exponent = 0;
    static constexpr int min_exponent10 = 0;
    static constexpr int max_exponent = 0;
    static constexpr int max_exponent10 = 0;
    static constexpr bool has_infinity = false;
    static constexpr bool has_quiet_NaN = false;
    static constexpr bool has_signaling_NaN = false;
    static constexpr float_denorm_style has_denorm = denorm_absent;
    static constexpr bool has_denorm_loss = false;
    static constexpr signed char infinity() noexcept { return static_cast<signed char>(0); }
    static constexpr signed char quiet_NaN() noexcept { return static_cast<signed char>(0); }
    static constexpr signed char signaling_NaN() noexcept { return static_cast<signed char>(0); }
    static constexpr signed char denorm_min() noexcept { return static_cast<signed char>(0); }
    static constexpr bool is_iec559 = false;
    static constexpr bool is_bounded = true;
    static constexpr bool is_modulo = false;
    static constexpr bool traps = true;
    static constexpr bool tinyness_before = false;
    static constexpr float_round_style round_style = round_toward_zero;
  };
  template <>
  struct numeric_limits<unsigned char>
  {
    static constexpr bool is_specialized = true;
    static constexpr unsigned char min() noexcept { return 0; }
    static constexpr unsigned char max() noexcept { return 0x7f * 2U + 1; }
    static constexpr unsigned char lowest() noexcept { return min(); }
    static constexpr int digits = (sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0));
    static constexpr int digits10 = ((sizeof(unsigned char) * 8 - ((unsigned char)(-1) < 0)) * 643L / 2136);
    static constexpr int max_digits10 = 0;
    static constexpr bool is_signed = false;
    static constexpr bool is_integer = true;
    static constexpr bool is_exact = true;
    static constexpr int radix = 2;
    static constexpr unsigned char epsilon() noexcept { return 0; }
    static constexpr unsigned char round_error() noexcept { return 0; }
    static constexpr int min_exponent = 0;
    static constexpr int min_exponent10 = 0;
    static constexpr int max_exponent = 0;
    static constexpr int max_exponent10 = 0;
    static constexpr bool has_infinity = false;
    static constexpr bool has_quiet_NaN = false;
    static constexpr bool has_signaling_NaN = false;
    static constexpr float_denorm_style has_denorm = denorm_absent;
    static constexpr bool has_denorm_loss = false;
    static constexpr unsigned char infinity() noexcept { return static_cast<unsigned char>(0); }
    static constexpr unsigned char quiet_NaN() noexcept { return static_cast<unsigned char>(0); }
    static constexpr unsigned char signaling_NaN() noexcept { return static_cast<unsigned char>(0); }
    static constexpr unsigned char denorm_min() noexcept { return static_cast<unsigned char>(0); }
    static constexpr bool is_iec559 = false;
    static constexpr bool is_bounded = true;
    static constexpr bool is_modulo = true;
    static constexpr bool traps = true;
    static constexpr bool tinyness_before = false;
    static constexpr float_round_style round_style = round_toward_zero;
  };
  template <>
  struct numeric_limits<wchar_t>
  {
    static constexpr bool is_specialized = true;
    static constexpr wchar_t min() noexcept
    {
      return (((wchar_t)(-1) < 0)
                  ? -(((wchar_t)(-1) < 0)
                          ? (((((wchar_t)1 << ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) - 1)) - 1) << 1) + 1)
                          : ~(wchar_t)0) -
                        1
                  : (wchar_t)0);
    }
    static constexpr wchar_t max() noexcept
    {
      return (((wchar_t)(-1) < 0) ? (((((wchar_t)1 << ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) - 1)) - 1) << 1) + 1)
                                  : ~(wchar_t)0);
    }
    static constexpr wchar_t lowest() noexcept { return min(); }
    static constexpr int digits = (sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0));
    static constexpr int digits10 = ((sizeof(wchar_t) * 8 - ((wchar_t)(-1) < 0)) * 643L / 2136);
    static constexpr int max_digits10 = 0;
    static constexpr bool is_signed = ((wchar_t)(-1) < 0);
    static constexpr bool is_integer = true;
    static constexpr bool is_exact = true;
    static constexpr int radix = 2;
    static constexpr wchar_t epsilon() noexcept { return 0; }
    static constexpr wchar_t round_error() noexcept { return 0; }
    static constexpr int min_exponent = 0;
    static constexpr int min_exponent10 = 0;
    static constexpr int max_exponent = 0;
    static constexpr int max_exponent10 = 0;
    static constexpr bool has_infinity = false;
    static constexpr bool has_quiet_NaN = false;
    static constexpr bool has_signaling_NaN = false;
    static constexpr float_denorm_style has_denorm = denorm_absent;
    static constexpr bool has_denorm_loss = false;
    static constexpr wchar_t infinity() noexcept { return wchar_t(); }
    static constexpr wchar_t quiet_NaN() noexcept { return wchar_t(); }
    static constexpr wchar_t signaling_NaN() noexcept { return wchar_t(); }
    static constexpr wchar_t denorm_min() noexcept { return wchar_t(); }
    static constexpr bool is_iec559 = false;
    static constexpr bool is_bounded = true;
    static constexpr bool is_modulo = !is_signed;
    static constexpr bool traps = true;
    static constexpr bool tinyness_before = false;
    static constexpr float_round_style round_style = round_toward_zero;
  };
  template <>
  struct numeric_limits<char16_t>
  {
    static constexpr bool is_specialized = true;
    static constexpr char16_t min() noexcept
    {
      return (((char16_t)(-1) < 0)
                  ? -(((char16_t)(-1) < 0)
                          ? (((((char16_t)1 << ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) - 1)) - 1) << 1) + 1)
                          : ~(char16_t)0) -
                        1
                  : (char16_t)0);
    }
    static constexpr char16_t max() noexcept
    {
      return (((char16_t)(-1) < 0)
                  ? (((((char16_t)1 << ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) - 1)) - 1) << 1) + 1)
                  : ~(char16_t)0);
    }
    static constexpr char16_t lowest() noexcept { return min(); }
    static constexpr int digits = (sizeof(char16_t) * 8 - ((char16_t)(-1) < 0));
    static constexpr int digits10 = ((sizeof(char16_t) * 8 - ((char16_t)(-1) < 0)) * 643L / 2136);
    static constexpr int max_digits10 = 0;
    static constexpr bool is_signed = ((char16_t)(-1) < 0);
    static constexpr bool is_integer = true;
    static constexpr bool is_exact = true;
    static constexpr int radix = 2;
    static constexpr char16_t epsilon() noexcept { return 0; }
    static constexpr char16_t round_error() noexcept { return 0; }
    static constexpr int min_exponent = 0;
    static constexpr int min_exponent10 = 0;
    static constexpr int max_exponent = 0;
    static constexpr int max_exponent10 = 0;
    static constexpr bool has_infinity = false;
    static constexpr bool has_quiet_NaN = false;
    static constexpr bool has_signaling_NaN = false;
    static constexpr float_denorm_style has_denorm = denorm_absent;
    static constexpr bool has_denorm_loss = false;
    static constexpr char16_t infinity() noexcept { return char16_t(); }
    static constexpr char16_t quiet_NaN() noexcept { return char16_t(); }
    static constexpr char16_t signaling_NaN() noexcept { return char16_t(); }
    static constexpr char16_t denorm_min() noexcept { return char16_t(); }
    static constexpr bool is_iec559 = false;
    static constexpr bool is_bounded = true;
    static constexpr bool is_modulo = !is_signed;
    static constexpr bool traps = true;
    static constexpr bool tinyness_before = false;
    static constexpr float_round_style round_style = round_toward_zero;
  };
  template <>
  struct numeric_limits<char32_t>
  {
    static constexpr bool is_specialized = true;
    static constexpr char32_t min() noexcept
    {
      return (((char32_t)(-1) < 0)
                  ? -(((char32_t)(-1) < 0)
                          ? (((((char32_t)1 << ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) - 1)) - 1) << 1) + 1)
                          : ~(char32_t)0) -
                        1
                  : (char32_t)0);
    }
    static constexpr char32_t max() noexcept
    {
      return (((char32_t)(-1) < 0)
                  ? (((((char32_t)1 << ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) - 1)) - 1) << 1) + 1)
                  : ~(char32_t)0);
    }
    static constexpr char32_t lowest() noexcept { return min(); }
    static constexpr int digits = (sizeof(char32_t) * 8 - ((char32_t)(-1) < 0));
    static constexpr int digits10 = ((sizeof(char32_t) * 8 - ((char32_t)(-1) < 0)) * 643L / 2136);
    static constexpr int max_digits10 = 0;
    static constexpr bool is_signed = ((char32_t)(-1) < 0);
    static constexpr bool is_integer = true;
    static constexpr bool is_exact = true;
    static constexpr int radix = 2;
    static constexpr char32_t epsilon() noexcept { return 0; }
    static constexpr char32_t round_error() noexcept { return 0; }
    static constexpr int min_exponent = 0;
    static constexpr int min_exponent10 = 0;
    static constexpr int max_exponent = 0;
    static constexpr int max_exponent10 = 0;
    static constexpr bool has_infinity = false;
    static constexpr bool has_quiet_NaN = false;
    static constexpr bool has_signaling_NaN = false;
    static constexpr float_denorm_style has_denorm = denorm_absent;
    static constexpr bool has_denorm_loss = false;
    static constexpr char32_t infinity() noexcept { return char32_t(); }
    static constexpr char32_t quiet_NaN() noexcept { return char32_t(); }
    static constexpr char32_t signaling_NaN() noexcept { return char32_t(); }
    static constexpr char32_t denorm_min() noexcept { return char32_t(); }
    static constexpr bool is_iec559 = false;
    static constexpr bool is_bounded = true;
    static constexpr bool is_modulo = !is_signed;
    static constexpr bool traps = true;
    static constexpr bool tinyness_before = false;
    static constexpr float_round_style round_style = round_toward_zero;
  };
  template <>
  struct numeric_limits<short>
  {
    static constexpr bool is_specialized = true;
    static constexpr short min() noexcept { return -0x7fff - 1; }
    static constexpr short max() noexcept { return 0x7fff; }
    static constexpr short lowest() noexcept { return min(); }
    static constexpr int digits = (sizeof(short) * 8 - ((short)(-1) < 0));
    static constexpr int digits10 = ((sizeof(short) * 8 - ((short)(-1) < 0)) * 643L / 2136);
    static constexpr int max_digits10 = 0;
    static constexpr bool is_signed = true;
    static constexpr bool is_integer = true;
    static constexpr bool is_exact = true;
    static constexpr int radix = 2;
    static constexpr short epsilon() noexcept { return 0; }
    static constexpr short round_error() noexcept { return 0; }
    static constexpr int min_exponent = 0;
    static constexpr int min_exponent10 = 0;
    static constexpr int max_exponent = 0;
    static constexpr int max_exponent10 = 0;
    static constexpr bool has_infinity = false;
    static constexpr bool has_quiet_NaN = false;
    static constexpr bool has_signaling_NaN = false;
    static constexpr float_denorm_style has_denorm = denorm_absent;
    static constexpr bool has_denorm_loss = false;
    static constexpr short infinity() noexcept { return short(); }
    static constexpr short quiet_NaN() noexcept { return short(); }
    static constexpr short signaling_NaN() noexcept { return short(); }
    static constexpr short denorm_min() noexcept { return short(); }
    static constexpr bool is_iec559 = false;
    static constexpr bool is_bounded = true;
    static constexpr bool is_modulo = false;
    static constexpr bool traps = true;
    static constexpr bool tinyness_before = false;
    static constexpr float_round_style round_style = round_toward_zero;
  };
  template <>
  struct numeric_limits<unsigned short>
  {
    static constexpr bool is_specialized = true;
    static constexpr unsigned short min() noexcept { return 0; }
    static constexpr unsigned short max() noexcept { return 0x7fff * 2U + 1; }
    static constexpr unsigned short lowest() noexcept { return min(); }
    static constexpr int digits = (sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0));
    static constexpr int digits10 = ((sizeof(unsigned short) * 8 - ((unsigned short)(-1) < 0)) * 643L / 2136);
    static constexpr int max_digits10 = 0;
    static constexpr bool is_signed = false;
    static constexpr bool is_integer = true;
    static constexpr bool is_exact = true;
    static constexpr int radix = 2;
    static constexpr unsigned short epsilon() noexcept { return 0; }
    static constexpr unsigned short round_error() noexcept { return 0; }
    static constexpr int min_exponent = 0;
    static constexpr int min_exponent10 = 0;
    static constexpr int max_exponent = 0;
    static constexpr int max_exponent10 = 0;
    static constexpr bool has_infinity = false;
    static constexpr bool has_quiet_NaN = false;
    static constexpr bool has_signaling_NaN = false;
    static constexpr float_denorm_style has_denorm = denorm_absent;
    static constexpr bool has_denorm_loss = false;
    static constexpr unsigned short infinity() noexcept { return static_cast<unsigned short>(0); }
    static constexpr unsigned short quiet_NaN() noexcept { return static_cast<unsigned short>(0); }
    static constexpr unsigned short signaling_NaN() noexcept { return static_cast<unsigned short>(0); }
    static constexpr unsigned short denorm_min() noexcept { return static_cast<unsigned short>(0); }
    static constexpr bool is_iec559 = false;
    static constexpr bool is_bounded = true;
    static constexpr bool is_modulo = true;
    static constexpr bool traps = true;
    static constexpr bool tinyness_before = false;
    static constexpr float_round_style round_style = round_toward_zero;
  };
  template <>
  struct numeric_limits<int>
  {
    static constexpr bool is_specialized = true;
    static constexpr int min() noexcept { return -0x7fffffff - 1; }
    static constexpr int max() noexcept { return 0x7fffffff; }
    static constexpr int lowest() noexcept { return min(); }
    static constexpr int digits = (sizeof(int) * 8 - ((int)(-1) < 0));
    static constexpr int digits10 = ((sizeof(int) * 8 - ((int)(-1) < 0)) * 643L / 2136);
    static constexpr int max_digits10 = 0;
    static constexpr bool is_signed = true;
    static constexpr bool is_integer = true;
    static constexpr bool is_exact = true;
    static constexpr int radix = 2;
    static constexpr int epsilon() noexcept { return 0; }
    static constexpr int round_error() noexcept { return 0; }
    static constexpr int min_exponent = 0;
    static constexpr int min_exponent10 = 0;
    static constexpr int max_exponent = 0;
    static constexpr int max_exponent10 = 0;
    static constexpr bool has_infinity = false;
    static constexpr bool has_quiet_NaN = false;
    static constexpr bool has_signaling_NaN = false;
    static constexpr float_denorm_style has_denorm = denorm_absent;
    static constexpr bool has_denorm_loss = false;
    static constexpr int infinity() noexcept { return static_cast<int>(0); }
    static constexpr int quiet_NaN() noexcept { return static_cast<int>(0); }
    static constexpr int signaling_NaN() noexcept { return static_cast<int>(0); }
    static constexpr int denorm_min() noexcept { return static_cast<int>(0); }
    static constexpr bool is_iec559 = false;
    static constexpr bool is_bounded = true;
    static constexpr bool is_modulo = false;
    static constexpr bool traps = true;
    static constexpr bool tinyness_before = false;
    static constexpr float_round_style round_style = round_toward_zero;
  };
  template <>
  struct numeric_limits<unsigned int>
  {
    static constexpr bool is_specialized = true;
    static constexpr unsigned int min() noexcept { return 0; }
    static constexpr unsigned int max() noexcept { return 0x7fffffff * 2U + 1; }
    static constexpr unsigned int lowest() noexcept { return min(); }
    static constexpr int digits = (sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0));
    static constexpr int digits10 = ((sizeof(unsigned int) * 8 - ((unsigned int)(-1) < 0)) * 643L / 2136);
    static constexpr int max_digits10 = 0;
    static constexpr bool is_signed = false;
    static constexpr bool is_integer = true;
    static constexpr bool is_exact = true;
    static constexpr int radix = 2;
    static constexpr unsigned int epsilon() noexcept { return 0; }
    static constexpr unsigned int round_error() noexcept { return 0; }
    static constexpr int min_exponent = 0;
    static constexpr int min_exponent10 = 0;
    static constexpr int max_exponent = 0;
    static constexpr int max_exponent10 = 0;
    static constexpr bool has_infinity = false;
    static constexpr bool has_quiet_NaN = false;
    static constexpr bool has_signaling_NaN = false;
    static constexpr float_denorm_style has_denorm = denorm_absent;
    static constexpr bool has_denorm_loss = false;
    static constexpr unsigned int infinity() noexcept { return static_cast<unsigned int>(0); }
    static constexpr unsigned int quiet_NaN() noexcept { return static_cast<unsigned int>(0); }
    static constexpr unsigned int signaling_NaN() noexcept { return static_cast<unsigned int>(0); }
    static constexpr unsigned int denorm_min() noexcept { return static_cast<unsigned int>(0); }
    static constexpr bool is_iec559 = false;
    static constexpr bool is_bounded = true;
    static constexpr bool is_modulo = true;
    static constexpr bool traps = true;
    static constexpr bool tinyness_before = false;
    static constexpr float_round_style round_style = round_toward_zero;
  };
  template <>
  struct numeric_limits<long>
  {
    static constexpr bool is_specialized = true;
    static constexpr long min() noexcept { return -0x7fffffffffffffffL - 1; }
    static constexpr long max() noexcept { return 0x7fffffffffffffffL; }
    static constexpr long lowest() noexcept { return min(); }
    static constexpr int digits = (sizeof(long) * 8 - ((long)(-1) < 0));
    static constexpr int digits10 = ((sizeof(long) * 8 - ((long)(-1) < 0)) * 643L / 2136);
    static constexpr int max_digits10 = 0;
    static constexpr bool is_signed = true;
    static constexpr bool is_integer = true;
    static constexpr bool is_exact = true;
    static constexpr int radix = 2;
    static constexpr long epsilon() noexcept { return 0; }
    static constexpr long round_error() noexcept { return 0; }
    static constexpr int min_exponent = 0;
    static constexpr int min_exponent10 = 0;
    static constexpr int max_exponent = 0;
    static constexpr int max_exponent10 = 0;
    static constexpr bool has_infinity = false;
    static constexpr bool has_quiet_NaN = false;
    static constexpr bool has_signaling_NaN = false;
    static constexpr float_denorm_style has_denorm = denorm_absent;
    static constexpr bool has_denorm_loss = false;
    static constexpr long infinity() noexcept { return static_cast<long>(0); }
    static constexpr long quiet_NaN() noexcept { return static_cast<long>(0); }
    static constexpr long signaling_NaN() noexcept { return static_cast<long>(0); }
    static constexpr long denorm_min() noexcept { return static_cast<long>(0); }
    static constexpr bool is_iec559 = false;
    static constexpr bool is_bounded = true;
    static constexpr bool is_modulo = false;
    static constexpr bool traps = true;
    static constexpr bool tinyness_before = false;
    static constexpr float_round_style round_style = round_toward_zero;
  };
  template <>
  struct numeric_limits<unsigned long>
  {
    static constexpr bool is_specialized = true;
    static constexpr unsigned long min() noexcept { return 0; }
    static constexpr unsigned long max() noexcept { return 0x7fffffffffffffffL * 2UL + 1; }
    static constexpr unsigned long lowest() noexcept { return min(); }
    static constexpr int digits = (sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0));
    static constexpr int digits10 = ((sizeof(unsigned long) * 8 - ((unsigned long)(-1) < 0)) * 643L / 2136);
    static constexpr int max_digits10 = 0;
    static constexpr bool is_signed = false;
    static constexpr bool is_integer = true;
    static constexpr bool is_exact = true;
    static constexpr int radix = 2;
    static constexpr unsigned long epsilon() noexcept { return 0; }
    static constexpr unsigned long round_error() noexcept { return 0; }
    static constexpr int min_exponent = 0;
    static constexpr int min_exponent10 = 0;
    static constexpr int max_exponent = 0;
    static constexpr int max_exponent10 = 0;
    static constexpr bool has_infinity = false;
    static constexpr bool has_quiet_NaN = false;
    static constexpr bool has_signaling_NaN = false;
    static constexpr float_denorm_style has_denorm = denorm_absent;
    static constexpr bool has_denorm_loss = false;
    static constexpr unsigned long infinity() noexcept { return static_cast<unsigned long>(0); }
    static constexpr unsigned long quiet_NaN() noexcept { return static_cast<unsigned long>(0); }
    static constexpr unsigned long signaling_NaN() noexcept { return static_cast<unsigned long>(0); }
    static constexpr unsigned long denorm_min() noexcept { return static_cast<unsigned long>(0); }
    static constexpr bool is_iec559 = false;
    static constexpr bool is_bounded = true;
    static constexpr bool is_modulo = true;
    static constexpr bool traps = true;
    static constexpr bool tinyness_before = false;
    static constexpr float_round_style round_style = round_toward_zero;
  };
  template <>
  struct numeric_limits<long long>
  {
    static constexpr bool is_specialized = true;
    static constexpr long long min() noexcept { return -0x7fffffffffffffffLL - 1; }
    static constexpr long long max() noexcept { return 0x7fffffffffffffffLL; }
    static constexpr long long lowest() noexcept { return min(); }
    static constexpr int digits = (sizeof(long long) * 8 - ((long long)(-1) < 0));
    static constexpr int digits10 = ((sizeof(long long) * 8 - ((long long)(-1) < 0)) * 643L / 2136);
    static constexpr int max_digits10 = 0;
    static constexpr bool is_signed = true;
    static constexpr bool is_integer = true;
    static constexpr bool is_exact = true;
    static constexpr int radix = 2;
    static constexpr long long epsilon() noexcept { return 0; }
    static constexpr long long round_error() noexcept { return 0; }
    static constexpr int min_exponent = 0;
    static constexpr int min_exponent10 = 0;
    static constexpr int max_exponent = 0;
    static constexpr int max_exponent10 = 0;
    static constexpr bool has_infinity = false;
    static constexpr bool has_quiet_NaN = false;
    static constexpr bool has_signaling_NaN = false;
    static constexpr float_denorm_style has_denorm = denorm_absent;
    static constexpr bool has_denorm_loss = false;
    static constexpr long long infinity() noexcept { return static_cast<long long>(0); }
    static constexpr long long quiet_NaN() noexcept { return static_cast<long long>(0); }
    static constexpr long long signaling_NaN() noexcept { return static_cast<long long>(0); }
    static constexpr long long denorm_min() noexcept { return static_cast<long long>(0); }
    static constexpr bool is_iec559 = false;
    static constexpr bool is_bounded = true;
    static constexpr bool is_modulo = false;
    static constexpr bool traps = true;
    static constexpr bool tinyness_before = false;
    static constexpr float_round_style round_style = round_toward_zero;
  };
  template <>
  struct numeric_limits<unsigned long long>
  {
    static constexpr bool is_specialized = true;
    static constexpr unsigned long long min() noexcept { return 0; }
    static constexpr unsigned long long max() noexcept { return 0x7fffffffffffffffLL * 2ULL + 1; }
    static constexpr unsigned long long lowest() noexcept { return min(); }
    static constexpr int digits = (sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0));
    static constexpr int digits10 = ((sizeof(unsigned long long) * 8 - ((unsigned long long)(-1) < 0)) * 643L / 2136);
    static constexpr int max_digits10 = 0;
    static constexpr bool is_signed = false;
    static constexpr bool is_integer = true;
    static constexpr bool is_exact = true;
    static constexpr int radix = 2;
    static constexpr unsigned long long epsilon() noexcept { return 0; }
    static constexpr unsigned long long round_error() noexcept { return 0; }
    static constexpr int min_exponent = 0;
    static constexpr int min_exponent10 = 0;
    static constexpr int max_exponent = 0;
    static constexpr int max_exponent10 = 0;
    static constexpr bool has_infinity = false;
    static constexpr bool has_quiet_NaN = false;
    static constexpr bool has_signaling_NaN = false;
    static constexpr float_denorm_style has_denorm = denorm_absent;
    static constexpr bool has_denorm_loss = false;
    static constexpr unsigned long long infinity() noexcept { return static_cast<unsigned long long>(0); }
    static constexpr unsigned long long quiet_NaN() noexcept { return static_cast<unsigned long long>(0); }
    static constexpr unsigned long long signaling_NaN() noexcept { return static_cast<unsigned long long>(0); }
    static constexpr unsigned long long denorm_min() noexcept { return static_cast<unsigned long long>(0); }
    static constexpr bool is_iec559 = false;
    static constexpr bool is_bounded = true;
    static constexpr bool is_modulo = true;
    static constexpr bool traps = true;
    static constexpr bool tinyness_before = false;
    static constexpr float_round_style round_style = round_toward_zero;
  };
  template <>
  struct numeric_limits<float>
  {
    static constexpr bool is_specialized = true;
    static constexpr float min() noexcept { return 1.17549435082228750796873653722224568e-38F; }
    static constexpr float max() noexcept { return 3.40282346638528859811704183484516925e+38F; }
    static constexpr float lowest() noexcept { return -3.40282346638528859811704183484516925e+38F; }
    static constexpr int digits = 24;
    static constexpr int digits10 = 6;
    static constexpr int max_digits10 = (2 + (24) * 643L / 2136);
    static constexpr bool is_signed = true;
    static constexpr bool is_integer = false;
    static constexpr bool is_exact = false;
    static constexpr int radix = 2;
    static constexpr float epsilon() noexcept { return 1.19209289550781250000000000000000000e-7F; }
    static constexpr float round_error() noexcept { return 0.5F; }
    static constexpr int min_exponent = (-125);
    static constexpr int min_exponent10 = (-37);
    static constexpr int max_exponent = 128;
    static constexpr int max_exponent10 = 38;
    static constexpr bool has_infinity = 1;
    static constexpr bool has_quiet_NaN = 1;
    static constexpr bool has_signaling_NaN = has_quiet_NaN;
    static constexpr float_denorm_style has_denorm = bool(1) ? denorm_present : denorm_absent;
    static constexpr bool has_denorm_loss = false;
    static constexpr float infinity() noexcept { return __builtin_huge_valf(); }
    static constexpr float quiet_NaN() noexcept { return __builtin_nanf(""); }
    static constexpr float signaling_NaN() noexcept { return __builtin_nansf(""); }
    static constexpr float denorm_min() noexcept { return 1.40129846432481707092372958328991613e-45F; }
    static constexpr bool is_iec559 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
    static constexpr bool is_bounded = true;
    static constexpr bool is_modulo = false;
    static constexpr bool traps = false;
    static constexpr bool tinyness_before = false;
    static constexpr float_round_style round_style = round_to_nearest;
  };
  template <>
  struct numeric_limits<double>
  {
    static constexpr bool is_specialized = true;
    static constexpr double min() noexcept { return double(2.22507385850720138309023271733240406e-308L); }
    static constexpr double max() noexcept { return double(1.79769313486231570814527423731704357e+308L); }
    static constexpr double lowest() noexcept { return -double(1.79769313486231570814527423731704357e+308L); }
    static constexpr int digits = 53;
    static constexpr int digits10 = 15;
    static constexpr int max_digits10 = (2 + (53) * 643L / 2136);
    static constexpr bool is_signed = true;
    static constexpr bool is_integer = false;
    static constexpr bool is_exact = false;
    static constexpr int radix = 2;
    static constexpr double epsilon() noexcept { return double(2.22044604925031308084726333618164062e-16L); }
    static constexpr double round_error() noexcept { return 0.5; }
    static constexpr int min_exponent = (-1021);
    static constexpr int min_exponent10 = (-307);
    static constexpr int max_exponent = 1024;
    static constexpr int max_exponent10 = 308;
    static constexpr bool has_infinity = 1;
    static constexpr bool has_quiet_NaN = 1;
    static constexpr bool has_signaling_NaN = has_quiet_NaN;
    static constexpr float_denorm_style has_denorm = bool(1) ? denorm_present : denorm_absent;
    static constexpr bool has_denorm_loss = false;
    static constexpr double infinity() noexcept { return __builtin_huge_val(); }
    static constexpr double quiet_NaN() noexcept { return __builtin_nan(""); }
    static constexpr double signaling_NaN() noexcept { return __builtin_nans(""); }
    static constexpr double denorm_min() noexcept { return double(4.94065645841246544176568792868221372e-324L); }
    static constexpr bool is_iec559 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
    static constexpr bool is_bounded = true;
    static constexpr bool is_modulo = false;
    static constexpr bool traps = false;
    static constexpr bool tinyness_before = false;
    static constexpr float_round_style round_style = round_to_nearest;
  };
  template <>
  struct numeric_limits<long double>
  {
    static constexpr bool is_specialized = true;
    static constexpr long double min() noexcept { return 3.36210314311209350626267781732175260e-4932L; }
    static constexpr long double max() noexcept { return 1.18973149535723176502126385303097021e+4932L; }
    static constexpr long double lowest() noexcept { return -1.18973149535723176502126385303097021e+4932L; }
    static constexpr int digits = 64;
    static constexpr int digits10 = 18;
    static constexpr int max_digits10 = (2 + (64) * 643L / 2136);
    static constexpr bool is_signed = true;
    static constexpr bool is_integer = false;
    static constexpr bool is_exact = false;
    static constexpr int radix = 2;
    static constexpr long double epsilon() noexcept { return 1.08420217248550443400745280086994171e-19L; }
    static constexpr long double round_error() noexcept { return 0.5L; }
    static constexpr int min_exponent = (-16381);
    static constexpr int min_exponent10 = (-4931);
    static constexpr int max_exponent = 16384;
    static constexpr int max_exponent10 = 4932;
    static constexpr bool has_infinity = 1;
    static constexpr bool has_quiet_NaN = 1;
    static constexpr bool has_signaling_NaN = has_quiet_NaN;
    static constexpr float_denorm_style has_denorm = bool(1) ? denorm_present : denorm_absent;
    static constexpr bool has_denorm_loss = false;
    static constexpr long double infinity() noexcept { return __builtin_huge_vall(); }
    static constexpr long double quiet_NaN() noexcept { return __builtin_nanl(""); }
    static constexpr long double signaling_NaN() noexcept { return __builtin_nansl(""); }
    static constexpr long double denorm_min() noexcept { return 3.64519953188247460252840593361941982e-4951L; }
    static constexpr bool is_iec559 = has_infinity && has_quiet_NaN && has_denorm == denorm_present;
    static constexpr bool is_bounded = true;
    static constexpr bool is_modulo = false;
    static constexpr bool traps = false;
    static constexpr bool tinyness_before = false;
    static constexpr float_round_style round_style = round_to_nearest;
  };
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _Result, typename _Arg>
  struct __hash_base
  {
    typedef _Result result_type [[__deprecated__]];
    typedef _Arg argument_type [[__deprecated__]];
  };
  template <typename _Tp>
  struct hash;
  template <typename _Tp, typename = void>
  struct __poison_hash
  {
    static constexpr bool __enable_hash_call = false;

  private:
    __poison_hash(__poison_hash&&);
    ~__poison_hash();
  };
  template <typename _Tp>
  struct __poison_hash<_Tp, __void_t<decltype(hash<_Tp>()(declval<_Tp>()))>>
  {
    static constexpr bool __enable_hash_call = true;
  };
  template <typename _Tp, bool = is_enum<_Tp>::value>
  struct __hash_enum
  {
  private:
    __hash_enum(__hash_enum&&);
    ~__hash_enum();
  };
  template <typename _Tp>
  struct __hash_enum<_Tp, true> : public __hash_base<size_t, _Tp>
  {
    size_t operator()(_Tp __val) const noexcept
    {
      using __type = typename underlying_type<_Tp>::type;
      return hash<__type>{}(static_cast<__type>(__val));
    }
  };
  template <typename _Tp>
  struct hash : __hash_enum<_Tp>
  {
  };
  template <typename _Tp>
  struct hash<_Tp*> : public __hash_base<size_t, _Tp*>
  {
    size_t operator()(_Tp* __p) const noexcept { return reinterpret_cast<size_t>(__p); }
  };
  template <>
  struct hash<bool> : public __hash_base<size_t, bool>
  {
    size_t operator()(bool __val) const noexcept { return static_cast<size_t>(__val); }
  };
  template <>
  struct hash<char> : public __hash_base<size_t, char>
  {
    size_t operator()(char __val) const noexcept { return static_cast<size_t>(__val); }
  };
  template <>
  struct hash<signed char> : public __hash_base<size_t, signed char>
  {
    size_t operator()(signed char __val) const noexcept { return static_cast<size_t>(__val); }
  };
  template <>
  struct hash<unsigned char> : public __hash_base<size_t, unsigned char>
  {
    size_t operator()(unsigned char __val) const noexcept { return static_cast<size_t>(__val); }
  };
  template <>
  struct hash<wchar_t> : public __hash_base<size_t, wchar_t>
  {
    size_t operator()(wchar_t __val) const noexcept { return static_cast<size_t>(__val); }
  };
  template <>
  struct hash<char16_t> : public __hash_base<size_t, char16_t>
  {
    size_t operator()(char16_t __val) const noexcept { return static_cast<size_t>(__val); }
  };
  template <>
  struct hash<char32_t> : public __hash_base<size_t, char32_t>
  {
    size_t operator()(char32_t __val) const noexcept { return static_cast<size_t>(__val); }
  };
  template <>
  struct hash<short> : public __hash_base<size_t, short>
  {
    size_t operator()(short __val) const noexcept { return static_cast<size_t>(__val); }
  };
  template <>
  struct hash<int> : public __hash_base<size_t, int>
  {
    size_t operator()(int __val) const noexcept { return static_cast<size_t>(__val); }
  };
  template <>
  struct hash<long> : public __hash_base<size_t, long>
  {
    size_t operator()(long __val) const noexcept { return static_cast<size_t>(__val); }
  };
  template <>
  struct hash<long long> : public __hash_base<size_t, long long>
  {
    size_t operator()(long long __val) const noexcept { return static_cast<size_t>(__val); }
  };
  template <>
  struct hash<unsigned short> : public __hash_base<size_t, unsigned short>
  {
    size_t operator()(unsigned short __val) const noexcept { return static_cast<size_t>(__val); }
  };
  template <>
  struct hash<unsigned int> : public __hash_base<size_t, unsigned int>
  {
    size_t operator()(unsigned int __val) const noexcept { return static_cast<size_t>(__val); }
  };
  template <>
  struct hash<unsigned long> : public __hash_base<size_t, unsigned long>
  {
    size_t operator()(unsigned long __val) const noexcept { return static_cast<size_t>(__val); }
  };
  template <>
  struct hash<unsigned long long> : public __hash_base<size_t, unsigned long long>
  {
    size_t operator()(unsigned long long __val) const noexcept { return static_cast<size_t>(__val); }
  };
  struct _Hash_impl
  {
    static size_t hash(const void* __ptr, size_t __clength, size_t __seed = static_cast<size_t>(0xc70f6907UL))
    {
      return _Hash_bytes(__ptr, __clength, __seed);
    }
    template <typename _Tp>
    static size_t hash(const _Tp& __val)
    {
      return hash(&__val, sizeof(__val));
    }
    template <typename _Tp>
    static size_t __hash_combine(const _Tp& __val, size_t __hash)
    {
      return hash(&__val, sizeof(__val), __hash);
    }
  };
  struct _Fnv_hash_impl
  {
    static size_t hash(const void* __ptr, size_t __clength, size_t __seed = static_cast<size_t>(2166136261UL))
    {
      return _Fnv_hash_bytes(__ptr, __clength, __seed);
    }
    template <typename _Tp>
    static size_t hash(const _Tp& __val)
    {
      return hash(&__val, sizeof(__val));
    }
    template <typename _Tp>
    static size_t __hash_combine(const _Tp& __val, size_t __hash)
    {
      return hash(&__val, sizeof(__val), __hash);
    }
  };
  template <>
  struct hash<float> : public __hash_base<size_t, float>
  {
    size_t operator()(float __val) const noexcept { return __val != 0.0f ? std::_Hash_impl::hash(__val) : 0; }
  };
  template <>
  struct hash<double> : public __hash_base<size_t, double>
  {
    size_t operator()(double __val) const noexcept { return __val != 0.0 ? std::_Hash_impl::hash(__val) : 0; }
  };
  template <>
  struct hash<long double> : public __hash_base<size_t, long double>
  {
    __attribute__((__pure__)) size_t operator()(long double __val) const noexcept;
  };
  template <>
  struct hash<nullptr_t> : public __hash_base<size_t, nullptr_t>
  {
    size_t operator()(nullptr_t) const noexcept { return 0; }
  };
  template <typename _Hash>
  struct __is_fast_hash : public std::true_type
  {
  };
  template <>
  struct __is_fast_hash<hash<long double>> : public std::false_type
  {
  };
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  constexpr size_t __sv_check(size_t __size, size_t __pos, const char* __s)
  {
    if (__pos > __size)
      __throw_out_of_range_fmt(("%s: __pos (which is %zu) > __size "
                                "(which is %zu)"),
                               __s,
                               __pos,
                               __size);
    return __pos;
  }
  constexpr size_t __sv_limit(size_t __size, size_t __pos, size_t __off) noexcept
  {
    const bool __testoff = __off < __size - __pos;
    return __testoff ? __off : __size - __pos;
  }
  template <typename _CharT, typename _Traits = std::char_traits<_CharT>>
  class basic_string_view
  {
    static_assert(!is_array_v<_CharT>);
    static_assert(is_trivial_v<_CharT> && is_standard_layout_v<_CharT>);
    static_assert(is_same_v<_CharT, typename _Traits::char_type>);

  public:
    using traits_type = _Traits;
    using value_type = _CharT;
    using pointer = value_type*;
    using const_pointer = const value_type*;
    using reference = value_type&;
    using const_reference = const value_type&;
    using const_iterator = const value_type*;
    using iterator = const_iterator;
    using const_reverse_iterator = std::reverse_iterator<const_iterator>;
    using reverse_iterator = const_reverse_iterator;
    using size_type = size_t;
    using difference_type = ptrdiff_t;
    static constexpr size_type npos = size_type(-1);
    constexpr basic_string_view() noexcept : _M_len{0}, _M_str{nullptr} {}
    constexpr basic_string_view(const basic_string_view&) noexcept = default;
    __attribute__((__nonnull__)) constexpr basic_string_view(const _CharT* __str) noexcept
        : _M_len{traits_type::length(__str)}, _M_str{__str}
    {
    }
    constexpr basic_string_view(const _CharT* __str, size_type __len) noexcept : _M_len{__len}, _M_str{__str} {}
    constexpr basic_string_view& operator=(const basic_string_view&) noexcept = default;
    constexpr const_iterator begin() const noexcept { return this->_M_str; }
    constexpr const_iterator end() const noexcept { return this->_M_str + this->_M_len; }
    constexpr const_iterator cbegin() const noexcept { return this->_M_str; }
    constexpr const_iterator cend() const noexcept { return this->_M_str + this->_M_len; }
    constexpr const_reverse_iterator rbegin() const noexcept { return const_reverse_iterator(this->end()); }
    constexpr const_reverse_iterator rend() const noexcept { return const_reverse_iterator(this->begin()); }
    constexpr const_reverse_iterator crbegin() const noexcept { return const_reverse_iterator(this->end()); }
    constexpr const_reverse_iterator crend() const noexcept { return const_reverse_iterator(this->begin()); }
    constexpr size_type size() const noexcept { return this->_M_len; }
    constexpr size_type length() const noexcept { return _M_len; }
    constexpr size_type max_size() const noexcept
    {
      return (npos - sizeof(size_type) - sizeof(void*)) / sizeof(value_type) / 4;
    }
    [[nodiscard]] constexpr bool empty() const noexcept { return this->_M_len == 0; }
    constexpr const_reference operator[](size_type __pos) const noexcept
    {
      ;
      return *(this->_M_str + __pos);
    }
    constexpr const_reference at(size_type __pos) const
    {
      if (__pos >= _M_len)
        __throw_out_of_range_fmt(("basic_string_view::at: __pos "
                                  "(which is %zu) >= this->size() "
                                  "(which is %zu)"),
                                 __pos,
                                 this->size());
      return *(this->_M_str + __pos);
    }
    constexpr const_reference front() const noexcept
    {
      ;
      return *this->_M_str;
    }
    constexpr const_reference back() const noexcept
    {
      ;
      return *(this->_M_str + this->_M_len - 1);
    }
    constexpr const_pointer data() const noexcept { return this->_M_str; }
    constexpr void remove_prefix(size_type __n) noexcept
    {
      ;
      this->_M_str += __n;
      this->_M_len -= __n;
    }
    constexpr void remove_suffix(size_type __n) noexcept { this->_M_len -= __n; }
    constexpr void swap(basic_string_view& __sv) noexcept
    {
      auto __tmp = *this;
      *this = __sv;
      __sv = __tmp;
    }
    size_type copy(_CharT* __str, size_type __n, size_type __pos = 0) const
    {
      ;
      __pos = std::__sv_check(size(), __pos, "basic_string_view::copy");
      const size_type __rlen = std::min(__n, _M_len - __pos);
      traits_type::copy(__str, data() + __pos, __rlen);
      return __rlen;
    }
    constexpr basic_string_view substr(size_type __pos = 0, size_type __n = npos) const noexcept(false)
    {
      __pos = std::__sv_check(size(), __pos, "basic_string_view::substr");
      const size_type __rlen = std::min(__n, _M_len - __pos);
      return basic_string_view{_M_str + __pos, __rlen};
    }
    constexpr int compare(basic_string_view __str) const noexcept
    {
      const size_type __rlen = std::min(this->_M_len, __str._M_len);
      int __ret = traits_type::compare(this->_M_str, __str._M_str, __rlen);
      if (__ret == 0)
        __ret = _S_compare(this->_M_len, __str._M_len);
      return __ret;
    }
    constexpr int compare(size_type __pos1, size_type __n1, basic_string_view __str) const
    {
      return this->substr(__pos1, __n1).compare(__str);
    }
    constexpr int compare(size_type __pos1,
                          size_type __n1,
                          basic_string_view __str,
                          size_type __pos2,
                          size_type __n2) const
    {
      return this->substr(__pos1, __n1).compare(__str.substr(__pos2, __n2));
    }
    __attribute__((__nonnull__)) constexpr int compare(const _CharT* __str) const noexcept
    {
      return this->compare(basic_string_view{__str});
    }
    __attribute__((__nonnull__)) constexpr int compare(size_type __pos1, size_type __n1, const _CharT* __str) const
    {
      return this->substr(__pos1, __n1).compare(basic_string_view{__str});
    }
    constexpr int compare(size_type __pos1, size_type __n1, const _CharT* __str, size_type __n2) const noexcept(false)
    {
      return this->substr(__pos1, __n1).compare(basic_string_view(__str, __n2));
    }
    constexpr size_type find(basic_string_view __str, size_type __pos = 0) const noexcept
    {
      return this->find(__str._M_str, __pos, __str._M_len);
    }
    constexpr size_type find(_CharT __c, size_type __pos = 0) const noexcept;
    constexpr size_type find(const _CharT* __str, size_type __pos, size_type __n) const noexcept;
    __attribute__((__nonnull__)) constexpr size_type find(const _CharT* __str, size_type __pos = 0) const noexcept
    {
      return this->find(__str, __pos, traits_type::length(__str));
    }
    constexpr size_type rfind(basic_string_view __str, size_type __pos = npos) const noexcept
    {
      return this->rfind(__str._M_str, __pos, __str._M_len);
    }
    constexpr size_type rfind(_CharT __c, size_type __pos = npos) const noexcept;
    constexpr size_type rfind(const _CharT* __str, size_type __pos, size_type __n) const noexcept;
    __attribute__((__nonnull__)) constexpr size_type rfind(const _CharT* __str, size_type __pos = npos) const noexcept
    {
      return this->rfind(__str, __pos, traits_type::length(__str));
    }
    constexpr size_type find_first_of(basic_string_view __str, size_type __pos = 0) const noexcept
    {
      return this->find_first_of(__str._M_str, __pos, __str._M_len);
    }
    constexpr size_type find_first_of(_CharT __c, size_type __pos = 0) const noexcept { return this->find(__c, __pos); }
    constexpr size_type find_first_of(const _CharT* __str, size_type __pos, size_type __n) const noexcept;
    __attribute__((__nonnull__)) constexpr size_type find_first_of(const _CharT* __str,
                                                                   size_type __pos = 0) const noexcept
    {
      return this->find_first_of(__str, __pos, traits_type::length(__str));
    }
    constexpr size_type find_last_of(basic_string_view __str, size_type __pos = npos) const noexcept
    {
      return this->find_last_of(__str._M_str, __pos, __str._M_len);
    }
    constexpr size_type find_last_of(_CharT __c, size_type __pos = npos) const noexcept
    {
      return this->rfind(__c, __pos);
    }
    constexpr size_type find_last_of(const _CharT* __str, size_type __pos, size_type __n) const noexcept;
    __attribute__((__nonnull__)) constexpr size_type find_last_of(const _CharT* __str,
                                                                  size_type __pos = npos) const noexcept
    {
      return this->find_last_of(__str, __pos, traits_type::length(__str));
    }
    constexpr size_type find_first_not_of(basic_string_view __str, size_type __pos = 0) const noexcept
    {
      return this->find_first_not_of(__str._M_str, __pos, __str._M_len);
    }
    constexpr size_type find_first_not_of(_CharT __c, size_type __pos = 0) const noexcept;
    constexpr size_type find_first_not_of(const _CharT* __str, size_type __pos, size_type __n) const noexcept;
    __attribute__((__nonnull__)) constexpr size_type find_first_not_of(const _CharT* __str,
                                                                       size_type __pos = 0) const noexcept
    {
      return this->find_first_not_of(__str, __pos, traits_type::length(__str));
    }
    constexpr size_type find_last_not_of(basic_string_view __str, size_type __pos = npos) const noexcept
    {
      return this->find_last_not_of(__str._M_str, __pos, __str._M_len);
    }
    constexpr size_type find_last_not_of(_CharT __c, size_type __pos = npos) const noexcept;
    constexpr size_type find_last_not_of(const _CharT* __str, size_type __pos, size_type __n) const noexcept;
    __attribute__((__nonnull__)) constexpr size_type find_last_not_of(const _CharT* __str,
                                                                      size_type __pos = npos) const noexcept
    {
      return this->find_last_not_of(__str, __pos, traits_type::length(__str));
    }

  private:
    static constexpr int _S_compare(size_type __n1, size_type __n2) noexcept
    {
      const difference_type __diff = __n1 - __n2;
      if (__diff > std::numeric_limits<int>::max())
        return std::numeric_limits<int>::max();
      if (__diff < std::numeric_limits<int>::min())
        return std::numeric_limits<int>::min();
      return static_cast<int>(__diff);
    }
    size_t _M_len;
    const _CharT* _M_str;
  };
  namespace __detail
  {
  template <typename _Tp>
  using __idt = common_type_t<_Tp>;
  }
  template <typename _CharT, typename _Traits>
  constexpr bool operator==(basic_string_view<_CharT, _Traits> __x, basic_string_view<_CharT, _Traits> __y) noexcept
  {
    return __x.size() == __y.size() && __x.compare(__y) == 0;
  }
  template <typename _CharT, typename _Traits>
  constexpr bool operator==(basic_string_view<_CharT, _Traits> __x,
                            __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept
  {
    return __x.size() == __y.size() && __x.compare(__y) == 0;
  }
  template <typename _CharT, typename _Traits>
  constexpr bool operator==(__detail::__idt<basic_string_view<_CharT, _Traits>> __x,
                            basic_string_view<_CharT, _Traits> __y) noexcept
  {
    return __x.size() == __y.size() && __x.compare(__y) == 0;
  }
  template <typename _CharT, typename _Traits>
  constexpr bool operator!=(basic_string_view<_CharT, _Traits> __x, basic_string_view<_CharT, _Traits> __y) noexcept
  {
    return !(__x == __y);
  }
  template <typename _CharT, typename _Traits>
  constexpr bool operator!=(basic_string_view<_CharT, _Traits> __x,
                            __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept
  {
    return !(__x == __y);
  }
  template <typename _CharT, typename _Traits>
  constexpr bool operator!=(__detail::__idt<basic_string_view<_CharT, _Traits>> __x,
                            basic_string_view<_CharT, _Traits> __y) noexcept
  {
    return !(__x == __y);
  }
  template <typename _CharT, typename _Traits>
  constexpr bool operator<(basic_string_view<_CharT, _Traits> __x, basic_string_view<_CharT, _Traits> __y) noexcept
  {
    return __x.compare(__y) < 0;
  }
  template <typename _CharT, typename _Traits>
  constexpr bool operator<(basic_string_view<_CharT, _Traits> __x,
                           __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept
  {
    return __x.compare(__y) < 0;
  }
  template <typename _CharT, typename _Traits>
  constexpr bool operator<(__detail::__idt<basic_string_view<_CharT, _Traits>> __x,
                           basic_string_view<_CharT, _Traits> __y) noexcept
  {
    return __x.compare(__y) < 0;
  }
  template <typename _CharT, typename _Traits>
  constexpr bool operator>(basic_string_view<_CharT, _Traits> __x, basic_string_view<_CharT, _Traits> __y) noexcept
  {
    return __x.compare(__y) > 0;
  }
  template <typename _CharT, typename _Traits>
  constexpr bool operator>(basic_string_view<_CharT, _Traits> __x,
                           __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept
  {
    return __x.compare(__y) > 0;
  }
  template <typename _CharT, typename _Traits>
  constexpr bool operator>(__detail::__idt<basic_string_view<_CharT, _Traits>> __x,
                           basic_string_view<_CharT, _Traits> __y) noexcept
  {
    return __x.compare(__y) > 0;
  }
  template <typename _CharT, typename _Traits>
  constexpr bool operator<=(basic_string_view<_CharT, _Traits> __x, basic_string_view<_CharT, _Traits> __y) noexcept
  {
    return __x.compare(__y) <= 0;
  }
  template <typename _CharT, typename _Traits>
  constexpr bool operator<=(basic_string_view<_CharT, _Traits> __x,
                            __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept
  {
    return __x.compare(__y) <= 0;
  }
  template <typename _CharT, typename _Traits>
  constexpr bool operator<=(__detail::__idt<basic_string_view<_CharT, _Traits>> __x,
                            basic_string_view<_CharT, _Traits> __y) noexcept
  {
    return __x.compare(__y) <= 0;
  }
  template <typename _CharT, typename _Traits>
  constexpr bool operator>=(basic_string_view<_CharT, _Traits> __x, basic_string_view<_CharT, _Traits> __y) noexcept
  {
    return __x.compare(__y) >= 0;
  }
  template <typename _CharT, typename _Traits>
  constexpr bool operator>=(basic_string_view<_CharT, _Traits> __x,
                            __detail::__idt<basic_string_view<_CharT, _Traits>> __y) noexcept
  {
    return __x.compare(__y) >= 0;
  }
  template <typename _CharT, typename _Traits>
  constexpr bool operator>=(__detail::__idt<basic_string_view<_CharT, _Traits>> __x,
                            basic_string_view<_CharT, _Traits> __y) noexcept
  {
    return __x.compare(__y) >= 0;
  }
  template <typename _CharT, typename _Traits>
  inline basic_ostream<_CharT, _Traits>& operator<<(basic_ostream<_CharT, _Traits>& __os,
                                                    basic_string_view<_CharT, _Traits> __str)
  {
    return __ostream_insert(__os, __str.data(), __str.size());
  }
  using string_view = basic_string_view<char>;
  using wstring_view = basic_string_view<wchar_t>;
  using u16string_view = basic_string_view<char16_t>;
  using u32string_view = basic_string_view<char32_t>;
  template <typename _Tp>
  struct hash;
  template <>
  struct hash<string_view> : public __hash_base<size_t, string_view>
  {
    size_t operator()(const string_view& __str) const noexcept
    {
      return std::_Hash_impl::hash(__str.data(), __str.length());
    }
  };
  template <>
  struct __is_fast_hash<hash<string_view>> : std::false_type
  {
  };
  template <>
  struct hash<wstring_view> : public __hash_base<size_t, wstring_view>
  {
    size_t operator()(const wstring_view& __s) const noexcept
    {
      return std::_Hash_impl::hash(__s.data(), __s.length() * sizeof(wchar_t));
    }
  };
  template <>
  struct __is_fast_hash<hash<wstring_view>> : std::false_type
  {
  };
  template <>
  struct hash<u16string_view> : public __hash_base<size_t, u16string_view>
  {
    size_t operator()(const u16string_view& __s) const noexcept
    {
      return std::_Hash_impl::hash(__s.data(), __s.length() * sizeof(char16_t));
    }
  };
  template <>
  struct __is_fast_hash<hash<u16string_view>> : std::false_type
  {
  };
  template <>
  struct hash<u32string_view> : public __hash_base<size_t, u32string_view>
  {
    size_t operator()(const u32string_view& __s) const noexcept
    {
      return std::_Hash_impl::hash(__s.data(), __s.length() * sizeof(char32_t));
    }
  };
  template <>
  struct __is_fast_hash<hash<u32string_view>> : std::false_type
  {
  };
  inline namespace literals
  {
  inline namespace string_view_literals
  {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wliteral-suffix"
  inline constexpr basic_string_view<char> operator""sv(const char* __str, size_t __len) noexcept
  {
    return basic_string_view<char>{__str, __len};
  }
  inline constexpr basic_string_view<wchar_t> operator""sv(const wchar_t* __str, size_t __len) noexcept
  {
    return basic_string_view<wchar_t>{__str, __len};
  }
  inline constexpr basic_string_view<char16_t> operator""sv(const char16_t* __str, size_t __len) noexcept
  {
    return basic_string_view<char16_t>{__str, __len};
  }
  inline constexpr basic_string_view<char32_t> operator""sv(const char32_t* __str, size_t __len) noexcept
  {
    return basic_string_view<char32_t>{__str, __len};
  }
#pragma GCC diagnostic pop
  }  // namespace string_view_literals
  }  // namespace literals
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _CharT, typename _Traits>
  constexpr typename basic_string_view<_CharT, _Traits>::size_type basic_string_view<_CharT, _Traits>::find(
      const _CharT* __str, size_type __pos, size_type __n) const noexcept
  {
    ;
    if (__n == 0)
      return __pos <= this->_M_len ? __pos : npos;
    if (__n <= this->_M_len)
    {
      for (; __pos <= this->_M_len - __n; ++__pos)
        if (traits_type::eq(this->_M_str[__pos], __str[0]) &&
            traits_type::compare(this->_M_str + __pos + 1, __str + 1, __n - 1) == 0)
          return __pos;
    }
    return npos;
  }
  template <typename _CharT, typename _Traits>
  constexpr typename basic_string_view<_CharT, _Traits>::size_type basic_string_view<_CharT, _Traits>::find(
      _CharT __c, size_type __pos) const noexcept
  {
    size_type __ret = npos;
    if (__pos < this->_M_len)
    {
      const size_type __n = this->_M_len - __pos;
      const _CharT* __p = traits_type::find(this->_M_str + __pos, __n, __c);
      if (__p)
        __ret = __p - this->_M_str;
    }
    return __ret;
  }
  template <typename _CharT, typename _Traits>
  constexpr typename basic_string_view<_CharT, _Traits>::size_type basic_string_view<_CharT, _Traits>::rfind(
      const _CharT* __str, size_type __pos, size_type __n) const noexcept
  {
    ;
    if (__n <= this->_M_len)
    {
      __pos = std::min(size_type(this->_M_len - __n), __pos);
      do
      {
        if (traits_type::compare(this->_M_str + __pos, __str, __n) == 0)
          return __pos;
      } while (__pos-- > 0);
    }
    return npos;
  }
  template <typename _CharT, typename _Traits>
  constexpr typename basic_string_view<_CharT, _Traits>::size_type basic_string_view<_CharT, _Traits>::rfind(
      _CharT __c, size_type __pos) const noexcept
  {
    size_type __size = this->_M_len;
    if (__size > 0)
    {
      if (--__size > __pos)
        __size = __pos;
      for (++__size; __size-- > 0;)
        if (traits_type::eq(this->_M_str[__size], __c))
          return __size;
    }
    return npos;
  }
  template <typename _CharT, typename _Traits>
  constexpr typename basic_string_view<_CharT, _Traits>::size_type basic_string_view<_CharT, _Traits>::find_first_of(
      const _CharT* __str, size_type __pos, size_type __n) const noexcept
  {
    ;
    for (; __n && __pos < this->_M_len; ++__pos)
    {
      const _CharT* __p = traits_type::find(__str, __n, this->_M_str[__pos]);
      if (__p)
        return __pos;
    }
    return npos;
  }
  template <typename _CharT, typename _Traits>
  constexpr typename basic_string_view<_CharT, _Traits>::size_type basic_string_view<_CharT, _Traits>::find_last_of(
      const _CharT* __str, size_type __pos, size_type __n) const noexcept
  {
    ;
    size_type __size = this->size();
    if (__size && __n)
    {
      if (--__size > __pos)
        __size = __pos;
      do
      {
        if (traits_type::find(__str, __n, this->_M_str[__size]))
          return __size;
      } while (__size-- != 0);
    }
    return npos;
  }
  template <typename _CharT, typename _Traits>
  constexpr typename basic_string_view<_CharT, _Traits>::size_type
  basic_string_view<_CharT, _Traits>::find_first_not_of(const _CharT* __str, size_type __pos, size_type __n)
      const noexcept
  {
    ;
    for (; __pos < this->_M_len; ++__pos)
      if (!traits_type::find(__str, __n, this->_M_str[__pos]))
        return __pos;
    return npos;
  }
  template <typename _CharT, typename _Traits>
  constexpr typename basic_string_view<_CharT, _Traits>::size_type
  basic_string_view<_CharT, _Traits>::find_first_not_of(_CharT __c, size_type __pos) const noexcept
  {
    for (; __pos < this->_M_len; ++__pos)
      if (!traits_type::eq(this->_M_str[__pos], __c))
        return __pos;
    return npos;
  }
  template <typename _CharT, typename _Traits>
  constexpr typename basic_string_view<_CharT, _Traits>::size_type basic_string_view<_CharT, _Traits>::find_last_not_of(
      const _CharT* __str, size_type __pos, size_type __n) const noexcept
  {
    ;
    size_type __size = this->_M_len;
    if (__size)
    {
      if (--__size > __pos)
        __size = __pos;
      do
      {
        if (!traits_type::find(__str, __n, this->_M_str[__size]))
          return __size;
      } while (__size--);
    }
    return npos;
  }
  template <typename _CharT, typename _Traits>
  constexpr typename basic_string_view<_CharT, _Traits>::size_type basic_string_view<_CharT, _Traits>::find_last_not_of(
      _CharT __c, size_type __pos) const noexcept
  {
    size_type __size = this->_M_len;
    if (__size)
    {
      if (--__size > __pos)
        __size = __pos;
      do
      {
        if (!traits_type::eq(this->_M_str[__size], __c))
          return __size;
      } while (__size--);
    }
    return npos;
  }
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  namespace __cxx11
  {
  template <typename _CharT, typename _Traits, typename _Alloc>
  class basic_string
  {
    typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template rebind<_CharT>::other _Char_alloc_type;
    typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;

  public:
    typedef _Traits traits_type;
    typedef typename _Traits::char_type value_type;
    typedef _Char_alloc_type allocator_type;
    typedef typename _Alloc_traits::size_type size_type;
    typedef typename _Alloc_traits::difference_type difference_type;
    typedef typename _Alloc_traits::reference reference;
    typedef typename _Alloc_traits::const_reference const_reference;
    typedef typename _Alloc_traits::pointer pointer;
    typedef typename _Alloc_traits::const_pointer const_pointer;
    typedef __gnu_cxx::__normal_iterator<pointer, basic_string> iterator;
    typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string> const_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
    typedef std::reverse_iterator<iterator> reverse_iterator;
    static const size_type npos = static_cast<size_type>(-1);

  protected:
    typedef const_iterator __const_iterator;

  private:
    typedef basic_string_view<_CharT, _Traits> __sv_type;
    template <typename _Tp, typename _Res>
    using _If_sv = enable_if_t<__and_<is_convertible<const _Tp&, __sv_type>,
                                      __not_<is_convertible<const _Tp*, const basic_string*>>,
                                      __not_<is_convertible<const _Tp&, const _CharT*>>>::value,
                               _Res>;
    static __sv_type _S_to_string_view(__sv_type __svt) noexcept { return __svt; }
    struct __sv_wrapper
    {
      explicit __sv_wrapper(__sv_type __sv) noexcept : _M_sv(__sv) {}
      __sv_type _M_sv;
    };
    explicit basic_string(__sv_wrapper __svw, const _Alloc& __a)
        : basic_string(__svw._M_sv.data(), __svw._M_sv.size(), __a)
    {
    }
    struct _Alloc_hider : allocator_type
    {
      _Alloc_hider(pointer __dat, const _Alloc& __a) : allocator_type(__a), _M_p(__dat) {}
      _Alloc_hider(pointer __dat, _Alloc&& __a = _Alloc()) : allocator_type(std::move(__a)), _M_p(__dat) {}
      pointer _M_p;
    };
    _Alloc_hider _M_dataplus;
    size_type _M_string_length;
    enum
    {
      _S_local_capacity = 15 / sizeof(_CharT)
    };
    union
    {
      _CharT _M_local_buf[_S_local_capacity + 1];
      size_type _M_allocated_capacity;
    };
    void _M_data(pointer __p) { _M_dataplus._M_p = __p; }
    void _M_length(size_type __length) { _M_string_length = __length; }
    pointer _M_data() const { return _M_dataplus._M_p; }
    pointer _M_local_data() { return std::pointer_traits<pointer>::pointer_to(*_M_local_buf); }
    const_pointer _M_local_data() const { return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf); }
    void _M_capacity(size_type __capacity) { _M_allocated_capacity = __capacity; }
    void _M_set_length(size_type __n)
    {
      _M_length(__n);
      traits_type::assign(_M_data()[__n], _CharT());
    }
    bool _M_is_local() const { return _M_data() == _M_local_data(); }
    pointer _M_create(size_type&, size_type);
    void _M_dispose()
    {
      if (!_M_is_local())
        _M_destroy(_M_allocated_capacity);
    }
    void _M_destroy(size_type __size) throw() { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
    template <typename _InIterator>
    void _M_construct_aux(_InIterator __beg, _InIterator __end, std::__false_type)
    {
      typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
      _M_construct(__beg, __end, _Tag());
    }
    template <typename _Integer>
    void _M_construct_aux(_Integer __beg, _Integer __end, std::__true_type)
    {
      _M_construct_aux_2(static_cast<size_type>(__beg), __end);
    }
    void _M_construct_aux_2(size_type __req, _CharT __c) { _M_construct(__req, __c); }
    template <typename _InIterator>
    void _M_construct(_InIterator __beg, _InIterator __end)
    {
      typedef typename std::__is_integer<_InIterator>::__type _Integral;
      _M_construct_aux(__beg, __end, _Integral());
    }
    template <typename _InIterator>
    void _M_construct(_InIterator __beg, _InIterator __end, std::input_iterator_tag);
    template <typename _FwdIterator>
    void _M_construct(_FwdIterator __beg, _FwdIterator __end, std::forward_iterator_tag);
    void _M_construct(size_type __req, _CharT __c);
    allocator_type& _M_get_allocator() { return _M_dataplus; }
    const allocator_type& _M_get_allocator() const { return _M_dataplus; }

  private:
    size_type _M_check(size_type __pos, const char* __s) const
    {
      if (__pos > this->size())
        __throw_out_of_range_fmt(("%s: __pos (which is %zu) > "
                                  "this->size() (which is %zu)"),
                                 __s,
                                 __pos,
                                 this->size());
      return __pos;
    }
    void _M_check_length(size_type __n1, size_type __n2, const char* __s) const
    {
      if (this->max_size() - (this->size() - __n1) < __n2)
        __throw_length_error((__s));
    }
    size_type _M_limit(size_type __pos, size_type __off) const noexcept
    {
      const bool __testoff = __off < this->size() - __pos;
      return __testoff ? __off : this->size() - __pos;
    }
    bool _M_disjunct(const _CharT* __s) const noexcept
    {
      return (less<const _CharT*>()(__s, _M_data()) || less<const _CharT*>()(_M_data() + this->size(), __s));
    }
    static void _S_copy(_CharT* __d, const _CharT* __s, size_type __n)
    {
      if (__n == 1)
        traits_type::assign(*__d, *__s);
      else
        traits_type::copy(__d, __s, __n);
    }
    static void _S_move(_CharT* __d, const _CharT* __s, size_type __n)
    {
      if (__n == 1)
        traits_type::assign(*__d, *__s);
      else
        traits_type::move(__d, __s, __n);
    }
    static void _S_assign(_CharT* __d, size_type __n, _CharT __c)
    {
      if (__n == 1)
        traits_type::assign(*__d, __c);
      else
        traits_type::assign(__d, __n, __c);
    }
    template <class _Iterator>
    static void _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
    {
      for (; __k1 != __k2; ++__k1, (void)++__p)
        traits_type::assign(*__p, *__k1);
    }
    static void _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) noexcept
    {
      _S_copy_chars(__p, __k1.base(), __k2.base());
    }
    static void _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2) noexcept
    {
      _S_copy_chars(__p, __k1.base(), __k2.base());
    }
    static void _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) noexcept { _S_copy(__p, __k1, __k2 - __k1); }
    static void _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2) noexcept
    {
      _S_copy(__p, __k1, __k2 - __k1);
    }
    static int _S_compare(size_type __n1, size_type __n2) noexcept
    {
      const difference_type __d = difference_type(__n1 - __n2);
      if (__d > __gnu_cxx::__numeric_traits<int>::__max)
        return __gnu_cxx::__numeric_traits<int>::__max;
      else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
        return __gnu_cxx::__numeric_traits<int>::__min;
      else
        return int(__d);
    }
    void _M_assign(const basic_string&);
    void _M_mutate(size_type __pos, size_type __len1, const _CharT* __s, size_type __len2);
    void _M_erase(size_type __pos, size_type __n);

  public:
    basic_string() noexcept(is_nothrow_default_constructible<_Alloc>::value) : _M_dataplus(_M_local_data())
    {
      _M_set_length(0);
    }
    explicit basic_string(const _Alloc& __a) noexcept : _M_dataplus(_M_local_data(), __a) { _M_set_length(0); }
    basic_string(const basic_string& __str)
        : _M_dataplus(_M_local_data(), _Alloc_traits::_S_select_on_copy(__str._M_get_allocator()))
    {
      _M_construct(__str._M_data(), __str._M_data() + __str.length());
    }
    basic_string(const basic_string& __str, size_type __pos, const _Alloc& __a = _Alloc())
        : _M_dataplus(_M_local_data(), __a)
    {
      const _CharT* __start = __str._M_data() + __str._M_check(__pos, "basic_string::basic_string");
      _M_construct(__start, __start + __str._M_limit(__pos, npos));
    }
    basic_string(const basic_string& __str, size_type __pos, size_type __n) : _M_dataplus(_M_local_data())
    {
      const _CharT* __start = __str._M_data() + __str._M_check(__pos, "basic_string::basic_string");
      _M_construct(__start, __start + __str._M_limit(__pos, __n));
    }
    basic_string(const basic_string& __str, size_type __pos, size_type __n, const _Alloc& __a)
        : _M_dataplus(_M_local_data(), __a)
    {
      const _CharT* __start = __str._M_data() + __str._M_check(__pos, "string::string");
      _M_construct(__start, __start + __str._M_limit(__pos, __n));
    }
    basic_string(const _CharT* __s, size_type __n, const _Alloc& __a = _Alloc()) : _M_dataplus(_M_local_data(), __a)
    {
      _M_construct(__s, __s + __n);
    }
    template <typename = _RequireAllocator<_Alloc>>
    basic_string(const _CharT* __s, const _Alloc& __a = _Alloc()) : _M_dataplus(_M_local_data(), __a)
    {
      _M_construct(__s, __s ? __s + traits_type::length(__s) : __s + npos);
    }
    template <typename = _RequireAllocator<_Alloc>>
    basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc()) : _M_dataplus(_M_local_data(), __a)
    {
      _M_construct(__n, __c);
    }
    basic_string(basic_string&& __str) noexcept : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator()))
    {
      if (__str._M_is_local())
      {
        traits_type::copy(_M_local_buf, __str._M_local_buf, _S_local_capacity + 1);
      }
      else
      {
        _M_data(__str._M_data());
        _M_capacity(__str._M_allocated_capacity);
      }
      _M_length(__str.length());
      __str._M_data(__str._M_local_data());
      __str._M_set_length(0);
    }
    basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc()) : _M_dataplus(_M_local_data(), __a)
    {
      _M_construct(__l.begin(), __l.end());
    }
    basic_string(const basic_string& __str, const _Alloc& __a) : _M_dataplus(_M_local_data(), __a)
    {
      _M_construct(__str.begin(), __str.end());
    }
    basic_string(basic_string&& __str, const _Alloc& __a) noexcept(_Alloc_traits::_S_always_equal())
        : _M_dataplus(_M_local_data(), __a)
    {
      if (__str._M_is_local())
      {
        traits_type::copy(_M_local_buf, __str._M_local_buf, _S_local_capacity + 1);
        _M_length(__str.length());
        __str._M_set_length(0);
      }
      else if (_Alloc_traits::_S_always_equal() || __str.get_allocator() == __a)
      {
        _M_data(__str._M_data());
        _M_length(__str.length());
        _M_capacity(__str._M_allocated_capacity);
        __str._M_data(__str._M_local_buf);
        __str._M_set_length(0);
      }
      else
        _M_construct(__str.begin(), __str.end());
    }
    template <typename _InputIterator, typename = std::_RequireInputIter<_InputIterator>>
    basic_string(_InputIterator __beg, _InputIterator __end, const _Alloc& __a = _Alloc())
        : _M_dataplus(_M_local_data(), __a)
    {
      _M_construct(__beg, __end);
    }
    template <typename _Tp, typename = _If_sv<_Tp, void>>
    basic_string(const _Tp& __t, size_type __pos, size_type __n, const _Alloc& __a = _Alloc())
        : basic_string(_S_to_string_view(__t).substr(__pos, __n), __a)
    {
    }
    template <typename _Tp, typename = _If_sv<_Tp, void>>
    explicit basic_string(const _Tp& __t, const _Alloc& __a = _Alloc())
        : basic_string(__sv_wrapper(_S_to_string_view(__t)), __a)
    {
    }
    ~basic_string() { _M_dispose(); }
    basic_string& operator=(const basic_string& __str)
    {
      if (_Alloc_traits::_S_propagate_on_copy_assign())
      {
        if (!_Alloc_traits::_S_always_equal() && !_M_is_local() && _M_get_allocator() != __str._M_get_allocator())
        {
          if (__str.size() <= _S_local_capacity)
          {
            _M_destroy(_M_allocated_capacity);
            _M_data(_M_local_data());
            _M_set_length(0);
          }
          else
          {
            const auto __len = __str.size();
            auto __alloc = __str._M_get_allocator();
            auto __ptr = _Alloc_traits::allocate(__alloc, __len + 1);
            _M_destroy(_M_allocated_capacity);
            _M_data(__ptr);
            _M_capacity(__len);
            _M_set_length(__len);
          }
        }
        std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator());
      }
      return this->assign(__str);
    }
    basic_string& operator=(const _CharT* __s) { return this->assign(__s); }
    basic_string& operator=(_CharT __c)
    {
      this->assign(1, __c);
      return *this;
    }
    basic_string& operator=(basic_string&& __str) noexcept(_Alloc_traits::_S_nothrow_move())
    {
      if (!_M_is_local() && _Alloc_traits::_S_propagate_on_move_assign() && !_Alloc_traits::_S_always_equal() &&
          _M_get_allocator() != __str._M_get_allocator())
      {
        _M_destroy(_M_allocated_capacity);
        _M_data(_M_local_data());
        _M_set_length(0);
      }
      std::__alloc_on_move(_M_get_allocator(), __str._M_get_allocator());
      if (__str._M_is_local())
      {
        if (__str.size())
          this->_S_copy(_M_data(), __str._M_data(), __str.size());
        _M_set_length(__str.size());
      }
      else if (_Alloc_traits::_S_propagate_on_move_assign() || _Alloc_traits::_S_always_equal() ||
               _M_get_allocator() == __str._M_get_allocator())
      {
        pointer __data = nullptr;
        size_type __capacity;
        if (!_M_is_local())
        {
          if (_Alloc_traits::_S_always_equal())
          {
            __data = _M_data();
            __capacity = _M_allocated_capacity;
          }
          else
            _M_destroy(_M_allocated_capacity);
        }
        _M_data(__str._M_data());
        _M_length(__str.length());
        _M_capacity(__str._M_allocated_capacity);
        if (__data)
        {
          __str._M_data(__data);
          __str._M_capacity(__capacity);
        }
        else
          __str._M_data(__str._M_local_buf);
      }
      else
        assign(__str);
      __str.clear();
      return *this;
    }
    basic_string& operator=(initializer_list<_CharT> __l)
    {
      this->assign(__l.begin(), __l.size());
      return *this;
    }
    template <typename _Tp>
    _If_sv<_Tp, basic_string&> operator=(const _Tp& __svt)
    {
      return this->assign(__svt);
    }
    operator __sv_type() const noexcept { return __sv_type(data(), size()); }
    iterator begin() noexcept { return iterator(_M_data()); }
    const_iterator begin() const noexcept { return const_iterator(_M_data()); }
    iterator end() noexcept { return iterator(_M_data() + this->size()); }
    const_iterator end() const noexcept { return const_iterator(_M_data() + this->size()); }
    reverse_iterator rbegin() noexcept { return reverse_iterator(this->end()); }
    const_reverse_iterator rbegin() const noexcept { return const_reverse_iterator(this->end()); }
    reverse_iterator rend() noexcept { return reverse_iterator(this->begin()); }
    const_reverse_iterator rend() const noexcept { return const_reverse_iterator(this->begin()); }
    const_iterator cbegin() const noexcept { return const_iterator(this->_M_data()); }
    const_iterator cend() const noexcept { return const_iterator(this->_M_data() + this->size()); }
    const_reverse_iterator crbegin() const noexcept { return const_reverse_iterator(this->end()); }
    const_reverse_iterator crend() const noexcept { return const_reverse_iterator(this->begin()); }

  public:
    size_type size() const noexcept { return _M_string_length; }
    size_type length() const noexcept { return _M_string_length; }
    size_type max_size() const noexcept { return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; }
    void resize(size_type __n, _CharT __c);
    void resize(size_type __n) { this->resize(__n, _CharT()); }
    void shrink_to_fit() noexcept
    {
      if (capacity() > size())
      {
        try
        {
          reserve(0);
        }
        catch (...)
        {
        }
      }
    }
    size_type capacity() const noexcept { return _M_is_local() ? size_type(_S_local_capacity) : _M_allocated_capacity; }
    void reserve(size_type __res_arg = 0);
    void clear() noexcept { _M_set_length(0); }
    [[__nodiscard__]] bool empty() const noexcept { return this->size() == 0; }
    const_reference operator[](size_type __pos) const noexcept
    {
      ;
      return _M_data()[__pos];
    }
    reference operator[](size_type __pos)
    {
      ;
      ;
      return _M_data()[__pos];
    }
    const_reference at(size_type __n) const
    {
      if (__n >= this->size())
        __throw_out_of_range_fmt(("basic_string::at: __n "
                                  "(which is %zu) >= this->size() "
                                  "(which is %zu)"),
                                 __n,
                                 this->size());
      return _M_data()[__n];
    }
    reference at(size_type __n)
    {
      if (__n >= size())
        __throw_out_of_range_fmt(("basic_string::at: __n "
                                  "(which is %zu) >= this->size() "
                                  "(which is %zu)"),
                                 __n,
                                 this->size());
      return _M_data()[__n];
    }
    reference front() noexcept
    {
      ;
      return operator[](0);
    }
    const_reference front() const noexcept
    {
      ;
      return operator[](0);
    }
    reference back() noexcept
    {
      ;
      return operator[](this->size() - 1);
    }
    const_reference back() const noexcept
    {
      ;
      return operator[](this->size() - 1);
    }
    basic_string& operator+=(const basic_string& __str) { return this->append(__str); }
    basic_string& operator+=(const _CharT* __s) { return this->append(__s); }
    basic_string& operator+=(_CharT __c)
    {
      this->push_back(__c);
      return *this;
    }
    basic_string& operator+=(initializer_list<_CharT> __l) { return this->append(__l.begin(), __l.size()); }
    template <typename _Tp>
    _If_sv<_Tp, basic_string&> operator+=(const _Tp& __svt)
    {
      return this->append(__svt);
    }
    basic_string& append(const basic_string& __str) { return _M_append(__str._M_data(), __str.size()); }
    basic_string& append(const basic_string& __str, size_type __pos, size_type __n = npos)
    {
      return _M_append(__str._M_data() + __str._M_check(__pos, "basic_string::append"), __str._M_limit(__pos, __n));
    }
    basic_string& append(const _CharT* __s, size_type __n)
    {
      ;
      _M_check_length(size_type(0), __n, "basic_string::append");
      return _M_append(__s, __n);
    }
    basic_string& append(const _CharT* __s)
    {
      ;
      const size_type __n = traits_type::length(__s);
      _M_check_length(size_type(0), __n, "basic_string::append");
      return _M_append(__s, __n);
    }
    basic_string& append(size_type __n, _CharT __c) { return _M_replace_aux(this->size(), size_type(0), __n, __c); }
    basic_string& append(initializer_list<_CharT> __l) { return this->append(__l.begin(), __l.size()); }
    template <class _InputIterator, typename = std::_RequireInputIter<_InputIterator>>
    basic_string& append(_InputIterator __first, _InputIterator __last)
    {
      return this->replace(end(), end(), __first, __last);
    }
    template <typename _Tp>
    _If_sv<_Tp, basic_string&> append(const _Tp& __svt)
    {
      __sv_type __sv = __svt;
      return this->append(__sv.data(), __sv.size());
    }
    template <typename _Tp>
    _If_sv<_Tp, basic_string&> append(const _Tp& __svt, size_type __pos, size_type __n = npos)
    {
      __sv_type __sv = __svt;
      return _M_append(__sv.data() + std::__sv_check(__sv.size(), __pos, "basic_string::append"),
                       std::__sv_limit(__sv.size(), __pos, __n));
    }
    void push_back(_CharT __c)
    {
      const size_type __size = this->size();
      if (__size + 1 > this->capacity())
        this->_M_mutate(__size, size_type(0), 0, size_type(1));
      traits_type::assign(this->_M_data()[__size], __c);
      this->_M_set_length(__size + 1);
    }
    basic_string& assign(const basic_string& __str)
    {
      this->_M_assign(__str);
      return *this;
    }
    basic_string& assign(basic_string&& __str) noexcept(_Alloc_traits::_S_nothrow_move())
    {
      return *this = std::move(__str);
    }
    basic_string& assign(const basic_string& __str, size_type __pos, size_type __n = npos)
    {
      return _M_replace(size_type(0),
                        this->size(),
                        __str._M_data() + __str._M_check(__pos, "basic_string::assign"),
                        __str._M_limit(__pos, __n));
    }
    basic_string& assign(const _CharT* __s, size_type __n)
    {
      ;
      return _M_replace(size_type(0), this->size(), __s, __n);
    }
    basic_string& assign(const _CharT* __s)
    {
      ;
      return _M_replace(size_type(0), this->size(), __s, traits_type::length(__s));
    }
    basic_string& assign(size_type __n, _CharT __c) { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
    template <class _InputIterator, typename = std::_RequireInputIter<_InputIterator>>
    basic_string& assign(_InputIterator __first, _InputIterator __last)
    {
      return this->replace(begin(), end(), __first, __last);
    }
    basic_string& assign(initializer_list<_CharT> __l) { return this->assign(__l.begin(), __l.size()); }
    template <typename _Tp>
    _If_sv<_Tp, basic_string&> assign(const _Tp& __svt)
    {
      __sv_type __sv = __svt;
      return this->assign(__sv.data(), __sv.size());
    }
    template <typename _Tp>
    _If_sv<_Tp, basic_string&> assign(const _Tp& __svt, size_type __pos, size_type __n = npos)
    {
      __sv_type __sv = __svt;
      return _M_replace(size_type(0),
                        this->size(),
                        __sv.data() + std::__sv_check(__sv.size(), __pos, "basic_string::assign"),
                        std::__sv_limit(__sv.size(), __pos, __n));
    }
    iterator insert(const_iterator __p, size_type __n, _CharT __c)
    {
      ;
      const size_type __pos = __p - begin();
      this->replace(__p, __p, __n, __c);
      return iterator(this->_M_data() + __pos);
    }
    template <class _InputIterator, typename = std::_RequireInputIter<_InputIterator>>
    iterator insert(const_iterator __p, _InputIterator __beg, _InputIterator __end)
    {
      ;
      const size_type __pos = __p - begin();
      this->replace(__p, __p, __beg, __end);
      return iterator(this->_M_data() + __pos);
    }
    iterator insert(const_iterator __p, initializer_list<_CharT> __l)
    {
      return this->insert(__p, __l.begin(), __l.end());
    }
    basic_string& insert(size_type __pos1, const basic_string& __str)
    {
      return this->replace(__pos1, size_type(0), __str._M_data(), __str.size());
    }
    basic_string& insert(size_type __pos1, const basic_string& __str, size_type __pos2, size_type __n = npos)
    {
      return this->replace(__pos1,
                           size_type(0),
                           __str._M_data() + __str._M_check(__pos2, "basic_string::insert"),
                           __str._M_limit(__pos2, __n));
    }
    basic_string& insert(size_type __pos, const _CharT* __s, size_type __n)
    {
      return this->replace(__pos, size_type(0), __s, __n);
    }
    basic_string& insert(size_type __pos, const _CharT* __s)
    {
      ;
      return this->replace(__pos, size_type(0), __s, traits_type::length(__s));
    }
    basic_string& insert(size_type __pos, size_type __n, _CharT __c)
    {
      return _M_replace_aux(_M_check(__pos, "basic_string::insert"), size_type(0), __n, __c);
    }
    iterator insert(__const_iterator __p, _CharT __c)
    {
      ;
      const size_type __pos = __p - begin();
      _M_replace_aux(__pos, size_type(0), size_type(1), __c);
      return iterator(_M_data() + __pos);
    }
    template <typename _Tp>
    _If_sv<_Tp, basic_string&> insert(size_type __pos, const _Tp& __svt)
    {
      __sv_type __sv = __svt;
      return this->insert(__pos, __sv.data(), __sv.size());
    }
    template <typename _Tp>
    _If_sv<_Tp, basic_string&> insert(size_type __pos1, const _Tp& __svt, size_type __pos2, size_type __n = npos)
    {
      __sv_type __sv = __svt;
      return this->replace(__pos1,
                           size_type(0),
                           __sv.data() + std::__sv_check(__sv.size(), __pos2, "basic_string::insert"),
                           std::__sv_limit(__sv.size(), __pos2, __n));
    }
    basic_string& erase(size_type __pos = 0, size_type __n = npos)
    {
      _M_check(__pos, "basic_string::erase");
      if (__n == npos)
        this->_M_set_length(__pos);
      else if (__n != 0)
        this->_M_erase(__pos, _M_limit(__pos, __n));
      return *this;
    }
    iterator erase(__const_iterator __position)
    {
      ;
      const size_type __pos = __position - begin();
      this->_M_erase(__pos, size_type(1));
      return iterator(_M_data() + __pos);
    }
    iterator erase(__const_iterator __first, __const_iterator __last)
    {
      ;
      const size_type __pos = __first - begin();
      if (__last == end())
        this->_M_set_length(__pos);
      else
        this->_M_erase(__pos, __last - __first);
      return iterator(this->_M_data() + __pos);
    }
    void pop_back() noexcept
    {
      ;
      _M_erase(size() - 1, 1);
    }
    basic_string& replace(size_type __pos, size_type __n, const basic_string& __str)
    {
      return this->replace(__pos, __n, __str._M_data(), __str.size());
    }
    basic_string& replace(size_type __pos1,
                          size_type __n1,
                          const basic_string& __str,
                          size_type __pos2,
                          size_type __n2 = npos)
    {
      return this->replace(__pos1,
                           __n1,
                           __str._M_data() + __str._M_check(__pos2, "basic_string::replace"),
                           __str._M_limit(__pos2, __n2));
    }
    basic_string& replace(size_type __pos, size_type __n1, const _CharT* __s, size_type __n2)
    {
      ;
      return _M_replace(_M_check(__pos, "basic_string::replace"), _M_limit(__pos, __n1), __s, __n2);
    }
    basic_string& replace(size_type __pos, size_type __n1, const _CharT* __s)
    {
      ;
      return this->replace(__pos, __n1, __s, traits_type::length(__s));
    }
    basic_string& replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
    {
      return _M_replace_aux(_M_check(__pos, "basic_string::replace"), _M_limit(__pos, __n1), __n2, __c);
    }
    basic_string& replace(__const_iterator __i1, __const_iterator __i2, const basic_string& __str)
    {
      return this->replace(__i1, __i2, __str._M_data(), __str.size());
    }
    basic_string& replace(__const_iterator __i1, __const_iterator __i2, const _CharT* __s, size_type __n)
    {
      ;
      return this->replace(__i1 - begin(), __i2 - __i1, __s, __n);
    }
    basic_string& replace(__const_iterator __i1, __const_iterator __i2, const _CharT* __s)
    {
      ;
      return this->replace(__i1, __i2, __s, traits_type::length(__s));
    }
    basic_string& replace(__const_iterator __i1, __const_iterator __i2, size_type __n, _CharT __c)
    {
      ;
      return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __c);
    }
    template <class _InputIterator, typename = std::_RequireInputIter<_InputIterator>>
    basic_string& replace(const_iterator __i1, const_iterator __i2, _InputIterator __k1, _InputIterator __k2)
    {
      ;
      ;
      return this->_M_replace_dispatch(__i1, __i2, __k1, __k2, std::__false_type());
    }
    basic_string& replace(__const_iterator __i1, __const_iterator __i2, _CharT* __k1, _CharT* __k2)
    {
      ;
      ;
      return this->replace(__i1 - begin(), __i2 - __i1, __k1, __k2 - __k1);
    }
    basic_string& replace(__const_iterator __i1, __const_iterator __i2, const _CharT* __k1, const _CharT* __k2)
    {
      ;
      ;
      return this->replace(__i1 - begin(), __i2 - __i1, __k1, __k2 - __k1);
    }
    basic_string& replace(__const_iterator __i1, __const_iterator __i2, iterator __k1, iterator __k2)
    {
      ;
      ;
      return this->replace(__i1 - begin(), __i2 - __i1, __k1.base(), __k2 - __k1);
    }
    basic_string& replace(__const_iterator __i1, __const_iterator __i2, const_iterator __k1, const_iterator __k2)
    {
      ;
      ;
      return this->replace(__i1 - begin(), __i2 - __i1, __k1.base(), __k2 - __k1);
    }
    basic_string& replace(const_iterator __i1, const_iterator __i2, initializer_list<_CharT> __l)
    {
      return this->replace(__i1, __i2, __l.begin(), __l.size());
    }
    template <typename _Tp>
    _If_sv<_Tp, basic_string&> replace(size_type __pos, size_type __n, const _Tp& __svt)
    {
      __sv_type __sv = __svt;
      return this->replace(__pos, __n, __sv.data(), __sv.size());
    }
    template <typename _Tp>
    _If_sv<_Tp, basic_string&> replace(size_type __pos1,
                                       size_type __n1,
                                       const _Tp& __svt,
                                       size_type __pos2,
                                       size_type __n2 = npos)
    {
      __sv_type __sv = __svt;
      return this->replace(__pos1,
                           __n1,
                           __sv.data() + std::__sv_check(__sv.size(), __pos2, "basic_string::replace"),
                           std::__sv_limit(__sv.size(), __pos2, __n2));
    }
    template <typename _Tp>
    _If_sv<_Tp, basic_string&> replace(const_iterator __i1, const_iterator __i2, const _Tp& __svt)
    {
      __sv_type __sv = __svt;
      return this->replace(__i1 - begin(), __i2 - __i1, __sv);
    }

  private:
    template <class _Integer>
    basic_string& _M_replace_dispatch(const_iterator __i1,
                                      const_iterator __i2,
                                      _Integer __n,
                                      _Integer __val,
                                      __true_type)
    {
      return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __val);
    }
    template <class _InputIterator>
    basic_string& _M_replace_dispatch(const_iterator __i1,
                                      const_iterator __i2,
                                      _InputIterator __k1,
                                      _InputIterator __k2,
                                      __false_type);
    basic_string& _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2, _CharT __c);
    basic_string& _M_replace(size_type __pos, size_type __len1, const _CharT* __s, const size_type __len2);
    basic_string& _M_append(const _CharT* __s, size_type __n);

  public:
    size_type copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
    void swap(basic_string& __s) noexcept;
    const _CharT* c_str() const noexcept { return _M_data(); }
    const _CharT* data() const noexcept { return _M_data(); }
    _CharT* data() noexcept { return _M_data(); }
    allocator_type get_allocator() const noexcept { return _M_get_allocator(); }
    size_type find(const _CharT* __s, size_type __pos, size_type __n) const noexcept;
    size_type find(const basic_string& __str, size_type __pos = 0) const noexcept
    {
      return this->find(__str.data(), __pos, __str.size());
    }
    template <typename _Tp>
    _If_sv<_Tp, size_type> find(const _Tp& __svt, size_type __pos = 0) const noexcept(is_same<_Tp, __sv_type>::value)
    {
      __sv_type __sv = __svt;
      return this->find(__sv.data(), __pos, __sv.size());
    }
    size_type find(const _CharT* __s, size_type __pos = 0) const noexcept
    {
      ;
      return this->find(__s, __pos, traits_type::length(__s));
    }
    size_type find(_CharT __c, size_type __pos = 0) const noexcept;
    size_type rfind(const basic_string& __str, size_type __pos = npos) const noexcept
    {
      return this->rfind(__str.data(), __pos, __str.size());
    }
    template <typename _Tp>
    _If_sv<_Tp, size_type> rfind(const _Tp& __svt, size_type __pos = npos) const
        noexcept(is_same<_Tp, __sv_type>::value)
    {
      __sv_type __sv = __svt;
      return this->rfind(__sv.data(), __pos, __sv.size());
    }
    size_type rfind(const _CharT* __s, size_type __pos, size_type __n) const noexcept;
    size_type rfind(const _CharT* __s, size_type __pos = npos) const
    {
      ;
      return this->rfind(__s, __pos, traits_type::length(__s));
    }
    size_type rfind(_CharT __c, size_type __pos = npos) const noexcept;
    size_type find_first_of(const basic_string& __str, size_type __pos = 0) const noexcept
    {
      return this->find_first_of(__str.data(), __pos, __str.size());
    }
    template <typename _Tp>
    _If_sv<_Tp, size_type> find_first_of(const _Tp& __svt, size_type __pos = 0) const
        noexcept(is_same<_Tp, __sv_type>::value)
    {
      __sv_type __sv = __svt;
      return this->find_first_of(__sv.data(), __pos, __sv.size());
    }
    size_type find_first_of(const _CharT* __s, size_type __pos, size_type __n) const noexcept;
    size_type find_first_of(const _CharT* __s, size_type __pos = 0) const noexcept
    {
      ;
      return this->find_first_of(__s, __pos, traits_type::length(__s));
    }
    size_type find_first_of(_CharT __c, size_type __pos = 0) const noexcept { return this->find(__c, __pos); }
    size_type find_last_of(const basic_string& __str, size_type __pos = npos) const noexcept
    {
      return this->find_last_of(__str.data(), __pos, __str.size());
    }
    template <typename _Tp>
    _If_sv<_Tp, size_type> find_last_of(const _Tp& __svt, size_type __pos = npos) const
        noexcept(is_same<_Tp, __sv_type>::value)
    {
      __sv_type __sv = __svt;
      return this->find_last_of(__sv.data(), __pos, __sv.size());
    }
    size_type find_last_of(const _CharT* __s, size_type __pos, size_type __n) const noexcept;
    size_type find_last_of(const _CharT* __s, size_type __pos = npos) const noexcept
    {
      ;
      return this->find_last_of(__s, __pos, traits_type::length(__s));
    }
    size_type find_last_of(_CharT __c, size_type __pos = npos) const noexcept { return this->rfind(__c, __pos); }
    size_type find_first_not_of(const basic_string& __str, size_type __pos = 0) const noexcept
    {
      return this->find_first_not_of(__str.data(), __pos, __str.size());
    }
    template <typename _Tp>
    _If_sv<_Tp, size_type> find_first_not_of(const _Tp& __svt, size_type __pos = 0) const
        noexcept(is_same<_Tp, __sv_type>::value)
    {
      __sv_type __sv = __svt;
      return this->find_first_not_of(__sv.data(), __pos, __sv.size());
    }
    size_type find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const noexcept;
    size_type find_first_not_of(const _CharT* __s, size_type __pos = 0) const noexcept
    {
      ;
      return this->find_first_not_of(__s, __pos, traits_type::length(__s));
    }
    size_type find_first_not_of(_CharT __c, size_type __pos = 0) const noexcept;
    size_type find_last_not_of(const basic_string& __str, size_type __pos = npos) const noexcept
    {
      return this->find_last_not_of(__str.data(), __pos, __str.size());
    }
    template <typename _Tp>
    _If_sv<_Tp, size_type> find_last_not_of(const _Tp& __svt, size_type __pos = npos) const
        noexcept(is_same<_Tp, __sv_type>::value)
    {
      __sv_type __sv = __svt;
      return this->find_last_not_of(__sv.data(), __pos, __sv.size());
    }
    size_type find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const noexcept;
    size_type find_last_not_of(const _CharT* __s, size_type __pos = npos) const noexcept
    {
      ;
      return this->find_last_not_of(__s, __pos, traits_type::length(__s));
    }
    size_type find_last_not_of(_CharT __c, size_type __pos = npos) const noexcept;
    basic_string substr(size_type __pos = 0, size_type __n = npos) const
    {
      return basic_string(*this, _M_check(__pos, "basic_string::substr"), __n);
    }
    int compare(const basic_string& __str) const
    {
      const size_type __size = this->size();
      const size_type __osize = __str.size();
      const size_type __len = std::min(__size, __osize);
      int __r = traits_type::compare(_M_data(), __str.data(), __len);
      if (!__r)
        __r = _S_compare(__size, __osize);
      return __r;
    }
    template <typename _Tp>
    _If_sv<_Tp, int> compare(const _Tp& __svt) const noexcept(is_same<_Tp, __sv_type>::value)
    {
      __sv_type __sv = __svt;
      const size_type __size = this->size();
      const size_type __osize = __sv.size();
      const size_type __len = std::min(__size, __osize);
      int __r = traits_type::compare(_M_data(), __sv.data(), __len);
      if (!__r)
        __r = _S_compare(__size, __osize);
      return __r;
    }
    template <typename _Tp>
    _If_sv<_Tp, int> compare(size_type __pos, size_type __n, const _Tp& __svt) const
        noexcept(is_same<_Tp, __sv_type>::value)
    {
      __sv_type __sv = __svt;
      return __sv_type(*this).substr(__pos, __n).compare(__sv);
    }
    template <typename _Tp>
    _If_sv<_Tp, int> compare(size_type __pos1,
                             size_type __n1,
                             const _Tp& __svt,
                             size_type __pos2,
                             size_type __n2 = npos) const noexcept(is_same<_Tp, __sv_type>::value)
    {
      __sv_type __sv = __svt;
      return __sv_type(*this).substr(__pos1, __n1).compare(__sv.substr(__pos2, __n2));
    }
    int compare(size_type __pos, size_type __n, const basic_string& __str) const;
    int compare(size_type __pos1,
                size_type __n1,
                const basic_string& __str,
                size_type __pos2,
                size_type __n2 = npos) const;
    int compare(const _CharT* __s) const noexcept;
    int compare(size_type __pos, size_type __n1, const _CharT* __s) const;
    int compare(size_type __pos, size_type __n1, const _CharT* __s, size_type __n2) const;
    template <typename, typename, typename>
    friend class basic_stringbuf;
  };
  }  // namespace __cxx11
  namespace __cxx11
  {
  template <typename _InputIterator,
            typename _CharT = typename iterator_traits<_InputIterator>::value_type,
            typename _Allocator = allocator<_CharT>,
            typename = _RequireInputIter<_InputIterator>,
            typename = _RequireAllocator<_Allocator>>
  basic_string(_InputIterator, _InputIterator, _Allocator = _Allocator())
      -> basic_string<_CharT, char_traits<_CharT>, _Allocator>;
  template <typename _CharT,
            typename _Traits,
            typename _Allocator = allocator<_CharT>,
            typename = _RequireAllocator<_Allocator>>
  basic_string(basic_string_view<_CharT, _Traits>, const _Allocator& = _Allocator())
      -> basic_string<_CharT, _Traits, _Allocator>;
  template <typename _CharT,
            typename _Traits,
            typename _Allocator = allocator<_CharT>,
            typename = _RequireAllocator<_Allocator>>
  basic_string(basic_string_view<_CharT, _Traits>,
               typename basic_string<_CharT, _Traits, _Allocator>::size_type,
               typename basic_string<_CharT, _Traits, _Allocator>::size_type,
               const _Allocator& = _Allocator()) -> basic_string<_CharT, _Traits, _Allocator>;
  }  // namespace __cxx11
  template <typename _CharT, typename _Traits, typename _Alloc>
  basic_string<_CharT, _Traits, _Alloc> operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
                                                  const basic_string<_CharT, _Traits, _Alloc>& __rhs)
  {
    basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
    __str.append(__rhs);
    return __str;
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  basic_string<_CharT, _Traits, _Alloc> operator+(const _CharT* __lhs,
                                                  const basic_string<_CharT, _Traits, _Alloc>& __rhs);
  template <typename _CharT, typename _Traits, typename _Alloc>
  basic_string<_CharT, _Traits, _Alloc> operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs);
  template <typename _CharT, typename _Traits, typename _Alloc>
  inline basic_string<_CharT, _Traits, _Alloc> operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
                                                         const _CharT* __rhs)
  {
    basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
    __str.append(__rhs);
    return __str;
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  inline basic_string<_CharT, _Traits, _Alloc> operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
                                                         _CharT __rhs)
  {
    typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
    typedef typename __string_type::size_type __size_type;
    __string_type __str(__lhs);
    __str.append(__size_type(1), __rhs);
    return __str;
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  inline basic_string<_CharT, _Traits, _Alloc> operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
                                                         const basic_string<_CharT, _Traits, _Alloc>& __rhs)
  {
    return std::move(__lhs.append(__rhs));
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  inline basic_string<_CharT, _Traits, _Alloc> operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
                                                         basic_string<_CharT, _Traits, _Alloc>&& __rhs)
  {
    return std::move(__rhs.insert(0, __lhs));
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  inline basic_string<_CharT, _Traits, _Alloc> operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
                                                         basic_string<_CharT, _Traits, _Alloc>&& __rhs)
  {
    const auto __size = __lhs.size() + __rhs.size();
    const bool __cond = (__size > __lhs.capacity() && __size <= __rhs.capacity());
    return __cond ? std::move(__rhs.insert(0, __lhs)) : std::move(__lhs.append(__rhs));
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  inline basic_string<_CharT, _Traits, _Alloc> operator+(const _CharT* __lhs,
                                                         basic_string<_CharT, _Traits, _Alloc>&& __rhs)
  {
    return std::move(__rhs.insert(0, __lhs));
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  inline basic_string<_CharT, _Traits, _Alloc> operator+(_CharT __lhs, basic_string<_CharT, _Traits, _Alloc>&& __rhs)
  {
    return std::move(__rhs.insert(0, 1, __lhs));
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  inline basic_string<_CharT, _Traits, _Alloc> operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
                                                         const _CharT* __rhs)
  {
    return std::move(__lhs.append(__rhs));
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  inline basic_string<_CharT, _Traits, _Alloc> operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs, _CharT __rhs)
  {
    return std::move(__lhs.append(1, __rhs));
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  inline bool operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
                         const basic_string<_CharT, _Traits, _Alloc>& __rhs) noexcept
  {
    return __lhs.compare(__rhs) == 0;
  }
  template <typename _CharT>
  inline typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type operator==(
      const basic_string<_CharT>& __lhs, const basic_string<_CharT>& __rhs) noexcept
  {
    return (__lhs.size() == __rhs.size() &&
            !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(), __lhs.size()));
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  inline bool operator==(const _CharT* __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
  {
    return __rhs.compare(__lhs) == 0;
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  inline bool operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs, const _CharT* __rhs)
  {
    return __lhs.compare(__rhs) == 0;
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  inline bool operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
                         const basic_string<_CharT, _Traits, _Alloc>& __rhs) noexcept
  {
    return !(__lhs == __rhs);
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  inline bool operator!=(const _CharT* __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
  {
    return !(__lhs == __rhs);
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  inline bool operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs, const _CharT* __rhs)
  {
    return !(__lhs == __rhs);
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  inline bool operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
                        const basic_string<_CharT, _Traits, _Alloc>& __rhs) noexcept
  {
    return __lhs.compare(__rhs) < 0;
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  inline bool operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs, const _CharT* __rhs)
  {
    return __lhs.compare(__rhs) < 0;
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  inline bool operator<(const _CharT* __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
  {
    return __rhs.compare(__lhs) > 0;
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  inline bool operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
                        const basic_string<_CharT, _Traits, _Alloc>& __rhs) noexcept
  {
    return __lhs.compare(__rhs) > 0;
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  inline bool operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs, const _CharT* __rhs)
  {
    return __lhs.compare(__rhs) > 0;
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  inline bool operator>(const _CharT* __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
  {
    return __rhs.compare(__lhs) < 0;
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  inline bool operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
                         const basic_string<_CharT, _Traits, _Alloc>& __rhs) noexcept
  {
    return __lhs.compare(__rhs) <= 0;
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  inline bool operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs, const _CharT* __rhs)
  {
    return __lhs.compare(__rhs) <= 0;
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  inline bool operator<=(const _CharT* __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
  {
    return __rhs.compare(__lhs) >= 0;
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  inline bool operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
                         const basic_string<_CharT, _Traits, _Alloc>& __rhs) noexcept
  {
    return __lhs.compare(__rhs) >= 0;
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  inline bool operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs, const _CharT* __rhs)
  {
    return __lhs.compare(__rhs) >= 0;
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  inline bool operator>=(const _CharT* __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
  {
    return __rhs.compare(__lhs) <= 0;
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  inline void swap(basic_string<_CharT, _Traits, _Alloc> & __lhs,
                   basic_string<_CharT, _Traits, _Alloc> & __rhs) noexcept(noexcept(__lhs.swap(__rhs)))
  {
    __lhs.swap(__rhs);
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  basic_istream<_CharT, _Traits>& operator>>(basic_istream<_CharT, _Traits>& __is,
                                             basic_string<_CharT, _Traits, _Alloc>& __str);
  template <>
  basic_istream<char>& operator>>(basic_istream<char>& __is, basic_string<char>& __str);
  template <typename _CharT, typename _Traits, typename _Alloc>
  inline basic_ostream<_CharT, _Traits>& operator<<(basic_ostream<_CharT, _Traits>& __os,
                                                    const basic_string<_CharT, _Traits, _Alloc>& __str)
  {
    return __ostream_insert(__os, __str.data(), __str.size());
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  basic_istream<_CharT, _Traits>& getline(
      basic_istream<_CharT, _Traits> & __is, basic_string<_CharT, _Traits, _Alloc> & __str, _CharT __delim);
  template <typename _CharT, typename _Traits, typename _Alloc>
  inline basic_istream<_CharT, _Traits>& getline(basic_istream<_CharT, _Traits> & __is,
                                                 basic_string<_CharT, _Traits, _Alloc> & __str)
  {
    return std::getline(__is, __str, __is.widen('\n'));
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  inline basic_istream<_CharT, _Traits>& getline(
      basic_istream<_CharT, _Traits> && __is, basic_string<_CharT, _Traits, _Alloc> & __str, _CharT __delim)
  {
    return std::getline(__is, __str, __delim);
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  inline basic_istream<_CharT, _Traits>& getline(basic_istream<_CharT, _Traits> && __is,
                                                 basic_string<_CharT, _Traits, _Alloc> & __str)
  {
    return std::getline(__is, __str);
  }
  template <>
  basic_istream<char>& getline(basic_istream<char> & __in, basic_string<char> & __str, char __delim);
  template <>
  basic_istream<wchar_t>& getline(basic_istream<wchar_t> & __in, basic_string<wchar_t> & __str, wchar_t __delim);
}  // namespace )
extern "C" {
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
typedef struct
{
  int quot;
  int rem;
} div_t;
typedef struct
{
  long int quot;
  long int rem;
} ldiv_t;
__extension__ typedef struct
{
  long long int quot;
  long long int rem;
} lldiv_t;
extern size_t __ctype_get_mb_cur_max(void) throw() __attribute__((__warn_unused_result__));
extern double atof(const char* __nptr) throw() __attribute__((__pure__)) __attribute__((__nonnull__(1)))
__attribute__((__warn_unused_result__));
extern int atoi(const char* __nptr) throw() __attribute__((__pure__)) __attribute__((__nonnull__(1)))
__attribute__((__warn_unused_result__));
extern long int atol(const char* __nptr) throw() __attribute__((__pure__)) __attribute__((__nonnull__(1)))
__attribute__((__warn_unused_result__));
__extension__ extern long long int atoll(const char* __nptr) throw() __attribute__((__pure__))
__attribute__((__nonnull__(1))) __attribute__((__warn_unused_result__));
extern double strtod(const char* __restrict __nptr, char** __restrict __endptr) throw() __attribute__((__nonnull__(1)));
extern float strtof(const char* __restrict __nptr, char** __restrict __endptr) throw() __attribute__((__nonnull__(1)));
extern long double strtold(const char* __restrict __nptr, char** __restrict __endptr) throw()
    __attribute__((__nonnull__(1)));
extern _Float32 strtof32(const char* __restrict __nptr, char** __restrict __endptr) throw()
    __attribute__((__nonnull__(1)));
extern _Float64 strtof64(const char* __restrict __nptr, char** __restrict __endptr) throw()
    __attribute__((__nonnull__(1)));
extern _Float128 strtof128(const char* __restrict __nptr, char** __restrict __endptr) throw()
    __attribute__((__nonnull__(1)));
extern _Float32x strtof32x(const char* __restrict __nptr, char** __restrict __endptr) throw()
    __attribute__((__nonnull__(1)));
extern _Float64x strtof64x(const char* __restrict __nptr, char** __restrict __endptr) throw()
    __attribute__((__nonnull__(1)));
extern long int strtol(const char* __restrict __nptr, char** __restrict __endptr, int __base) throw()
    __attribute__((__nonnull__(1)));
extern unsigned long int strtoul(const char* __restrict __nptr, char** __restrict __endptr, int __base) throw()
    __attribute__((__nonnull__(1)));
__extension__ extern long long int strtoq(const char* __restrict __nptr, char** __restrict __endptr, int __base) throw()
    __attribute__((__nonnull__(1)));
__extension__ extern unsigned long long int strtouq(const char* __restrict __nptr,
                                                    char** __restrict __endptr,
                                                    int __base) throw() __attribute__((__nonnull__(1)));
__extension__ extern long long int strtoll(const char* __restrict __nptr,
                                           char** __restrict __endptr,
                                           int __base) throw() __attribute__((__nonnull__(1)));
__extension__ extern unsigned long long int strtoull(const char* __restrict __nptr,
                                                     char** __restrict __endptr,
                                                     int __base) throw() __attribute__((__nonnull__(1)));
extern int strfromd(char* __dest, size_t __size, const char* __format, double __f) throw()
    __attribute__((__nonnull__(3)));
extern int strfromf(char* __dest, size_t __size, const char* __format, float __f) throw()
    __attribute__((__nonnull__(3)));
extern int strfroml(char* __dest, size_t __size, const char* __format, long double __f) throw()
    __attribute__((__nonnull__(3)));
extern int strfromf32(char* __dest, size_t __size, const char* __format, _Float32 __f) throw()
    __attribute__((__nonnull__(3)));
extern int strfromf64(char* __dest, size_t __size, const char* __format, _Float64 __f) throw()
    __attribute__((__nonnull__(3)));
extern int strfromf128(char* __dest, size_t __size, const char* __format, _Float128 __f) throw()
    __attribute__((__nonnull__(3)));
extern int strfromf32x(char* __dest, size_t __size, const char* __format, _Float32x __f) throw()
    __attribute__((__nonnull__(3)));
extern int strfromf64x(char* __dest, size_t __size, const char* __format, _Float64x __f) throw()
    __attribute__((__nonnull__(3)));
extern long int strtol_l(const char* __restrict __nptr, char** __restrict __endptr, int __base, locale_t __loc) throw()
    __attribute__((__nonnull__(1, 4)));
extern unsigned long int strtoul_l(const char* __restrict __nptr,
                                   char** __restrict __endptr,
                                   int __base,
                                   locale_t __loc) throw() __attribute__((__nonnull__(1, 4)));
__extension__ extern long long int strtoll_l(const char* __restrict __nptr,
                                             char** __restrict __endptr,
                                             int __base,
                                             locale_t __loc) throw() __attribute__((__nonnull__(1, 4)));
__extension__ extern unsigned long long int strtoull_l(const char* __restrict __nptr,
                                                       char** __restrict __endptr,
                                                       int __base,
                                                       locale_t __loc) throw() __attribute__((__nonnull__(1, 4)));
extern double strtod_l(const char* __restrict __nptr, char** __restrict __endptr, locale_t __loc) throw()
    __attribute__((__nonnull__(1, 3)));
extern float strtof_l(const char* __restrict __nptr, char** __restrict __endptr, locale_t __loc) throw()
    __attribute__((__nonnull__(1, 3)));
extern long double strtold_l(const char* __restrict __nptr, char** __restrict __endptr, locale_t __loc) throw()
    __attribute__((__nonnull__(1, 3)));
extern _Float32 strtof32_l(const char* __restrict __nptr, char** __restrict __endptr, locale_t __loc) throw()
    __attribute__((__nonnull__(1, 3)));
extern _Float64 strtof64_l(const char* __restrict __nptr, char** __restrict __endptr, locale_t __loc) throw()
    __attribute__((__nonnull__(1, 3)));
extern _Float128 strtof128_l(const char* __restrict __nptr, char** __restrict __endptr, locale_t __loc) throw()
    __attribute__((__nonnull__(1, 3)));
extern _Float32x strtof32x_l(const char* __restrict __nptr, char** __restrict __endptr, locale_t __loc) throw()
    __attribute__((__nonnull__(1, 3)));
extern _Float64x strtof64x_l(const char* __restrict __nptr, char** __restrict __endptr, locale_t __loc) throw()
    __attribute__((__nonnull__(1, 3)));
extern __inline __attribute__((__gnu_inline__)) int __attribute__((__leaf__)) atoi(const char* __nptr) throw()
{
  return (int)strtol(__nptr, (char**)__null, 10);
}
extern __inline __attribute__((__gnu_inline__)) long int __attribute__((__leaf__)) atol(const char* __nptr) throw()
{
  return strtol(__nptr, (char**)__null, 10);
}
__extension__ extern __inline __attribute__((__gnu_inline__)) long long int __attribute__((__leaf__))
atoll(const char* __nptr) throw()
{
  return strtoll(__nptr, (char**)__null, 10);
}
extern char* l64a(long int __n) throw() __attribute__((__warn_unused_result__));
extern long int a64l(const char* __s) throw() __attribute__((__pure__)) __attribute__((__nonnull__(1)))
__attribute__((__warn_unused_result__));
extern "C" {
typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;
typedef __loff_t loff_t;
typedef __ino_t ino_t;
typedef __ino64_t ino64_t;
typedef __dev_t dev_t;
typedef __gid_t gid_t;
typedef __mode_t mode_t;
typedef __nlink_t nlink_t;
typedef __uid_t uid_t;
typedef __off_t off_t;
typedef __off64_t off64_t;
typedef __id_t id_t;
typedef __ssize_t ssize_t;
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;
typedef __key_t key_t;
typedef __useconds_t useconds_t;
typedef __suseconds_t suseconds_t;
typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;
typedef int register_t __attribute__((__mode__(__word__)));
static __inline __uint16_t __bswap_16(__uint16_t __bsx)
{
  return __builtin_bswap16(__bsx);
}
static __inline __uint32_t __bswap_32(__uint32_t __bsx)
{
  return __builtin_bswap32(__bsx);
}
__extension__ static __inline __uint64_t __bswap_64(__uint64_t __bsx)
{
  return __builtin_bswap64(__bsx);
}
static __inline __uint16_t __uint16_identity(__uint16_t __x)
{
  return __x;
}
static __inline __uint32_t __uint32_identity(__uint32_t __x)
{
  return __x;
}
static __inline __uint64_t __uint64_identity(__uint64_t __x)
{
  return __x;
}
typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof(unsigned long int)))];
} __sigset_t;
typedef __sigset_t sigset_t;
typedef long int __fd_mask;
typedef struct
{
  __fd_mask fds_bits[1024 / (8 * (int)sizeof(__fd_mask))];
} fd_set;
typedef __fd_mask fd_mask;
extern "C" {
extern int select(int __nfds,
                  fd_set* __restrict __readfds,
                  fd_set* __restrict __writefds,
                  fd_set* __restrict __exceptfds,
                  struct timeval* __restrict __timeout);
extern int pselect(int __nfds,
                   fd_set* __restrict __readfds,
                   fd_set* __restrict __writefds,
                   fd_set* __restrict __exceptfds,
                   const struct timespec* __restrict __timeout,
                   const __sigset_t* __restrict __sigmask);
extern long int __fdelt_chk(long int __d);
extern long int __fdelt_warn(long int __d) __attribute__((__warning__("bit outside of fd_set selected")));
}
typedef __blksize_t blksize_t;
typedef __blkcnt_t blkcnt_t;
typedef __fsblkcnt_t fsblkcnt_t;
typedef __fsfilcnt_t fsfilcnt_t;
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;
}
extern long int random(void) throw();
extern void srandom(unsigned int __seed) throw();
extern char* initstate(unsigned int __seed, char* __statebuf, size_t __statelen) throw()
    __attribute__((__nonnull__(2)));
extern char* setstate(char* __statebuf) throw() __attribute__((__nonnull__(1)));
struct random_data
{
  int32_t* fptr;
  int32_t* rptr;
  int32_t* state;
  int rand_type;
  int rand_deg;
  int rand_sep;
  int32_t* end_ptr;
};
extern int random_r(struct random_data* __restrict __buf, int32_t* __restrict __result) throw()
    __attribute__((__nonnull__(1, 2)));
extern int srandom_r(unsigned int __seed, struct random_data* __buf) throw() __attribute__((__nonnull__(2)));
extern int initstate_r(unsigned int __seed,
                       char* __restrict __statebuf,
                       size_t __statelen,
                       struct random_data* __restrict __buf) throw() __attribute__((__nonnull__(2, 4)));
extern int setstate_r(char* __restrict __statebuf, struct random_data* __restrict __buf) throw()
    __attribute__((__nonnull__(1, 2)));
extern int rand(void) throw();
extern void srand(unsigned int __seed) throw();
extern int rand_r(unsigned int* __seed) throw();
extern double drand48(void) throw();
extern double erand48(unsigned short int __xsubi[3]) throw() __attribute__((__nonnull__(1)));
extern long int lrand48(void) throw();
extern long int nrand48(unsigned short int __xsubi[3]) throw() __attribute__((__nonnull__(1)));
extern long int mrand48(void) throw();
extern long int jrand48(unsigned short int __xsubi[3]) throw() __attribute__((__nonnull__(1)));
extern void srand48(long int __seedval) throw();
extern unsigned short int* seed48(unsigned short int __seed16v[3]) throw() __attribute__((__nonnull__(1)));
extern void lcong48(unsigned short int __param[7]) throw() __attribute__((__nonnull__(1)));
struct drand48_data
{
  unsigned short int __x[3];
  unsigned short int __old_x[3];
  unsigned short int __c;
  unsigned short int __init;
  __extension__ unsigned long long int __a;
};
extern int drand48_r(struct drand48_data* __restrict __buffer, double* __restrict __result) throw()
    __attribute__((__nonnull__(1, 2)));
extern int erand48_r(unsigned short int __xsubi[3],
                     struct drand48_data* __restrict __buffer,
                     double* __restrict __result) throw() __attribute__((__nonnull__(1, 2)));
extern int lrand48_r(struct drand48_data* __restrict __buffer, long int* __restrict __result) throw()
    __attribute__((__nonnull__(1, 2)));
extern int nrand48_r(unsigned short int __xsubi[3],
                     struct drand48_data* __restrict __buffer,
                     long int* __restrict __result) throw() __attribute__((__nonnull__(1, 2)));
extern int mrand48_r(struct drand48_data* __restrict __buffer, long int* __restrict __result) throw()
    __attribute__((__nonnull__(1, 2)));
extern int jrand48_r(unsigned short int __xsubi[3],
                     struct drand48_data* __restrict __buffer,
                     long int* __restrict __result) throw() __attribute__((__nonnull__(1, 2)));
extern int srand48_r(long int __seedval, struct drand48_data* __buffer) throw() __attribute__((__nonnull__(2)));
extern int seed48_r(unsigned short int __seed16v[3], struct drand48_data* __buffer) throw()
    __attribute__((__nonnull__(1, 2)));
extern int lcong48_r(unsigned short int __param[7], struct drand48_data* __buffer) throw()
    __attribute__((__nonnull__(1, 2)));
extern void* malloc(size_t __size) throw() __attribute__((__malloc__)) __attribute__((__alloc_size__(1)))
__attribute__((__warn_unused_result__));
extern void* calloc(size_t __nmemb, size_t __size) throw() __attribute__((__malloc__))
__attribute__((__alloc_size__(1, 2))) __attribute__((__warn_unused_result__));
extern void* realloc(void* __ptr, size_t __size) throw() __attribute__((__warn_unused_result__))
__attribute__((__alloc_size__(2)));
extern void* reallocarray(void* __ptr, size_t __nmemb, size_t __size) throw() __attribute__((__warn_unused_result__))
__attribute__((__alloc_size__(2, 3)));
extern void free(void* __ptr) throw();
extern "C" {
extern void* alloca(size_t __size) throw();
}
extern void* valloc(size_t __size) throw() __attribute__((__malloc__)) __attribute__((__alloc_size__(1)))
__attribute__((__warn_unused_result__));
extern int posix_memalign(void** __memptr, size_t __alignment, size_t __size) throw() __attribute__((__nonnull__(1)))
__attribute__((__warn_unused_result__));
extern void* aligned_alloc(size_t __alignment, size_t __size) throw() __attribute__((__malloc__))
__attribute__((__alloc_size__(2))) __attribute__((__warn_unused_result__));
extern void abort(void) throw() __attribute__((__noreturn__));
extern int atexit(void (*__func)(void)) throw() __attribute__((__nonnull__(1)));
extern "C++" int at_quick_exit(void (*__func)(void)) throw() __asm("at_quick_exit") __attribute__((__nonnull__(1)));
extern int on_exit(void (*__func)(int __status, void* __arg), void* __arg) throw() __attribute__((__nonnull__(1)));
extern void exit(int __status) throw() __attribute__((__noreturn__));
extern void quick_exit(int __status) throw() __attribute__((__noreturn__));
extern void _Exit(int __status) throw() __attribute__((__noreturn__));
extern char* getenv(const char* __name) throw() __attribute__((__nonnull__(1))) __attribute__((__warn_unused_result__));
extern char* secure_getenv(const char* __name) throw() __attribute__((__nonnull__(1)))
__attribute__((__warn_unused_result__));
extern int putenv(char* __string) throw() __attribute__((__nonnull__(1)));
extern int setenv(const char* __name, const char* __value, int __replace) throw() __attribute__((__nonnull__(2)));
extern int unsetenv(const char* __name) throw() __attribute__((__nonnull__(1)));
extern int clearenv(void) throw();
extern char* mktemp(char* __template) throw() __attribute__((__nonnull__(1)));
extern int mkstemp(char* __template) __attribute__((__nonnull__(1))) __attribute__((__warn_unused_result__));
extern int mkstemp64(char* __template) __attribute__((__nonnull__(1))) __attribute__((__warn_unused_result__));
extern int mkstemps(char* __template, int __suffixlen) __attribute__((__nonnull__(1)))
__attribute__((__warn_unused_result__));
extern int mkstemps64(char* __template, int __suffixlen) __attribute__((__nonnull__(1)))
__attribute__((__warn_unused_result__));
extern char* mkdtemp(char* __template) throw() __attribute__((__nonnull__(1))) __attribute__((__warn_unused_result__));
extern int mkostemp(char* __template, int __flags) __attribute__((__nonnull__(1)))
__attribute__((__warn_unused_result__));
extern int mkostemp64(char* __template, int __flags) __attribute__((__nonnull__(1)))
__attribute__((__warn_unused_result__));
extern int mkostemps(char* __template, int __suffixlen, int __flags) __attribute__((__nonnull__(1)))
__attribute__((__warn_unused_result__));
extern int mkostemps64(char* __template, int __suffixlen, int __flags) __attribute__((__nonnull__(1)))
__attribute__((__warn_unused_result__));
extern int system(const char* __command) __attribute__((__warn_unused_result__));
extern char* canonicalize_file_name(const char* __name) throw() __attribute__((__nonnull__(1)))
__attribute__((__warn_unused_result__));
extern char* realpath(const char* __restrict __name, char* __restrict __resolved) throw()
    __attribute__((__warn_unused_result__));
typedef int (*__compar_fn_t)(const void*, const void*);
typedef __compar_fn_t comparison_fn_t;
typedef int (*__compar_d_fn_t)(const void*, const void*, void*);
extern void* bsearch(const void* __key, const void* __base, size_t __nmemb, size_t __size, __compar_fn_t __compar)
    __attribute__((__nonnull__(1, 2, 5))) __attribute__((__warn_unused_result__));
extern __inline __attribute__((__gnu_inline__)) void* bsearch(const void* __key,
                                                              const void* __base,
                                                              size_t __nmemb,
                                                              size_t __size,
                                                              __compar_fn_t __compar)
{
  size_t __l, __u, __idx;
  const void* __p;
  int __comparison;
  __l = 0;
  __u = __nmemb;
  while (__l < __u)
  {
    __idx = (__l + __u) / 2;
    __p = (void*)(((const char*)__base) + (__idx * __size));
    __comparison = (*__compar)(__key, __p);
    if (__comparison < 0)
      __u = __idx;
    else if (__comparison > 0)
      __l = __idx + 1;
    else
      return (void*)__p;
  }
  return __null;
}
extern void qsort(void* __base, size_t __nmemb, size_t __size, __compar_fn_t __compar)
    __attribute__((__nonnull__(1, 4)));
extern void qsort_r(void* __base, size_t __nmemb, size_t __size, __compar_d_fn_t __compar, void* __arg)
    __attribute__((__nonnull__(1, 4)));
extern int abs(int __x) throw() __attribute__((__const__)) __attribute__((__warn_unused_result__));
extern long int labs(long int __x) throw() __attribute__((__const__)) __attribute__((__warn_unused_result__));
__extension__ extern long long int llabs(long long int __x) throw() __attribute__((__const__))
__attribute__((__warn_unused_result__));
extern div_t div(int __numer, int __denom) throw() __attribute__((__const__)) __attribute__((__warn_unused_result__));
extern ldiv_t ldiv(long int __numer, long int __denom) throw() __attribute__((__const__))
__attribute__((__warn_unused_result__));
__extension__ extern lldiv_t lldiv(long long int __numer, long long int __denom) throw() __attribute__((__const__))
__attribute__((__warn_unused_result__));
extern char* ecvt(double __value, int __ndigit, int* __restrict __decpt, int* __restrict __sign) throw()
    __attribute__((__nonnull__(3, 4))) __attribute__((__warn_unused_result__));
extern char* fcvt(double __value, int __ndigit, int* __restrict __decpt, int* __restrict __sign) throw()
    __attribute__((__nonnull__(3, 4))) __attribute__((__warn_unused_result__));
extern char* gcvt(double __value, int __ndigit, char* __buf) throw() __attribute__((__nonnull__(3)))
__attribute__((__warn_unused_result__));
extern char* qecvt(long double __value, int __ndigit, int* __restrict __decpt, int* __restrict __sign) throw()
    __attribute__((__nonnull__(3, 4))) __attribute__((__warn_unused_result__));
extern char* qfcvt(long double __value, int __ndigit, int* __restrict __decpt, int* __restrict __sign) throw()
    __attribute__((__nonnull__(3, 4))) __attribute__((__warn_unused_result__));
extern char* qgcvt(long double __value, int __ndigit, char* __buf) throw() __attribute__((__nonnull__(3)))
__attribute__((__warn_unused_result__));
extern int ecvt_r(double __value,
                  int __ndigit,
                  int* __restrict __decpt,
                  int* __restrict __sign,
                  char* __restrict __buf,
                  size_t __len) throw() __attribute__((__nonnull__(3, 4, 5)));
extern int fcvt_r(double __value,
                  int __ndigit,
                  int* __restrict __decpt,
                  int* __restrict __sign,
                  char* __restrict __buf,
                  size_t __len) throw() __attribute__((__nonnull__(3, 4, 5)));
extern int qecvt_r(long double __value,
                   int __ndigit,
                   int* __restrict __decpt,
                   int* __restrict __sign,
                   char* __restrict __buf,
                   size_t __len) throw() __attribute__((__nonnull__(3, 4, 5)));
extern int qfcvt_r(long double __value,
                   int __ndigit,
                   int* __restrict __decpt,
                   int* __restrict __sign,
                   char* __restrict __buf,
                   size_t __len) throw() __attribute__((__nonnull__(3, 4, 5)));
extern int mblen(const char* __s, size_t __n) throw();
extern int mbtowc(wchar_t* __restrict __pwc, const char* __restrict __s, size_t __n) throw();
extern int wctomb(char* __s, wchar_t __wchar) throw();
extern size_t mbstowcs(wchar_t* __restrict __pwcs, const char* __restrict __s, size_t __n) throw();
extern size_t wcstombs(char* __restrict __s, const wchar_t* __restrict __pwcs, size_t __n) throw();
extern int rpmatch(const char* __response) throw() __attribute__((__nonnull__(1)))
__attribute__((__warn_unused_result__));
extern int getsubopt(char** __restrict __optionp, char* const* __restrict __tokens, char** __restrict __valuep) throw()
    __attribute__((__nonnull__(1, 2, 3))) __attribute__((__warn_unused_result__));
extern int posix_openpt(int __oflag) __attribute__((__warn_unused_result__));
extern int grantpt(int __fd) throw();
extern int unlockpt(int __fd) throw();
extern char* ptsname(int __fd) throw() __attribute__((__warn_unused_result__));
extern int ptsname_r(int __fd, char* __buf, size_t __buflen) throw() __attribute__((__nonnull__(2)));
extern int getpt(void);
extern int getloadavg(double __loadavg[], int __nelem) throw() __attribute__((__nonnull__(1)));
extern __inline __attribute__((__gnu_inline__)) double __attribute__((__leaf__)) atof(const char* __nptr) throw()
{
  return strtod(__nptr, (char**)__null);
}
extern char* __realpath_chk(const char* __restrict __name, char* __restrict __resolved, size_t __resolvedlen) throw()
    __attribute__((__warn_unused_result__));
extern char* __realpath_alias(const char* __restrict __name, char* __restrict __resolved) throw() __asm__(
    ""
    "realpath") __attribute__((__warn_unused_result__));
extern char*
__realpath_chk_warn(const char* __restrict __name, char* __restrict __resolved, size_t __resolvedlen) throw() __asm__(
    ""
    "__realpath_chk")
    __attribute__((__warn_unused_result__))
    __attribute__((__warning__("second argument of realpath must be either NULL or at "
                               "least PATH_MAX bytes long buffer")));
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__))
__attribute__((__warn_unused_result__)) char* __attribute__((__leaf__))
realpath(const char* __restrict __name, char* __restrict __resolved) throw()
{
  if (__builtin_object_size(__resolved, 2 > 1) != (size_t)-1)
  {
    return __realpath_chk(__name, __resolved, __builtin_object_size(__resolved, 2 > 1));
  }
  return __realpath_alias(__name, __resolved);
}
extern int __ptsname_r_chk(int __fd, char* __buf, size_t __buflen, size_t __nreal) throw()
    __attribute__((__nonnull__(2)));
extern int __ptsname_r_alias(int __fd, char* __buf, size_t __buflen) throw() __asm__(
    ""
    "ptsname_r") __attribute__((__nonnull__(2)));
extern int __ptsname_r_chk_warn(int __fd, char* __buf, size_t __buflen, size_t __nreal) throw() __asm__(
    ""
    "__ptsname_r_chk")
    __attribute__((__nonnull__(2))) __attribute__((__warning__("ptsname_r called with buflen bigger than "
                                                               "size of buf")));
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__)) int
    __attribute__((__leaf__)) ptsname_r(int __fd, char* __buf, size_t __buflen) throw()
{
  if (__builtin_object_size(__buf, 2 > 1) != (size_t)-1)
  {
    if (!__builtin_constant_p(__buflen))
      return __ptsname_r_chk(__fd, __buf, __buflen, __builtin_object_size(__buf, 2 > 1));
    if (__buflen > __builtin_object_size(__buf, 2 > 1))
      return __ptsname_r_chk_warn(__fd, __buf, __buflen, __builtin_object_size(__buf, 2 > 1));
  }
  return __ptsname_r_alias(__fd, __buf, __buflen);
}
extern int __wctomb_chk(char* __s, wchar_t __wchar, size_t __buflen) throw() __attribute__((__warn_unused_result__));
extern int __wctomb_alias(char* __s, wchar_t __wchar) throw() __asm__(
    ""
    "wctomb") __attribute__((__warn_unused_result__));
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__))
__attribute__((__warn_unused_result__)) int __attribute__((__leaf__)) wctomb(char* __s, wchar_t __wchar) throw()
{
  if (__builtin_object_size(__s, 2 > 1) != (size_t)-1 && 16 > __builtin_object_size(__s, 2 > 1))
    return __wctomb_chk(__s, __wchar, __builtin_object_size(__s, 2 > 1));
  return __wctomb_alias(__s, __wchar);
}
extern size_t __mbstowcs_chk(wchar_t* __restrict __dst,
                             const char* __restrict __src,
                             size_t __len,
                             size_t __dstlen) throw();
extern size_t __mbstowcs_alias(wchar_t* __restrict __dst, const char* __restrict __src, size_t __len) throw() __asm__(
    ""
    "mbstowcs");
extern size_t
__mbstowcs_chk_warn(wchar_t* __restrict __dst, const char* __restrict __src, size_t __len, size_t __dstlen) throw() __asm__(
    ""
    "__mbstowcs_chk")
    __attribute__((__warning__("mbstowcs called with dst buffer smaller than len "
                               "* sizeof (wchar_t)")));
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__))
size_t __attribute__((__leaf__)) mbstowcs(wchar_t* __restrict __dst, const char* __restrict __src, size_t __len) throw()
{
  if (__builtin_object_size(__dst, 2 > 1) != (size_t)-1)
  {
    if (!__builtin_constant_p(__len))
      return __mbstowcs_chk(__dst, __src, __len, __builtin_object_size(__dst, 2 > 1) / sizeof(wchar_t));
    if (__len > __builtin_object_size(__dst, 2 > 1) / sizeof(wchar_t))
      return __mbstowcs_chk_warn(__dst, __src, __len, __builtin_object_size(__dst, 2 > 1) / sizeof(wchar_t));
  }
  return __mbstowcs_alias(__dst, __src, __len);
}
extern size_t __wcstombs_chk(char* __restrict __dst,
                             const wchar_t* __restrict __src,
                             size_t __len,
                             size_t __dstlen) throw();
extern size_t __wcstombs_alias(char* __restrict __dst, const wchar_t* __restrict __src, size_t __len) throw() __asm__(
    ""
    "wcstombs");
extern size_t
__wcstombs_chk_warn(char* __restrict __dst, const wchar_t* __restrict __src, size_t __len, size_t __dstlen) throw() __asm__(
    ""
    "__wcstombs_chk") __attribute__((__warning__("wcstombs called with dst buffer smaller than len")));
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__))
size_t __attribute__((__leaf__)) wcstombs(char* __restrict __dst, const wchar_t* __restrict __src, size_t __len) throw()
{
  if (__builtin_object_size(__dst, 2 > 1) != (size_t)-1)
  {
    if (!__builtin_constant_p(__len))
      return __wcstombs_chk(__dst, __src, __len, __builtin_object_size(__dst, 2 > 1));
    if (__len > __builtin_object_size(__dst, 2 > 1))
      return __wcstombs_chk_warn(__dst, __src, __len, __builtin_object_size(__dst, 2 > 1));
  }
  return __wcstombs_alias(__dst, __src, __len);
}
}
extern "C++" {
namespace std __attribute__((__visibility__("default")))
{
  using ::abs;
  inline long abs(long __i) { return __builtin_labs(__i); }
  inline long long abs(long long __x) { return __builtin_llabs(__x); }
  inline constexpr double abs(double __x) { return __builtin_fabs(__x); }
  inline constexpr float abs(float __x) { return __builtin_fabsf(__x); }
  inline constexpr long double abs(long double __x) { return __builtin_fabsl(__x); }
}  // namespace )
}
extern "C++" {
namespace std __attribute__((__visibility__("default")))
{
  using ::abort;
  using ::aligned_alloc;
  using ::at_quick_exit;
  using ::atexit;
  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::div_t;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::ldiv_t;
  using ::malloc;
  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;
  using ::qsort;
  using ::quick_exit;
  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;
  using ::wcstombs;
  using ::wctomb;
  inline ldiv_t div(long __i, long __j) { return ldiv(__i, __j); }
}  // namespace )
namespace __gnu_cxx __attribute__((__visibility__("default")))
{
  using ::_Exit;
  using ::llabs;
  using ::lldiv_t;
  inline lldiv_t div(long long __n, long long __d)
  {
    lldiv_t __q;
    __q.quot = __n / __d;
    __q.rem = __n % __d;
    return __q;
  }
  using ::atoll;
  using ::lldiv;
  using ::strtof;
  using ::strtold;
  using ::strtoll;
  using ::strtoull;
}  // namespace )
namespace std
{
using ::__gnu_cxx::_Exit;
using ::__gnu_cxx::atoll;
using ::__gnu_cxx::div;
using ::__gnu_cxx::llabs;
using ::__gnu_cxx::lldiv;
using ::__gnu_cxx::lldiv_t;
using ::__gnu_cxx::strtof;
using ::__gnu_cxx::strtold;
using ::__gnu_cxx::strtoll;
using ::__gnu_cxx::strtoull;
}  // namespace std
}
extern "C" {
typedef struct _G_fpos_t
{
  __off_t __pos;
  __mbstate_t __state;
} __fpos_t;
typedef struct _G_fpos64_t
{
  __off64_t __pos;
  __mbstate_t __state;
} __fpos64_t;
struct _IO_FILE;
struct _IO_marker;
struct _IO_codecvt;
struct _IO_wide_data;
typedef void _IO_lock_t;
struct _IO_FILE
{
  int _flags;
  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;
  char* _IO_save_base;
  char* _IO_backup_base;
  char* _IO_save_end;
  struct _IO_marker* _markers;
  struct _IO_FILE* _chain;
  int _fileno;
  int _flags2;
  __off_t _old_offset;
  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];
  _IO_lock_t* _lock;
  __off64_t _offset;
  struct _IO_codecvt* _codecvt;
  struct _IO_wide_data* _wide_data;
  struct _IO_FILE* _freeres_list;
  void* _freeres_buf;
  size_t __pad5;
  int _mode;
  char _unused2[15 * sizeof(int) - 4 * sizeof(void*) - sizeof(size_t)];
};
typedef __ssize_t cookie_read_function_t(void* __cookie, char* __buf, size_t __nbytes);
typedef __ssize_t cookie_write_function_t(void* __cookie, const char* __buf, size_t __nbytes);
typedef int cookie_seek_function_t(void* __cookie, __off64_t* __pos, int __w);
typedef int cookie_close_function_t(void* __cookie);
typedef struct _IO_cookie_io_functions_t
{
  cookie_read_function_t* read;
  cookie_write_function_t* write;
  cookie_seek_function_t* seek;
  cookie_close_function_t* close;
} cookie_io_functions_t;
typedef __gnuc_va_list va_list;
typedef __fpos_t fpos_t;
typedef __fpos64_t fpos64_t;
extern FILE* stdin;
extern FILE* stdout;
extern FILE* stderr;
extern int remove(const char* __filename) throw();
extern int rename(const char* __old, const char* __new) throw();
extern int renameat(int __oldfd, const char* __old, int __newfd, const char* __new) throw();
extern int renameat2(int __oldfd, const char* __old, int __newfd, const char* __new, unsigned int __flags) throw();
extern FILE* tmpfile(void) __attribute__((__warn_unused_result__));
extern FILE* tmpfile64(void) __attribute__((__warn_unused_result__));
extern char* tmpnam(char* __s) throw() __attribute__((__warn_unused_result__));
extern char* tmpnam_r(char* __s) throw() __attribute__((__warn_unused_result__));
extern char* tempnam(const char* __dir, const char* __pfx) throw() __attribute__((__malloc__))
__attribute__((__warn_unused_result__));
extern int fclose(FILE* __stream);
extern int fflush(FILE* __stream);
extern int fflush_unlocked(FILE* __stream);
extern int fcloseall(void);
extern FILE* fopen(const char* __restrict __filename, const char* __restrict __modes)
    __attribute__((__warn_unused_result__));
extern FILE* freopen(const char* __restrict __filename, const char* __restrict __modes, FILE* __restrict __stream)
    __attribute__((__warn_unused_result__));
extern FILE* fopen64(const char* __restrict __filename, const char* __restrict __modes)
    __attribute__((__warn_unused_result__));
extern FILE* freopen64(const char* __restrict __filename, const char* __restrict __modes, FILE* __restrict __stream)
    __attribute__((__warn_unused_result__));
extern FILE* fdopen(int __fd, const char* __modes) throw() __attribute__((__warn_unused_result__));
extern FILE* fopencookie(void* __restrict __magic_cookie,
                         const char* __restrict __modes,
                         cookie_io_functions_t __io_funcs) throw() __attribute__((__warn_unused_result__));
extern FILE* fmemopen(void* __s, size_t __len, const char* __modes) throw() __attribute__((__warn_unused_result__));
extern FILE* open_memstream(char** __bufloc, size_t* __sizeloc) throw() __attribute__((__warn_unused_result__));
extern void setbuf(FILE* __restrict __stream, char* __restrict __buf) throw();
extern int setvbuf(FILE* __restrict __stream, char* __restrict __buf, int __modes, size_t __n) throw();
extern void setbuffer(FILE* __restrict __stream, char* __restrict __buf, size_t __size) throw();
extern void setlinebuf(FILE* __stream) throw();
extern int fprintf(FILE* __restrict __stream, const char* __restrict __format, ...);
extern int printf(const char* __restrict __format, ...);
extern int sprintf(char* __restrict __s, const char* __restrict __format, ...) throw();
extern int vfprintf(FILE* __restrict __s, const char* __restrict __format, __gnuc_va_list __arg);
extern int vprintf(const char* __restrict __format, __gnuc_va_list __arg);
extern int vsprintf(char* __restrict __s, const char* __restrict __format, __gnuc_va_list __arg) throw();
extern int snprintf(char* __restrict __s, size_t __maxlen, const char* __restrict __format, ...) throw()
    __attribute__((__format__(__printf__, 3, 4)));
extern int vsnprintf(char* __restrict __s,
                     size_t __maxlen,
                     const char* __restrict __format,
                     __gnuc_va_list __arg) throw() __attribute__((__format__(__printf__, 3, 0)));
extern int vasprintf(char** __restrict __ptr, const char* __restrict __f, __gnuc_va_list __arg) throw()
    __attribute__((__format__(__printf__, 2, 0))) __attribute__((__warn_unused_result__));
extern int __asprintf(char** __restrict __ptr, const char* __restrict __fmt, ...) throw()
    __attribute__((__format__(__printf__, 2, 3))) __attribute__((__warn_unused_result__));
extern int asprintf(char** __restrict __ptr, const char* __restrict __fmt, ...) throw()
    __attribute__((__format__(__printf__, 2, 3))) __attribute__((__warn_unused_result__));
extern int vdprintf(int __fd, const char* __restrict __fmt, __gnuc_va_list __arg)
    __attribute__((__format__(__printf__, 2, 0)));
extern int dprintf(int __fd, const char* __restrict __fmt, ...) __attribute__((__format__(__printf__, 2, 3)));
extern int fscanf(FILE* __restrict __stream, const char* __restrict __format, ...)
    __attribute__((__warn_unused_result__));
extern int scanf(const char* __restrict __format, ...) __attribute__((__warn_unused_result__));
extern int sscanf(const char* __restrict __s, const char* __restrict __format, ...) throw();
extern int fscanf(FILE* __restrict __stream, const char* __restrict __format, ...) __asm__(
    ""
    "__isoc99_fscanf") __attribute__((__warn_unused_result__));
extern int scanf(const char* __restrict __format, ...) __asm__(
    ""
    "__isoc99_scanf") __attribute__((__warn_unused_result__));
extern int sscanf(const char* __restrict __s, const char* __restrict __format, ...) throw() __asm__(
    ""
    "__isoc99_sscanf");
extern int vfscanf(FILE* __restrict __s, const char* __restrict __format, __gnuc_va_list __arg)
    __attribute__((__format__(__scanf__, 2, 0))) __attribute__((__warn_unused_result__));
extern int vscanf(const char* __restrict __format, __gnuc_va_list __arg) __attribute__((__format__(__scanf__, 1, 0)))
__attribute__((__warn_unused_result__));
extern int vsscanf(const char* __restrict __s, const char* __restrict __format, __gnuc_va_list __arg) throw()
    __attribute__((__format__(__scanf__, 2, 0)));
extern int vfscanf(FILE* __restrict __s, const char* __restrict __format, __gnuc_va_list __arg) __asm__(
    ""
    "__isoc99_vfscanf") __attribute__((__format__(__scanf__, 2, 0))) __attribute__((__warn_unused_result__));
extern int vscanf(const char* __restrict __format, __gnuc_va_list __arg) __asm__(
    ""
    "__isoc99_vscanf") __attribute__((__format__(__scanf__, 1, 0))) __attribute__((__warn_unused_result__));
extern int vsscanf(const char* __restrict __s, const char* __restrict __format, __gnuc_va_list __arg) throw() __asm__(
    ""
    "__isoc99_vsscanf") __attribute__((__format__(__scanf__, 2, 0)));
extern int fgetc(FILE* __stream);
extern int getc(FILE* __stream);
extern int getchar(void);
extern int getc_unlocked(FILE* __stream);
extern int getchar_unlocked(void);
extern int fgetc_unlocked(FILE* __stream);
extern int fputc(int __c, FILE* __stream);
extern int putc(int __c, FILE* __stream);
extern int putchar(int __c);
extern int fputc_unlocked(int __c, FILE* __stream);
extern int putc_unlocked(int __c, FILE* __stream);
extern int putchar_unlocked(int __c);
extern int getw(FILE* __stream);
extern int putw(int __w, FILE* __stream);
extern char* fgets(char* __restrict __s, int __n, FILE* __restrict __stream) __attribute__((__warn_unused_result__));
extern char* fgets_unlocked(char* __restrict __s, int __n, FILE* __restrict __stream)
    __attribute__((__warn_unused_result__));
extern __ssize_t __getdelim(char** __restrict __lineptr,
                            size_t* __restrict __n,
                            int __delimiter,
                            FILE* __restrict __stream) __attribute__((__warn_unused_result__));
extern __ssize_t getdelim(char** __restrict __lineptr,
                          size_t* __restrict __n,
                          int __delimiter,
                          FILE* __restrict __stream) __attribute__((__warn_unused_result__));
extern __ssize_t getline(char** __restrict __lineptr, size_t* __restrict __n, FILE* __restrict __stream)
    __attribute__((__warn_unused_result__));
extern int fputs(const char* __restrict __s, FILE* __restrict __stream);
extern int puts(const char* __s);
extern int ungetc(int __c, FILE* __stream);
extern size_t fread(void* __restrict __ptr, size_t __size, size_t __n, FILE* __restrict __stream)
    __attribute__((__warn_unused_result__));
extern size_t fwrite(const void* __restrict __ptr, size_t __size, size_t __n, FILE* __restrict __s);
extern int fputs_unlocked(const char* __restrict __s, FILE* __restrict __stream);
extern size_t fread_unlocked(void* __restrict __ptr, size_t __size, size_t __n, FILE* __restrict __stream)
    __attribute__((__warn_unused_result__));
extern size_t fwrite_unlocked(const void* __restrict __ptr, size_t __size, size_t __n, FILE* __restrict __stream);
extern int fseek(FILE* __stream, long int __off, int __whence);
extern long int ftell(FILE* __stream) __attribute__((__warn_unused_result__));
extern void rewind(FILE* __stream);
extern int fseeko(FILE* __stream, __off_t __off, int __whence);
extern __off_t ftello(FILE* __stream) __attribute__((__warn_unused_result__));
extern int fgetpos(FILE* __restrict __stream, fpos_t* __restrict __pos);
extern int fsetpos(FILE* __stream, const fpos_t* __pos);
extern int fseeko64(FILE* __stream, __off64_t __off, int __whence);
extern __off64_t ftello64(FILE* __stream) __attribute__((__warn_unused_result__));
extern int fgetpos64(FILE* __restrict __stream, fpos64_t* __restrict __pos);
extern int fsetpos64(FILE* __stream, const fpos64_t* __pos);
extern void clearerr(FILE* __stream) throw();
extern int feof(FILE* __stream) throw() __attribute__((__warn_unused_result__));
extern int ferror(FILE* __stream) throw() __attribute__((__warn_unused_result__));
extern void clearerr_unlocked(FILE* __stream) throw();
extern int feof_unlocked(FILE* __stream) throw() __attribute__((__warn_unused_result__));
extern int ferror_unlocked(FILE* __stream) throw() __attribute__((__warn_unused_result__));
extern void perror(const char* __s);
extern int sys_nerr;
extern const char* const sys_errlist[];
extern int _sys_nerr;
extern const char* const _sys_errlist[];
extern int fileno(FILE* __stream) throw() __attribute__((__warn_unused_result__));
extern int fileno_unlocked(FILE* __stream) throw() __attribute__((__warn_unused_result__));
extern FILE* popen(const char* __command, const char* __modes) __attribute__((__warn_unused_result__));
extern int pclose(FILE* __stream);
extern char* ctermid(char* __s) throw();
extern char* cuserid(char* __s);
struct obstack;
extern int obstack_printf(struct obstack* __restrict __obstack, const char* __restrict __format, ...) throw()
    __attribute__((__format__(__printf__, 2, 3)));
extern int obstack_vprintf(struct obstack* __restrict __obstack,
                           const char* __restrict __format,
                           __gnuc_va_list __args) throw() __attribute__((__format__(__printf__, 2, 0)));
extern void flockfile(FILE* __stream) throw();
extern int ftrylockfile(FILE* __stream) throw() __attribute__((__warn_unused_result__));
extern void funlockfile(FILE* __stream) throw();
extern int __uflow(FILE*);
extern int __overflow(FILE*, int);
extern __inline __attribute__((__gnu_inline__)) int getchar(void)
{
  return getc(stdin);
}
extern __inline __attribute__((__gnu_inline__)) int fgetc_unlocked(FILE* __fp)
{
  return (__builtin_expect(((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0)
              ? __uflow(__fp)
              : *(unsigned char*)(__fp)->_IO_read_ptr++);
}
extern __inline __attribute__((__gnu_inline__)) int getc_unlocked(FILE* __fp)
{
  return (__builtin_expect(((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0)
              ? __uflow(__fp)
              : *(unsigned char*)(__fp)->_IO_read_ptr++);
}
extern __inline __attribute__((__gnu_inline__)) int getchar_unlocked(void)
{
  return (__builtin_expect(((stdin)->_IO_read_ptr >= (stdin)->_IO_read_end), 0)
              ? __uflow(stdin)
              : *(unsigned char*)(stdin)->_IO_read_ptr++);
}
extern __inline __attribute__((__gnu_inline__)) int putchar(int __c)
{
  return putc(__c, stdout);
}
extern __inline __attribute__((__gnu_inline__)) int fputc_unlocked(int __c, FILE* __stream)
{
  return (__builtin_expect(((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0)
              ? __overflow(__stream, (unsigned char)(__c))
              : (unsigned char)(*(__stream)->_IO_write_ptr++ = (__c)));
}
extern __inline __attribute__((__gnu_inline__)) int putc_unlocked(int __c, FILE* __stream)
{
  return (__builtin_expect(((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0)
              ? __overflow(__stream, (unsigned char)(__c))
              : (unsigned char)(*(__stream)->_IO_write_ptr++ = (__c)));
}
extern __inline __attribute__((__gnu_inline__)) int putchar_unlocked(int __c)
{
  return (__builtin_expect(((stdout)->_IO_write_ptr >= (stdout)->_IO_write_end), 0)
              ? __overflow(stdout, (unsigned char)(__c))
              : (unsigned char)(*(stdout)->_IO_write_ptr++ = (__c)));
}
extern __inline __attribute__((__gnu_inline__)) __ssize_t getline(char** __lineptr, size_t* __n, FILE* __stream)
{
  return __getdelim(__lineptr, __n, '\n', __stream);
}
extern __inline __attribute__((__gnu_inline__)) int __attribute__((__leaf__)) feof_unlocked(FILE* __stream) throw()
{
  return (((__stream)->_flags & 0x0010) != 0);
}
extern __inline __attribute__((__gnu_inline__)) int __attribute__((__leaf__)) ferror_unlocked(FILE* __stream) throw()
{
  return (((__stream)->_flags & 0x0020) != 0);
}
extern int __sprintf_chk(char* __restrict __s, int __flag, size_t __slen, const char* __restrict __format, ...) throw();
extern int __vsprintf_chk(char* __restrict __s,
                          int __flag,
                          size_t __slen,
                          const char* __restrict __format,
                          __gnuc_va_list __ap) throw();
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__)) int
    __attribute__((__leaf__)) sprintf(char* __restrict __s, const char* __restrict __fmt, ...) throw()
{
  return __builtin___sprintf_chk(__s, 2 - 1, __builtin_object_size(__s, 2 > 1), __fmt, __builtin_va_arg_pack());
}
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__)) int
    __attribute__((__leaf__)) vsprintf(char* __restrict __s, const char* __restrict __fmt, __gnuc_va_list __ap) throw()
{
  return __builtin___vsprintf_chk(__s, 2 - 1, __builtin_object_size(__s, 2 > 1), __fmt, __ap);
}
extern int __snprintf_chk(char* __restrict __s,
                          size_t __n,
                          int __flag,
                          size_t __slen,
                          const char* __restrict __format,
                          ...) throw();
extern int __vsnprintf_chk(char* __restrict __s,
                           size_t __n,
                           int __flag,
                           size_t __slen,
                           const char* __restrict __format,
                           __gnuc_va_list __ap) throw();
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__)) int
    __attribute__((__leaf__)) snprintf(char* __restrict __s, size_t __n, const char* __restrict __fmt, ...) throw()
{
  return __builtin___snprintf_chk(__s, __n, 2 - 1, __builtin_object_size(__s, 2 > 1), __fmt, __builtin_va_arg_pack());
}
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__)) int
    __attribute__((__leaf__))
    vsnprintf(char* __restrict __s, size_t __n, const char* __restrict __fmt, __gnuc_va_list __ap) throw()
{
  return __builtin___vsnprintf_chk(__s, __n, 2 - 1, __builtin_object_size(__s, 2 > 1), __fmt, __ap);
}
extern int __fprintf_chk(FILE* __restrict __stream, int __flag, const char* __restrict __format, ...);
extern int __printf_chk(int __flag, const char* __restrict __format, ...);
extern int __vfprintf_chk(FILE* __restrict __stream, int __flag, const char* __restrict __format, __gnuc_va_list __ap);
extern int __vprintf_chk(int __flag, const char* __restrict __format, __gnuc_va_list __ap);
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__)) int
fprintf(FILE* __restrict __stream, const char* __restrict __fmt, ...)
{
  return __fprintf_chk(__stream, 2 - 1, __fmt, __builtin_va_arg_pack());
}
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__)) int
printf(const char* __restrict __fmt, ...)
{
  return __printf_chk(2 - 1, __fmt, __builtin_va_arg_pack());
}
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__)) int
vprintf(const char* __restrict __fmt, __gnuc_va_list __ap)
{
  return __vfprintf_chk(stdout, 2 - 1, __fmt, __ap);
}
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__)) int
vfprintf(FILE* __restrict __stream, const char* __restrict __fmt, __gnuc_va_list __ap)
{
  return __vfprintf_chk(__stream, 2 - 1, __fmt, __ap);
}
extern int __dprintf_chk(int __fd, int __flag, const char* __restrict __fmt, ...)
    __attribute__((__format__(__printf__, 3, 4)));
extern int __vdprintf_chk(int __fd, int __flag, const char* __restrict __fmt, __gnuc_va_list __arg)
    __attribute__((__format__(__printf__, 3, 0)));
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__)) int
dprintf(int __fd, const char* __restrict __fmt, ...)
{
  return __dprintf_chk(__fd, 2 - 1, __fmt, __builtin_va_arg_pack());
}
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__)) int
vdprintf(int __fd, const char* __restrict __fmt, __gnuc_va_list __ap)
{
  return __vdprintf_chk(__fd, 2 - 1, __fmt, __ap);
}
extern int __asprintf_chk(char** __restrict __ptr, int __flag, const char* __restrict __fmt, ...) throw()
    __attribute__((__format__(__printf__, 3, 4))) __attribute__((__warn_unused_result__));
extern int __vasprintf_chk(char** __restrict __ptr,
                           int __flag,
                           const char* __restrict __fmt,
                           __gnuc_va_list __arg) throw() __attribute__((__format__(__printf__, 3, 0)))
__attribute__((__warn_unused_result__));
extern int __obstack_printf_chk(struct obstack* __restrict __obstack,
                                int __flag,
                                const char* __restrict __format,
                                ...) throw() __attribute__((__format__(__printf__, 3, 4)));
extern int __obstack_vprintf_chk(struct obstack* __restrict __obstack,
                                 int __flag,
                                 const char* __restrict __format,
                                 __gnuc_va_list __args) throw() __attribute__((__format__(__printf__, 3, 0)));
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__)) int
    __attribute__((__leaf__)) asprintf(char** __restrict __ptr, const char* __restrict __fmt, ...) throw()
{
  return __asprintf_chk(__ptr, 2 - 1, __fmt, __builtin_va_arg_pack());
}
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__)) int
    __attribute__((__leaf__)) __asprintf(char** __restrict __ptr, const char* __restrict __fmt, ...) throw()
{
  return __asprintf_chk(__ptr, 2 - 1, __fmt, __builtin_va_arg_pack());
}
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__)) int
    __attribute__((__leaf__))
    obstack_printf(struct obstack* __restrict __obstack, const char* __restrict __fmt, ...) throw()
{
  return __obstack_printf_chk(__obstack, 2 - 1, __fmt, __builtin_va_arg_pack());
}
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__)) int
    __attribute__((__leaf__))
    vasprintf(char** __restrict __ptr, const char* __restrict __fmt, __gnuc_va_list __ap) throw()
{
  return __vasprintf_chk(__ptr, 2 - 1, __fmt, __ap);
}
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__)) int
    __attribute__((__leaf__))
    obstack_vprintf(struct obstack* __restrict __obstack, const char* __restrict __fmt, __gnuc_va_list __ap) throw()
{
  return __obstack_vprintf_chk(__obstack, 2 - 1, __fmt, __ap);
}
extern char* __fgets_chk(char* __restrict __s, size_t __size, int __n, FILE* __restrict __stream)
    __attribute__((__warn_unused_result__));
extern char* __fgets_alias(char* __restrict __s, int __n, FILE* __restrict __stream) __asm__(
    ""
    "fgets") __attribute__((__warn_unused_result__));
extern char* __fgets_chk_warn(char* __restrict __s, size_t __size, int __n, FILE* __restrict __stream) __asm__(
    ""
    "__fgets_chk")
    __attribute__((__warn_unused_result__)) __attribute__((__warning__("fgets called with bigger size than length "
                                                                       "of destination buffer")));
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__))
__attribute__((__warn_unused_result__)) char*
fgets(char* __restrict __s, int __n, FILE* __restrict __stream)
{
  if (__builtin_object_size(__s, 2 > 1) != (size_t)-1)
  {
    if (!__builtin_constant_p(__n) || __n <= 0)
      return __fgets_chk(__s, __builtin_object_size(__s, 2 > 1), __n, __stream);
    if ((size_t)__n > __builtin_object_size(__s, 2 > 1))
      return __fgets_chk_warn(__s, __builtin_object_size(__s, 2 > 1), __n, __stream);
  }
  return __fgets_alias(__s, __n, __stream);
}
extern size_t __fread_chk(void* __restrict __ptr, size_t __ptrlen, size_t __size, size_t __n, FILE* __restrict __stream)
    __attribute__((__warn_unused_result__));
extern size_t __fread_alias(void* __restrict __ptr, size_t __size, size_t __n, FILE* __restrict __stream) __asm__(
    ""
    "fread") __attribute__((__warn_unused_result__));
extern size_t
__fread_chk_warn(void* __restrict __ptr, size_t __ptrlen, size_t __size, size_t __n, FILE* __restrict __stream) __asm__(
    ""
    "__fread_chk")
    __attribute__((__warn_unused_result__))
    __attribute__((__warning__("fread called with bigger size * nmemb than length "
                               "of destination buffer")));
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__))
__attribute__((__warn_unused_result__)) size_t
fread(void* __restrict __ptr, size_t __size, size_t __n, FILE* __restrict __stream)
{
  if (__builtin_object_size(__ptr, 0) != (size_t)-1)
  {
    if (!__builtin_constant_p(__size) || !__builtin_constant_p(__n) ||
        (__size | __n) >= (((size_t)1) << (8 * sizeof(size_t) / 2)))
      return __fread_chk(__ptr, __builtin_object_size(__ptr, 0), __size, __n, __stream);
    if (__size * __n > __builtin_object_size(__ptr, 0))
      return __fread_chk_warn(__ptr, __builtin_object_size(__ptr, 0), __size, __n, __stream);
  }
  return __fread_alias(__ptr, __size, __n, __stream);
}
extern char* __fgets_unlocked_chk(char* __restrict __s, size_t __size, int __n, FILE* __restrict __stream)
    __attribute__((__warn_unused_result__));
extern char* __fgets_unlocked_alias(char* __restrict __s, int __n, FILE* __restrict __stream) __asm__(
    ""
    "fgets_unlocked") __attribute__((__warn_unused_result__));
extern char* __fgets_unlocked_chk_warn(char* __restrict __s, size_t __size, int __n, FILE* __restrict __stream) __asm__(
    ""
    "__fgets_unlocked_chk")
    __attribute__((__warn_unused_result__))
    __attribute__((__warning__("fgets_unlocked called with bigger size than length "
                               "of destination buffer")));
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__))
__attribute__((__warn_unused_result__)) char*
fgets_unlocked(char* __restrict __s, int __n, FILE* __restrict __stream)
{
  if (__builtin_object_size(__s, 2 > 1) != (size_t)-1)
  {
    if (!__builtin_constant_p(__n) || __n <= 0)
      return __fgets_unlocked_chk(__s, __builtin_object_size(__s, 2 > 1), __n, __stream);
    if ((size_t)__n > __builtin_object_size(__s, 2 > 1))
      return __fgets_unlocked_chk_warn(__s, __builtin_object_size(__s, 2 > 1), __n, __stream);
  }
  return __fgets_unlocked_alias(__s, __n, __stream);
}
extern size_t __fread_unlocked_chk(void* __restrict __ptr,
                                   size_t __ptrlen,
                                   size_t __size,
                                   size_t __n,
                                   FILE* __restrict __stream) __attribute__((__warn_unused_result__));
extern size_t
__fread_unlocked_alias(void* __restrict __ptr, size_t __size, size_t __n, FILE* __restrict __stream) __asm__(
    ""
    "fread_unlocked") __attribute__((__warn_unused_result__));
extern size_t
__fread_unlocked_chk_warn(void* __restrict __ptr, size_t __ptrlen, size_t __size, size_t __n, FILE* __restrict __stream) __asm__(
    ""
    "__fread_unlocked_chk")
    __attribute__((__warn_unused_result__))
    __attribute__((__warning__("fread_unlocked called with bigger size * nmemb than "
                               "length of destination buffer")));
extern __inline __attribute__((__always_inline__)) __attribute__((__gnu_inline__)) __attribute__((__artificial__))
__attribute__((__warn_unused_result__)) size_t
fread_unlocked(void* __restrict __ptr, size_t __size, size_t __n, FILE* __restrict __stream)
{
  if (__builtin_object_size(__ptr, 0) != (size_t)-1)
  {
    if (!__builtin_constant_p(__size) || !__builtin_constant_p(__n) ||
        (__size | __n) >= (((size_t)1) << (8 * sizeof(size_t) / 2)))
      return __fread_unlocked_chk(__ptr, __builtin_object_size(__ptr, 0), __size, __n, __stream);
    if (__size * __n > __builtin_object_size(__ptr, 0))
      return __fread_unlocked_chk_warn(__ptr, __builtin_object_size(__ptr, 0), __size, __n, __stream);
  }
  if (__builtin_constant_p(__size) && __builtin_constant_p(__n) &&
      (__size | __n) < (((size_t)1) << (8 * sizeof(size_t) / 2)) && __size * __n <= 8)
  {
    size_t __cnt = __size * __n;
    char* __cptr = (char*)__ptr;
    if (__cnt == 0)
      return 0;
    for (; __cnt > 0; --__cnt)
    {
      int __c = getc_unlocked(__stream);
      if (__c == (-1))
        break;
      *__cptr++ = __c;
    }
    return (__cptr - (char*)__ptr) / __size;
  }
  return __fread_unlocked_alias(__ptr, __size, __n, __stream);
}
}
namespace std
{
using ::clearerr;
using ::fclose;
using ::feof;
using ::ferror;
using ::fflush;
using ::fgetc;
using ::fgetpos;
using ::fgets;
using ::FILE;
using ::fopen;
using ::fpos_t;
using ::fprintf;
using ::fputc;
using ::fputs;
using ::fread;
using ::freopen;
using ::fscanf;
using ::fseek;
using ::fsetpos;
using ::ftell;
using ::fwrite;
using ::getc;
using ::getchar;
using ::perror;
using ::printf;
using ::putc;
using ::putchar;
using ::puts;
using ::remove;
using ::rename;
using ::rewind;
using ::scanf;
using ::setbuf;
using ::setvbuf;
using ::sprintf;
using ::sscanf;
using ::tmpfile;
using ::tmpnam;
using ::ungetc;
using ::vfprintf;
using ::vprintf;
using ::vsprintf;
}  // namespace std
namespace __gnu_cxx
{
using ::snprintf;
using ::vfscanf;
using ::vscanf;
using ::vsnprintf;
using ::vsscanf;
}  // namespace __gnu_cxx
namespace std
{
using ::__gnu_cxx::snprintf;
using ::__gnu_cxx::vfscanf;
using ::__gnu_cxx::vscanf;
using ::__gnu_cxx::vsnprintf;
using ::__gnu_cxx::vsscanf;
}  // namespace std
extern "C" {
extern int* __errno_location(void) throw() __attribute__((__const__));
extern char* program_invocation_name;
extern char* program_invocation_short_name;
typedef int error_t;
}
namespace __gnu_cxx __attribute__((__visibility__("default")))
{
  template <typename _TRet, typename _Ret = _TRet, typename _CharT, typename... _Base>
  _Ret __stoa(_TRet(*__convf)(const _CharT*, _CharT**, _Base...),
              const char* __name,
              const _CharT* __str,
              std::size_t* __idx,
              _Base... __base)
  {
    _Ret __ret;
    _CharT* __endptr;
    struct _Save_errno
    {
      _Save_errno() : _M_errno((*__errno_location())) { (*__errno_location()) = 0; }
      ~_Save_errno()
      {
        if ((*__errno_location()) == 0)
          (*__errno_location()) = _M_errno;
      }
      int _M_errno;
    } const __save_errno;
    struct _Range_chk
    {
      static bool _S_chk(_TRet, std::false_type) { return false; }
      static bool _S_chk(_TRet __val, std::true_type)
      {
        return __val < _TRet(__numeric_traits<int>::__min) || __val > _TRet(__numeric_traits<int>::__max);
      }
    };
    const _TRet __tmp = __convf(__str, &__endptr, __base...);
    if (__endptr == __str)
      std::__throw_invalid_argument(__name);
    else if ((*__errno_location()) == 34 || _Range_chk::_S_chk(__tmp, std::is_same<_Ret, int>{}))
      std::__throw_out_of_range(__name);
    else
      __ret = __tmp;
    if (__idx)
      *__idx = __endptr - __str;
    return __ret;
  }
  template <typename _String, typename _CharT = typename _String::value_type>
  _String __to_xstring(
      int (*__convf)(_CharT*, std::size_t, const _CharT*, __builtin_va_list), std::size_t __n, const _CharT* __fmt, ...)
  {
    _CharT* __s = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) * __n));
    __builtin_va_list __args;
    __builtin_va_start(__args, __fmt);
    const int __len = __convf(__s, __n, __fmt, __args);
    __builtin_va_end(__args);
    return _String(__s, __s + __len);
  }
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  namespace __cxx11
  {
  inline int stoi(const string& __str, size_t* __idx = 0, int __base = 10)
  {
    return __gnu_cxx::__stoa<long, int>(&std::strtol, "stoi", __str.c_str(), __idx, __base);
  }
  inline long stol(const string& __str, size_t* __idx = 0, int __base = 10)
  {
    return __gnu_cxx::__stoa(&std::strtol, "stol", __str.c_str(), __idx, __base);
  }
  inline unsigned long stoul(const string& __str, size_t* __idx = 0, int __base = 10)
  {
    return __gnu_cxx::__stoa(&std::strtoul, "stoul", __str.c_str(), __idx, __base);
  }
  inline long long stoll(const string& __str, size_t* __idx = 0, int __base = 10)
  {
    return __gnu_cxx::__stoa(&std::strtoll, "stoll", __str.c_str(), __idx, __base);
  }
  inline unsigned long long stoull(const string& __str, size_t* __idx = 0, int __base = 10)
  {
    return __gnu_cxx::__stoa(&std::strtoull, "stoull", __str.c_str(), __idx, __base);
  }
  inline float stof(const string& __str, size_t* __idx = 0)
  {
    return __gnu_cxx::__stoa(&std::strtof, "stof", __str.c_str(), __idx);
  }
  inline double stod(const string& __str, size_t* __idx = 0)
  {
    return __gnu_cxx::__stoa(&std::strtod, "stod", __str.c_str(), __idx);
  }
  inline long double stold(const string& __str, size_t* __idx = 0)
  {
    return __gnu_cxx::__stoa(&std::strtold, "stold", __str.c_str(), __idx);
  }
  inline string to_string(int __val)
  {
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(int), "%d", __val);
  }
  inline string to_string(unsigned __val)
  {
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(unsigned), "%u", __val);
  }
  inline string to_string(long __val)
  {
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(long), "%ld", __val);
  }
  inline string to_string(unsigned long __val)
  {
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(unsigned long), "%lu", __val);
  }
  inline string to_string(long long __val)
  {
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(long long), "%lld", __val);
  }
  inline string to_string(unsigned long long __val)
  {
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, 4 * sizeof(unsigned long long), "%llu", __val);
  }
  inline string to_string(float __val)
  {
    const int __n = __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n, "%f", __val);
  }
  inline string to_string(double __val)
  {
    const int __n = __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n, "%f", __val);
  }
  inline string to_string(long double __val)
  {
    const int __n = __gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<string>(&std::vsnprintf, __n, "%Lf", __val);
  }
  inline int stoi(const wstring& __str, size_t* __idx = 0, int __base = 10)
  {
    return __gnu_cxx::__stoa<long, int>(&std::wcstol, "stoi", __str.c_str(), __idx, __base);
  }
  inline long stol(const wstring& __str, size_t* __idx = 0, int __base = 10)
  {
    return __gnu_cxx::__stoa(&std::wcstol, "stol", __str.c_str(), __idx, __base);
  }
  inline unsigned long stoul(const wstring& __str, size_t* __idx = 0, int __base = 10)
  {
    return __gnu_cxx::__stoa(&std::wcstoul, "stoul", __str.c_str(), __idx, __base);
  }
  inline long long stoll(const wstring& __str, size_t* __idx = 0, int __base = 10)
  {
    return __gnu_cxx::__stoa(&std::wcstoll, "stoll", __str.c_str(), __idx, __base);
  }
  inline unsigned long long stoull(const wstring& __str, size_t* __idx = 0, int __base = 10)
  {
    return __gnu_cxx::__stoa(&std::wcstoull, "stoull", __str.c_str(), __idx, __base);
  }
  inline float stof(const wstring& __str, size_t* __idx = 0)
  {
    return __gnu_cxx::__stoa(&std::wcstof, "stof", __str.c_str(), __idx);
  }
  inline double stod(const wstring& __str, size_t* __idx = 0)
  {
    return __gnu_cxx::__stoa(&std::wcstod, "stod", __str.c_str(), __idx);
  }
  inline long double stold(const wstring& __str, size_t* __idx = 0)
  {
    return __gnu_cxx::__stoa(&std::wcstold, "stold", __str.c_str(), __idx);
  }
  inline wstring to_wstring(int __val)
  {
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(int), L"%d", __val);
  }
  inline wstring to_wstring(unsigned __val)
  {
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(unsigned), L"%u", __val);
  }
  inline wstring to_wstring(long __val)
  {
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(long), L"%ld", __val);
  }
  inline wstring to_wstring(unsigned long __val)
  {
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(unsigned long), L"%lu", __val);
  }
  inline wstring to_wstring(long long __val)
  {
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(long long), L"%lld", __val);
  }
  inline wstring to_wstring(unsigned long long __val)
  {
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, 4 * sizeof(unsigned long long), L"%llu", __val);
  }
  inline wstring to_wstring(float __val)
  {
    const int __n = __gnu_cxx::__numeric_traits<float>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n, L"%f", __val);
  }
  inline wstring to_wstring(double __val)
  {
    const int __n = __gnu_cxx::__numeric_traits<double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n, L"%f", __val);
  }
  inline wstring to_wstring(long double __val)
  {
    const int __n = __gnu_cxx::__numeric_traits<long double>::__max_exponent10 + 20;
    return __gnu_cxx::__to_xstring<wstring>(&std::vswprintf, __n, L"%Lf", __val);
  }
  }  // namespace __cxx11
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <>
  struct hash<string> : public __hash_base<size_t, string>
  {
    size_t operator()(const string& __s) const noexcept { return std::_Hash_impl::hash(__s.data(), __s.length()); }
  };
  template <>
  struct __is_fast_hash<hash<string>> : std::false_type
  {
  };
  template <>
  struct hash<wstring> : public __hash_base<size_t, wstring>
  {
    size_t operator()(const wstring& __s) const noexcept
    {
      return std::_Hash_impl::hash(__s.data(), __s.length() * sizeof(wchar_t));
    }
  };
  template <>
  struct __is_fast_hash<hash<wstring>> : std::false_type
  {
  };
  template <>
  struct hash<u16string> : public __hash_base<size_t, u16string>
  {
    size_t operator()(const u16string& __s) const noexcept
    {
      return std::_Hash_impl::hash(__s.data(), __s.length() * sizeof(char16_t));
    }
  };
  template <>
  struct __is_fast_hash<hash<u16string>> : std::false_type
  {
  };
  template <>
  struct hash<u32string> : public __hash_base<size_t, u32string>
  {
    size_t operator()(const u32string& __s) const noexcept
    {
      return std::_Hash_impl::hash(__s.data(), __s.length() * sizeof(char32_t));
    }
  };
  template <>
  struct __is_fast_hash<hash<u32string>> : std::false_type
  {
  };
  inline namespace literals
  {
  inline namespace string_literals
  {
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wliteral-suffix"
  __attribute((__abi_tag__("cxx11"))) inline basic_string<char> operator""s(const char* __str, size_t __len)
  {
    return basic_string<char>{__str, __len};
  }
  __attribute((__abi_tag__("cxx11"))) inline basic_string<wchar_t> operator""s(const wchar_t* __str, size_t __len)
  {
    return basic_string<wchar_t>{__str, __len};
  }
  __attribute((__abi_tag__("cxx11"))) inline basic_string<char16_t> operator""s(const char16_t* __str, size_t __len)
  {
    return basic_string<char16_t>{__str, __len};
  }
  __attribute((__abi_tag__("cxx11"))) inline basic_string<char32_t> operator""s(const char32_t* __str, size_t __len)
  {
    return basic_string<char32_t>{__str, __len};
  }
#pragma GCC diagnostic pop
  }  // namespace string_literals
  }  // namespace literals
  namespace __detail::__variant
  {
  template <typename>
  struct _Never_valueless_alt;
  template <typename _Tp, typename _Traits, typename _Alloc>
  struct _Never_valueless_alt<std::basic_string<_Tp, _Traits, _Alloc>>
      : __and_<is_nothrow_move_constructible<std::basic_string<_Tp, _Traits, _Alloc>>,
               is_nothrow_move_assignable<std::basic_string<_Tp, _Traits, _Alloc>>>::type
  {
  };
  }  // namespace __detail::__variant
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _CharT, typename _Traits, typename _Alloc>
  const typename basic_string<_CharT, _Traits, _Alloc>::size_type basic_string<_CharT, _Traits, _Alloc>::npos;
  template <typename _CharT, typename _Traits, typename _Alloc>
  void basic_string<_CharT, _Traits, _Alloc>::swap(basic_string & __s) noexcept
  {
    if (this == &__s)
      return;
    _Alloc_traits::_S_on_swap(_M_get_allocator(), __s._M_get_allocator());
    if (_M_is_local())
      if (__s._M_is_local())
      {
        if (length() && __s.length())
        {
          _CharT __tmp_data[_S_local_capacity + 1];
          traits_type::copy(__tmp_data, __s._M_local_buf, _S_local_capacity + 1);
          traits_type::copy(__s._M_local_buf, _M_local_buf, _S_local_capacity + 1);
          traits_type::copy(_M_local_buf, __tmp_data, _S_local_capacity + 1);
        }
        else if (__s.length())
        {
          traits_type::copy(_M_local_buf, __s._M_local_buf, _S_local_capacity + 1);
          _M_length(__s.length());
          __s._M_set_length(0);
          return;
        }
        else if (length())
        {
          traits_type::copy(__s._M_local_buf, _M_local_buf, _S_local_capacity + 1);
          __s._M_length(length());
          _M_set_length(0);
          return;
        }
      }
      else
      {
        const size_type __tmp_capacity = __s._M_allocated_capacity;
        traits_type::copy(__s._M_local_buf, _M_local_buf, _S_local_capacity + 1);
        _M_data(__s._M_data());
        __s._M_data(__s._M_local_buf);
        _M_capacity(__tmp_capacity);
      }
    else
    {
      const size_type __tmp_capacity = _M_allocated_capacity;
      if (__s._M_is_local())
      {
        traits_type::copy(_M_local_buf, __s._M_local_buf, _S_local_capacity + 1);
        __s._M_data(_M_data());
        _M_data(_M_local_buf);
      }
      else
      {
        pointer __tmp_ptr = _M_data();
        _M_data(__s._M_data());
        __s._M_data(__tmp_ptr);
        _M_capacity(__s._M_allocated_capacity);
      }
      __s._M_capacity(__tmp_capacity);
    }
    const size_type __tmp_length = length();
    _M_length(__s.length());
    __s._M_length(__tmp_length);
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  typename basic_string<_CharT, _Traits, _Alloc>::pointer basic_string<_CharT, _Traits, _Alloc>::_M_create(
      size_type & __capacity, size_type __old_capacity)
  {
    if (__capacity > max_size())
      std::__throw_length_error(("basic_string::_M_create"));
    if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
    {
      __capacity = 2 * __old_capacity;
      if (__capacity > max_size())
        __capacity = max_size();
    }
    return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1);
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  template <typename _InIterator>
  void basic_string<_CharT, _Traits, _Alloc>::_M_construct(
      _InIterator __beg, _InIterator __end, std::input_iterator_tag)
  {
    size_type __len = 0;
    size_type __capacity = size_type(_S_local_capacity);
    while (__beg != __end && __len < __capacity)
    {
      _M_data()[__len++] = *__beg;
      ++__beg;
    }
    try
    {
      while (__beg != __end)
      {
        if (__len == __capacity)
        {
          __capacity = __len + 1;
          pointer __another = _M_create(__capacity, __len);
          this->_S_copy(__another, _M_data(), __len);
          _M_dispose();
          _M_data(__another);
          _M_capacity(__capacity);
        }
        _M_data()[__len++] = *__beg;
        ++__beg;
      }
    }
    catch (...)
    {
      _M_dispose();
      throw;
    }
    _M_set_length(__len);
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  template <typename _InIterator>
  void basic_string<_CharT, _Traits, _Alloc>::_M_construct(
      _InIterator __beg, _InIterator __end, std::forward_iterator_tag)
  {
    if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
      std::__throw_logic_error(
          ("basic_string::"
           "_M_construct null not valid"));
    size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
    if (__dnew > size_type(_S_local_capacity))
    {
      _M_data(_M_create(__dnew, size_type(0)));
      _M_capacity(__dnew);
    }
    try
    {
      this->_S_copy_chars(_M_data(), __beg, __end);
    }
    catch (...)
    {
      _M_dispose();
      throw;
    }
    _M_set_length(__dnew);
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  void basic_string<_CharT, _Traits, _Alloc>::_M_construct(size_type __n, _CharT __c)
  {
    if (__n > size_type(_S_local_capacity))
    {
      _M_data(_M_create(__n, size_type(0)));
      _M_capacity(__n);
    }
    if (__n)
      this->_S_assign(_M_data(), __n, __c);
    _M_set_length(__n);
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  void basic_string<_CharT, _Traits, _Alloc>::_M_assign(const basic_string& __str)
  {
    if (this != &__str)
    {
      const size_type __rsize = __str.length();
      const size_type __capacity = capacity();
      if (__rsize > __capacity)
      {
        size_type __new_capacity = __rsize;
        pointer __tmp = _M_create(__new_capacity, __capacity);
        _M_dispose();
        _M_data(__tmp);
        _M_capacity(__new_capacity);
      }
      if (__rsize)
        this->_S_copy(_M_data(), __str._M_data(), __rsize);
      _M_set_length(__rsize);
    }
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  void basic_string<_CharT, _Traits, _Alloc>::reserve(size_type __res)
  {
    if (__res < length())
      __res = length();
    const size_type __capacity = capacity();
    if (__res != __capacity)
    {
      if (__res > __capacity || __res > size_type(_S_local_capacity))
      {
        pointer __tmp = _M_create(__res, __capacity);
        this->_S_copy(__tmp, _M_data(), length() + 1);
        _M_dispose();
        _M_data(__tmp);
        _M_capacity(__res);
      }
      else if (!_M_is_local())
      {
        this->_S_copy(_M_local_data(), _M_data(), length() + 1);
        _M_destroy(__capacity);
        _M_data(_M_local_data());
      }
    }
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  void basic_string<_CharT, _Traits, _Alloc>::_M_mutate(
      size_type __pos, size_type __len1, const _CharT* __s, size_type __len2)
  {
    const size_type __how_much = length() - __pos - __len1;
    size_type __new_capacity = length() + __len2 - __len1;
    pointer __r = _M_create(__new_capacity, capacity());
    if (__pos)
      this->_S_copy(__r, _M_data(), __pos);
    if (__s && __len2)
      this->_S_copy(__r + __pos, __s, __len2);
    if (__how_much)
      this->_S_copy(__r + __pos + __len2, _M_data() + __pos + __len1, __how_much);
    _M_dispose();
    _M_data(__r);
    _M_capacity(__new_capacity);
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  void basic_string<_CharT, _Traits, _Alloc>::_M_erase(size_type __pos, size_type __n)
  {
    const size_type __how_much = length() - __pos - __n;
    if (__how_much && __n)
      this->_S_move(_M_data() + __pos, _M_data() + __pos + __n, __how_much);
    _M_set_length(length() - __n);
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  void basic_string<_CharT, _Traits, _Alloc>::resize(size_type __n, _CharT __c)
  {
    const size_type __size = this->size();
    if (__size < __n)
      this->append(__n - __size, __c);
    else if (__n < __size)
      this->_M_set_length(__n);
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  basic_string<_CharT, _Traits, _Alloc>& basic_string<_CharT, _Traits, _Alloc>::_M_append(const _CharT* __s,
                                                                                          size_type __n)
  {
    const size_type __len = __n + this->size();
    if (__len <= this->capacity())
    {
      if (__n)
        this->_S_copy(this->_M_data() + this->size(), __s, __n);
    }
    else
      this->_M_mutate(this->size(), size_type(0), __s, __n);
    this->_M_set_length(__len);
    return *this;
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  template <typename _InputIterator>
  basic_string<_CharT, _Traits, _Alloc>& basic_string<_CharT, _Traits, _Alloc>::_M_replace_dispatch(
      const_iterator __i1, const_iterator __i2, _InputIterator __k1, _InputIterator __k2, std::__false_type)
  {
    const basic_string __s(__k1, __k2);
    const size_type __n1 = __i2 - __i1;
    return _M_replace(__i1 - begin(), __n1, __s._M_data(), __s.size());
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  basic_string<_CharT, _Traits, _Alloc>& basic_string<_CharT, _Traits, _Alloc>::_M_replace_aux(
      size_type __pos1, size_type __n1, size_type __n2, _CharT __c)
  {
    _M_check_length(__n1, __n2, "basic_string::_M_replace_aux");
    const size_type __old_size = this->size();
    const size_type __new_size = __old_size + __n2 - __n1;
    if (__new_size <= this->capacity())
    {
      pointer __p = this->_M_data() + __pos1;
      const size_type __how_much = __old_size - __pos1 - __n1;
      if (__how_much && __n1 != __n2)
        this->_S_move(__p + __n2, __p + __n1, __how_much);
    }
    else
      this->_M_mutate(__pos1, __n1, 0, __n2);
    if (__n2)
      this->_S_assign(this->_M_data() + __pos1, __n2, __c);
    this->_M_set_length(__new_size);
    return *this;
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  basic_string<_CharT, _Traits, _Alloc>& basic_string<_CharT, _Traits, _Alloc>::_M_replace(
      size_type __pos, size_type __len1, const _CharT* __s, const size_type __len2)
  {
    _M_check_length(__len1, __len2, "basic_string::_M_replace");
    const size_type __old_size = this->size();
    const size_type __new_size = __old_size + __len2 - __len1;
    if (__new_size <= this->capacity())
    {
      pointer __p = this->_M_data() + __pos;
      const size_type __how_much = __old_size - __pos - __len1;
      if (_M_disjunct(__s))
      {
        if (__how_much && __len1 != __len2)
          this->_S_move(__p + __len2, __p + __len1, __how_much);
        if (__len2)
          this->_S_copy(__p, __s, __len2);
      }
      else
      {
        if (__len2 && __len2 <= __len1)
          this->_S_move(__p, __s, __len2);
        if (__how_much && __len1 != __len2)
          this->_S_move(__p + __len2, __p + __len1, __how_much);
        if (__len2 > __len1)
        {
          if (__s + __len2 <= __p + __len1)
            this->_S_move(__p, __s, __len2);
          else if (__s >= __p + __len1)
            this->_S_copy(__p, __s + __len2 - __len1, __len2);
          else
          {
            const size_type __nleft = (__p + __len1) - __s;
            this->_S_move(__p, __s, __nleft);
            this->_S_copy(__p + __nleft, __p + __len2, __len2 - __nleft);
          }
        }
      }
    }
    else
      this->_M_mutate(__pos, __len1, __s, __len2);
    this->_M_set_length(__new_size);
    return *this;
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  typename basic_string<_CharT, _Traits, _Alloc>::size_type basic_string<_CharT, _Traits, _Alloc>::copy(
      _CharT * __s, size_type __n, size_type __pos) const
  {
    _M_check(__pos, "basic_string::copy");
    __n = _M_limit(__pos, __n);
    ;
    if (__n)
      _S_copy(__s, _M_data() + __pos, __n);
    return __n;
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  basic_string<_CharT, _Traits, _Alloc> operator+(const _CharT* __lhs,
                                                  const basic_string<_CharT, _Traits, _Alloc>& __rhs)
  {
    ;
    typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
    typedef typename __string_type::size_type __size_type;
    const __size_type __len = _Traits::length(__lhs);
    __string_type __str;
    __str.reserve(__len + __rhs.size());
    __str.append(__lhs, __len);
    __str.append(__rhs);
    return __str;
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  basic_string<_CharT, _Traits, _Alloc> operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
  {
    typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
    typedef typename __string_type::size_type __size_type;
    __string_type __str;
    const __size_type __len = __rhs.size();
    __str.reserve(__len + 1);
    __str.append(__size_type(1), __lhs);
    __str.append(__rhs);
    return __str;
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  typename basic_string<_CharT, _Traits, _Alloc>::size_type basic_string<_CharT, _Traits, _Alloc>::find(
      const _CharT* __s, size_type __pos, size_type __n) const noexcept
  {
    ;
    const size_type __size = this->size();
    if (__n == 0)
      return __pos <= __size ? __pos : npos;
    if (__pos >= __size)
      return npos;
    const _CharT __elem0 = __s[0];
    const _CharT* const __data = data();
    const _CharT* __first = __data + __pos;
    const _CharT* const __last = __data + __size;
    size_type __len = __size - __pos;
    while (__len >= __n)
    {
      __first = traits_type::find(__first, __len - __n + 1, __elem0);
      if (!__first)
        return npos;
      if (traits_type::compare(__first, __s, __n) == 0)
        return __first - __data;
      __len = __last - ++__first;
    }
    return npos;
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  typename basic_string<_CharT, _Traits, _Alloc>::size_type basic_string<_CharT, _Traits, _Alloc>::find(
      _CharT __c, size_type __pos) const noexcept
  {
    size_type __ret = npos;
    const size_type __size = this->size();
    if (__pos < __size)
    {
      const _CharT* __data = _M_data();
      const size_type __n = __size - __pos;
      const _CharT* __p = traits_type::find(__data + __pos, __n, __c);
      if (__p)
        __ret = __p - __data;
    }
    return __ret;
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  typename basic_string<_CharT, _Traits, _Alloc>::size_type basic_string<_CharT, _Traits, _Alloc>::rfind(
      const _CharT* __s, size_type __pos, size_type __n) const noexcept
  {
    ;
    const size_type __size = this->size();
    if (__n <= __size)
    {
      __pos = std::min(size_type(__size - __n), __pos);
      const _CharT* __data = _M_data();
      do
      {
        if (traits_type::compare(__data + __pos, __s, __n) == 0)
          return __pos;
      } while (__pos-- > 0);
    }
    return npos;
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  typename basic_string<_CharT, _Traits, _Alloc>::size_type basic_string<_CharT, _Traits, _Alloc>::rfind(
      _CharT __c, size_type __pos) const noexcept
  {
    size_type __size = this->size();
    if (__size)
    {
      if (--__size > __pos)
        __size = __pos;
      for (++__size; __size-- > 0;)
        if (traits_type::eq(_M_data()[__size], __c))
          return __size;
    }
    return npos;
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  typename basic_string<_CharT, _Traits, _Alloc>::size_type basic_string<_CharT, _Traits, _Alloc>::find_first_of(
      const _CharT* __s, size_type __pos, size_type __n) const noexcept
  {
    ;
    for (; __n && __pos < this->size(); ++__pos)
    {
      const _CharT* __p = traits_type::find(__s, __n, _M_data()[__pos]);
      if (__p)
        return __pos;
    }
    return npos;
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  typename basic_string<_CharT, _Traits, _Alloc>::size_type basic_string<_CharT, _Traits, _Alloc>::find_last_of(
      const _CharT* __s, size_type __pos, size_type __n) const noexcept
  {
    ;
    size_type __size = this->size();
    if (__size && __n)
    {
      if (--__size > __pos)
        __size = __pos;
      do
      {
        if (traits_type::find(__s, __n, _M_data()[__size]))
          return __size;
      } while (__size-- != 0);
    }
    return npos;
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  typename basic_string<_CharT, _Traits, _Alloc>::size_type basic_string<_CharT, _Traits, _Alloc>::find_first_not_of(
      const _CharT* __s, size_type __pos, size_type __n) const noexcept
  {
    ;
    for (; __pos < this->size(); ++__pos)
      if (!traits_type::find(__s, __n, _M_data()[__pos]))
        return __pos;
    return npos;
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  typename basic_string<_CharT, _Traits, _Alloc>::size_type basic_string<_CharT, _Traits, _Alloc>::find_first_not_of(
      _CharT __c, size_type __pos) const noexcept
  {
    for (; __pos < this->size(); ++__pos)
      if (!traits_type::eq(_M_data()[__pos], __c))
        return __pos;
    return npos;
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  typename basic_string<_CharT, _Traits, _Alloc>::size_type basic_string<_CharT, _Traits, _Alloc>::find_last_not_of(
      const _CharT* __s, size_type __pos, size_type __n) const noexcept
  {
    ;
    size_type __size = this->size();
    if (__size)
    {
      if (--__size > __pos)
        __size = __pos;
      do
      {
        if (!traits_type::find(__s, __n, _M_data()[__size]))
          return __size;
      } while (__size--);
    }
    return npos;
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  typename basic_string<_CharT, _Traits, _Alloc>::size_type basic_string<_CharT, _Traits, _Alloc>::find_last_not_of(
      _CharT __c, size_type __pos) const noexcept
  {
    size_type __size = this->size();
    if (__size)
    {
      if (--__size > __pos)
        __size = __pos;
      do
      {
        if (!traits_type::eq(_M_data()[__size], __c))
          return __size;
      } while (__size--);
    }
    return npos;
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  int basic_string<_CharT, _Traits, _Alloc>::compare(size_type __pos, size_type __n, const basic_string& __str) const
  {
    _M_check(__pos, "basic_string::compare");
    __n = _M_limit(__pos, __n);
    const size_type __osize = __str.size();
    const size_type __len = std::min(__n, __osize);
    int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len);
    if (!__r)
      __r = _S_compare(__n, __osize);
    return __r;
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  int basic_string<_CharT, _Traits, _Alloc>::compare(
      size_type __pos1, size_type __n1, const basic_string& __str, size_type __pos2, size_type __n2) const
  {
    _M_check(__pos1, "basic_string::compare");
    __str._M_check(__pos2, "basic_string::compare");
    __n1 = _M_limit(__pos1, __n1);
    __n2 = __str._M_limit(__pos2, __n2);
    const size_type __len = std::min(__n1, __n2);
    int __r = traits_type::compare(_M_data() + __pos1, __str.data() + __pos2, __len);
    if (!__r)
      __r = _S_compare(__n1, __n2);
    return __r;
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  int basic_string<_CharT, _Traits, _Alloc>::compare(const _CharT* __s) const noexcept
  {
    ;
    const size_type __size = this->size();
    const size_type __osize = traits_type::length(__s);
    const size_type __len = std::min(__size, __osize);
    int __r = traits_type::compare(_M_data(), __s, __len);
    if (!__r)
      __r = _S_compare(__size, __osize);
    return __r;
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  int basic_string<_CharT, _Traits, _Alloc>::compare(size_type __pos, size_type __n1, const _CharT* __s) const
  {
    ;
    _M_check(__pos, "basic_string::compare");
    __n1 = _M_limit(__pos, __n1);
    const size_type __osize = traits_type::length(__s);
    const size_type __len = std::min(__n1, __osize);
    int __r = traits_type::compare(_M_data() + __pos, __s, __len);
    if (!__r)
      __r = _S_compare(__n1, __osize);
    return __r;
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  int basic_string<_CharT, _Traits, _Alloc>::compare(size_type __pos, size_type __n1, const _CharT* __s, size_type __n2)
      const
  {
    ;
    _M_check(__pos, "basic_string::compare");
    __n1 = _M_limit(__pos, __n1);
    const size_type __len = std::min(__n1, __n2);
    int __r = traits_type::compare(_M_data() + __pos, __s, __len);
    if (!__r)
      __r = _S_compare(__n1, __n2);
    return __r;
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  basic_istream<_CharT, _Traits>& operator>>(basic_istream<_CharT, _Traits>& __in,
                                             basic_string<_CharT, _Traits, _Alloc>& __str)
  {
    typedef basic_istream<_CharT, _Traits> __istream_type;
    typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
    typedef typename __istream_type::ios_base __ios_base;
    typedef typename __istream_type::int_type __int_type;
    typedef typename __string_type::size_type __size_type;
    typedef ctype<_CharT> __ctype_type;
    typedef typename __ctype_type::ctype_base __ctype_base;
    __size_type __extracted = 0;
    typename __ios_base::iostate __err = __ios_base::goodbit;
    typename __istream_type::sentry __cerb(__in, false);
    if (__cerb)
    {
      try
      {
        __str.erase();
        _CharT __buf[128];
        __size_type __len = 0;
        const streamsize __w = __in.width();
        const __size_type __n = __w > 0 ? static_cast<__size_type>(__w) : __str.max_size();
        const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
        const __int_type __eof = _Traits::eof();
        __int_type __c = __in.rdbuf()->sgetc();
        while (__extracted < __n && !_Traits::eq_int_type(__c, __eof) &&
               !__ct.is(__ctype_base::space, _Traits::to_char_type(__c)))
        {
          if (__len == sizeof(__buf) / sizeof(_CharT))
          {
            __str.append(__buf, sizeof(__buf) / sizeof(_CharT));
            __len = 0;
          }
          __buf[__len++] = _Traits::to_char_type(__c);
          ++__extracted;
          __c = __in.rdbuf()->snextc();
        }
        __str.append(__buf, __len);
        if (_Traits::eq_int_type(__c, __eof))
          __err |= __ios_base::eofbit;
        __in.width(0);
      }
      catch (__cxxabiv1::__forced_unwind&)
      {
        __in._M_setstate(__ios_base::badbit);
        throw;
      }
      catch (...)
      {
        __in._M_setstate(__ios_base::badbit);
      }
    }
    if (!__extracted)
      __err |= __ios_base::failbit;
    if (__err)
      __in.setstate(__err);
    return __in;
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  basic_istream<_CharT, _Traits>& getline(
      basic_istream<_CharT, _Traits> & __in, basic_string<_CharT, _Traits, _Alloc> & __str, _CharT __delim)
  {
    typedef basic_istream<_CharT, _Traits> __istream_type;
    typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
    typedef typename __istream_type::ios_base __ios_base;
    typedef typename __istream_type::int_type __int_type;
    typedef typename __string_type::size_type __size_type;
    __size_type __extracted = 0;
    const __size_type __n = __str.max_size();
    typename __ios_base::iostate __err = __ios_base::goodbit;
    typename __istream_type::sentry __cerb(__in, true);
    if (__cerb)
    {
      try
      {
        __str.erase();
        const __int_type __idelim = _Traits::to_int_type(__delim);
        const __int_type __eof = _Traits::eof();
        __int_type __c = __in.rdbuf()->sgetc();
        while (__extracted < __n && !_Traits::eq_int_type(__c, __eof) && !_Traits::eq_int_type(__c, __idelim))
        {
          __str += _Traits::to_char_type(__c);
          ++__extracted;
          __c = __in.rdbuf()->snextc();
        }
        if (_Traits::eq_int_type(__c, __eof))
          __err |= __ios_base::eofbit;
        else if (_Traits::eq_int_type(__c, __idelim))
        {
          ++__extracted;
          __in.rdbuf()->sbumpc();
        }
        else
          __err |= __ios_base::failbit;
      }
      catch (__cxxabiv1::__forced_unwind&)
      {
        __in._M_setstate(__ios_base::badbit);
        throw;
      }
      catch (...)
      {
        __in._M_setstate(__ios_base::badbit);
      }
    }
    if (!__extracted)
      __err |= __ios_base::failbit;
    if (__err)
      __in.setstate(__err);
    return __in;
  }
  extern template class basic_string<char>;
  extern template basic_istream<char>& operator>>(basic_istream<char>&, string&);
  extern template basic_ostream<char>& operator<<(basic_ostream<char>&, const string&);
  extern template basic_istream<char>& getline(basic_istream<char>&, string&, char);
  extern template basic_istream<char>& getline(basic_istream<char>&, string&);
  extern template class basic_string<wchar_t>;
  extern template basic_istream<wchar_t>& operator>>(basic_istream<wchar_t>&, wstring&);
  extern template basic_ostream<wchar_t>& operator<<(basic_ostream<wchar_t>&, const wstring&);
  extern template basic_istream<wchar_t>& getline(basic_istream<wchar_t>&, wstring&, wchar_t);
  extern template basic_istream<wchar_t>& getline(basic_istream<wchar_t>&, wstring&);
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  namespace pmr
  {
  template <typename _Tp>
  class polymorphic_allocator;
  template <typename _CharT, typename _Traits = char_traits<_CharT>>
  using basic_string = std::basic_string<_CharT, _Traits, polymorphic_allocator<_CharT>>;
  using string = basic_string<char>;
  using u16string = basic_string<char16_t>;
  using u32string = basic_string<char32_t>;
  using wstring = basic_string<wchar_t>;
  }  // namespace pmr
  template <typename _Str>
  struct __hash_string_base : public __hash_base<size_t, _Str>
  {
    size_t operator()(const _Str& __s) const noexcept
    {
      return hash<basic_string_view<typename _Str::value_type>>{}(__s);
    }
  };
  template <>
  struct hash<pmr::string> : public __hash_string_base<pmr::string>
  {
  };
  template <>
  struct hash<pmr::u16string> : public __hash_string_base<pmr::u16string>
  {
  };
  template <>
  struct hash<pmr::u32string> : public __hash_string_base<pmr::u32string>
  {
  };
  template <>
  struct hash<pmr::wstring> : public __hash_string_base<pmr::wstring>
  {
  };
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  struct __cow_string
  {
    union
    {
      const char* _M_p;
      char _M_bytes[sizeof(const char*)];
    };
    __cow_string();
    __cow_string(const std::string&);
    __cow_string(const char*, size_t);
    __cow_string(const __cow_string&) noexcept;
    __cow_string& operator=(const __cow_string&) noexcept;
    ~__cow_string();
    __cow_string(__cow_string&&) noexcept;
    __cow_string& operator=(__cow_string&&) noexcept;
  };
  typedef basic_string<char> __sso_string;
  class logic_error : public exception
  {
    __cow_string _M_msg;

  public:
    explicit logic_error(const string& __arg);
    explicit logic_error(const char*);
    logic_error(logic_error&&) noexcept;
    logic_error& operator=(logic_error&&) noexcept;
    logic_error(const logic_error&) noexcept;
    logic_error& operator=(const logic_error&) noexcept;
    virtual ~logic_error() noexcept;
    virtual const char* what() const noexcept;
  };
  class domain_error : public logic_error
  {
  public:
    explicit domain_error(const string& __arg);
    explicit domain_error(const char*);
    domain_error(const domain_error&) = default;
    domain_error& operator=(const domain_error&) = default;
    domain_error(domain_error&&) = default;
    domain_error& operator=(domain_error&&) = default;
    virtual ~domain_error() noexcept;
  };
  class invalid_argument : public logic_error
  {
  public:
    explicit invalid_argument(const string& __arg);
    explicit invalid_argument(const char*);
    invalid_argument(const invalid_argument&) = default;
    invalid_argument& operator=(const invalid_argument&) = default;
    invalid_argument(invalid_argument&&) = default;
    invalid_argument& operator=(invalid_argument&&) = default;
    virtual ~invalid_argument() noexcept;
  };
  class length_error : public logic_error
  {
  public:
    explicit length_error(const string& __arg);
    explicit length_error(const char*);
    length_error(const length_error&) = default;
    length_error& operator=(const length_error&) = default;
    length_error(length_error&&) = default;
    length_error& operator=(length_error&&) = default;
    virtual ~length_error() noexcept;
  };
  class out_of_range : public logic_error
  {
  public:
    explicit out_of_range(const string& __arg);
    explicit out_of_range(const char*);
    out_of_range(const out_of_range&) = default;
    out_of_range& operator=(const out_of_range&) = default;
    out_of_range(out_of_range&&) = default;
    out_of_range& operator=(out_of_range&&) = default;
    virtual ~out_of_range() noexcept;
  };
  class runtime_error : public exception
  {
    __cow_string _M_msg;

  public:
    explicit runtime_error(const string& __arg);
    explicit runtime_error(const char*);
    runtime_error(runtime_error&&) noexcept;
    runtime_error& operator=(runtime_error&&) noexcept;
    runtime_error(const runtime_error&) noexcept;
    runtime_error& operator=(const runtime_error&) noexcept;
    virtual ~runtime_error() noexcept;
    virtual const char* what() const noexcept;
  };
  class range_error : public runtime_error
  {
  public:
    explicit range_error(const string& __arg);
    explicit range_error(const char*);
    range_error(const range_error&) = default;
    range_error& operator=(const range_error&) = default;
    range_error(range_error&&) = default;
    range_error& operator=(range_error&&) = default;
    virtual ~range_error() noexcept;
  };
  class overflow_error : public runtime_error
  {
  public:
    explicit overflow_error(const string& __arg);
    explicit overflow_error(const char*);
    overflow_error(const overflow_error&) = default;
    overflow_error& operator=(const overflow_error&) = default;
    overflow_error(overflow_error&&) = default;
    overflow_error& operator=(overflow_error&&) = default;
    virtual ~overflow_error() noexcept;
  };
  class underflow_error : public runtime_error
  {
  public:
    explicit underflow_error(const string& __arg);
    explicit underflow_error(const char*);
    underflow_error(const underflow_error&) = default;
    underflow_error& operator=(const underflow_error&) = default;
    underflow_error(underflow_error&&) = default;
    underflow_error& operator=(underflow_error&&) = default;
    virtual ~underflow_error() noexcept;
  };
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _Tp, std::size_t _Nm>
  struct __array_traits
  {
    typedef _Tp _Type[_Nm];
    typedef __is_swappable<_Tp> _Is_swappable;
    typedef __is_nothrow_swappable<_Tp> _Is_nothrow_swappable;
    static constexpr _Tp& _S_ref(const _Type& __t, std::size_t __n) noexcept { return const_cast<_Tp&>(__t[__n]); }
    static constexpr _Tp* _S_ptr(const _Type& __t) noexcept { return const_cast<_Tp*>(__t); }
  };
  template <typename _Tp>
  struct __array_traits<_Tp, 0>
  {
    struct _Type
    {
    };
    typedef true_type _Is_swappable;
    typedef true_type _Is_nothrow_swappable;
    static constexpr _Tp& _S_ref(const _Type&, std::size_t) noexcept { return *static_cast<_Tp*>(nullptr); }
    static constexpr _Tp* _S_ptr(const _Type&) noexcept { return nullptr; }
  };
  template <typename _Tp, std::size_t _Nm>
  struct array
  {
    typedef _Tp value_type;
    typedef value_type* pointer;
    typedef const value_type* const_pointer;
    typedef value_type& reference;
    typedef const value_type& const_reference;
    typedef value_type* iterator;
    typedef const value_type* const_iterator;
    typedef std::size_t size_type;
    typedef std::ptrdiff_t difference_type;
    typedef std::reverse_iterator<iterator> reverse_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
    typedef std::__array_traits<_Tp, _Nm> _AT_Type;
    typename _AT_Type::_Type _M_elems;
    void fill(const value_type& __u) { std::fill_n(begin(), size(), __u); }
    void swap(array& __other) noexcept(_AT_Type::_Is_nothrow_swappable::value)
    {
      std::swap_ranges(begin(), end(), __other.begin());
    }
    constexpr iterator begin() noexcept { return iterator(data()); }
    constexpr const_iterator begin() const noexcept { return const_iterator(data()); }
    constexpr iterator end() noexcept { return iterator(data() + _Nm); }
    constexpr const_iterator end() const noexcept { return const_iterator(data() + _Nm); }
    constexpr reverse_iterator rbegin() noexcept { return reverse_iterator(end()); }
    constexpr const_reverse_iterator rbegin() const noexcept { return const_reverse_iterator(end()); }
    constexpr reverse_iterator rend() noexcept { return reverse_iterator(begin()); }
    constexpr const_reverse_iterator rend() const noexcept { return const_reverse_iterator(begin()); }
    constexpr const_iterator cbegin() const noexcept { return const_iterator(data()); }
    constexpr const_iterator cend() const noexcept { return const_iterator(data() + _Nm); }
    constexpr const_reverse_iterator crbegin() const noexcept { return const_reverse_iterator(end()); }
    constexpr const_reverse_iterator crend() const noexcept { return const_reverse_iterator(begin()); }
    constexpr size_type size() const noexcept { return _Nm; }
    constexpr size_type max_size() const noexcept { return _Nm; }
    [[__nodiscard__]] constexpr bool empty() const noexcept { return size() == 0; }
    constexpr reference operator[](size_type __n) noexcept { return _AT_Type::_S_ref(_M_elems, __n); }
    constexpr const_reference operator[](size_type __n) const noexcept { return _AT_Type::_S_ref(_M_elems, __n); }
    constexpr reference at(size_type __n)
    {
      if (__n >= _Nm)
        std::__throw_out_of_range_fmt(("array::at: __n (which is %zu) "
                                       ">= _Nm (which is %zu)"),
                                      __n,
                                      _Nm);
      return _AT_Type::_S_ref(_M_elems, __n);
    }
    constexpr const_reference at(size_type __n) const
    {
      return __n < _Nm ? _AT_Type::_S_ref(_M_elems, __n)
                       : (std::__throw_out_of_range_fmt(("array::at: __n (which is %zu) "
                                                         ">= _Nm (which is %zu)"),
                                                        __n,
                                                        _Nm),
                          _AT_Type::_S_ref(_M_elems, 0));
    }
    constexpr reference front() noexcept { return *begin(); }
    constexpr const_reference front() const noexcept { return _AT_Type::_S_ref(_M_elems, 0); }
    constexpr reference back() noexcept { return _Nm ? *(end() - 1) : *end(); }
    constexpr const_reference back() const noexcept
    {
      return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1) : _AT_Type::_S_ref(_M_elems, 0);
    }
    constexpr pointer data() noexcept { return _AT_Type::_S_ptr(_M_elems); }
    constexpr const_pointer data() const noexcept { return _AT_Type::_S_ptr(_M_elems); }
  };
  template <typename _Tp, typename... _Up>
  array(_Tp, _Up...) -> array<enable_if_t<(is_same_v<_Tp, _Up> && ...), _Tp>, 1 + sizeof...(_Up)>;
  template <typename _Tp, std::size_t _Nm>
  inline bool operator==(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
  {
    return std::equal(__one.begin(), __one.end(), __two.begin());
  }
  template <typename _Tp, std::size_t _Nm>
  inline bool operator!=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
  {
    return !(__one == __two);
  }
  template <typename _Tp, std::size_t _Nm>
  inline bool operator<(const array<_Tp, _Nm>& __a, const array<_Tp, _Nm>& __b)
  {
    return std::lexicographical_compare(__a.begin(), __a.end(), __b.begin(), __b.end());
  }
  template <typename _Tp, std::size_t _Nm>
  inline bool operator>(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
  {
    return __two < __one;
  }
  template <typename _Tp, std::size_t _Nm>
  inline bool operator<=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
  {
    return !(__one > __two);
  }
  template <typename _Tp, std::size_t _Nm>
  inline bool operator>=(const array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)
  {
    return !(__one < __two);
  }
  template <typename _Tp, std::size_t _Nm>
  inline typename enable_if<std::__array_traits<_Tp, _Nm>::_Is_swappable::value>::type swap(
      array<_Tp, _Nm> & __one, array<_Tp, _Nm> & __two) noexcept(noexcept(__one.swap(__two)))
  {
    __one.swap(__two);
  }
  template <typename _Tp, std::size_t _Nm>
  typename enable_if<!std::__array_traits<_Tp, _Nm>::_Is_swappable::value>::type swap(array<_Tp, _Nm>&,
                                                                                      array<_Tp, _Nm>&) = delete;
  template <std::size_t _Int, typename _Tp, std::size_t _Nm>
  constexpr _Tp& get(array<_Tp, _Nm> & __arr) noexcept
  {
    static_assert(_Int < _Nm, "array index is within bounds");
    return std::__array_traits<_Tp, _Nm>::_S_ref(__arr._M_elems, _Int);
  }
  template <std::size_t _Int, typename _Tp, std::size_t _Nm>
  constexpr _Tp&& get(array<_Tp, _Nm> && __arr) noexcept
  {
    static_assert(_Int < _Nm, "array index is within bounds");
    return std::move(std::get<_Int>(__arr));
  }
  template <std::size_t _Int, typename _Tp, std::size_t _Nm>
  constexpr const _Tp& get(const array<_Tp, _Nm>& __arr) noexcept
  {
    static_assert(_Int < _Nm, "array index is within bounds");
    return std::__array_traits<_Tp, _Nm>::_S_ref(__arr._M_elems, _Int);
  }
  template <std::size_t _Int, typename _Tp, std::size_t _Nm>
  constexpr const _Tp&& get(const array<_Tp, _Nm>&& __arr) noexcept
  {
    static_assert(_Int < _Nm, "array index is within bounds");
    return std::move(std::get<_Int>(__arr));
  }
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _Tp>
  struct tuple_size;
  template <typename _Tp, std::size_t _Nm>
  struct tuple_size<std::array<_Tp, _Nm>> : public integral_constant<std::size_t, _Nm>
  {
  };
  template <std::size_t _Int, typename _Tp>
  struct tuple_element;
  template <std::size_t _Int, typename _Tp, std::size_t _Nm>
  struct tuple_element<_Int, std::array<_Tp, _Nm>>
  {
    static_assert(_Int < _Nm, "index is out of bounds");
    typedef _Tp type;
  };
  template <typename _Tp, std::size_t _Nm>
  struct __is_tuple_like_impl<std::array<_Tp, _Nm>> : true_type
  {
  };
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  struct __erased_type
  {
  };
  template <typename _Alloc, typename _Tp>
  using __is_erased_or_convertible = __or_<is_convertible<_Alloc, _Tp>, is_same<_Tp, __erased_type>>;
  struct allocator_arg_t
  {
    explicit allocator_arg_t() = default;
  };
  inline constexpr allocator_arg_t allocator_arg = allocator_arg_t();
  template <typename _Tp, typename _Alloc, typename = __void_t<>>
  struct __uses_allocator_helper : false_type
  {
  };
  template <typename _Tp, typename _Alloc>
  struct __uses_allocator_helper<_Tp, _Alloc, __void_t<typename _Tp::allocator_type>>
      : __is_erased_or_convertible<_Alloc, typename _Tp::allocator_type>::type
  {
  };
  template <typename _Tp, typename _Alloc>
  struct uses_allocator : __uses_allocator_helper<_Tp, _Alloc>::type
  {
  };
  struct __uses_alloc_base
  {
  };
  struct __uses_alloc0 : __uses_alloc_base
  {
    struct _Sink
    {
      void operator=(const void*) {}
    } _M_a;
  };
  template <typename _Alloc>
  struct __uses_alloc1 : __uses_alloc_base
  {
    const _Alloc* _M_a;
  };
  template <typename _Alloc>
  struct __uses_alloc2 : __uses_alloc_base
  {
    const _Alloc* _M_a;
  };
  template <bool, typename _Tp, typename _Alloc, typename... _Args>
  struct __uses_alloc;
  template <typename _Tp, typename _Alloc, typename... _Args>
  struct __uses_alloc<true, _Tp, _Alloc, _Args...>
      : conditional<is_constructible<_Tp, allocator_arg_t, const _Alloc&, _Args...>::value,
                    __uses_alloc1<_Alloc>,
                    __uses_alloc2<_Alloc>>::type
  {
    static_assert(__or_<is_constructible<_Tp, allocator_arg_t, const _Alloc&, _Args...>,
                        is_constructible<_Tp, _Args..., const _Alloc&>>::value,
                  "construction with an allocator must be possible"
                  " if uses_allocator is true");
  };
  template <typename _Tp, typename _Alloc, typename... _Args>
  struct __uses_alloc<false, _Tp, _Alloc, _Args...> : __uses_alloc0
  {
  };
  template <typename _Tp, typename _Alloc, typename... _Args>
  using __uses_alloc_t = __uses_alloc<uses_allocator<_Tp, _Alloc>::value, _Tp, _Alloc, _Args...>;
  template <typename _Tp, typename _Alloc, typename... _Args>
  inline __uses_alloc_t<_Tp, _Alloc, _Args...> __use_alloc(const _Alloc& __a)
  {
    __uses_alloc_t<_Tp, _Alloc, _Args...> __ret;
    __ret._M_a = std::__addressof(__a);
    return __ret;
  }
  template <typename _Tp, typename _Alloc, typename... _Args>
  void __use_alloc(const _Alloc&&) = delete;
  template <typename _Tp, typename _Alloc>
  inline constexpr bool uses_allocator_v = uses_allocator<_Tp, _Alloc>::value;
  template <template <typename...> class _Predicate, typename _Tp, typename _Alloc, typename... _Args>
  struct __is_uses_allocator_predicate
      : conditional<uses_allocator<_Tp, _Alloc>::value,
                    __or_<_Predicate<_Tp, allocator_arg_t, _Alloc, _Args...>, _Predicate<_Tp, _Args..., _Alloc>>,
                    _Predicate<_Tp, _Args...>>::type
  {
  };
  template <typename _Tp, typename _Alloc, typename... _Args>
  struct __is_uses_allocator_constructible : __is_uses_allocator_predicate<is_constructible, _Tp, _Alloc, _Args...>
  {
  };
  template <typename _Tp, typename _Alloc, typename... _Args>
  inline constexpr bool __is_uses_allocator_constructible_v =
      __is_uses_allocator_constructible<_Tp, _Alloc, _Args...>::value;
  template <typename _Tp, typename _Alloc, typename... _Args>
  struct __is_nothrow_uses_allocator_constructible
      : __is_uses_allocator_predicate<is_nothrow_constructible, _Tp, _Alloc, _Args...>
  {
  };
  template <typename _Tp, typename _Alloc, typename... _Args>
  inline constexpr bool __is_nothrow_uses_allocator_constructible_v =
      __is_nothrow_uses_allocator_constructible<_Tp, _Alloc, _Args...>::value;
  template <typename _Tp, typename... _Args>
  void __uses_allocator_construct_impl(__uses_alloc0 __a, _Tp * __ptr, _Args && ... __args)
  {
    ::new ((void*)__ptr) _Tp(std::forward<_Args>(__args)...);
  }
  template <typename _Tp, typename _Alloc, typename... _Args>
  void __uses_allocator_construct_impl(__uses_alloc1<_Alloc> __a, _Tp * __ptr, _Args && ... __args)
  {
    ::new ((void*)__ptr) _Tp(allocator_arg, *__a._M_a, std::forward<_Args>(__args)...);
  }
  template <typename _Tp, typename _Alloc, typename... _Args>
  void __uses_allocator_construct_impl(__uses_alloc2<_Alloc> __a, _Tp * __ptr, _Args && ... __args)
  {
    ::new ((void*)__ptr) _Tp(std::forward<_Args>(__args)..., *__a._M_a);
  }
  template <typename _Tp, typename _Alloc, typename... _Args>
  void __uses_allocator_construct(const _Alloc& __a, _Tp* __ptr, _Args&&... __args)
  {
    std::__uses_allocator_construct_impl(
        std::__use_alloc<_Tp, _Alloc, _Args...>(__a), __ptr, std::forward<_Args>(__args)...);
  }
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _Tp, typename _Up = typename __inv_unwrap<_Tp>::type>
  constexpr _Up&& __invfwd(typename remove_reference<_Tp>::type & __t) noexcept
  {
    return static_cast<_Up&&>(__t);
  }
  template <typename _Res, typename _Fn, typename... _Args>
  constexpr _Res __invoke_impl(__invoke_other, _Fn && __f, _Args && ... __args)
  {
    return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...);
  }
  template <typename _Res, typename _MemFun, typename _Tp, typename... _Args>
  constexpr _Res __invoke_impl(__invoke_memfun_ref, _MemFun && __f, _Tp && __t, _Args && ... __args)
  {
    return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...);
  }
  template <typename _Res, typename _MemFun, typename _Tp, typename... _Args>
  constexpr _Res __invoke_impl(__invoke_memfun_deref, _MemFun && __f, _Tp && __t, _Args && ... __args)
  {
    return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
  }
  template <typename _Res, typename _MemPtr, typename _Tp>
  constexpr _Res __invoke_impl(__invoke_memobj_ref, _MemPtr && __f, _Tp && __t)
  {
    return __invfwd<_Tp>(__t).*__f;
  }
  template <typename _Res, typename _MemPtr, typename _Tp>
  constexpr _Res __invoke_impl(__invoke_memobj_deref, _MemPtr && __f, _Tp && __t)
  {
    return (*std::forward<_Tp>(__t)).*__f;
  }
  template <typename _Callable, typename... _Args>
  constexpr typename __invoke_result<_Callable, _Args...>::type __invoke(
      _Callable && __fn, _Args && ... __args) noexcept(__is_nothrow_invocable<_Callable, _Args...>::value)
  {
    using __result = __invoke_result<_Callable, _Args...>;
    using __type = typename __result::type;
    using __tag = typename __result::__invoke_type;
    return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn), std::forward<_Args>(__args)...);
  }
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename... _Elements>
  class tuple;
  template <typename _Tp>
  struct __is_empty_non_tuple : is_empty<_Tp>
  {
  };
  template <typename _El0, typename... _El>
  struct __is_empty_non_tuple<tuple<_El0, _El...>> : false_type
  {
  };
  template <typename _Tp>
  using __empty_not_final = typename conditional<__is_final(_Tp), false_type, __is_empty_non_tuple<_Tp>>::type;
  template <std::size_t _Idx, typename _Head, bool = __empty_not_final<_Head>::value>
  struct _Head_base;
  template <std::size_t _Idx, typename _Head>
  struct _Head_base<_Idx, _Head, true> : public _Head
  {
    constexpr _Head_base() : _Head() {}
    constexpr _Head_base(const _Head& __h) : _Head(__h) {}
    constexpr _Head_base(const _Head_base&) = default;
    constexpr _Head_base(_Head_base&&) = default;
    template <typename _UHead>
    constexpr _Head_base(_UHead&& __h) : _Head(std::forward<_UHead>(__h))
    {
    }
    _Head_base(allocator_arg_t, __uses_alloc0) : _Head() {}
    template <typename _Alloc>
    _Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a) : _Head(allocator_arg, *__a._M_a)
    {
    }
    template <typename _Alloc>
    _Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a) : _Head(*__a._M_a)
    {
    }
    template <typename _UHead>
    _Head_base(__uses_alloc0, _UHead&& __uhead) : _Head(std::forward<_UHead>(__uhead))
    {
    }
    template <typename _Alloc, typename _UHead>
    _Head_base(__uses_alloc1<_Alloc> __a, _UHead&& __uhead)
        : _Head(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead))
    {
    }
    template <typename _Alloc, typename _UHead>
    _Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead) : _Head(std::forward<_UHead>(__uhead), *__a._M_a)
    {
    }
    static constexpr _Head& _M_head(_Head_base& __b) noexcept { return __b; }
    static constexpr const _Head& _M_head(const _Head_base& __b) noexcept { return __b; }
  };
  template <std::size_t _Idx, typename _Head>
  struct _Head_base<_Idx, _Head, false>
  {
    constexpr _Head_base() : _M_head_impl() {}
    constexpr _Head_base(const _Head& __h) : _M_head_impl(__h) {}
    constexpr _Head_base(const _Head_base&) = default;
    constexpr _Head_base(_Head_base&&) = default;
    template <typename _UHead>
    constexpr _Head_base(_UHead&& __h) : _M_head_impl(std::forward<_UHead>(__h))
    {
    }
    _Head_base(allocator_arg_t, __uses_alloc0) : _M_head_impl() {}
    template <typename _Alloc>
    _Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a) : _M_head_impl(allocator_arg, *__a._M_a)
    {
    }
    template <typename _Alloc>
    _Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a) : _M_head_impl(*__a._M_a)
    {
    }
    template <typename _UHead>
    _Head_base(__uses_alloc0, _UHead&& __uhead) : _M_head_impl(std::forward<_UHead>(__uhead))
    {
    }
    template <typename _Alloc, typename _UHead>
    _Head_base(__uses_alloc1<_Alloc> __a, _UHead&& __uhead)
        : _M_head_impl(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead))
    {
    }
    template <typename _Alloc, typename _UHead>
    _Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead) : _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a)
    {
    }
    static constexpr _Head& _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
    static constexpr const _Head& _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
    _Head _M_head_impl;
  };
  template <std::size_t _Idx, typename... _Elements>
  struct _Tuple_impl;
  template <std::size_t _Idx, typename _Head, typename... _Tail>
  struct _Tuple_impl<_Idx, _Head, _Tail...> : public _Tuple_impl<_Idx + 1, _Tail...>, private _Head_base<_Idx, _Head>
  {
    template <std::size_t, typename...>
    friend class _Tuple_impl;
    typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
    typedef _Head_base<_Idx, _Head> _Base;
    static constexpr _Head& _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
    static constexpr const _Head& _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
    static constexpr _Inherited& _M_tail(_Tuple_impl& __t) noexcept { return __t; }
    static constexpr const _Inherited& _M_tail(const _Tuple_impl& __t) noexcept { return __t; }
    constexpr _Tuple_impl() : _Inherited(), _Base() {}
    explicit constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail) : _Inherited(__tail...), _Base(__head)
    {
    }
    template <typename _UHead,
              typename... _UTail,
              typename = typename enable_if<sizeof...(_Tail) == sizeof...(_UTail)>::type>
    explicit constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
        : _Inherited(std::forward<_UTail>(__tail)...), _Base(std::forward<_UHead>(__head))
    {
    }
    constexpr _Tuple_impl(const _Tuple_impl&) = default;
    _Tuple_impl& operator=(const _Tuple_impl&) = delete;
    constexpr _Tuple_impl(_Tuple_impl&& __in) noexcept(
        __and_<is_nothrow_move_constructible<_Head>, is_nothrow_move_constructible<_Inherited>>::value)
        : _Inherited(std::move(_M_tail(__in))), _Base(std::forward<_Head>(_M_head(__in)))
    {
    }
    template <typename... _UElements>
    constexpr _Tuple_impl(const _Tuple_impl<_Idx, _UElements...>& __in)
        : _Inherited(_Tuple_impl<_Idx, _UElements...>::_M_tail(__in)),
          _Base(_Tuple_impl<_Idx, _UElements...>::_M_head(__in))
    {
    }
    template <typename _UHead, typename... _UTails>
    constexpr _Tuple_impl(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
        : _Inherited(std::move(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),
          _Base(std::forward<_UHead>(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in)))
    {
    }
    template <typename _Alloc>
    _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a)
        : _Inherited(__tag, __a), _Base(__tag, __use_alloc<_Head>(__a))
    {
    }
    template <typename _Alloc>
    _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a, const _Head& __head, const _Tail&... __tail)
        : _Inherited(__tag, __a, __tail...), _Base(__use_alloc<_Head, _Alloc, _Head>(__a), __head)
    {
    }
    template <typename _Alloc,
              typename _UHead,
              typename... _UTail,
              typename = typename enable_if<sizeof...(_Tail) == sizeof...(_UTail)>::type>
    _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a, _UHead&& __head, _UTail&&... __tail)
        : _Inherited(__tag, __a, std::forward<_UTail>(__tail)...),
          _Base(__use_alloc<_Head, _Alloc, _UHead>(__a), std::forward<_UHead>(__head))
    {
    }
    template <typename _Alloc>
    _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a, const _Tuple_impl& __in)
        : _Inherited(__tag, __a, _M_tail(__in)), _Base(__use_alloc<_Head, _Alloc, _Head>(__a), _M_head(__in))
    {
    }
    template <typename _Alloc>
    _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a, _Tuple_impl&& __in)
        : _Inherited(__tag, __a, std::move(_M_tail(__in))),
          _Base(__use_alloc<_Head, _Alloc, _Head>(__a), std::forward<_Head>(_M_head(__in)))
    {
    }
    template <typename _Alloc, typename _UHead, typename... _UTails>
    _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a, const _Tuple_impl<_Idx, _UHead, _UTails...>& __in)
        : _Inherited(__tag, __a, _Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in)),
          _Base(__use_alloc<_Head, _Alloc, const _UHead&>(__a), _Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))
    {
    }
    template <typename _Alloc, typename _UHead, typename... _UTails>
    _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a, _Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
        : _Inherited(__tag, __a, std::move(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),
          _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
                std::forward<_UHead>(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in)))
    {
    }
    template <typename... _UElements>
    void _M_assign(const _Tuple_impl<_Idx, _UElements...>& __in)
    {
      _M_head(*this) = _Tuple_impl<_Idx, _UElements...>::_M_head(__in);
      _M_tail(*this)._M_assign(_Tuple_impl<_Idx, _UElements...>::_M_tail(__in));
    }
    template <typename _UHead, typename... _UTails>
    void _M_assign(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
    {
      _M_head(*this) = std::forward<_UHead>(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in));
      _M_tail(*this)._M_assign(std::move(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in)));
    }

  protected:
    void _M_swap(_Tuple_impl& __in)
    {
      using std::swap;
      swap(_M_head(*this), _M_head(__in));
      _Inherited::_M_swap(_M_tail(__in));
    }
  };
  template <std::size_t _Idx, typename _Head>
  struct _Tuple_impl<_Idx, _Head> : private _Head_base<_Idx, _Head>
  {
    template <std::size_t, typename...>
    friend class _Tuple_impl;
    typedef _Head_base<_Idx, _Head> _Base;
    static constexpr _Head& _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
    static constexpr const _Head& _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
    constexpr _Tuple_impl() : _Base() {}
    explicit constexpr _Tuple_impl(const _Head& __head) : _Base(__head) {}
    template <typename _UHead>
    explicit constexpr _Tuple_impl(_UHead&& __head) : _Base(std::forward<_UHead>(__head))
    {
    }
    constexpr _Tuple_impl(const _Tuple_impl&) = default;
    _Tuple_impl& operator=(const _Tuple_impl&) = delete;
    constexpr _Tuple_impl(_Tuple_impl&& __in) noexcept(is_nothrow_move_constructible<_Head>::value)
        : _Base(std::forward<_Head>(_M_head(__in)))
    {
    }
    template <typename _UHead>
    constexpr _Tuple_impl(const _Tuple_impl<_Idx, _UHead>& __in) : _Base(_Tuple_impl<_Idx, _UHead>::_M_head(__in))
    {
    }
    template <typename _UHead>
    constexpr _Tuple_impl(_Tuple_impl<_Idx, _UHead>&& __in)
        : _Base(std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))
    {
    }
    template <typename _Alloc>
    _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a) : _Base(__tag, __use_alloc<_Head>(__a))
    {
    }
    template <typename _Alloc>
    _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a, const _Head& __head)
        : _Base(__use_alloc<_Head, _Alloc, _Head>(__a), __head)
    {
    }
    template <typename _Alloc, typename _UHead>
    _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a, _UHead&& __head)
        : _Base(__use_alloc<_Head, _Alloc, _UHead>(__a), std::forward<_UHead>(__head))
    {
    }
    template <typename _Alloc>
    _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a, const _Tuple_impl& __in)
        : _Base(__use_alloc<_Head, _Alloc, _Head>(__a), _M_head(__in))
    {
    }
    template <typename _Alloc>
    _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a, _Tuple_impl&& __in)
        : _Base(__use_alloc<_Head, _Alloc, _Head>(__a), std::forward<_Head>(_M_head(__in)))
    {
    }
    template <typename _Alloc, typename _UHead>
    _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a, const _Tuple_impl<_Idx, _UHead>& __in)
        : _Base(__use_alloc<_Head, _Alloc, const _UHead&>(__a), _Tuple_impl<_Idx, _UHead>::_M_head(__in))
    {
    }
    template <typename _Alloc, typename _UHead>
    _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a, _Tuple_impl<_Idx, _UHead>&& __in)
        : _Base(__use_alloc<_Head, _Alloc, _UHead>(__a), std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))
    {
    }
    template <typename _UHead>
    void _M_assign(const _Tuple_impl<_Idx, _UHead>& __in)
    {
      _M_head(*this) = _Tuple_impl<_Idx, _UHead>::_M_head(__in);
    }
    template <typename _UHead>
    void _M_assign(_Tuple_impl<_Idx, _UHead>&& __in)
    {
      _M_head(*this) = std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in));
    }

  protected:
    void _M_swap(_Tuple_impl& __in)
    {
      using std::swap;
      swap(_M_head(*this), _M_head(__in));
    }
  };
  template <bool, typename... _Elements>
  struct _TC
  {
    template <typename... _UElements>
    static constexpr bool _ConstructibleTuple()
    {
      return __and_<is_constructible<_Elements, const _UElements&>...>::value;
    }
    template <typename... _UElements>
    static constexpr bool _ImplicitlyConvertibleTuple()
    {
      return __and_<is_convertible<const _UElements&, _Elements>...>::value;
    }
    template <typename... _UElements>
    static constexpr bool _MoveConstructibleTuple()
    {
      return __and_<is_constructible<_Elements, _UElements&&>...>::value;
    }
    template <typename... _UElements>
    static constexpr bool _ImplicitlyMoveConvertibleTuple()
    {
      return __and_<is_convertible<_UElements&&, _Elements>...>::value;
    }
    template <typename _SrcTuple>
    static constexpr bool _NonNestedTuple()
    {
      return __and_<__not_<is_same<tuple<_Elements...>, __remove_cvref_t<_SrcTuple>>>,
                    __not_<is_convertible<_SrcTuple, _Elements...>>,
                    __not_<is_constructible<_Elements..., _SrcTuple>>>::value;
    }
    template <typename... _UElements>
    static constexpr bool _NotSameTuple()
    {
      return __not_<is_same<tuple<_Elements...>, __remove_cvref_t<_UElements>...>>::value;
    }
  };
  template <typename... _Elements>
  struct _TC<false, _Elements...>
  {
    template <typename... _UElements>
    static constexpr bool _ConstructibleTuple()
    {
      return false;
    }
    template <typename... _UElements>
    static constexpr bool _ImplicitlyConvertibleTuple()
    {
      return false;
    }
    template <typename... _UElements>
    static constexpr bool _MoveConstructibleTuple()
    {
      return false;
    }
    template <typename... _UElements>
    static constexpr bool _ImplicitlyMoveConvertibleTuple()
    {
      return false;
    }
    template <typename... _UElements>
    static constexpr bool _NonNestedTuple()
    {
      return true;
    }
    template <typename... _UElements>
    static constexpr bool _NotSameTuple()
    {
      return true;
    }
  };
  template <typename... _Elements>
  class tuple : public _Tuple_impl<0, _Elements...>
  {
    typedef _Tuple_impl<0, _Elements...> _Inherited;
    template <typename _Dummy>
    struct _TC2
    {
      static constexpr bool _DefaultConstructibleTuple()
      {
        return __and_<is_default_constructible<_Elements>...>::value;
      }
      static constexpr bool _ImplicitlyDefaultConstructibleTuple()
      {
        return __and_<__is_implicitly_default_constructible<_Elements>...>::value;
      }
    };
    template <typename... _UElements>
    static constexpr __enable_if_t<sizeof...(_UElements) == sizeof...(_Elements), bool> __assignable()
    {
      return __and_<is_assignable<_Elements&, _UElements>...>::value;
    }
    template <typename... _UElements>
    static constexpr bool __nothrow_assignable()
    {
      return __and_<is_nothrow_assignable<_Elements&, _UElements>...>::value;
    }

  public:
    template <typename _Dummy = void,
              typename enable_if<_TC2<_Dummy>::_ImplicitlyDefaultConstructibleTuple(), bool>::type = true>
    constexpr tuple() : _Inherited()
    {
    }
    template <typename _Dummy = void,
              typename enable_if<_TC2<_Dummy>::_DefaultConstructibleTuple() &&
                                     !_TC2<_Dummy>::_ImplicitlyDefaultConstructibleTuple(),
                                 bool>::type = false>
    explicit constexpr tuple() : _Inherited()
    {
    }
    template <typename _Dummy>
    using _TCC = _TC<is_same<_Dummy, void>::value, _Elements...>;
    template <typename _Dummy = void,
              typename enable_if<_TCC<_Dummy>::template _ConstructibleTuple<_Elements...>() &&
                                     _TCC<_Dummy>::template _ImplicitlyConvertibleTuple<_Elements...>() &&
                                     (sizeof...(_Elements) >= 1),
                                 bool>::type = true>
    constexpr tuple(const _Elements&... __elements) : _Inherited(__elements...)
    {
    }
    template <typename _Dummy = void,
              typename enable_if<_TCC<_Dummy>::template _ConstructibleTuple<_Elements...>() &&
                                     !_TCC<_Dummy>::template _ImplicitlyConvertibleTuple<_Elements...>() &&
                                     (sizeof...(_Elements) >= 1),
                                 bool>::type = false>
    explicit constexpr tuple(const _Elements&... __elements) : _Inherited(__elements...)
    {
    }
    template <typename... _UElements>
    using _TMC = _TC<(sizeof...(_Elements) == sizeof...(_UElements)) &&
                         (_TC<(sizeof...(_UElements) == 1), _Elements...>::template _NotSameTuple<_UElements...>()),
                     _Elements...>;
    template <typename... _UElements>
    using _TMCT = _TC<(sizeof...(_Elements) == sizeof...(_UElements)) &&
                          !is_same<tuple<_Elements...>, tuple<_UElements...>>::value,
                      _Elements...>;
    template <typename... _UElements,
              typename enable_if<_TMC<_UElements...>::template _MoveConstructibleTuple<_UElements...>() &&
                                     _TMC<_UElements...>::template _ImplicitlyMoveConvertibleTuple<_UElements...>() &&
                                     (sizeof...(_Elements) >= 1),
                                 bool>::type = true>
    constexpr tuple(_UElements&&... __elements) : _Inherited(std::forward<_UElements>(__elements)...)
    {
    }
    template <typename... _UElements,
              typename enable_if<_TMC<_UElements...>::template _MoveConstructibleTuple<_UElements...>() &&
                                     !_TMC<_UElements...>::template _ImplicitlyMoveConvertibleTuple<_UElements...>() &&
                                     (sizeof...(_Elements) >= 1),
                                 bool>::type = false>
    explicit constexpr tuple(_UElements&&... __elements) : _Inherited(std::forward<_UElements>(__elements)...)
    {
    }
    constexpr tuple(const tuple&) = default;
    constexpr tuple(tuple&&) = default;
    template <typename _Dummy>
    using _TNTC = _TC<is_same<_Dummy, void>::value && sizeof...(_Elements) == 1, _Elements...>;
    template <typename... _UElements,
              typename _Dummy = void,
              typename enable_if<_TMCT<_UElements...>::template _ConstructibleTuple<_UElements...>() &&
                                     _TMCT<_UElements...>::template _ImplicitlyConvertibleTuple<_UElements...>() &&
                                     _TNTC<_Dummy>::template _NonNestedTuple<const tuple<_UElements...>&>(),
                                 bool>::type = true>
    constexpr tuple(const tuple<_UElements...>& __in)
        : _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
    {
    }
    template <typename... _UElements,
              typename _Dummy = void,
              typename enable_if<_TMCT<_UElements...>::template _ConstructibleTuple<_UElements...>() &&
                                     !_TMCT<_UElements...>::template _ImplicitlyConvertibleTuple<_UElements...>() &&
                                     _TNTC<_Dummy>::template _NonNestedTuple<const tuple<_UElements...>&>(),
                                 bool>::type = false>
    explicit constexpr tuple(const tuple<_UElements...>& __in)
        : _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
    {
    }
    template <typename... _UElements,
              typename _Dummy = void,
              typename enable_if<_TMCT<_UElements...>::template _MoveConstructibleTuple<_UElements...>() &&
                                     _TMCT<_UElements...>::template _ImplicitlyMoveConvertibleTuple<_UElements...>() &&
                                     _TNTC<_Dummy>::template _NonNestedTuple<tuple<_UElements...>&&>(),
                                 bool>::type = true>
    constexpr tuple(tuple<_UElements...>&& __in) : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in))
    {
    }
    template <typename... _UElements,
              typename _Dummy = void,
              typename enable_if<_TMCT<_UElements...>::template _MoveConstructibleTuple<_UElements...>() &&
                                     !_TMCT<_UElements...>::template _ImplicitlyMoveConvertibleTuple<_UElements...>() &&
                                     _TNTC<_Dummy>::template _NonNestedTuple<tuple<_UElements...>&&>(),
                                 bool>::type = false>
    explicit constexpr tuple(tuple<_UElements...>&& __in)
        : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in))
    {
    }
    template <typename _Alloc>
    tuple(allocator_arg_t __tag, const _Alloc& __a) : _Inherited(__tag, __a)
    {
    }
    template <typename _Alloc,
              typename _Dummy = void,
              typename enable_if<_TCC<_Dummy>::template _ConstructibleTuple<_Elements...>() &&
                                     _TCC<_Dummy>::template _ImplicitlyConvertibleTuple<_Elements...>(),
                                 bool>::type = true>
    tuple(allocator_arg_t __tag, const _Alloc& __a, const _Elements&... __elements)
        : _Inherited(__tag, __a, __elements...)
    {
    }
    template <typename _Alloc,
              typename _Dummy = void,
              typename enable_if<_TCC<_Dummy>::template _ConstructibleTuple<_Elements...>() &&
                                     !_TCC<_Dummy>::template _ImplicitlyConvertibleTuple<_Elements...>(),
                                 bool>::type = false>
    explicit tuple(allocator_arg_t __tag, const _Alloc& __a, const _Elements&... __elements)
        : _Inherited(__tag, __a, __elements...)
    {
    }
    template <typename _Alloc,
              typename... _UElements,
              typename enable_if<_TMC<_UElements...>::template _MoveConstructibleTuple<_UElements...>() &&
                                     _TMC<_UElements...>::template _ImplicitlyMoveConvertibleTuple<_UElements...>(),
                                 bool>::type = true>
    tuple(allocator_arg_t __tag, const _Alloc& __a, _UElements&&... __elements)
        : _Inherited(__tag, __a, std::forward<_UElements>(__elements)...)
    {
    }
    template <typename _Alloc,
              typename... _UElements,
              typename enable_if<_TMC<_UElements...>::template _MoveConstructibleTuple<_UElements...>() &&
                                     !_TMC<_UElements...>::template _ImplicitlyMoveConvertibleTuple<_UElements...>(),
                                 bool>::type = false>
    explicit tuple(allocator_arg_t __tag, const _Alloc& __a, _UElements&&... __elements)
        : _Inherited(__tag, __a, std::forward<_UElements>(__elements)...)
    {
    }
    template <typename _Alloc>
    tuple(allocator_arg_t __tag, const _Alloc& __a, const tuple& __in)
        : _Inherited(__tag, __a, static_cast<const _Inherited&>(__in))
    {
    }
    template <typename _Alloc>
    tuple(allocator_arg_t __tag, const _Alloc& __a, tuple&& __in)
        : _Inherited(__tag, __a, static_cast<_Inherited&&>(__in))
    {
    }
    template <typename _Alloc,
              typename _Dummy = void,
              typename... _UElements,
              typename enable_if<_TMCT<_UElements...>::template _ConstructibleTuple<_UElements...>() &&
                                     _TMCT<_UElements...>::template _ImplicitlyConvertibleTuple<_UElements...>() &&
                                     _TNTC<_Dummy>::template _NonNestedTuple<const tuple<_UElements...>&>(),
                                 bool>::type = true>
    tuple(allocator_arg_t __tag, const _Alloc& __a, const tuple<_UElements...>& __in)
        : _Inherited(__tag, __a, static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
    {
    }
    template <typename _Alloc,
              typename _Dummy = void,
              typename... _UElements,
              typename enable_if<_TMCT<_UElements...>::template _ConstructibleTuple<_UElements...>() &&
                                     !_TMCT<_UElements...>::template _ImplicitlyConvertibleTuple<_UElements...>() &&
                                     _TNTC<_Dummy>::template _NonNestedTuple<const tuple<_UElements...>&>(),
                                 bool>::type = false>
    explicit tuple(allocator_arg_t __tag, const _Alloc& __a, const tuple<_UElements...>& __in)
        : _Inherited(__tag, __a, static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
    {
    }
    template <typename _Alloc,
              typename _Dummy = void,
              typename... _UElements,
              typename enable_if<_TMCT<_UElements...>::template _MoveConstructibleTuple<_UElements...>() &&
                                     _TMCT<_UElements...>::template _ImplicitlyMoveConvertibleTuple<_UElements...>() &&
                                     _TNTC<_Dummy>::template _NonNestedTuple<tuple<_UElements...>&&>(),
                                 bool>::type = true>
    tuple(allocator_arg_t __tag, const _Alloc& __a, tuple<_UElements...>&& __in)
        : _Inherited(__tag, __a, static_cast<_Tuple_impl<0, _UElements...>&&>(__in))
    {
    }
    template <typename _Alloc,
              typename _Dummy = void,
              typename... _UElements,
              typename enable_if<_TMCT<_UElements...>::template _MoveConstructibleTuple<_UElements...>() &&
                                     !_TMCT<_UElements...>::template _ImplicitlyMoveConvertibleTuple<_UElements...>() &&
                                     _TNTC<_Dummy>::template _NonNestedTuple<tuple<_UElements...>&&>(),
                                 bool>::type = false>
    explicit tuple(allocator_arg_t __tag, const _Alloc& __a, tuple<_UElements...>&& __in)
        : _Inherited(__tag, __a, static_cast<_Tuple_impl<0, _UElements...>&&>(__in))
    {
    }
    tuple& operator=(
        typename conditional<__assignable<const _Elements&...>(), const tuple&, const __nonesuch_no_braces&>::type
            __in) noexcept(__nothrow_assignable<const _Elements&...>())
    {
      this->_M_assign(__in);
      return *this;
    }
    tuple& operator=(typename conditional<__assignable<_Elements...>(), tuple&&, __nonesuch_no_braces&&>::type
                         __in) noexcept(__nothrow_assignable<_Elements...>())
    {
      this->_M_assign(std::move(__in));
      return *this;
    }
    template <typename... _UElements>
    __enable_if_t<__assignable<const _UElements&...>(), tuple&> operator=(const tuple<_UElements...>& __in) noexcept(
        __nothrow_assignable<const _UElements&...>())
    {
      this->_M_assign(__in);
      return *this;
    }
    template <typename... _UElements>
    __enable_if_t<__assignable<_UElements...>(), tuple&> operator=(tuple<_UElements...>&& __in) noexcept(
        __nothrow_assignable<_UElements...>())
    {
      this->_M_assign(std::move(__in));
      return *this;
    }
    void swap(tuple& __in) noexcept(__and_<__is_nothrow_swappable<_Elements>...>::value) { _Inherited::_M_swap(__in); }
  };
  template <typename... _UTypes>
  tuple(_UTypes...) -> tuple<_UTypes...>;
  template <typename _T1, typename _T2>
  tuple(pair<_T1, _T2>) -> tuple<_T1, _T2>;
  template <typename _Alloc, typename... _UTypes>
  tuple(allocator_arg_t, _Alloc, _UTypes...) -> tuple<_UTypes...>;
  template <typename _Alloc, typename _T1, typename _T2>
  tuple(allocator_arg_t, _Alloc, pair<_T1, _T2>) -> tuple<_T1, _T2>;
  template <typename _Alloc, typename... _UTypes>
  tuple(allocator_arg_t, _Alloc, tuple<_UTypes...>) -> tuple<_UTypes...>;
  template <>
  class tuple<>
  {
  public:
    void swap(tuple&) noexcept {}
    tuple() = default;
    template <typename _Alloc>
    tuple(allocator_arg_t, const _Alloc&)
    {
    }
    template <typename _Alloc>
    tuple(allocator_arg_t, const _Alloc&, const tuple&)
    {
    }
  };
  template <typename _T1, typename _T2>
  class tuple<_T1, _T2> : public _Tuple_impl<0, _T1, _T2>
  {
    typedef _Tuple_impl<0, _T1, _T2> _Inherited;
    template <typename _U1, typename _U2>
    static constexpr bool __assignable()
    {
      return __and_<is_assignable<_T1&, _U1>, is_assignable<_T2&, _U2>>::value;
    }
    template <typename _U1, typename _U2>
    static constexpr bool __nothrow_assignable()
    {
      return __and_<is_nothrow_assignable<_T1&, _U1>, is_nothrow_assignable<_T2&, _U2>>::value;
    }

  public:
    template <typename _U1 = _T1,
              typename _U2 = _T2,
              typename enable_if<
                  __and_<__is_implicitly_default_constructible<_U1>, __is_implicitly_default_constructible<_U2>>::value,
                  bool>::type = true>
    constexpr tuple() : _Inherited()
    {
    }
    template <typename _U1 = _T1,
              typename _U2 = _T2,
              typename enable_if<__and_<is_default_constructible<_U1>,
                                        is_default_constructible<_U2>,
                                        __not_<__and_<__is_implicitly_default_constructible<_U1>,
                                                      __is_implicitly_default_constructible<_U2>>>>::value,
                                 bool>::type = false>
    explicit constexpr tuple() : _Inherited()
    {
    }
    template <typename _Dummy>
    using _TCC = _TC<is_same<_Dummy, void>::value, _T1, _T2>;
    template <typename _Dummy = void,
              typename enable_if<_TCC<_Dummy>::template _ConstructibleTuple<_T1, _T2>() &&
                                     _TCC<_Dummy>::template _ImplicitlyConvertibleTuple<_T1, _T2>(),
                                 bool>::type = true>
    constexpr tuple(const _T1& __a1, const _T2& __a2) : _Inherited(__a1, __a2)
    {
    }
    template <typename _Dummy = void,
              typename enable_if<_TCC<_Dummy>::template _ConstructibleTuple<_T1, _T2>() &&
                                     !_TCC<_Dummy>::template _ImplicitlyConvertibleTuple<_T1, _T2>(),
                                 bool>::type = false>
    explicit constexpr tuple(const _T1& __a1, const _T2& __a2) : _Inherited(__a1, __a2)
    {
    }
    using _TMC = _TC<true, _T1, _T2>;
    template <typename _U1,
              typename _U2,
              typename enable_if<_TMC::template _MoveConstructibleTuple<_U1, _U2>() &&
                                     _TMC::template _ImplicitlyMoveConvertibleTuple<_U1, _U2>() &&
                                     !is_same<__remove_cvref_t<_U1>, allocator_arg_t>::value,
                                 bool>::type = true>
    constexpr tuple(_U1&& __a1, _U2&& __a2) : _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2))
    {
    }
    template <typename _U1,
              typename _U2,
              typename enable_if<_TMC::template _MoveConstructibleTuple<_U1, _U2>() &&
                                     !_TMC::template _ImplicitlyMoveConvertibleTuple<_U1, _U2>() &&
                                     !is_same<__remove_cvref_t<_U1>, allocator_arg_t>::value,
                                 bool>::type = false>
    explicit constexpr tuple(_U1&& __a1, _U2&& __a2) : _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2))
    {
    }
    constexpr tuple(const tuple&) = default;
    constexpr tuple(tuple&&) = default;
    template <typename _U1,
              typename _U2,
              typename enable_if<_TMC::template _ConstructibleTuple<_U1, _U2>() &&
                                     _TMC::template _ImplicitlyConvertibleTuple<_U1, _U2>(),
                                 bool>::type = true>
    constexpr tuple(const tuple<_U1, _U2>& __in) : _Inherited(static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in))
    {
    }
    template <typename _U1,
              typename _U2,
              typename enable_if<_TMC::template _ConstructibleTuple<_U1, _U2>() &&
                                     !_TMC::template _ImplicitlyConvertibleTuple<_U1, _U2>(),
                                 bool>::type = false>
    explicit constexpr tuple(const tuple<_U1, _U2>& __in)
        : _Inherited(static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in))
    {
    }
    template <typename _U1,
              typename _U2,
              typename enable_if<_TMC::template _MoveConstructibleTuple<_U1, _U2>() &&
                                     _TMC::template _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
                                 bool>::type = true>
    constexpr tuple(tuple<_U1, _U2>&& __in) : _Inherited(static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))
    {
    }
    template <typename _U1,
              typename _U2,
              typename enable_if<_TMC::template _MoveConstructibleTuple<_U1, _U2>() &&
                                     !_TMC::template _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
                                 bool>::type = false>
    explicit constexpr tuple(tuple<_U1, _U2>&& __in) : _Inherited(static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))
    {
    }
    template <typename _U1,
              typename _U2,
              typename enable_if<_TMC::template _ConstructibleTuple<_U1, _U2>() &&
                                     _TMC::template _ImplicitlyConvertibleTuple<_U1, _U2>(),
                                 bool>::type = true>
    constexpr tuple(const pair<_U1, _U2>& __in) : _Inherited(__in.first, __in.second)
    {
    }
    template <typename _U1,
              typename _U2,
              typename enable_if<_TMC::template _ConstructibleTuple<_U1, _U2>() &&
                                     !_TMC::template _ImplicitlyConvertibleTuple<_U1, _U2>(),
                                 bool>::type = false>
    explicit constexpr tuple(const pair<_U1, _U2>& __in) : _Inherited(__in.first, __in.second)
    {
    }
    template <typename _U1,
              typename _U2,
              typename enable_if<_TMC::template _MoveConstructibleTuple<_U1, _U2>() &&
                                     _TMC::template _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
                                 bool>::type = true>
    constexpr tuple(pair<_U1, _U2>&& __in) : _Inherited(std::forward<_U1>(__in.first), std::forward<_U2>(__in.second))
    {
    }
    template <typename _U1,
              typename _U2,
              typename enable_if<_TMC::template _MoveConstructibleTuple<_U1, _U2>() &&
                                     !_TMC::template _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
                                 bool>::type = false>
    explicit constexpr tuple(pair<_U1, _U2>&& __in)
        : _Inherited(std::forward<_U1>(__in.first), std::forward<_U2>(__in.second))
    {
    }
    template <typename _Alloc>
    tuple(allocator_arg_t __tag, const _Alloc& __a) : _Inherited(__tag, __a)
    {
    }
    template <typename _Alloc,
              typename _Dummy = void,
              typename enable_if<_TCC<_Dummy>::template _ConstructibleTuple<_T1, _T2>() &&
                                     _TCC<_Dummy>::template _ImplicitlyConvertibleTuple<_T1, _T2>(),
                                 bool>::type = true>
    tuple(allocator_arg_t __tag, const _Alloc& __a, const _T1& __a1, const _T2& __a2)
        : _Inherited(__tag, __a, __a1, __a2)
    {
    }
    template <typename _Alloc,
              typename _Dummy = void,
              typename enable_if<_TCC<_Dummy>::template _ConstructibleTuple<_T1, _T2>() &&
                                     !_TCC<_Dummy>::template _ImplicitlyConvertibleTuple<_T1, _T2>(),
                                 bool>::type = false>
    explicit tuple(allocator_arg_t __tag, const _Alloc& __a, const _T1& __a1, const _T2& __a2)
        : _Inherited(__tag, __a, __a1, __a2)
    {
    }
    template <typename _Alloc,
              typename _U1,
              typename _U2,
              typename enable_if<_TMC::template _MoveConstructibleTuple<_U1, _U2>() &&
                                     _TMC::template _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
                                 bool>::type = true>
    tuple(allocator_arg_t __tag, const _Alloc& __a, _U1&& __a1, _U2&& __a2)
        : _Inherited(__tag, __a, std::forward<_U1>(__a1), std::forward<_U2>(__a2))
    {
    }
    template <typename _Alloc,
              typename _U1,
              typename _U2,
              typename enable_if<_TMC::template _MoveConstructibleTuple<_U1, _U2>() &&
                                     !_TMC::template _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
                                 bool>::type = false>
    explicit tuple(allocator_arg_t __tag, const _Alloc& __a, _U1&& __a1, _U2&& __a2)
        : _Inherited(__tag, __a, std::forward<_U1>(__a1), std::forward<_U2>(__a2))
    {
    }
    template <typename _Alloc>
    tuple(allocator_arg_t __tag, const _Alloc& __a, const tuple& __in)
        : _Inherited(__tag, __a, static_cast<const _Inherited&>(__in))
    {
    }
    template <typename _Alloc>
    tuple(allocator_arg_t __tag, const _Alloc& __a, tuple&& __in)
        : _Inherited(__tag, __a, static_cast<_Inherited&&>(__in))
    {
    }
    template <typename _Alloc,
              typename _U1,
              typename _U2,
              typename enable_if<_TMC::template _ConstructibleTuple<_U1, _U2>() &&
                                     _TMC::template _ImplicitlyConvertibleTuple<_U1, _U2>(),
                                 bool>::type = true>
    tuple(allocator_arg_t __tag, const _Alloc& __a, const tuple<_U1, _U2>& __in)
        : _Inherited(__tag, __a, static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in))
    {
    }
    template <typename _Alloc,
              typename _U1,
              typename _U2,
              typename enable_if<_TMC::template _ConstructibleTuple<_U1, _U2>() &&
                                     !_TMC::template _ImplicitlyConvertibleTuple<_U1, _U2>(),
                                 bool>::type = false>
    explicit tuple(allocator_arg_t __tag, const _Alloc& __a, const tuple<_U1, _U2>& __in)
        : _Inherited(__tag, __a, static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in))
    {
    }
    template <typename _Alloc,
              typename _U1,
              typename _U2,
              typename enable_if<_TMC::template _MoveConstructibleTuple<_U1, _U2>() &&
                                     _TMC::template _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
                                 bool>::type = true>
    tuple(allocator_arg_t __tag, const _Alloc& __a, tuple<_U1, _U2>&& __in)
        : _Inherited(__tag, __a, static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))
    {
    }
    template <typename _Alloc,
              typename _U1,
              typename _U2,
              typename enable_if<_TMC::template _MoveConstructibleTuple<_U1, _U2>() &&
                                     !_TMC::template _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
                                 bool>::type = false>
    explicit tuple(allocator_arg_t __tag, const _Alloc& __a, tuple<_U1, _U2>&& __in)
        : _Inherited(__tag, __a, static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))
    {
    }
    template <typename _Alloc,
              typename _U1,
              typename _U2,
              typename enable_if<_TMC::template _ConstructibleTuple<_U1, _U2>() &&
                                     _TMC::template _ImplicitlyConvertibleTuple<_U1, _U2>(),
                                 bool>::type = true>
    tuple(allocator_arg_t __tag, const _Alloc& __a, const pair<_U1, _U2>& __in)
        : _Inherited(__tag, __a, __in.first, __in.second)
    {
    }
    template <typename _Alloc,
              typename _U1,
              typename _U2,
              typename enable_if<_TMC::template _ConstructibleTuple<_U1, _U2>() &&
                                     !_TMC::template _ImplicitlyConvertibleTuple<_U1, _U2>(),
                                 bool>::type = false>
    explicit tuple(allocator_arg_t __tag, const _Alloc& __a, const pair<_U1, _U2>& __in)
        : _Inherited(__tag, __a, __in.first, __in.second)
    {
    }
    template <typename _Alloc,
              typename _U1,
              typename _U2,
              typename enable_if<_TMC::template _MoveConstructibleTuple<_U1, _U2>() &&
                                     _TMC::template _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
                                 bool>::type = true>
    tuple(allocator_arg_t __tag, const _Alloc& __a, pair<_U1, _U2>&& __in)
        : _Inherited(__tag, __a, std::forward<_U1>(__in.first), std::forward<_U2>(__in.second))
    {
    }
    template <typename _Alloc,
              typename _U1,
              typename _U2,
              typename enable_if<_TMC::template _MoveConstructibleTuple<_U1, _U2>() &&
                                     !_TMC::template _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
                                 bool>::type = false>
    explicit tuple(allocator_arg_t __tag, const _Alloc& __a, pair<_U1, _U2>&& __in)
        : _Inherited(__tag, __a, std::forward<_U1>(__in.first), std::forward<_U2>(__in.second))
    {
    }
    tuple& operator=(
        typename conditional<__assignable<const _T1&, const _T2&>(), const tuple&, const __nonesuch_no_braces&>::type
            __in) noexcept(__nothrow_assignable<const _T1&, const _T2&>())
    {
      this->_M_assign(__in);
      return *this;
    }
    tuple& operator=(typename conditional<__assignable<_T1, _T2>(), tuple&&, __nonesuch_no_braces&&>::type
                         __in) noexcept(__nothrow_assignable<_T1, _T2>())
    {
      this->_M_assign(std::move(__in));
      return *this;
    }
    template <typename _U1, typename _U2>
    __enable_if_t<__assignable<const _U1&, const _U2&>(), tuple&> operator=(const tuple<_U1, _U2>& __in) noexcept(
        __nothrow_assignable<const _U1&, const _U2&>())
    {
      this->_M_assign(__in);
      return *this;
    }
    template <typename _U1, typename _U2>
    __enable_if_t<__assignable<_U1, _U2>(), tuple&> operator=(tuple<_U1, _U2>&& __in) noexcept(
        __nothrow_assignable<_U1, _U2>())
    {
      this->_M_assign(std::move(__in));
      return *this;
    }
    template <typename _U1, typename _U2>
    __enable_if_t<__assignable<const _U1&, const _U2&>(), tuple&> operator=(const pair<_U1, _U2>& __in) noexcept(
        __nothrow_assignable<const _U1&, const _U2&>())
    {
      this->_M_head(*this) = __in.first;
      this->_M_tail(*this)._M_head(*this) = __in.second;
      return *this;
    }
    template <typename _U1, typename _U2>
    __enable_if_t<__assignable<_U1, _U2>(), tuple&> operator=(pair<_U1, _U2>&& __in) noexcept(
        __nothrow_assignable<_U1, _U2>())
    {
      this->_M_head(*this) = std::forward<_U1>(__in.first);
      this->_M_tail(*this)._M_head(*this) = std::forward<_U2>(__in.second);
      return *this;
    }
    void swap(tuple& __in) noexcept(__and_<__is_nothrow_swappable<_T1>, __is_nothrow_swappable<_T2>>::value)
    {
      _Inherited::_M_swap(__in);
    }
  };
  template <typename... _Elements>
  struct tuple_size<tuple<_Elements...>> : public integral_constant<std::size_t, sizeof...(_Elements)>
  {
  };
  template <typename _Tp>
  inline constexpr size_t tuple_size_v = tuple_size<_Tp>::value;
  template <std::size_t __i, typename _Head, typename... _Tail>
  struct tuple_element<__i, tuple<_Head, _Tail...>> : tuple_element<__i - 1, tuple<_Tail...>>
  {
  };
  template <typename _Head, typename... _Tail>
  struct tuple_element<0, tuple<_Head, _Tail...>>
  {
    typedef _Head type;
  };
  template <size_t __i>
  struct tuple_element<__i, tuple<>>
  {
    static_assert(__i < tuple_size<tuple<>>::value, "tuple index is in range");
  };
  template <std::size_t __i, typename _Head, typename... _Tail>
  constexpr _Head& __get_helper(_Tuple_impl<__i, _Head, _Tail...> & __t) noexcept
  {
    return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t);
  }
  template <std::size_t __i, typename _Head, typename... _Tail>
  constexpr const _Head& __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
  {
    return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t);
  }
  template <std::size_t __i, typename... _Elements>
  constexpr __tuple_element_t<__i, tuple<_Elements...>>& get(tuple<_Elements...> & __t) noexcept
  {
    return std::__get_helper<__i>(__t);
  }
  template <std::size_t __i, typename... _Elements>
  constexpr const __tuple_element_t<__i, tuple<_Elements...>>& get(const tuple<_Elements...>& __t) noexcept
  {
    return std::__get_helper<__i>(__t);
  }
  template <std::size_t __i, typename... _Elements>
  constexpr __tuple_element_t<__i, tuple<_Elements...>>&& get(tuple<_Elements...> && __t) noexcept
  {
    typedef __tuple_element_t<__i, tuple<_Elements...>> __element_type;
    return std::forward<__element_type&&>(std::get<__i>(__t));
  }
  template <std::size_t __i, typename... _Elements>
  constexpr const __tuple_element_t<__i, tuple<_Elements...>>&& get(const tuple<_Elements...>&& __t) noexcept
  {
    typedef __tuple_element_t<__i, tuple<_Elements...>> __element_type;
    return std::forward<const __element_type&&>(std::get<__i>(__t));
  }
  template <typename _Head, size_t __i, typename... _Tail>
  constexpr _Head& __get_helper2(_Tuple_impl<__i, _Head, _Tail...> & __t) noexcept
  {
    return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t);
  }
  template <typename _Head, size_t __i, typename... _Tail>
  constexpr const _Head& __get_helper2(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
  {
    return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t);
  }
  template <typename _Tp, typename... _Types>
  constexpr _Tp& get(tuple<_Types...> & __t) noexcept
  {
    return std::__get_helper2<_Tp>(__t);
  }
  template <typename _Tp, typename... _Types>
  constexpr _Tp&& get(tuple<_Types...> && __t) noexcept
  {
    return std::forward<_Tp&&>(std::__get_helper2<_Tp>(__t));
  }
  template <typename _Tp, typename... _Types>
  constexpr const _Tp& get(const tuple<_Types...>& __t) noexcept
  {
    return std::__get_helper2<_Tp>(__t);
  }
  template <typename _Tp, typename... _Types>
  constexpr const _Tp&& get(const tuple<_Types...>&& __t) noexcept
  {
    return std::forward<const _Tp&&>(std::__get_helper2<_Tp>(__t));
  }
  template <typename _Tp, typename _Up, size_t __i, size_t __size>
  struct __tuple_compare
  {
    static constexpr bool __eq(const _Tp& __t, const _Up& __u)
    {
      return bool(std::get<__i>(__t) == std::get<__i>(__u)) &&
             __tuple_compare<_Tp, _Up, __i + 1, __size>::__eq(__t, __u);
    }
    static constexpr bool __less(const _Tp& __t, const _Up& __u)
    {
      return bool(std::get<__i>(__t) < std::get<__i>(__u)) ||
             (!bool(std::get<__i>(__u) < std::get<__i>(__t)) &&
              __tuple_compare<_Tp, _Up, __i + 1, __size>::__less(__t, __u));
    }
  };
  template <typename _Tp, typename _Up, size_t __size>
  struct __tuple_compare<_Tp, _Up, __size, __size>
  {
    static constexpr bool __eq(const _Tp&, const _Up&) { return true; }
    static constexpr bool __less(const _Tp&, const _Up&) { return false; }
  };
  template <typename... _TElements, typename... _UElements>
  constexpr bool operator==(const tuple<_TElements...>& __t, const tuple<_UElements...>& __u)
  {
    static_assert(sizeof...(_TElements) == sizeof...(_UElements),
                  "tuple objects can only be compared if they have equal sizes.");
    using __compare = __tuple_compare<tuple<_TElements...>, tuple<_UElements...>, 0, sizeof...(_TElements)>;
    return __compare::__eq(__t, __u);
  }
  template <typename... _TElements, typename... _UElements>
  constexpr bool operator<(const tuple<_TElements...>& __t, const tuple<_UElements...>& __u)
  {
    static_assert(sizeof...(_TElements) == sizeof...(_UElements),
                  "tuple objects can only be compared if they have equal sizes.");
    using __compare = __tuple_compare<tuple<_TElements...>, tuple<_UElements...>, 0, sizeof...(_TElements)>;
    return __compare::__less(__t, __u);
  }
  template <typename... _TElements, typename... _UElements>
  constexpr bool operator!=(const tuple<_TElements...>& __t, const tuple<_UElements...>& __u)
  {
    return !(__t == __u);
  }
  template <typename... _TElements, typename... _UElements>
  constexpr bool operator>(const tuple<_TElements...>& __t, const tuple<_UElements...>& __u)
  {
    return __u < __t;
  }
  template <typename... _TElements, typename... _UElements>
  constexpr bool operator<=(const tuple<_TElements...>& __t, const tuple<_UElements...>& __u)
  {
    return !(__u < __t);
  }
  template <typename... _TElements, typename... _UElements>
  constexpr bool operator>=(const tuple<_TElements...>& __t, const tuple<_UElements...>& __u)
  {
    return !(__t < __u);
  }
  template <typename... _Elements>
  constexpr tuple<typename __decay_and_strip<_Elements>::__type...> make_tuple(_Elements && ... __args)
  {
    typedef tuple<typename __decay_and_strip<_Elements>::__type...> __result_type;
    return __result_type(std::forward<_Elements>(__args)...);
  }
  template <typename... _Elements>
  constexpr tuple<_Elements&&...> forward_as_tuple(_Elements && ... __args) noexcept
  {
    return tuple<_Elements&&...>(std::forward<_Elements>(__args)...);
  }
  template <size_t, typename, typename, size_t>
  struct __make_tuple_impl;
  template <size_t _Idx, typename _Tuple, typename... _Tp, size_t _Nm>
  struct __make_tuple_impl<_Idx, tuple<_Tp...>, _Tuple, _Nm>
      : __make_tuple_impl<_Idx + 1, tuple<_Tp..., __tuple_element_t<_Idx, _Tuple>>, _Tuple, _Nm>
  {
  };
  template <std::size_t _Nm, typename _Tuple, typename... _Tp>
  struct __make_tuple_impl<_Nm, tuple<_Tp...>, _Tuple, _Nm>
  {
    typedef tuple<_Tp...> __type;
  };
  template <typename _Tuple>
  struct __do_make_tuple : __make_tuple_impl<0, tuple<>, _Tuple, std::tuple_size<_Tuple>::value>
  {
  };
  template <typename _Tuple>
  struct __make_tuple : public __do_make_tuple<__remove_cvref_t<_Tuple>>
  {
  };
  template <typename...>
  struct __combine_tuples;
  template <>
  struct __combine_tuples<>
  {
    typedef tuple<> __type;
  };
  template <typename... _Ts>
  struct __combine_tuples<tuple<_Ts...>>
  {
    typedef tuple<_Ts...> __type;
  };
  template <typename... _T1s, typename... _T2s, typename... _Rem>
  struct __combine_tuples<tuple<_T1s...>, tuple<_T2s...>, _Rem...>
  {
    typedef typename __combine_tuples<tuple<_T1s..., _T2s...>, _Rem...>::__type __type;
  };
  template <typename... _Tpls>
  struct __tuple_cat_result
  {
    typedef typename __combine_tuples<typename __make_tuple<_Tpls>::__type...>::__type __type;
  };
  template <typename...>
  struct __make_1st_indices;
  template <>
  struct __make_1st_indices<>
  {
    typedef std::_Index_tuple<> __type;
  };
  template <typename _Tp, typename... _Tpls>
  struct __make_1st_indices<_Tp, _Tpls...>
  {
    typedef typename std::_Build_index_tuple<std::tuple_size<typename std::remove_reference<_Tp>::type>::value>::__type
        __type;
  };
  template <typename _Ret, typename _Indices, typename... _Tpls>
  struct __tuple_concater;
  template <typename _Ret, std::size_t... _Is, typename _Tp, typename... _Tpls>
  struct __tuple_concater<_Ret, std::_Index_tuple<_Is...>, _Tp, _Tpls...>
  {
    template <typename... _Us>
    static constexpr _Ret _S_do(_Tp&& __tp, _Tpls&&... __tps, _Us&&... __us)
    {
      typedef typename __make_1st_indices<_Tpls...>::__type __idx;
      typedef __tuple_concater<_Ret, __idx, _Tpls...> __next;
      return __next::_S_do(
          std::forward<_Tpls>(__tps)..., std::forward<_Us>(__us)..., std::get<_Is>(std::forward<_Tp>(__tp))...);
    }
  };
  template <typename _Ret>
  struct __tuple_concater<_Ret, std::_Index_tuple<>>
  {
    template <typename... _Us>
    static constexpr _Ret _S_do(_Us&&... __us)
    {
      return _Ret(std::forward<_Us>(__us)...);
    }
  };
  template <typename... _Tpls, typename = typename enable_if<__and_<__is_tuple_like<_Tpls>...>::value>::type>
  constexpr auto tuple_cat(_Tpls && ... __tpls)->typename __tuple_cat_result<_Tpls...>::__type
  {
    typedef typename __tuple_cat_result<_Tpls...>::__type __ret;
    typedef typename __make_1st_indices<_Tpls...>::__type __idx;
    typedef __tuple_concater<__ret, __idx, _Tpls...> __concater;
    return __concater::_S_do(std::forward<_Tpls>(__tpls)...);
  }
  template <typename... _Elements>
  constexpr tuple<_Elements&...> tie(_Elements & ... __args) noexcept
  {
    return tuple<_Elements&...>(__args...);
  }
  template <typename... _Elements>
  inline typename enable_if<__and_<__is_swappable<_Elements>...>::value>::type swap(
      tuple<_Elements...> & __x, tuple<_Elements...> & __y) noexcept(noexcept(__x.swap(__y)))
  {
    __x.swap(__y);
  }
  template <typename... _Elements>
  typename enable_if<!__and_<__is_swappable<_Elements>...>::value>::type swap(tuple<_Elements...>&,
                                                                              tuple<_Elements...>&) = delete;
  struct _Swallow_assign
  {
    template <class _Tp>
    constexpr const _Swallow_assign& operator=(const _Tp&) const
    {
      return *this;
    }
  };
  inline constexpr _Swallow_assign ignore{};
  template <typename... _Types, typename _Alloc>
  struct uses_allocator<tuple<_Types...>, _Alloc> : true_type
  {
  };
  template <class _T1, class _T2>
  template <typename... _Args1, typename... _Args2>
  inline pair<_T1, _T2>::pair(piecewise_construct_t, tuple<_Args1...> __first, tuple<_Args2...> __second)
      : pair(__first,
             __second,
             typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
             typename _Build_index_tuple<sizeof...(_Args2)>::__type())
  {
  }
  template <class _T1, class _T2>
  template <typename... _Args1, std::size_t... _Indexes1, typename... _Args2, std::size_t... _Indexes2>
  inline pair<_T1, _T2>::pair(
      tuple<_Args1...> & __tuple1, tuple<_Args2...> & __tuple2, _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
  {
  }
  template <typename _Fn, typename _Tuple, size_t... _Idx>
  constexpr decltype(auto) __apply_impl(_Fn && __f, _Tuple && __t, index_sequence<_Idx...>)
  {
    return std::__invoke(std::forward<_Fn>(__f), std::get<_Idx>(std::forward<_Tuple>(__t))...);
  }
  template <typename _Fn, typename _Tuple>
  constexpr decltype(auto) apply(_Fn && __f, _Tuple && __t)
  {
    using _Indices = make_index_sequence<tuple_size_v<remove_reference_t<_Tuple>>>;
    return std::__apply_impl(std::forward<_Fn>(__f), std::forward<_Tuple>(__t), _Indices{});
  }
  template <typename _Tp, typename _Tuple, size_t... _Idx>
  constexpr _Tp __make_from_tuple_impl(_Tuple && __t, index_sequence<_Idx...>)
  {
    return _Tp(std::get<_Idx>(std::forward<_Tuple>(__t))...);
  }
  template <typename _Tp, typename _Tuple>
  constexpr _Tp make_from_tuple(_Tuple && __t)
  {
    return __make_from_tuple_impl<_Tp>(std::forward<_Tuple>(__t),
                                       make_index_sequence<tuple_size_v<remove_reference_t<_Tuple>>>{});
  }
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _Res, typename... _ArgTypes>
  struct _Maybe_unary_or_binary_function
  {
  };
  template <typename _Res, typename _T1>
  struct _Maybe_unary_or_binary_function<_Res, _T1> : std::unary_function<_T1, _Res>
  {
  };
  template <typename _Res, typename _T1, typename _T2>
  struct _Maybe_unary_or_binary_function<_Res, _T1, _T2> : std::binary_function<_T1, _T2, _Res>
  {
  };
  template <typename _Signature>
  struct _Mem_fn_traits;
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits_base
  {
    using __result_type = _Res;
    using __maybe_type = _Maybe_unary_or_binary_function<_Res, _Class*, _ArgTypes...>;
    using __arity = integral_constant<size_t, sizeof...(_ArgTypes)>;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...)> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...>
  {
    using __vararg = false_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes......)> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...>
  {
    using __vararg = true_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...>
  {
    using __vararg = false_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes......) const> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...>
  {
    using __vararg = true_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) volatile>
      : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...>
  {
    using __vararg = false_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes......) volatile>
      : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...>
  {
    using __vararg = true_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const volatile>
      : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...>
  {
    using __vararg = false_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes......) const volatile>
      : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...>
  {
    using __vararg = true_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...)&> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...>
  {
    using __vararg = false_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes......)&> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...>
  {
    using __vararg = true_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const&> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...>
  {
    using __vararg = false_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes......) const&>
      : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...>
  {
    using __vararg = true_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) volatile&>
      : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...>
  {
    using __vararg = false_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes......) volatile&>
      : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...>
  {
    using __vararg = true_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const volatile&>
      : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...>
  {
    using __vararg = false_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes......) const volatile&>
      : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...>
  {
    using __vararg = true_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) &&> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...>
  {
    using __vararg = false_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes......) &&> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...>
  {
    using __vararg = true_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const&&> : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...>
  {
    using __vararg = false_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes......) const&&>
      : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...>
  {
    using __vararg = true_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) volatile&&>
      : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...>
  {
    using __vararg = false_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes......) volatile&&>
      : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...>
  {
    using __vararg = true_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const volatile&&>
      : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...>
  {
    using __vararg = false_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes......) const volatile&&>
      : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...>
  {
    using __vararg = true_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) noexcept> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...>
  {
    using __vararg = false_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes......) noexcept> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...>
  {
    using __vararg = true_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const noexcept>
      : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...>
  {
    using __vararg = false_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes......) const noexcept>
      : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...>
  {
    using __vararg = true_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) volatile noexcept>
      : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...>
  {
    using __vararg = false_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes......) volatile noexcept>
      : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...>
  {
    using __vararg = true_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const volatile noexcept>
      : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...>
  {
    using __vararg = false_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes......) const volatile noexcept>
      : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...>
  {
    using __vararg = true_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...)& noexcept> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...>
  {
    using __vararg = false_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes......)& noexcept> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...>
  {
    using __vararg = true_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const& noexcept>
      : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...>
  {
    using __vararg = false_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes......) const& noexcept>
      : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...>
  {
    using __vararg = true_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) volatile& noexcept>
      : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...>
  {
    using __vararg = false_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes......) volatile& noexcept>
      : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...>
  {
    using __vararg = true_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const volatile& noexcept>
      : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...>
  {
    using __vararg = false_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes......) const volatile& noexcept>
      : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...>
  {
    using __vararg = true_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...)&& noexcept> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...>
  {
    using __vararg = false_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes......)&& noexcept> : _Mem_fn_traits_base<_Res, _Class, _ArgTypes...>
  {
    using __vararg = true_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const&& noexcept>
      : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...>
  {
    using __vararg = false_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes......) const&& noexcept>
      : _Mem_fn_traits_base<_Res, const _Class, _ArgTypes...>
  {
    using __vararg = true_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) volatile&& noexcept>
      : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...>
  {
    using __vararg = false_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes......) volatile&& noexcept>
      : _Mem_fn_traits_base<_Res, volatile _Class, _ArgTypes...>
  {
    using __vararg = true_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes...) const volatile&& noexcept>
      : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...>
  {
    using __vararg = false_type;
  };
  template <typename _Res, typename _Class, typename... _ArgTypes>
  struct _Mem_fn_traits<_Res (_Class::*)(_ArgTypes......) const volatile&& noexcept>
      : _Mem_fn_traits_base<_Res, const volatile _Class, _ArgTypes...>
  {
    using __vararg = true_type;
  };
  template <typename _Functor, typename = __void_t<>>
  struct _Maybe_get_result_type
  {
  };
  template <typename _Functor>
  struct _Maybe_get_result_type<_Functor, __void_t<typename _Functor::result_type>>
  {
    typedef typename _Functor::result_type result_type;
  };
  template <typename _Functor>
  struct _Weak_result_type_impl : _Maybe_get_result_type<_Functor>
  {
  };
  template <typename _Res, typename... _ArgTypes, bool _NE>
  struct _Weak_result_type_impl<_Res(_ArgTypes...) noexcept(_NE)>
  {
    typedef _Res result_type;
  };
  template <typename _Res, typename... _ArgTypes, bool _NE>
  struct _Weak_result_type_impl<_Res(_ArgTypes......) noexcept(_NE)>
  {
    typedef _Res result_type;
  };
  template <typename _Res, typename... _ArgTypes, bool _NE>
  struct _Weak_result_type_impl<_Res (*)(_ArgTypes...) noexcept(_NE)>
  {
    typedef _Res result_type;
  };
  template <typename _Res, typename... _ArgTypes, bool _NE>
  struct _Weak_result_type_impl<_Res (*)(_ArgTypes......) noexcept(_NE)>
  {
    typedef _Res result_type;
  };
  template <typename _Functor, bool = is_member_function_pointer<_Functor>::value>
  struct _Weak_result_type_memfun : _Weak_result_type_impl<_Functor>
  {
  };
  template <typename _MemFunPtr>
  struct _Weak_result_type_memfun<_MemFunPtr, true>
  {
    using result_type = typename _Mem_fn_traits<_MemFunPtr>::__result_type;
  };
  template <typename _Func, typename _Class>
  struct _Weak_result_type_memfun<_Func _Class::*, false>
  {
  };
  template <typename _Functor>
  struct _Weak_result_type : _Weak_result_type_memfun<typename remove_cv<_Functor>::type>
  {
  };
  template <typename _Tp, typename = __void_t<>>
  struct _Refwrap_base_arg1
  {
  };
  template <typename _Tp>
  struct _Refwrap_base_arg1<_Tp, __void_t<typename _Tp::argument_type>>
  {
    typedef typename _Tp::argument_type argument_type;
  };
  template <typename _Tp, typename = __void_t<>>
  struct _Refwrap_base_arg2
  {
  };
  template <typename _Tp>
  struct _Refwrap_base_arg2<_Tp, __void_t<typename _Tp::first_argument_type, typename _Tp::second_argument_type>>
  {
    typedef typename _Tp::first_argument_type first_argument_type;
    typedef typename _Tp::second_argument_type second_argument_type;
  };
  template <typename _Tp>
  struct _Reference_wrapper_base : _Weak_result_type<_Tp>, _Refwrap_base_arg1<_Tp>, _Refwrap_base_arg2<_Tp>
  {
  };
  template <typename _Res, typename _T1, bool _NE>
  struct _Reference_wrapper_base<_Res(_T1) noexcept(_NE)> : unary_function<_T1, _Res>
  {
  };
  template <typename _Res, typename _T1>
  struct _Reference_wrapper_base<_Res(_T1) const> : unary_function<_T1, _Res>
  {
  };
  template <typename _Res, typename _T1>
  struct _Reference_wrapper_base<_Res(_T1) volatile> : unary_function<_T1, _Res>
  {
  };
  template <typename _Res, typename _T1>
  struct _Reference_wrapper_base<_Res(_T1) const volatile> : unary_function<_T1, _Res>
  {
  };
  template <typename _Res, typename _T1, typename _T2, bool _NE>
  struct _Reference_wrapper_base<_Res(_T1, _T2) noexcept(_NE)> : binary_function<_T1, _T2, _Res>
  {
  };
  template <typename _Res, typename _T1, typename _T2>
  struct _Reference_wrapper_base<_Res(_T1, _T2) const> : binary_function<_T1, _T2, _Res>
  {
  };
  template <typename _Res, typename _T1, typename _T2>
  struct _Reference_wrapper_base<_Res(_T1, _T2) volatile> : binary_function<_T1, _T2, _Res>
  {
  };
  template <typename _Res, typename _T1, typename _T2>
  struct _Reference_wrapper_base<_Res(_T1, _T2) const volatile> : binary_function<_T1, _T2, _Res>
  {
  };
  template <typename _Res, typename _T1, bool _NE>
  struct _Reference_wrapper_base<_Res (*)(_T1) noexcept(_NE)> : unary_function<_T1, _Res>
  {
  };
  template <typename _Res, typename _T1, typename _T2, bool _NE>
  struct _Reference_wrapper_base<_Res (*)(_T1, _T2) noexcept(_NE)> : binary_function<_T1, _T2, _Res>
  {
  };
  template <typename _Tp, bool = is_member_function_pointer<_Tp>::value>
  struct _Reference_wrapper_base_memfun : _Reference_wrapper_base<_Tp>
  {
  };
  template <typename _MemFunPtr>
  struct _Reference_wrapper_base_memfun<_MemFunPtr, true> : _Mem_fn_traits<_MemFunPtr>::__maybe_type
  {
    using result_type = typename _Mem_fn_traits<_MemFunPtr>::__result_type;
  };
  template <typename _Tp>
  class reference_wrapper : public _Reference_wrapper_base_memfun<typename remove_cv<_Tp>::type>
  {
    _Tp* _M_data;
    static _Tp* _S_fun(_Tp& __r) noexcept { return std::__addressof(__r); }
    static void _S_fun(_Tp&&) = delete;
    template <typename _Up, typename _Up2 = __remove_cvref_t<_Up>>
    using __not_same = typename enable_if<!is_same<reference_wrapper, _Up2>::value>::type;

  public:
    typedef _Tp type;
    template <typename _Up,
              typename = __not_same<_Up>,
              typename = decltype(reference_wrapper::_S_fun(std::declval<_Up>()))>
    reference_wrapper(_Up&& __uref) noexcept(noexcept(reference_wrapper::_S_fun(std::declval<_Up>())))
        : _M_data(reference_wrapper::_S_fun(std::forward<_Up>(__uref)))
    {
    }
    reference_wrapper(const reference_wrapper&) = default;
    reference_wrapper& operator=(const reference_wrapper&) = default;
    operator _Tp&() const noexcept { return this->get(); }
    _Tp& get() const noexcept { return *_M_data; }
    template <typename... _Args>
    typename result_of<_Tp&(_Args&&...)>::type operator()(_Args&&... __args) const
    {
      return std::__invoke(get(), std::forward<_Args>(__args)...);
    }
  };
  template <typename _Tp>
  reference_wrapper(_Tp&) -> reference_wrapper<_Tp>;
  template <typename _Tp>
  inline reference_wrapper<_Tp> ref(_Tp & __t) noexcept
  {
    return reference_wrapper<_Tp>(__t);
  }
  template <typename _Tp>
  inline reference_wrapper<const _Tp> cref(const _Tp& __t) noexcept
  {
    return reference_wrapper<const _Tp>(__t);
  }
  template <typename _Tp>
  void ref(const _Tp&&) = delete;
  template <typename _Tp>
  void cref(const _Tp&&) = delete;
  template <typename _Tp>
  inline reference_wrapper<_Tp> ref(reference_wrapper<_Tp> __t) noexcept
  {
    return __t;
  }
  template <typename _Tp>
  inline reference_wrapper<const _Tp> cref(reference_wrapper<_Tp> __t) noexcept
  {
    return {__t.get()};
  }
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  class bad_function_call : public std::exception
  {
  public:
    virtual ~bad_function_call() noexcept;
    const char* what() const noexcept;
  };
  template <typename _Tp>
  struct __is_location_invariant : is_trivially_copyable<_Tp>::type
  {
  };
  class _Undefined_class;
  union _Nocopy_types
  {
    void* _M_object;
    const void* _M_const_object;
    void (*_M_function_pointer)();
    void (_Undefined_class::*_M_member_pointer)();
  };
  union [[gnu::may_alias]] _Any_data
  {
    void* _M_access() { return &_M_pod_data[0]; }
    const void* _M_access() const { return &_M_pod_data[0]; }
    template <typename _Tp>
    _Tp& _M_access()
    {
      return *static_cast<_Tp*>(_M_access());
    }
    template <typename _Tp>
    const _Tp& _M_access() const
    {
      return *static_cast<const _Tp*>(_M_access());
    }
    _Nocopy_types _M_unused;
    char _M_pod_data[sizeof(_Nocopy_types)];
  };
  enum _Manager_operation
  {
    __get_type_info,
    __get_functor_ptr,
    __clone_functor,
    __destroy_functor
  };
  template <typename _Tp>
  struct _Simple_type_wrapper
  {
    _Simple_type_wrapper(_Tp __value) : __value(__value) {}
    _Tp __value;
  };
  template <typename _Tp>
  struct __is_location_invariant<_Simple_type_wrapper<_Tp>> : __is_location_invariant<_Tp>
  {
  };
  template <typename _Signature>
  class function;
  class _Function_base
  {
  public:
    static const size_t _M_max_size = sizeof(_Nocopy_types);
    static const size_t _M_max_align = __alignof__(_Nocopy_types);
    template <typename _Functor>
    class _Base_manager
    {
    protected:
      static const bool __stored_locally =
          (__is_location_invariant<_Functor>::value && sizeof(_Functor) <= _M_max_size &&
           __alignof__(_Functor) <= _M_max_align && (_M_max_align % __alignof__(_Functor) == 0));
      typedef integral_constant<bool, __stored_locally> _Local_storage;
      static _Functor* _M_get_pointer(const _Any_data& __source)
      {
        if constexpr (__stored_locally)
        {
          const _Functor& __f = __source._M_access<_Functor>();
          return const_cast<_Functor*>(std::__addressof(__f));
        }
        else
          return __source._M_access<_Functor*>();
      }
      static void _M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
      {
        ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
      }
      static void _M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
      {
        __dest._M_access<_Functor*>() = new _Functor(*__source._M_access<const _Functor*>());
      }
      static void _M_destroy(_Any_data& __victim, true_type) { __victim._M_access<_Functor>().~_Functor(); }
      static void _M_destroy(_Any_data& __victim, false_type) { delete __victim._M_access<_Functor*>(); }

    public:
      static bool _M_manager(_Any_data& __dest, const _Any_data& __source, _Manager_operation __op)
      {
        switch (__op)
        {
          case __get_type_info:
            __dest._M_access<const type_info*>() = &typeid(_Functor);
            break;
          case __get_functor_ptr:
            __dest._M_access<_Functor*>() = _M_get_pointer(__source);
            break;
          case __clone_functor:
            _M_clone(__dest, __source, _Local_storage());
            break;
          case __destroy_functor:
            _M_destroy(__dest, _Local_storage());
            break;
        }
        return false;
      }
      static void _M_init_functor(_Any_data& __functor, _Functor&& __f)
      {
        _M_init_functor(__functor, std::move(__f), _Local_storage());
      }
      template <typename _Signature>
      static bool _M_not_empty_function(const function<_Signature>& __f)
      {
        return static_cast<bool>(__f);
      }
      template <typename _Tp>
      static bool _M_not_empty_function(_Tp* __fp)
      {
        return __fp != nullptr;
      }
      template <typename _Class, typename _Tp>
      static bool _M_not_empty_function(_Tp _Class::*__mp)
      {
        return __mp != nullptr;
      }
      template <typename _Tp>
      static bool _M_not_empty_function(const _Tp&)
      {
        return true;
      }

    private:
      static void _M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
      {
        ::new (__functor._M_access()) _Functor(std::move(__f));
      }
      static void _M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
      {
        __functor._M_access<_Functor*>() = new _Functor(std::move(__f));
      }
    };
    _Function_base() : _M_manager(nullptr) {}
    ~_Function_base()
    {
      if (_M_manager)
        _M_manager(_M_functor, _M_functor, __destroy_functor);
    }
    bool _M_empty() const { return !_M_manager; }
    typedef bool (*_Manager_type)(_Any_data&, const _Any_data&, _Manager_operation);
    _Any_data _M_functor;
    _Manager_type _M_manager;
  };
  template <typename _Signature, typename _Functor>
  class _Function_handler;
  template <typename _Res, typename _Functor, typename... _ArgTypes>
  class _Function_handler<_Res(_ArgTypes...), _Functor> : public _Function_base::_Base_manager<_Functor>
  {
    typedef _Function_base::_Base_manager<_Functor> _Base;

  public:
    static _Res _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
    {
      return (*_Base::_M_get_pointer(__functor))(std::forward<_ArgTypes>(__args)...);
    }
  };
  template <typename _Functor, typename... _ArgTypes>
  class _Function_handler<void(_ArgTypes...), _Functor> : public _Function_base::_Base_manager<_Functor>
  {
    typedef _Function_base::_Base_manager<_Functor> _Base;

  public:
    static void _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
    {
      (*_Base::_M_get_pointer(__functor))(std::forward<_ArgTypes>(__args)...);
    }
  };
  template <typename _Class, typename _Member, typename _Res, typename... _ArgTypes>
  class _Function_handler<_Res(_ArgTypes...), _Member _Class::*>
      : public _Function_handler<void(_ArgTypes...), _Member _Class::*>
  {
    typedef _Function_handler<void(_ArgTypes...), _Member _Class::*> _Base;

  public:
    static _Res _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
    {
      return std::__invoke(_Base::_M_get_pointer(__functor)->__value, std::forward<_ArgTypes>(__args)...);
    }
  };
  template <typename _Class, typename _Member, typename... _ArgTypes>
  class _Function_handler<void(_ArgTypes...), _Member _Class::*>
      : public _Function_base::_Base_manager<_Simple_type_wrapper<_Member _Class::*>>
  {
    typedef _Member _Class::*_Functor;
    typedef _Simple_type_wrapper<_Functor> _Wrapper;
    typedef _Function_base::_Base_manager<_Wrapper> _Base;

  public:
    static bool _M_manager(_Any_data& __dest, const _Any_data& __source, _Manager_operation __op)
    {
      switch (__op)
      {
        case __get_type_info:
          __dest._M_access<const type_info*>() = &typeid(_Functor);
          break;
        case __get_functor_ptr:
          __dest._M_access<_Functor*>() = &_Base::_M_get_pointer(__source)->__value;
          break;
        default:
          _Base::_M_manager(__dest, __source, __op);
      }
      return false;
    }
    static void _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
    {
      std::__invoke(_Base::_M_get_pointer(__functor)->__value, std::forward<_ArgTypes>(__args)...);
    }
  };
  template <typename _Res, typename... _ArgTypes>
  class function<_Res(_ArgTypes...)> : public _Maybe_unary_or_binary_function<_Res, _ArgTypes...>,
                                       private _Function_base
  {
    template <typename _Func, typename _Res2 = __invoke_result<_Func&, _ArgTypes...>>
    struct _Callable : __is_invocable_impl<_Res2, _Res>::type
    {
    };
    template <typename _Tp>
    struct _Callable<function, _Tp> : false_type
    {
    };
    template <typename _Cond, typename _Tp>
    using _Requires = typename enable_if<_Cond::value, _Tp>::type;

  public:
    typedef _Res result_type;
    function() noexcept : _Function_base() {}
    function(nullptr_t) noexcept : _Function_base() {}
    function(const function& __x);
    function(function&& __x) noexcept : _Function_base() { __x.swap(*this); }
    template <typename _Functor,
              typename = _Requires<__not_<is_same<_Functor, function>>, void>,
              typename = _Requires<_Callable<_Functor>, void>>
    function(_Functor);
    function& operator=(const function& __x)
    {
      function(__x).swap(*this);
      return *this;
    }
    function& operator=(function&& __x) noexcept
    {
      function(std::move(__x)).swap(*this);
      return *this;
    }
    function& operator=(nullptr_t) noexcept
    {
      if (_M_manager)
      {
        _M_manager(_M_functor, _M_functor, __destroy_functor);
        _M_manager = nullptr;
        _M_invoker = nullptr;
      }
      return *this;
    }
    template <typename _Functor>
    _Requires<_Callable<typename decay<_Functor>::type>, function&> operator=(_Functor&& __f)
    {
      function(std::forward<_Functor>(__f)).swap(*this);
      return *this;
    }
    template <typename _Functor>
    function& operator=(reference_wrapper<_Functor> __f) noexcept
    {
      function(__f).swap(*this);
      return *this;
    }
    void swap(function& __x) noexcept
    {
      std::swap(_M_functor, __x._M_functor);
      std::swap(_M_manager, __x._M_manager);
      std::swap(_M_invoker, __x._M_invoker);
    }
    explicit operator bool() const noexcept { return !_M_empty(); }
    _Res operator()(_ArgTypes... __args) const;
    const type_info& target_type() const noexcept;
    template <typename _Functor>
    _Functor* target() noexcept;
    template <typename _Functor>
    const _Functor* target() const noexcept;

  private:
    using _Invoker_type = _Res (*)(const _Any_data&, _ArgTypes&&...);
    _Invoker_type _M_invoker;
  };
  template <typename>
  struct __function_guide_helper
  {
  };
  template <typename _Res, typename _Tp, bool _Nx, typename... _Args>
  struct __function_guide_helper<_Res (_Tp::*)(_Args...) noexcept(_Nx)>
  {
    using type = _Res(_Args...);
  };
  template <typename _Res, typename _Tp, bool _Nx, typename... _Args>
  struct __function_guide_helper<_Res (_Tp::*)(_Args...)& noexcept(_Nx)>
  {
    using type = _Res(_Args...);
  };
  template <typename _Res, typename _Tp, bool _Nx, typename... _Args>
  struct __function_guide_helper<_Res (_Tp::*)(_Args...) const noexcept(_Nx)>
  {
    using type = _Res(_Args...);
  };
  template <typename _Res, typename _Tp, bool _Nx, typename... _Args>
  struct __function_guide_helper<_Res (_Tp::*)(_Args...) const& noexcept(_Nx)>
  {
    using type = _Res(_Args...);
  };
  template <typename _Res, typename... _ArgTypes>
  function(_Res(*)(_ArgTypes...)) -> function<_Res(_ArgTypes...)>;
  template <typename _Functor,
            typename _Signature = typename __function_guide_helper<decltype(&_Functor::operator())>::type>
  function(_Functor) -> function<_Signature>;
  template <typename _Res, typename... _ArgTypes>
  function<_Res(_ArgTypes...)>::function(const function& __x) : _Function_base()
  {
    if (static_cast<bool>(__x))
    {
      __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
      _M_invoker = __x._M_invoker;
      _M_manager = __x._M_manager;
    }
  }
  template <typename _Res, typename... _ArgTypes>
  template <typename _Functor, typename, typename>
  function<_Res(_ArgTypes...)>::function(_Functor __f) : _Function_base()
  {
    typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;
    if (_My_handler::_M_not_empty_function(__f))
    {
      _My_handler::_M_init_functor(_M_functor, std::move(__f));
      _M_invoker = &_My_handler::_M_invoke;
      _M_manager = &_My_handler::_M_manager;
    }
  }
  template <typename _Res, typename... _ArgTypes>
  _Res function<_Res(_ArgTypes...)>::operator()(_ArgTypes... __args) const
  {
    if (_M_empty())
      __throw_bad_function_call();
    return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
  }
  template <typename _Res, typename... _ArgTypes>
  const type_info& function<_Res(_ArgTypes...)>::target_type() const noexcept
  {
    if (_M_manager)
    {
      _Any_data __typeinfo_result;
      _M_manager(__typeinfo_result, _M_functor, __get_type_info);
      return *__typeinfo_result._M_access<const type_info*>();
    }
    else
      return typeid(void);
  }
  template <typename _Res, typename... _ArgTypes>
  template <typename _Functor>
  _Functor* function<_Res(_ArgTypes...)>::target() noexcept
  {
    const function* __const_this = this;
    const _Functor* __func = __const_this->template target<_Functor>();
    return const_cast<_Functor*>(__func);
  }
  template <typename _Res, typename... _ArgTypes>
  template <typename _Functor>
  const _Functor* function<_Res(_ArgTypes...)>::target() const noexcept
  {
    if (typeid(_Functor) == target_type() && _M_manager)
    {
      _Any_data __ptr;
      _M_manager(__ptr, _M_functor, __get_functor_ptr);
      return __ptr._M_access<const _Functor*>();
    }
    else
      return nullptr;
  }
  template <typename _Res, typename... _Args>
  inline bool operator==(const function<_Res(_Args...)>& __f, nullptr_t) noexcept
  {
    return !static_cast<bool>(__f);
  }
  template <typename _Res, typename... _Args>
  inline bool operator==(nullptr_t, const function<_Res(_Args...)>& __f) noexcept
  {
    return !static_cast<bool>(__f);
  }
  template <typename _Res, typename... _Args>
  inline bool operator!=(const function<_Res(_Args...)>& __f, nullptr_t) noexcept
  {
    return static_cast<bool>(__f);
  }
  template <typename _Res, typename... _Args>
  inline bool operator!=(nullptr_t, const function<_Res(_Args...)>& __f) noexcept
  {
    return static_cast<bool>(__f);
  }
  template <typename _Res, typename... _Args>
  inline void swap(function<_Res(_Args...)> & __x, function<_Res(_Args...)> & __y) noexcept
  {
    __x.swap(__y);
  }
  namespace __detail::__variant
  {
  template <typename>
  struct _Never_valueless_alt;
  template <typename _Signature>
  struct _Never_valueless_alt<std::function<_Signature>> : std::true_type
  {
  };
  }  // namespace __detail::__variant
}  // namespace )
namespace __gnu_cxx
{
template <typename _Tp>
struct __aligned_membuf
{
  struct _Tp2
  {
    _Tp _M_t;
  };
  alignas(__alignof__(_Tp2::_M_t)) unsigned char _M_storage[sizeof(_Tp)];
  __aligned_membuf() = default;
  __aligned_membuf(std::nullptr_t) {}
  void* _M_addr() noexcept { return static_cast<void*>(&_M_storage); }
  const void* _M_addr() const noexcept { return static_cast<const void*>(&_M_storage); }
  _Tp* _M_ptr() noexcept { return static_cast<_Tp*>(_M_addr()); }
  const _Tp* _M_ptr() const noexcept { return static_cast<const _Tp*>(_M_addr()); }
};
template <typename _Tp>
struct __aligned_buffer : std::aligned_storage<sizeof(_Tp), __alignof__(_Tp)>
{
  typename std::aligned_storage<sizeof(_Tp), __alignof__(_Tp)>::type _M_storage;
  __aligned_buffer() = default;
  __aligned_buffer(std::nullptr_t) {}
  void* _M_addr() noexcept { return static_cast<void*>(&_M_storage); }
  const void* _M_addr() const noexcept { return static_cast<const void*>(&_M_storage); }
  _Tp* _M_ptr() noexcept { return static_cast<_Tp*>(_M_addr()); }
  const _Tp* _M_ptr() const noexcept { return static_cast<const _Tp*>(_M_addr()); }
};
}  // namespace __gnu_cxx
namespace std __attribute__((__visibility__("default")))
{
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  class _Hashtable;
  namespace __detail
  {
  template <typename _Key,
            typename _Value,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _Traits>
  struct _Hashtable_base;
  template <class _Iterator>
  inline typename std::iterator_traits<_Iterator>::difference_type __distance_fw(_Iterator __first,
                                                                                 _Iterator __last,
                                                                                 std::input_iterator_tag)
  {
    return __first != __last ? 1 : 0;
  }
  template <class _Iterator>
  inline typename std::iterator_traits<_Iterator>::difference_type __distance_fw(_Iterator __first,
                                                                                 _Iterator __last,
                                                                                 std::forward_iterator_tag)
  {
    return std::distance(__first, __last);
  }
  template <class _Iterator>
  inline typename std::iterator_traits<_Iterator>::difference_type __distance_fw(_Iterator __first, _Iterator __last)
  {
    return __distance_fw(__first, __last, std::__iterator_category(__first));
  }
  struct _Identity
  {
    template <typename _Tp>
    _Tp&& operator()(_Tp&& __x) const
    {
      return std::forward<_Tp>(__x);
    }
  };
  struct _Select1st
  {
    template <typename _Tp>
    auto operator()(_Tp&& __x) const -> decltype(std::get<0>(std::forward<_Tp>(__x)))
    {
      return std::get<0>(std::forward<_Tp>(__x));
    }
  };
  template <typename _NodeAlloc>
  struct _Hashtable_alloc;
  template <typename _NodeAlloc>
  struct _ReuseOrAllocNode
  {
  private:
    using __node_alloc_type = _NodeAlloc;
    using __hashtable_alloc = _Hashtable_alloc<__node_alloc_type>;
    using __node_alloc_traits = typename __hashtable_alloc::__node_alloc_traits;
    using __node_type = typename __hashtable_alloc::__node_type;

  public:
    _ReuseOrAllocNode(__node_type* __nodes, __hashtable_alloc& __h) : _M_nodes(__nodes), _M_h(__h) {}
    _ReuseOrAllocNode(const _ReuseOrAllocNode&) = delete;
    ~_ReuseOrAllocNode() { _M_h._M_deallocate_nodes(_M_nodes); }
    template <typename _Arg>
    __node_type* operator()(_Arg&& __arg) const
    {
      if (_M_nodes)
      {
        __node_type* __node = _M_nodes;
        _M_nodes = _M_nodes->_M_next();
        __node->_M_nxt = nullptr;
        auto& __a = _M_h._M_node_allocator();
        __node_alloc_traits::destroy(__a, __node->_M_valptr());
        try
        {
          __node_alloc_traits::construct(__a, __node->_M_valptr(), std::forward<_Arg>(__arg));
        }
        catch (...)
        {
          _M_h._M_deallocate_node_ptr(__node);
          throw;
        }
        return __node;
      }
      return _M_h._M_allocate_node(std::forward<_Arg>(__arg));
    }

  private:
    mutable __node_type* _M_nodes;
    __hashtable_alloc& _M_h;
  };
  template <typename _NodeAlloc>
  struct _AllocNode
  {
  private:
    using __hashtable_alloc = _Hashtable_alloc<_NodeAlloc>;
    using __node_type = typename __hashtable_alloc::__node_type;

  public:
    _AllocNode(__hashtable_alloc& __h) : _M_h(__h) {}
    template <typename _Arg>
    __node_type* operator()(_Arg&& __arg) const
    {
      return _M_h._M_allocate_node(std::forward<_Arg>(__arg));
    }

  private:
    __hashtable_alloc& _M_h;
  };
  template <bool _Cache_hash_code, bool _Constant_iterators, bool _Unique_keys>
  struct _Hashtable_traits
  {
    using __hash_cached = __bool_constant<_Cache_hash_code>;
    using __constant_iterators = __bool_constant<_Constant_iterators>;
    using __unique_keys = __bool_constant<_Unique_keys>;
  };
  struct _Hash_node_base
  {
    _Hash_node_base* _M_nxt;
    _Hash_node_base() noexcept : _M_nxt() {}
    _Hash_node_base(_Hash_node_base* __next) noexcept : _M_nxt(__next) {}
  };
  template <typename _Value>
  struct _Hash_node_value_base : _Hash_node_base
  {
    typedef _Value value_type;
    __gnu_cxx::__aligned_buffer<_Value> _M_storage;
    _Value* _M_valptr() noexcept { return _M_storage._M_ptr(); }
    const _Value* _M_valptr() const noexcept { return _M_storage._M_ptr(); }
    _Value& _M_v() noexcept { return *_M_valptr(); }
    const _Value& _M_v() const noexcept { return *_M_valptr(); }
  };
  template <typename _Value, bool _Cache_hash_code>
  struct _Hash_node;
  template <typename _Value>
  struct _Hash_node<_Value, true> : _Hash_node_value_base<_Value>
  {
    std::size_t _M_hash_code;
    _Hash_node* _M_next() const noexcept { return static_cast<_Hash_node*>(this->_M_nxt); }
  };
  template <typename _Value>
  struct _Hash_node<_Value, false> : _Hash_node_value_base<_Value>
  {
    _Hash_node* _M_next() const noexcept { return static_cast<_Hash_node*>(this->_M_nxt); }
  };
  template <typename _Value, bool _Cache_hash_code>
  struct _Node_iterator_base
  {
    using __node_type = _Hash_node<_Value, _Cache_hash_code>;
    __node_type* _M_cur;
    _Node_iterator_base(__node_type* __p) noexcept : _M_cur(__p) {}
    void _M_incr() noexcept { _M_cur = _M_cur->_M_next(); }
  };
  template <typename _Value, bool _Cache_hash_code>
  inline bool operator==(const _Node_iterator_base<_Value, _Cache_hash_code>& __x,
                         const _Node_iterator_base<_Value, _Cache_hash_code>& __y) noexcept
  {
    return __x._M_cur == __y._M_cur;
  }
  template <typename _Value, bool _Cache_hash_code>
  inline bool operator!=(const _Node_iterator_base<_Value, _Cache_hash_code>& __x,
                         const _Node_iterator_base<_Value, _Cache_hash_code>& __y) noexcept
  {
    return __x._M_cur != __y._M_cur;
  }
  template <typename _Value, bool __constant_iterators, bool __cache>
  struct _Node_iterator : public _Node_iterator_base<_Value, __cache>
  {
  private:
    using __base_type = _Node_iterator_base<_Value, __cache>;
    using __node_type = typename __base_type::__node_type;

  public:
    typedef _Value value_type;
    typedef std::ptrdiff_t difference_type;
    typedef std::forward_iterator_tag iterator_category;
    using pointer = typename std::conditional<__constant_iterators, const _Value*, _Value*>::type;
    using reference = typename std::conditional<__constant_iterators, const _Value&, _Value&>::type;
    _Node_iterator() noexcept : __base_type(0) {}
    explicit _Node_iterator(__node_type* __p) noexcept : __base_type(__p) {}
    reference operator*() const noexcept { return this->_M_cur->_M_v(); }
    pointer operator->() const noexcept { return this->_M_cur->_M_valptr(); }
    _Node_iterator& operator++() noexcept
    {
      this->_M_incr();
      return *this;
    }
    _Node_iterator operator++(int) noexcept
    {
      _Node_iterator __tmp(*this);
      this->_M_incr();
      return __tmp;
    }
  };
  template <typename _Value, bool __constant_iterators, bool __cache>
  struct _Node_const_iterator : public _Node_iterator_base<_Value, __cache>
  {
  private:
    using __base_type = _Node_iterator_base<_Value, __cache>;
    using __node_type = typename __base_type::__node_type;

  public:
    typedef _Value value_type;
    typedef std::ptrdiff_t difference_type;
    typedef std::forward_iterator_tag iterator_category;
    typedef const _Value* pointer;
    typedef const _Value& reference;
    _Node_const_iterator() noexcept : __base_type(0) {}
    explicit _Node_const_iterator(__node_type* __p) noexcept : __base_type(__p) {}
    _Node_const_iterator(const _Node_iterator<_Value, __constant_iterators, __cache>& __x) noexcept
        : __base_type(__x._M_cur)
    {
    }
    reference operator*() const noexcept { return this->_M_cur->_M_v(); }
    pointer operator->() const noexcept { return this->_M_cur->_M_valptr(); }
    _Node_const_iterator& operator++() noexcept
    {
      this->_M_incr();
      return *this;
    }
    _Node_const_iterator operator++(int) noexcept
    {
      _Node_const_iterator __tmp(*this);
      this->_M_incr();
      return __tmp;
    }
  };
  struct _Mod_range_hashing
  {
    typedef std::size_t first_argument_type;
    typedef std::size_t second_argument_type;
    typedef std::size_t result_type;
    result_type operator()(first_argument_type __num, second_argument_type __den) const noexcept
    {
      return __num % __den;
    }
  };
  struct _Default_ranged_hash
  {
  };
  struct _Prime_rehash_policy
  {
    using __has_load_factor = std::true_type;
    _Prime_rehash_policy(float __z = 1.0) noexcept : _M_max_load_factor(__z), _M_next_resize(0) {}
    float max_load_factor() const noexcept { return _M_max_load_factor; }
    std::size_t _M_next_bkt(std::size_t __n) const;
    std::size_t _M_bkt_for_elements(std::size_t __n) const
    {
      return __builtin_ceil(__n / (long double)_M_max_load_factor);
    }
    std::pair<bool, std::size_t> _M_need_rehash(std::size_t __n_bkt, std::size_t __n_elt, std::size_t __n_ins) const;
    typedef std::size_t _State;
    _State _M_state() const { return _M_next_resize; }
    void _M_reset() noexcept { _M_next_resize = 0; }
    void _M_reset(_State __state) { _M_next_resize = __state; }
    static const std::size_t _S_growth_factor = 2;
    float _M_max_load_factor;
    mutable std::size_t _M_next_resize;
  };
  struct _Mask_range_hashing
  {
    typedef std::size_t first_argument_type;
    typedef std::size_t second_argument_type;
    typedef std::size_t result_type;
    result_type operator()(first_argument_type __num, second_argument_type __den) const noexcept
    {
      return __num & (__den - 1);
    }
  };
  inline std::size_t __clp2(std::size_t __n) noexcept
  {
    if (__n < 2)
      return __n;
    const unsigned __lz = sizeof(size_t) > sizeof(long) ? __builtin_clzll(__n - 1ull) : __builtin_clzl(__n - 1ul);
    return (size_t(1) << (numeric_limits<size_t>::digits - __lz - 1)) << 1;
  }
  struct _Power2_rehash_policy
  {
    using __has_load_factor = std::true_type;
    _Power2_rehash_policy(float __z = 1.0) noexcept : _M_max_load_factor(__z), _M_next_resize(0) {}
    float max_load_factor() const noexcept { return _M_max_load_factor; }
    std::size_t _M_next_bkt(std::size_t __n) noexcept
    {
      const auto __max_width = std::min<size_t>(sizeof(size_t), 8);
      const auto __max_bkt = size_t(1) << (__max_width * 8 - 1);
      std::size_t __res = __clp2(__n);
      if (__res == __n)
        __res <<= 1;
      if (__res == 0)
        __res = __max_bkt;
      if (__res == __max_bkt)
        _M_next_resize = std::size_t(-1);
      else
        _M_next_resize = __builtin_ceil(__res * (long double)_M_max_load_factor);
      return __res;
    }
    std::size_t _M_bkt_for_elements(std::size_t __n) const noexcept
    {
      return __builtin_ceil(__n / (long double)_M_max_load_factor);
    }
    std::pair<bool, std::size_t> _M_need_rehash(std::size_t __n_bkt, std::size_t __n_elt, std::size_t __n_ins) noexcept
    {
      if (__n_elt + __n_ins >= _M_next_resize)
      {
        long double __min_bkts = (__n_elt + __n_ins) / (long double)_M_max_load_factor;
        if (__min_bkts >= __n_bkt)
          return std::make_pair(
              true, _M_next_bkt(std::max<std::size_t>(__builtin_floor(__min_bkts) + 1, __n_bkt * _S_growth_factor)));
        _M_next_resize = __builtin_floor(__n_bkt * (long double)_M_max_load_factor);
        return std::make_pair(false, 0);
      }
      else
        return std::make_pair(false, 0);
    }
    typedef std::size_t _State;
    _State _M_state() const noexcept { return _M_next_resize; }
    void _M_reset() noexcept { _M_next_resize = 0; }
    void _M_reset(_State __state) noexcept { _M_next_resize = __state; }
    static const std::size_t _S_growth_factor = 2;
    float _M_max_load_factor;
    std::size_t _M_next_resize;
  };
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits,
            bool _Unique_keys = _Traits::__unique_keys::value>
  struct _Map_base
  {
  };
  template <typename _Key,
            typename _Pair,
            typename _Alloc,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  struct _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits, false>
  {
    using mapped_type = typename std::tuple_element<1, _Pair>::type;
  };
  template <typename _Key,
            typename _Pair,
            typename _Alloc,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  struct _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits, true>
  {
  private:
    using __hashtable_base = __detail::_Hashtable_base<_Key, _Pair, _Select1st, _Equal, _H1, _H2, _Hash, _Traits>;
    using __hashtable = _Hashtable<_Key, _Pair, _Alloc, _Select1st, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>;
    using __hash_code = typename __hashtable_base::__hash_code;
    using __node_type = typename __hashtable_base::__node_type;

  public:
    using key_type = typename __hashtable_base::key_type;
    using iterator = typename __hashtable_base::iterator;
    using mapped_type = typename std::tuple_element<1, _Pair>::type;
    mapped_type& operator[](const key_type& __k);
    mapped_type& operator[](key_type&& __k);
    mapped_type& at(const key_type& __k);
    const mapped_type& at(const key_type& __k) const;
  };
  template <typename _Key,
            typename _Pair,
            typename _Alloc,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  auto _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits, true>::operator[](
      const key_type& __k) -> mapped_type&
  {
    __hashtable* __h = static_cast<__hashtable*>(this);
    __hash_code __code = __h->_M_hash_code(__k);
    std::size_t __n = __h->_M_bucket_index(__k, __code);
    __node_type* __p = __h->_M_find_node(__n, __k, __code);
    if (!__p)
    {
      __p = __h->_M_allocate_node(std::piecewise_construct, std::tuple<const key_type&>(__k), std::tuple<>());
      return __h->_M_insert_unique_node(__n, __code, __p)->second;
    }
    return __p->_M_v().second;
  }
  template <typename _Key,
            typename _Pair,
            typename _Alloc,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  auto _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits, true>::operator[](
      key_type&& __k) -> mapped_type&
  {
    __hashtable* __h = static_cast<__hashtable*>(this);
    __hash_code __code = __h->_M_hash_code(__k);
    std::size_t __n = __h->_M_bucket_index(__k, __code);
    __node_type* __p = __h->_M_find_node(__n, __k, __code);
    if (!__p)
    {
      __p = __h->_M_allocate_node(std::piecewise_construct, std::forward_as_tuple(std::move(__k)), std::tuple<>());
      return __h->_M_insert_unique_node(__n, __code, __p)->second;
    }
    return __p->_M_v().second;
  }
  template <typename _Key,
            typename _Pair,
            typename _Alloc,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  auto _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits, true>::at(
      const key_type& __k) -> mapped_type&
  {
    __hashtable* __h = static_cast<__hashtable*>(this);
    __hash_code __code = __h->_M_hash_code(__k);
    std::size_t __n = __h->_M_bucket_index(__k, __code);
    __node_type* __p = __h->_M_find_node(__n, __k, __code);
    if (!__p)
      __throw_out_of_range(("_Map_base::at"));
    return __p->_M_v().second;
  }
  template <typename _Key,
            typename _Pair,
            typename _Alloc,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  auto _Map_base<_Key, _Pair, _Alloc, _Select1st, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits, true>::at(
      const key_type& __k) const -> const mapped_type&
  {
    const __hashtable* __h = static_cast<const __hashtable*>(this);
    __hash_code __code = __h->_M_hash_code(__k);
    std::size_t __n = __h->_M_bucket_index(__k, __code);
    __node_type* __p = __h->_M_find_node(__n, __k, __code);
    if (!__p)
      __throw_out_of_range(("_Map_base::at"));
    return __p->_M_v().second;
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  struct _Insert_base
  {
  protected:
    using __hashtable = _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>;
    using __hashtable_base = _Hashtable_base<_Key, _Value, _ExtractKey, _Equal, _H1, _H2, _Hash, _Traits>;
    using value_type = typename __hashtable_base::value_type;
    using iterator = typename __hashtable_base::iterator;
    using const_iterator = typename __hashtable_base::const_iterator;
    using size_type = typename __hashtable_base::size_type;
    using __unique_keys = typename __hashtable_base::__unique_keys;
    using __ireturn_type = typename __hashtable_base::__ireturn_type;
    using __node_type = _Hash_node<_Value, _Traits::__hash_cached::value>;
    using __node_alloc_type = __alloc_rebind<_Alloc, __node_type>;
    using __node_gen_type = _AllocNode<__node_alloc_type>;
    __hashtable& _M_conjure_hashtable() { return *(static_cast<__hashtable*>(this)); }
    template <typename _InputIterator, typename _NodeGetter>
    void _M_insert_range(_InputIterator __first, _InputIterator __last, const _NodeGetter&, true_type);
    template <typename _InputIterator, typename _NodeGetter>
    void _M_insert_range(_InputIterator __first, _InputIterator __last, const _NodeGetter&, false_type);

  public:
    __ireturn_type insert(const value_type& __v)
    {
      __hashtable& __h = _M_conjure_hashtable();
      __node_gen_type __node_gen(__h);
      return __h._M_insert(__v, __node_gen, __unique_keys());
    }
    iterator insert(const_iterator __hint, const value_type& __v)
    {
      __hashtable& __h = _M_conjure_hashtable();
      __node_gen_type __node_gen(__h);
      return __h._M_insert(__hint, __v, __node_gen, __unique_keys());
    }
    void insert(initializer_list<value_type> __l) { this->insert(__l.begin(), __l.end()); }
    template <typename _InputIterator>
    void insert(_InputIterator __first, _InputIterator __last)
    {
      __hashtable& __h = _M_conjure_hashtable();
      __node_gen_type __node_gen(__h);
      return _M_insert_range(__first, __last, __node_gen, __unique_keys());
    }
  };
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  template <typename _InputIterator, typename _NodeGetter>
  void
  _Insert_base<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::_M_insert_range(
      _InputIterator __first,
      _InputIterator __last,
      const _NodeGetter& __node_gen,
      true_type)
  {
    size_type __n_elt = __detail::__distance_fw(__first, __last);
    if (__n_elt == 0)
      return;
    __hashtable& __h = _M_conjure_hashtable();
    for (; __first != __last; ++__first)
    {
      if (__h._M_insert(*__first, __node_gen, __unique_keys(), __n_elt).second)
        __n_elt = 1;
      else if (__n_elt != 1)
        --__n_elt;
    }
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  template <typename _InputIterator, typename _NodeGetter>
  void
  _Insert_base<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::_M_insert_range(
      _InputIterator __first,
      _InputIterator __last,
      const _NodeGetter& __node_gen,
      false_type)
  {
    using __rehash_type = typename __hashtable::__rehash_type;
    using __rehash_state = typename __hashtable::__rehash_state;
    using pair_type = std::pair<bool, std::size_t>;
    size_type __n_elt = __detail::__distance_fw(__first, __last);
    if (__n_elt == 0)
      return;
    __hashtable& __h = _M_conjure_hashtable();
    __rehash_type& __rehash = __h._M_rehash_policy;
    const __rehash_state& __saved_state = __rehash._M_state();
    pair_type __do_rehash = __rehash._M_need_rehash(__h._M_bucket_count, __h._M_element_count, __n_elt);
    if (__do_rehash.first)
      __h._M_rehash(__do_rehash.second, __saved_state);
    for (; __first != __last; ++__first)
      __h._M_insert(*__first, __node_gen, __unique_keys());
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits,
            bool _Constant_iterators = _Traits::__constant_iterators::value>
  struct _Insert;
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  struct _Insert<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits, true>
      : public _Insert_base<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>
  {
    using __base_type =
        _Insert_base<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>;
    using __hashtable_base = _Hashtable_base<_Key, _Value, _ExtractKey, _Equal, _H1, _H2, _Hash, _Traits>;
    using value_type = typename __base_type::value_type;
    using iterator = typename __base_type::iterator;
    using const_iterator = typename __base_type::const_iterator;
    using __unique_keys = typename __base_type::__unique_keys;
    using __ireturn_type = typename __hashtable_base::__ireturn_type;
    using __hashtable = typename __base_type::__hashtable;
    using __node_gen_type = typename __base_type::__node_gen_type;
    using __base_type::insert;
    __ireturn_type insert(value_type&& __v)
    {
      __hashtable& __h = this->_M_conjure_hashtable();
      __node_gen_type __node_gen(__h);
      return __h._M_insert(std::move(__v), __node_gen, __unique_keys());
    }
    iterator insert(const_iterator __hint, value_type&& __v)
    {
      __hashtable& __h = this->_M_conjure_hashtable();
      __node_gen_type __node_gen(__h);
      return __h._M_insert(__hint, std::move(__v), __node_gen, __unique_keys());
    }
  };
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  struct _Insert<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits, false>
      : public _Insert_base<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>
  {
    using __base_type =
        _Insert_base<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>;
    using value_type = typename __base_type::value_type;
    using iterator = typename __base_type::iterator;
    using const_iterator = typename __base_type::const_iterator;
    using __unique_keys = typename __base_type::__unique_keys;
    using __hashtable = typename __base_type::__hashtable;
    using __ireturn_type = typename __base_type::__ireturn_type;
    using __base_type::insert;
    template <typename _Pair>
    using __is_cons = std::is_constructible<value_type, _Pair&&>;
    template <typename _Pair>
    using _IFcons = std::enable_if<__is_cons<_Pair>::value>;
    template <typename _Pair>
    using _IFconsp = typename _IFcons<_Pair>::type;
    template <typename _Pair, typename = _IFconsp<_Pair>>
    __ireturn_type insert(_Pair&& __v)
    {
      __hashtable& __h = this->_M_conjure_hashtable();
      return __h._M_emplace(__unique_keys(), std::forward<_Pair>(__v));
    }
    template <typename _Pair, typename = _IFconsp<_Pair>>
    iterator insert(const_iterator __hint, _Pair&& __v)
    {
      __hashtable& __h = this->_M_conjure_hashtable();
      return __h._M_emplace(__hint, __unique_keys(), std::forward<_Pair>(__v));
    }
  };
  template <typename _Policy>
  using __has_load_factor = typename _Policy::__has_load_factor;
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits,
            typename = __detected_or_t<std::false_type, __has_load_factor, _RehashPolicy>>
  struct _Rehash_base;
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  struct _Rehash_base<_Key,
                      _Value,
                      _Alloc,
                      _ExtractKey,
                      _Equal,
                      _H1,
                      _H2,
                      _Hash,
                      _RehashPolicy,
                      _Traits,
                      std::false_type>
  {
  };
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  struct _Rehash_base<_Key,
                      _Value,
                      _Alloc,
                      _ExtractKey,
                      _Equal,
                      _H1,
                      _H2,
                      _Hash,
                      _RehashPolicy,
                      _Traits,
                      std::true_type>
  {
    using __hashtable = _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>;
    float max_load_factor() const noexcept
    {
      const __hashtable* __this = static_cast<const __hashtable*>(this);
      return __this->__rehash_policy().max_load_factor();
    }
    void max_load_factor(float __z)
    {
      __hashtable* __this = static_cast<__hashtable*>(this);
      __this->__rehash_policy(_RehashPolicy(__z));
    }
    void reserve(std::size_t __n)
    {
      __hashtable* __this = static_cast<__hashtable*>(this);
      __this->rehash(__builtin_ceil(__n / max_load_factor()));
    }
  };
  template <int _Nm, typename _Tp, bool __use_ebo = !__is_final(_Tp) && __is_empty(_Tp)>
  struct _Hashtable_ebo_helper;
  template <int _Nm, typename _Tp>
  struct _Hashtable_ebo_helper<_Nm, _Tp, true> : private _Tp
  {
    _Hashtable_ebo_helper() = default;
    template <typename _OtherTp>
    _Hashtable_ebo_helper(_OtherTp&& __tp) : _Tp(std::forward<_OtherTp>(__tp))
    {
    }
    static const _Tp& _S_cget(const _Hashtable_ebo_helper& __eboh) { return static_cast<const _Tp&>(__eboh); }
    static _Tp& _S_get(_Hashtable_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
  };
  template <int _Nm, typename _Tp>
  struct _Hashtable_ebo_helper<_Nm, _Tp, false>
  {
    _Hashtable_ebo_helper() = default;
    template <typename _OtherTp>
    _Hashtable_ebo_helper(_OtherTp&& __tp) : _M_tp(std::forward<_OtherTp>(__tp))
    {
    }
    static const _Tp& _S_cget(const _Hashtable_ebo_helper& __eboh) { return __eboh._M_tp; }
    static _Tp& _S_get(_Hashtable_ebo_helper& __eboh) { return __eboh._M_tp; }

  private:
    _Tp _M_tp;
  };
  template <typename _Key,
            typename _Value,
            typename _ExtractKey,
            typename _H1,
            typename _H2,
            typename _Hash,
            bool __cache_hash_code>
  struct _Local_iterator_base;
  template <typename _Key,
            typename _Value,
            typename _ExtractKey,
            typename _H1,
            typename _H2,
            typename _Hash,
            bool __cache_hash_code>
  struct _Hash_code_base;
  template <typename _Key, typename _Value, typename _ExtractKey, typename _H1, typename _H2, typename _Hash>
  struct _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash, false>
      : private _Hashtable_ebo_helper<0, _ExtractKey>, private _Hashtable_ebo_helper<1, _Hash>
  {
  private:
    using __ebo_extract_key = _Hashtable_ebo_helper<0, _ExtractKey>;
    using __ebo_hash = _Hashtable_ebo_helper<1, _Hash>;

  protected:
    typedef void* __hash_code;
    typedef _Hash_node<_Value, false> __node_type;
    _Hash_code_base() = default;
    _Hash_code_base(const _ExtractKey& __ex, const _H1&, const _H2&, const _Hash& __h)
        : __ebo_extract_key(__ex), __ebo_hash(__h)
    {
    }
    __hash_code _M_hash_code(const _Key& __key) const { return 0; }
    std::size_t _M_bucket_index(const _Key& __k, __hash_code, std::size_t __n) const
    {
      return _M_ranged_hash()(__k, __n);
    }
    std::size_t _M_bucket_index(const __node_type* __p, std::size_t __n) const
        noexcept(noexcept(declval<const _Hash&>()(declval<const _Key&>(), (std::size_t)0)))
    {
      return _M_ranged_hash()(_M_extract()(__p->_M_v()), __n);
    }
    void _M_store_code(__node_type*, __hash_code) const {}
    void _M_copy_code(__node_type*, const __node_type*) const {}
    void _M_swap(_Hash_code_base& __x)
    {
      std::swap(_M_extract(), __x._M_extract());
      std::swap(_M_ranged_hash(), __x._M_ranged_hash());
    }
    const _ExtractKey& _M_extract() const { return __ebo_extract_key::_S_cget(*this); }
    _ExtractKey& _M_extract() { return __ebo_extract_key::_S_get(*this); }
    const _Hash& _M_ranged_hash() const { return __ebo_hash::_S_cget(*this); }
    _Hash& _M_ranged_hash() { return __ebo_hash::_S_get(*this); }
  };
  template <typename _Key, typename _Value, typename _ExtractKey, typename _H1, typename _H2, typename _Hash>
  struct _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash, true>;
  template <typename _Key, typename _Value, typename _ExtractKey, typename _H1, typename _H2>
  struct _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2, _Default_ranged_hash, false>
      : private _Hashtable_ebo_helper<0, _ExtractKey>,
        private _Hashtable_ebo_helper<1, _H1>,
        private _Hashtable_ebo_helper<2, _H2>
  {
  private:
    using __ebo_extract_key = _Hashtable_ebo_helper<0, _ExtractKey>;
    using __ebo_h1 = _Hashtable_ebo_helper<1, _H1>;
    using __ebo_h2 = _Hashtable_ebo_helper<2, _H2>;
    friend struct _Local_iterator_base<_Key, _Value, _ExtractKey, _H1, _H2, _Default_ranged_hash, false>;

  public:
    typedef _H1 hasher;
    hasher hash_function() const { return _M_h1(); }

  protected:
    typedef std::size_t __hash_code;
    typedef _Hash_node<_Value, false> __node_type;
    _Hash_code_base() = default;
    _Hash_code_base(const _ExtractKey& __ex, const _H1& __h1, const _H2& __h2, const _Default_ranged_hash&)
        : __ebo_extract_key(__ex), __ebo_h1(__h1), __ebo_h2(__h2)
    {
    }
    __hash_code _M_hash_code(const _Key& __k) const
    {
      static_assert(__is_invocable<const _H1&, const _Key&>{},
                    "hash function must be invocable with an argument of key type");
      return _M_h1()(__k);
    }
    std::size_t _M_bucket_index(const _Key&, __hash_code __c, std::size_t __n) const { return _M_h2()(__c, __n); }
    std::size_t _M_bucket_index(const __node_type* __p, std::size_t __n) const noexcept(noexcept(declval<const _H1&>()(
        declval<const _Key&>())) && noexcept(declval<const _H2&>()((__hash_code)0, (std::size_t)0)))
    {
      return _M_h2()(_M_h1()(_M_extract()(__p->_M_v())), __n);
    }
    void _M_store_code(__node_type*, __hash_code) const {}
    void _M_copy_code(__node_type*, const __node_type*) const {}
    void _M_swap(_Hash_code_base& __x)
    {
      std::swap(_M_extract(), __x._M_extract());
      std::swap(_M_h1(), __x._M_h1());
      std::swap(_M_h2(), __x._M_h2());
    }
    const _ExtractKey& _M_extract() const { return __ebo_extract_key::_S_cget(*this); }
    _ExtractKey& _M_extract() { return __ebo_extract_key::_S_get(*this); }
    const _H1& _M_h1() const { return __ebo_h1::_S_cget(*this); }
    _H1& _M_h1() { return __ebo_h1::_S_get(*this); }
    const _H2& _M_h2() const { return __ebo_h2::_S_cget(*this); }
    _H2& _M_h2() { return __ebo_h2::_S_get(*this); }
  };
  template <typename _Key, typename _Value, typename _ExtractKey, typename _H1, typename _H2>
  struct _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2, _Default_ranged_hash, true>
      : private _Hashtable_ebo_helper<0, _ExtractKey>,
        private _Hashtable_ebo_helper<1, _H1>,
        private _Hashtable_ebo_helper<2, _H2>
  {
  private:
    friend struct _Local_iterator_base<_Key, _Value, _ExtractKey, _H1, _H2, _Default_ranged_hash, true>;
    using __ebo_extract_key = _Hashtable_ebo_helper<0, _ExtractKey>;
    using __ebo_h1 = _Hashtable_ebo_helper<1, _H1>;
    using __ebo_h2 = _Hashtable_ebo_helper<2, _H2>;

  public:
    typedef _H1 hasher;
    hasher hash_function() const { return _M_h1(); }

  protected:
    typedef std::size_t __hash_code;
    typedef _Hash_node<_Value, true> __node_type;
    _Hash_code_base() = default;
    _Hash_code_base(const _ExtractKey& __ex, const _H1& __h1, const _H2& __h2, const _Default_ranged_hash&)
        : __ebo_extract_key(__ex), __ebo_h1(__h1), __ebo_h2(__h2)
    {
    }
    __hash_code _M_hash_code(const _Key& __k) const
    {
      static_assert(__is_invocable<const _H1&, const _Key&>{},
                    "hash function must be invocable with an argument of key type");
      return _M_h1()(__k);
    }
    std::size_t _M_bucket_index(const _Key&, __hash_code __c, std::size_t __n) const { return _M_h2()(__c, __n); }
    std::size_t _M_bucket_index(const __node_type* __p, std::size_t __n) const
        noexcept(noexcept(declval<const _H2&>()((__hash_code)0, (std::size_t)0)))
    {
      return _M_h2()(__p->_M_hash_code, __n);
    }
    void _M_store_code(__node_type* __n, __hash_code __c) const { __n->_M_hash_code = __c; }
    void _M_copy_code(__node_type* __to, const __node_type* __from) const { __to->_M_hash_code = __from->_M_hash_code; }
    void _M_swap(_Hash_code_base& __x)
    {
      std::swap(_M_extract(), __x._M_extract());
      std::swap(_M_h1(), __x._M_h1());
      std::swap(_M_h2(), __x._M_h2());
    }
    const _ExtractKey& _M_extract() const { return __ebo_extract_key::_S_cget(*this); }
    _ExtractKey& _M_extract() { return __ebo_extract_key::_S_get(*this); }
    const _H1& _M_h1() const { return __ebo_h1::_S_cget(*this); }
    _H1& _M_h1() { return __ebo_h1::_S_get(*this); }
    const _H2& _M_h2() const { return __ebo_h2::_S_cget(*this); }
    _H2& _M_h2() { return __ebo_h2::_S_get(*this); }
  };
  template <typename _Key,
            typename _Value,
            typename _ExtractKey,
            typename _Equal,
            typename _HashCodeType,
            bool __cache_hash_code>
  struct _Equal_helper;
  template <typename _Key, typename _Value, typename _ExtractKey, typename _Equal, typename _HashCodeType>
  struct _Equal_helper<_Key, _Value, _ExtractKey, _Equal, _HashCodeType, true>
  {
    static bool _S_equals(const _Equal& __eq,
                          const _ExtractKey& __extract,
                          const _Key& __k,
                          _HashCodeType __c,
                          _Hash_node<_Value, true>* __n)
    {
      return __c == __n->_M_hash_code && __eq(__k, __extract(__n->_M_v()));
    }
  };
  template <typename _Key, typename _Value, typename _ExtractKey, typename _Equal, typename _HashCodeType>
  struct _Equal_helper<_Key, _Value, _ExtractKey, _Equal, _HashCodeType, false>
  {
    static bool _S_equals(const _Equal& __eq,
                          const _ExtractKey& __extract,
                          const _Key& __k,
                          _HashCodeType,
                          _Hash_node<_Value, false>* __n)
    {
      return __eq(__k, __extract(__n->_M_v()));
    }
  };
  template <typename _Key, typename _Value, typename _ExtractKey, typename _H1, typename _H2, typename _Hash>
  struct _Local_iterator_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash, true> : private _Hashtable_ebo_helper<0, _H2>
  {
  protected:
    using __base_type = _Hashtable_ebo_helper<0, _H2>;
    using __hash_code_base = _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash, true>;
    _Local_iterator_base() = default;
    _Local_iterator_base(const __hash_code_base& __base,
                         _Hash_node<_Value, true>* __p,
                         std::size_t __bkt,
                         std::size_t __bkt_count)
        : __base_type(__base._M_h2()), _M_cur(__p), _M_bucket(__bkt), _M_bucket_count(__bkt_count)
    {
    }
    void _M_incr()
    {
      _M_cur = _M_cur->_M_next();
      if (_M_cur)
      {
        std::size_t __bkt = __base_type::_S_get(*this)(_M_cur->_M_hash_code, _M_bucket_count);
        if (__bkt != _M_bucket)
          _M_cur = nullptr;
      }
    }
    _Hash_node<_Value, true>* _M_cur;
    std::size_t _M_bucket;
    std::size_t _M_bucket_count;

  public:
    const void* _M_curr() const { return _M_cur; }
    std::size_t _M_get_bucket() const { return _M_bucket; }
  };
  template <typename _Tp, bool _IsEmpty = std::is_empty<_Tp>::value>
  struct _Hash_code_storage
  {
    __gnu_cxx::__aligned_buffer<_Tp> _M_storage;
    _Tp* _M_h() { return _M_storage._M_ptr(); }
    const _Tp* _M_h() const { return _M_storage._M_ptr(); }
  };
  template <typename _Tp>
  struct _Hash_code_storage<_Tp, true>
  {
    static_assert(std::is_empty<_Tp>::value, "Type must be empty");
    _Tp* _M_h() { return reinterpret_cast<_Tp*>(this); }
    const _Tp* _M_h() const { return reinterpret_cast<const _Tp*>(this); }
  };
  template <typename _Key, typename _Value, typename _ExtractKey, typename _H1, typename _H2, typename _Hash>
  using __hash_code_for_local_iter =
      _Hash_code_storage<_Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash, false>>;
  template <typename _Key, typename _Value, typename _ExtractKey, typename _H1, typename _H2, typename _Hash>
  struct _Local_iterator_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash, false>
      : __hash_code_for_local_iter<_Key, _Value, _ExtractKey, _H1, _H2, _Hash>
  {
  protected:
    using __hash_code_base = _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash, false>;
    _Local_iterator_base() : _M_bucket_count(-1) {}
    _Local_iterator_base(const __hash_code_base& __base,
                         _Hash_node<_Value, false>* __p,
                         std::size_t __bkt,
                         std::size_t __bkt_count)
        : _M_cur(__p), _M_bucket(__bkt), _M_bucket_count(__bkt_count)
    {
      _M_init(__base);
    }
    ~_Local_iterator_base()
    {
      if (_M_bucket_count != -1)
        _M_destroy();
    }
    _Local_iterator_base(const _Local_iterator_base& __iter)
        : _M_cur(__iter._M_cur), _M_bucket(__iter._M_bucket), _M_bucket_count(__iter._M_bucket_count)
    {
      if (_M_bucket_count != -1)
        _M_init(*__iter._M_h());
    }
    _Local_iterator_base& operator=(const _Local_iterator_base& __iter)
    {
      if (_M_bucket_count != -1)
        _M_destroy();
      _M_cur = __iter._M_cur;
      _M_bucket = __iter._M_bucket;
      _M_bucket_count = __iter._M_bucket_count;
      if (_M_bucket_count != -1)
        _M_init(*__iter._M_h());
      return *this;
    }
    void _M_incr()
    {
      _M_cur = _M_cur->_M_next();
      if (_M_cur)
      {
        std::size_t __bkt = this->_M_h()->_M_bucket_index(_M_cur, _M_bucket_count);
        if (__bkt != _M_bucket)
          _M_cur = nullptr;
      }
    }
    _Hash_node<_Value, false>* _M_cur;
    std::size_t _M_bucket;
    std::size_t _M_bucket_count;
    void _M_init(const __hash_code_base& __base) { ::new (this->_M_h()) __hash_code_base(__base); }
    void _M_destroy() { this->_M_h()->~__hash_code_base(); }

  public:
    const void* _M_curr() const { return _M_cur; }
    std::size_t _M_get_bucket() const { return _M_bucket; }
  };
  template <typename _Key,
            typename _Value,
            typename _ExtractKey,
            typename _H1,
            typename _H2,
            typename _Hash,
            bool __cache>
  inline bool operator==(const _Local_iterator_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash, __cache>& __x,
                         const _Local_iterator_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash, __cache>& __y)
  {
    return __x._M_curr() == __y._M_curr();
  }
  template <typename _Key,
            typename _Value,
            typename _ExtractKey,
            typename _H1,
            typename _H2,
            typename _Hash,
            bool __cache>
  inline bool operator!=(const _Local_iterator_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash, __cache>& __x,
                         const _Local_iterator_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash, __cache>& __y)
  {
    return __x._M_curr() != __y._M_curr();
  }
  template <typename _Key,
            typename _Value,
            typename _ExtractKey,
            typename _H1,
            typename _H2,
            typename _Hash,
            bool __constant_iterators,
            bool __cache>
  struct _Local_iterator : public _Local_iterator_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash, __cache>
  {
  private:
    using __base_type = _Local_iterator_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash, __cache>;
    using __hash_code_base = typename __base_type::__hash_code_base;

  public:
    typedef _Value value_type;
    typedef typename std::conditional<__constant_iterators, const _Value*, _Value*>::type pointer;
    typedef typename std::conditional<__constant_iterators, const _Value&, _Value&>::type reference;
    typedef std::ptrdiff_t difference_type;
    typedef std::forward_iterator_tag iterator_category;
    _Local_iterator() = default;
    _Local_iterator(const __hash_code_base& __base,
                    _Hash_node<_Value, __cache>* __p,
                    std::size_t __bkt,
                    std::size_t __bkt_count)
        : __base_type(__base, __p, __bkt, __bkt_count)
    {
    }
    reference operator*() const { return this->_M_cur->_M_v(); }
    pointer operator->() const { return this->_M_cur->_M_valptr(); }
    _Local_iterator& operator++()
    {
      this->_M_incr();
      return *this;
    }
    _Local_iterator operator++(int)
    {
      _Local_iterator __tmp(*this);
      this->_M_incr();
      return __tmp;
    }
  };
  template <typename _Key,
            typename _Value,
            typename _ExtractKey,
            typename _H1,
            typename _H2,
            typename _Hash,
            bool __constant_iterators,
            bool __cache>
  struct _Local_const_iterator : public _Local_iterator_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash, __cache>
  {
  private:
    using __base_type = _Local_iterator_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash, __cache>;
    using __hash_code_base = typename __base_type::__hash_code_base;

  public:
    typedef _Value value_type;
    typedef const _Value* pointer;
    typedef const _Value& reference;
    typedef std::ptrdiff_t difference_type;
    typedef std::forward_iterator_tag iterator_category;
    _Local_const_iterator() = default;
    _Local_const_iterator(const __hash_code_base& __base,
                          _Hash_node<_Value, __cache>* __p,
                          std::size_t __bkt,
                          std::size_t __bkt_count)
        : __base_type(__base, __p, __bkt, __bkt_count)
    {
    }
    _Local_const_iterator(
        const _Local_iterator<_Key, _Value, _ExtractKey, _H1, _H2, _Hash, __constant_iterators, __cache>& __x)
        : __base_type(__x)
    {
    }
    reference operator*() const { return this->_M_cur->_M_v(); }
    pointer operator->() const { return this->_M_cur->_M_valptr(); }
    _Local_const_iterator& operator++()
    {
      this->_M_incr();
      return *this;
    }
    _Local_const_iterator operator++(int)
    {
      _Local_const_iterator __tmp(*this);
      this->_M_incr();
      return __tmp;
    }
  };
  template <typename _Key,
            typename _Value,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _Traits>
  struct _Hashtable_base
      : public _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash, _Traits::__hash_cached::value>,
        private _Hashtable_ebo_helper<0, _Equal>
  {
  public:
    typedef _Key key_type;
    typedef _Value value_type;
    typedef _Equal key_equal;
    typedef std::size_t size_type;
    typedef std::ptrdiff_t difference_type;
    using __traits_type = _Traits;
    using __hash_cached = typename __traits_type::__hash_cached;
    using __constant_iterators = typename __traits_type::__constant_iterators;
    using __unique_keys = typename __traits_type::__unique_keys;
    using __hash_code_base = _Hash_code_base<_Key, _Value, _ExtractKey, _H1, _H2, _Hash, __hash_cached::value>;
    using __hash_code = typename __hash_code_base::__hash_code;
    using __node_type = typename __hash_code_base::__node_type;
    using iterator = __detail::_Node_iterator<value_type, __constant_iterators::value, __hash_cached::value>;
    using const_iterator =
        __detail::_Node_const_iterator<value_type, __constant_iterators::value, __hash_cached::value>;
    using local_iterator = __detail::_Local_iterator<key_type,
                                                     value_type,
                                                     _ExtractKey,
                                                     _H1,
                                                     _H2,
                                                     _Hash,
                                                     __constant_iterators::value,
                                                     __hash_cached::value>;
    using const_local_iterator = __detail::_Local_const_iterator<key_type,
                                                                 value_type,
                                                                 _ExtractKey,
                                                                 _H1,
                                                                 _H2,
                                                                 _Hash,
                                                                 __constant_iterators::value,
                                                                 __hash_cached::value>;
    using __ireturn_type = typename std::conditional<__unique_keys::value, std::pair<iterator, bool>, iterator>::type;

  private:
    using _EqualEBO = _Hashtable_ebo_helper<0, _Equal>;
    using _EqualHelper = _Equal_helper<_Key, _Value, _ExtractKey, _Equal, __hash_code, __hash_cached::value>;

  protected:
    _Hashtable_base() = default;
    _Hashtable_base(const _ExtractKey& __ex, const _H1& __h1, const _H2& __h2, const _Hash& __hash, const _Equal& __eq)
        : __hash_code_base(__ex, __h1, __h2, __hash), _EqualEBO(__eq)
    {
    }
    bool _M_equals(const _Key& __k, __hash_code __c, __node_type* __n) const
    {
      static_assert(__is_invocable<const _Equal&, const _Key&, const _Key&>{},
                    "key equality predicate must be invocable with two arguments of "
                    "key type");
      return _EqualHelper::_S_equals(_M_eq(), this->_M_extract(), __k, __c, __n);
    }
    void _M_swap(_Hashtable_base& __x)
    {
      __hash_code_base::_M_swap(__x);
      std::swap(_M_eq(), __x._M_eq());
    }
    const _Equal& _M_eq() const { return _EqualEBO::_S_cget(*this); }
    _Equal& _M_eq() { return _EqualEBO::_S_get(*this); }
  };
  struct _Equality_base
  {
  protected:
    template <typename _Uiterator>
    static bool _S_is_permutation(_Uiterator, _Uiterator, _Uiterator);
  };
  template <typename _Uiterator>
  bool _Equality_base::_S_is_permutation(_Uiterator __first1, _Uiterator __last1, _Uiterator __first2)
  {
    for (; __first1 != __last1; ++__first1, ++__first2)
      if (!(*__first1 == *__first2))
        break;
    if (__first1 == __last1)
      return true;
    _Uiterator __last2 = __first2;
    std::advance(__last2, std::distance(__first1, __last1));
    for (_Uiterator __it1 = __first1; __it1 != __last1; ++__it1)
    {
      _Uiterator __tmp = __first1;
      while (__tmp != __it1 && !bool(*__tmp == *__it1))
        ++__tmp;
      if (__tmp != __it1)
        continue;
      std::ptrdiff_t __n2 = 0;
      for (__tmp = __first2; __tmp != __last2; ++__tmp)
        if (*__tmp == *__it1)
          ++__n2;
      if (!__n2)
        return false;
      std::ptrdiff_t __n1 = 0;
      for (__tmp = __it1; __tmp != __last1; ++__tmp)
        if (*__tmp == *__it1)
          ++__n1;
      if (__n1 != __n2)
        return false;
    }
    return true;
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits,
            bool _Unique_keys = _Traits::__unique_keys::value>
  struct _Equality;
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  struct _Equality<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits, true>
  {
    using __hashtable = _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>;
    bool _M_equal(const __hashtable&) const;
  };
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  bool _Equality<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits, true>::_M_equal(
      const __hashtable& __other) const
  {
    const __hashtable* __this = static_cast<const __hashtable*>(this);
    if (__this->size() != __other.size())
      return false;
    for (auto __itx = __this->begin(); __itx != __this->end(); ++__itx)
    {
      const auto __ity = __other.find(_ExtractKey()(*__itx));
      if (__ity == __other.end() || !bool(*__ity == *__itx))
        return false;
    }
    return true;
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  struct _Equality<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits, false>
      : public _Equality_base
  {
    using __hashtable = _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>;
    bool _M_equal(const __hashtable&) const;
  };
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  bool _Equality<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits, false>::_M_equal(
      const __hashtable& __other) const
  {
    const __hashtable* __this = static_cast<const __hashtable*>(this);
    if (__this->size() != __other.size())
      return false;
    for (auto __itx = __this->begin(); __itx != __this->end();)
    {
      const auto __xrange = __this->equal_range(_ExtractKey()(*__itx));
      const auto __yrange = __other.equal_range(_ExtractKey()(*__itx));
      if (std::distance(__xrange.first, __xrange.second) != std::distance(__yrange.first, __yrange.second))
        return false;
      if (!_S_is_permutation(__xrange.first, __xrange.second, __yrange.first))
        return false;
      __itx = __xrange.second;
    }
    return true;
  }
  template <typename _NodeAlloc>
  struct _Hashtable_alloc : private _Hashtable_ebo_helper<0, _NodeAlloc>
  {
  private:
    using __ebo_node_alloc = _Hashtable_ebo_helper<0, _NodeAlloc>;

  public:
    using __node_type = typename _NodeAlloc::value_type;
    using __node_alloc_type = _NodeAlloc;
    using __node_alloc_traits = __gnu_cxx::__alloc_traits<__node_alloc_type>;
    using __value_alloc_traits = typename __node_alloc_traits::template rebind_traits<typename __node_type::value_type>;
    using __node_base = __detail::_Hash_node_base;
    using __bucket_type = __node_base*;
    using __bucket_alloc_type = __alloc_rebind<__node_alloc_type, __bucket_type>;
    using __bucket_alloc_traits = std::allocator_traits<__bucket_alloc_type>;
    _Hashtable_alloc() = default;
    _Hashtable_alloc(const _Hashtable_alloc&) = default;
    _Hashtable_alloc(_Hashtable_alloc&&) = default;
    template <typename _Alloc>
    _Hashtable_alloc(_Alloc&& __a) : __ebo_node_alloc(std::forward<_Alloc>(__a))
    {
    }
    __node_alloc_type& _M_node_allocator() { return __ebo_node_alloc::_S_get(*this); }
    const __node_alloc_type& _M_node_allocator() const { return __ebo_node_alloc::_S_cget(*this); }
    template <typename... _Args>
    __node_type* _M_allocate_node(_Args&&... __args);
    void _M_deallocate_node(__node_type* __n);
    void _M_deallocate_node_ptr(__node_type* __n);
    void _M_deallocate_nodes(__node_type* __n);
    __bucket_type* _M_allocate_buckets(std::size_t __n);
    void _M_deallocate_buckets(__bucket_type*, std::size_t __n);
  };
  template <typename _NodeAlloc>
  template <typename... _Args>
  typename _Hashtable_alloc<_NodeAlloc>::__node_type* _Hashtable_alloc<_NodeAlloc>::_M_allocate_node(_Args&&... __args)
  {
    auto __nptr = __node_alloc_traits::allocate(_M_node_allocator(), 1);
    __node_type* __n = std::__to_address(__nptr);
    try
    {
      ::new ((void*)__n) __node_type;
      __node_alloc_traits::construct(_M_node_allocator(), __n->_M_valptr(), std::forward<_Args>(__args)...);
      return __n;
    }
    catch (...)
    {
      __node_alloc_traits::deallocate(_M_node_allocator(), __nptr, 1);
      throw;
    }
  }
  template <typename _NodeAlloc>
  void _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node(__node_type* __n)
  {
    __node_alloc_traits::destroy(_M_node_allocator(), __n->_M_valptr());
    _M_deallocate_node_ptr(__n);
  }
  template <typename _NodeAlloc>
  void _Hashtable_alloc<_NodeAlloc>::_M_deallocate_node_ptr(__node_type* __n)
  {
    typedef typename __node_alloc_traits::pointer _Ptr;
    auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__n);
    __n->~__node_type();
    __node_alloc_traits::deallocate(_M_node_allocator(), __ptr, 1);
  }
  template <typename _NodeAlloc>
  void _Hashtable_alloc<_NodeAlloc>::_M_deallocate_nodes(__node_type* __n)
  {
    while (__n)
    {
      __node_type* __tmp = __n;
      __n = __n->_M_next();
      _M_deallocate_node(__tmp);
    }
  }
  template <typename _NodeAlloc>
  typename _Hashtable_alloc<_NodeAlloc>::__bucket_type* _Hashtable_alloc<_NodeAlloc>::_M_allocate_buckets(
      std::size_t __n)
  {
    __bucket_alloc_type __alloc(_M_node_allocator());
    auto __ptr = __bucket_alloc_traits::allocate(__alloc, __n);
    __bucket_type* __p = std::__to_address(__ptr);
    __builtin_memset(__p, 0, __n * sizeof(__bucket_type));
    return __p;
  }
  template <typename _NodeAlloc>
  void _Hashtable_alloc<_NodeAlloc>::_M_deallocate_buckets(__bucket_type* __bkts, std::size_t __n)
  {
    typedef typename __bucket_alloc_traits::pointer _Ptr;
    auto __ptr = std::pointer_traits<_Ptr>::pointer_to(*__bkts);
    __bucket_alloc_type __alloc(_M_node_allocator());
    __bucket_alloc_traits::deallocate(__alloc, __ptr, __n);
  }
  }  // namespace __detail
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  struct _Enable_default_constructor_tag
  {
    explicit constexpr _Enable_default_constructor_tag() = default;
  };
  template <bool _Switch, typename _Tag = void>
  struct _Enable_default_constructor
  {
    constexpr _Enable_default_constructor() noexcept = default;
    constexpr _Enable_default_constructor(_Enable_default_constructor const&) noexcept = default;
    constexpr _Enable_default_constructor(_Enable_default_constructor&&) noexcept = default;
    _Enable_default_constructor& operator=(_Enable_default_constructor const&) noexcept = default;
    _Enable_default_constructor& operator=(_Enable_default_constructor&&) noexcept = default;
    constexpr explicit _Enable_default_constructor(_Enable_default_constructor_tag) {}
  };
  template <bool _Switch, typename _Tag = void>
  struct _Enable_destructor
  {
  };
  template <bool _Copy, bool _CopyAssignment, bool _Move, bool _MoveAssignment, typename _Tag = void>
  struct _Enable_copy_move
  {
  };
  template <bool _Default,
            bool _Destructor,
            bool _Copy,
            bool _CopyAssignment,
            bool _Move,
            bool _MoveAssignment,
            typename _Tag = void>
  struct _Enable_special_members : private _Enable_default_constructor<_Default, _Tag>,
                                   private _Enable_destructor<_Destructor, _Tag>,
                                   private _Enable_copy_move<_Copy, _CopyAssignment, _Move, _MoveAssignment, _Tag>
  {
  };
  template <typename _Tag>
  struct _Enable_default_constructor<false, _Tag>
  {
    constexpr _Enable_default_constructor() noexcept = delete;
    constexpr _Enable_default_constructor(_Enable_default_constructor const&) noexcept = default;
    constexpr _Enable_default_constructor(_Enable_default_constructor&&) noexcept = default;
    _Enable_default_constructor& operator=(_Enable_default_constructor const&) noexcept = default;
    _Enable_default_constructor& operator=(_Enable_default_constructor&&) noexcept = default;
    constexpr explicit _Enable_default_constructor(_Enable_default_constructor_tag) {}
  };
  template <typename _Tag>
  struct _Enable_destructor<false, _Tag>
  {
    ~_Enable_destructor() noexcept = delete;
  };
  template <typename _Tag>
  struct _Enable_copy_move<false, true, true, true, _Tag>
  {
    constexpr _Enable_copy_move() noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move const&) noexcept = delete;
    constexpr _Enable_copy_move(_Enable_copy_move&&) noexcept = default;
    _Enable_copy_move& operator=(_Enable_copy_move const&) noexcept = default;
    _Enable_copy_move& operator=(_Enable_copy_move&&) noexcept = default;
  };
  template <typename _Tag>
  struct _Enable_copy_move<true, false, true, true, _Tag>
  {
    constexpr _Enable_copy_move() noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move const&) noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move&&) noexcept = default;
    _Enable_copy_move& operator=(_Enable_copy_move const&) noexcept = delete;
    _Enable_copy_move& operator=(_Enable_copy_move&&) noexcept = default;
  };
  template <typename _Tag>
  struct _Enable_copy_move<false, false, true, true, _Tag>
  {
    constexpr _Enable_copy_move() noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move const&) noexcept = delete;
    constexpr _Enable_copy_move(_Enable_copy_move&&) noexcept = default;
    _Enable_copy_move& operator=(_Enable_copy_move const&) noexcept = delete;
    _Enable_copy_move& operator=(_Enable_copy_move&&) noexcept = default;
  };
  template <typename _Tag>
  struct _Enable_copy_move<true, true, false, true, _Tag>
  {
    constexpr _Enable_copy_move() noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move const&) noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move&&) noexcept = delete;
    _Enable_copy_move& operator=(_Enable_copy_move const&) noexcept = default;
    _Enable_copy_move& operator=(_Enable_copy_move&&) noexcept = default;
  };
  template <typename _Tag>
  struct _Enable_copy_move<false, true, false, true, _Tag>
  {
    constexpr _Enable_copy_move() noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move const&) noexcept = delete;
    constexpr _Enable_copy_move(_Enable_copy_move&&) noexcept = delete;
    _Enable_copy_move& operator=(_Enable_copy_move const&) noexcept = default;
    _Enable_copy_move& operator=(_Enable_copy_move&&) noexcept = default;
  };
  template <typename _Tag>
  struct _Enable_copy_move<true, false, false, true, _Tag>
  {
    constexpr _Enable_copy_move() noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move const&) noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move&&) noexcept = delete;
    _Enable_copy_move& operator=(_Enable_copy_move const&) noexcept = delete;
    _Enable_copy_move& operator=(_Enable_copy_move&&) noexcept = default;
  };
  template <typename _Tag>
  struct _Enable_copy_move<false, false, false, true, _Tag>
  {
    constexpr _Enable_copy_move() noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move const&) noexcept = delete;
    constexpr _Enable_copy_move(_Enable_copy_move&&) noexcept = delete;
    _Enable_copy_move& operator=(_Enable_copy_move const&) noexcept = delete;
    _Enable_copy_move& operator=(_Enable_copy_move&&) noexcept = default;
  };
  template <typename _Tag>
  struct _Enable_copy_move<true, true, true, false, _Tag>
  {
    constexpr _Enable_copy_move() noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move const&) noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move&&) noexcept = default;
    _Enable_copy_move& operator=(_Enable_copy_move const&) noexcept = default;
    _Enable_copy_move& operator=(_Enable_copy_move&&) noexcept = delete;
  };
  template <typename _Tag>
  struct _Enable_copy_move<false, true, true, false, _Tag>
  {
    constexpr _Enable_copy_move() noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move const&) noexcept = delete;
    constexpr _Enable_copy_move(_Enable_copy_move&&) noexcept = default;
    _Enable_copy_move& operator=(_Enable_copy_move const&) noexcept = default;
    _Enable_copy_move& operator=(_Enable_copy_move&&) noexcept = delete;
  };
  template <typename _Tag>
  struct _Enable_copy_move<true, false, true, false, _Tag>
  {
    constexpr _Enable_copy_move() noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move const&) noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move&&) noexcept = default;
    _Enable_copy_move& operator=(_Enable_copy_move const&) noexcept = delete;
    _Enable_copy_move& operator=(_Enable_copy_move&&) noexcept = delete;
  };
  template <typename _Tag>
  struct _Enable_copy_move<false, false, true, false, _Tag>
  {
    constexpr _Enable_copy_move() noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move const&) noexcept = delete;
    constexpr _Enable_copy_move(_Enable_copy_move&&) noexcept = default;
    _Enable_copy_move& operator=(_Enable_copy_move const&) noexcept = delete;
    _Enable_copy_move& operator=(_Enable_copy_move&&) noexcept = delete;
  };
  template <typename _Tag>
  struct _Enable_copy_move<true, true, false, false, _Tag>
  {
    constexpr _Enable_copy_move() noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move const&) noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move&&) noexcept = delete;
    _Enable_copy_move& operator=(_Enable_copy_move const&) noexcept = default;
    _Enable_copy_move& operator=(_Enable_copy_move&&) noexcept = delete;
  };
  template <typename _Tag>
  struct _Enable_copy_move<false, true, false, false, _Tag>
  {
    constexpr _Enable_copy_move() noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move const&) noexcept = delete;
    constexpr _Enable_copy_move(_Enable_copy_move&&) noexcept = delete;
    _Enable_copy_move& operator=(_Enable_copy_move const&) noexcept = default;
    _Enable_copy_move& operator=(_Enable_copy_move&&) noexcept = delete;
  };
  template <typename _Tag>
  struct _Enable_copy_move<true, false, false, false, _Tag>
  {
    constexpr _Enable_copy_move() noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move const&) noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move&&) noexcept = delete;
    _Enable_copy_move& operator=(_Enable_copy_move const&) noexcept = delete;
    _Enable_copy_move& operator=(_Enable_copy_move&&) noexcept = delete;
  };
  template <typename _Tag>
  struct _Enable_copy_move<false, false, false, false, _Tag>
  {
    constexpr _Enable_copy_move() noexcept = default;
    constexpr _Enable_copy_move(_Enable_copy_move const&) noexcept = delete;
    constexpr _Enable_copy_move(_Enable_copy_move&&) noexcept = delete;
    _Enable_copy_move& operator=(_Enable_copy_move const&) noexcept = delete;
    _Enable_copy_move& operator=(_Enable_copy_move&&) noexcept = delete;
  };
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _Tp>
  class optional;
  struct nullopt_t
  {
    enum class _Construct
    {
      _Token
    };
    explicit constexpr nullopt_t(_Construct) {}
  };
  inline constexpr nullopt_t nullopt{nullopt_t::_Construct::_Token};
  class bad_optional_access : public exception
  {
  public:
    bad_optional_access() {}
    virtual const char* what() const noexcept override { return "bad optional access"; }
    virtual ~bad_optional_access() noexcept = default;
  };
  void __throw_bad_optional_access() __attribute__((__noreturn__));
  inline void __throw_bad_optional_access() { (throw(bad_optional_access())); }
  template <typename _Tp>
  struct _Optional_payload_base
  {
    using _Stored_type = remove_const_t<_Tp>;
    _Optional_payload_base() = default;
    ~_Optional_payload_base() = default;
    template <typename... _Args>
    constexpr _Optional_payload_base(in_place_t __tag, _Args&&... __args)
        : _M_payload(__tag, std::forward<_Args>(__args)...), _M_engaged(true)
    {
    }
    template <typename _Up, typename... _Args>
    constexpr _Optional_payload_base(std::initializer_list<_Up> __il, _Args&&... __args)
        : _M_payload(__il, std::forward<_Args>(__args)...), _M_engaged(true)
    {
    }
    constexpr _Optional_payload_base(bool __engaged, const _Optional_payload_base& __other)
    {
      if (__other._M_engaged)
        this->_M_construct(__other._M_get());
    }
    constexpr _Optional_payload_base(bool __engaged, _Optional_payload_base&& __other)
    {
      if (__other._M_engaged)
        this->_M_construct(std::move(__other._M_get()));
    }
    _Optional_payload_base(const _Optional_payload_base&) = default;
    _Optional_payload_base(_Optional_payload_base&&) = default;
    _Optional_payload_base& operator=(const _Optional_payload_base&) = default;
    _Optional_payload_base& operator=(_Optional_payload_base&&) = default;
    constexpr void _M_copy_assign(const _Optional_payload_base& __other)
    {
      if (this->_M_engaged && __other._M_engaged)
        this->_M_get() = __other._M_get();
      else
      {
        if (__other._M_engaged)
          this->_M_construct(__other._M_get());
        else
          this->_M_reset();
      }
    }
    constexpr void _M_move_assign(_Optional_payload_base&& __other) noexcept(
        __and_v<is_nothrow_move_constructible<_Tp>, is_nothrow_move_assignable<_Tp>>)
    {
      if (this->_M_engaged && __other._M_engaged)
        this->_M_get() = std::move(__other._M_get());
      else
      {
        if (__other._M_engaged)
          this->_M_construct(std::move(__other._M_get()));
        else
          this->_M_reset();
      }
    }
    struct _Empty_byte
    {
    };
    template <typename _Up, bool = is_trivially_destructible_v<_Up>>
    union _Storage
    {
      constexpr _Storage() noexcept : _M_empty() {}
      template <typename... _Args>
      constexpr _Storage(in_place_t, _Args&&... __args) : _M_value(std::forward<_Args>(__args)...)
      {
      }
      template <typename _Vp, typename... _Args>
      constexpr _Storage(std::initializer_list<_Vp> __il, _Args&&... __args)
          : _M_value(__il, std::forward<_Args>(__args)...)
      {
      }
      _Empty_byte _M_empty;
      _Up _M_value;
    };
    template <typename _Up>
    union _Storage<_Up, false>
    {
      constexpr _Storage() noexcept : _M_empty() {}
      template <typename... _Args>
      constexpr _Storage(in_place_t, _Args&&... __args) : _M_value(std::forward<_Args>(__args)...)
      {
      }
      template <typename _Vp, typename... _Args>
      constexpr _Storage(std::initializer_list<_Vp> __il, _Args&&... __args)
          : _M_value(__il, std::forward<_Args>(__args)...)
      {
      }
      ~_Storage() {}
      _Empty_byte _M_empty;
      _Up _M_value;
    };
    _Storage<_Stored_type> _M_payload;
    bool _M_engaged = false;
    template <typename... _Args>
    void _M_construct(_Args&&... __args) noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
    {
      ::new ((void*)std::__addressof(this->_M_payload)) _Stored_type(std::forward<_Args>(__args)...);
      this->_M_engaged = true;
    }
    constexpr void _M_destroy() noexcept
    {
      _M_engaged = false;
      _M_payload._M_value.~_Stored_type();
    }
    constexpr _Tp& _M_get() noexcept { return this->_M_payload._M_value; }
    constexpr const _Tp& _M_get() const noexcept { return this->_M_payload._M_value; }
    constexpr void _M_reset() noexcept
    {
      if (this->_M_engaged)
        _M_destroy();
    }
  };
  template <typename _Tp,
            bool = is_trivially_destructible_v<_Tp>,
            bool = is_trivially_copy_assignable_v<_Tp>&& is_trivially_copy_constructible_v<_Tp>,
            bool = is_trivially_move_assignable_v<_Tp>&& is_trivially_move_constructible_v<_Tp>>
  struct _Optional_payload;
  template <typename _Tp>
  struct _Optional_payload<_Tp, true, true, true> : _Optional_payload_base<_Tp>
  {
    using _Optional_payload_base<_Tp>::_Optional_payload_base;
    _Optional_payload() = default;
  };
  template <typename _Tp>
  struct _Optional_payload<_Tp, true, false, true> : _Optional_payload_base<_Tp>
  {
    using _Optional_payload_base<_Tp>::_Optional_payload_base;
    _Optional_payload() = default;
    ~_Optional_payload() = default;
    _Optional_payload(const _Optional_payload&) = default;
    _Optional_payload(_Optional_payload&&) = default;
    _Optional_payload& operator=(_Optional_payload&&) = default;
    constexpr _Optional_payload& operator=(const _Optional_payload& __other)
    {
      this->_M_copy_assign(__other);
      return *this;
    }
  };
  template <typename _Tp>
  struct _Optional_payload<_Tp, true, true, false> : _Optional_payload_base<_Tp>
  {
    using _Optional_payload_base<_Tp>::_Optional_payload_base;
    _Optional_payload() = default;
    ~_Optional_payload() = default;
    _Optional_payload(const _Optional_payload&) = default;
    _Optional_payload(_Optional_payload&&) = default;
    _Optional_payload& operator=(const _Optional_payload&) = default;
    constexpr _Optional_payload& operator=(_Optional_payload&& __other) noexcept(
        __and_v<is_nothrow_move_constructible<_Tp>, is_nothrow_move_assignable<_Tp>>)
    {
      this->_M_move_assign(std::move(__other));
      return *this;
    }
  };
  template <typename _Tp>
  struct _Optional_payload<_Tp, true, false, false> : _Optional_payload_base<_Tp>
  {
    using _Optional_payload_base<_Tp>::_Optional_payload_base;
    _Optional_payload() = default;
    ~_Optional_payload() = default;
    _Optional_payload(const _Optional_payload&) = default;
    _Optional_payload(_Optional_payload&&) = default;
    constexpr _Optional_payload& operator=(const _Optional_payload& __other)
    {
      this->_M_copy_assign(__other);
      return *this;
    }
    constexpr _Optional_payload& operator=(_Optional_payload&& __other) noexcept(
        __and_v<is_nothrow_move_constructible<_Tp>, is_nothrow_move_assignable<_Tp>>)
    {
      this->_M_move_assign(std::move(__other));
      return *this;
    }
  };
  template <typename _Tp, bool _Copy, bool _Move>
  struct _Optional_payload<_Tp, false, _Copy, _Move> : _Optional_payload<_Tp, true, false, false>
  {
    using _Optional_payload<_Tp, true, false, false>::_Optional_payload;
    _Optional_payload() = default;
    _Optional_payload(const _Optional_payload&) = default;
    _Optional_payload(_Optional_payload&&) = default;
    _Optional_payload& operator=(const _Optional_payload&) = default;
    _Optional_payload& operator=(_Optional_payload&&) = default;
    ~_Optional_payload() { this->_M_reset(); }
  };
  template <typename _Tp, typename _Dp>
  class _Optional_base_impl
  {
  protected:
    using _Stored_type = remove_const_t<_Tp>;
    template <typename... _Args>
    void _M_construct(_Args&&... __args) noexcept(is_nothrow_constructible_v<_Stored_type, _Args...>)
    {
      ::new (std::__addressof(static_cast<_Dp*>(this)->_M_payload._M_payload))
          _Stored_type(std::forward<_Args>(__args)...);
      static_cast<_Dp*>(this)->_M_payload._M_engaged = true;
    }
    void _M_destruct() noexcept { static_cast<_Dp*>(this)->_M_payload._M_destroy(); }
    constexpr void _M_reset() noexcept { static_cast<_Dp*>(this)->_M_payload._M_reset(); }
    constexpr bool _M_is_engaged() const noexcept { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
    constexpr _Tp& _M_get() noexcept
    {
      ;
      return static_cast<_Dp*>(this)->_M_payload._M_get();
    }
    constexpr const _Tp& _M_get() const noexcept
    {
      ;
      return static_cast<const _Dp*>(this)->_M_payload._M_get();
    }
  };
  template <typename _Tp, bool = is_trivially_copy_constructible_v<_Tp>, bool = is_trivially_move_constructible_v<_Tp>>
  struct _Optional_base : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
  {
    constexpr _Optional_base() = default;
    template <typename... _Args, enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>
    constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
        : _M_payload(in_place, std::forward<_Args>(__args)...)
    {
    }
    template <typename _Up,
              typename... _Args,
              enable_if_t<is_constructible_v<_Tp, initializer_list<_Up>&, _Args&&...>, bool> = false>
    constexpr explicit _Optional_base(in_place_t, initializer_list<_Up> __il, _Args&&... __args)
        : _M_payload(in_place, __il, std::forward<_Args>(__args)...)
    {
    }
    constexpr _Optional_base(const _Optional_base& __other)
        : _M_payload(__other._M_payload._M_engaged, __other._M_payload)
    {
    }
    constexpr _Optional_base(_Optional_base&& __other) noexcept(is_nothrow_move_constructible_v<_Tp>)
        : _M_payload(__other._M_payload._M_engaged, std::move(__other._M_payload))
    {
    }
    _Optional_base& operator=(const _Optional_base&) = default;
    _Optional_base& operator=(_Optional_base&&) = default;
    _Optional_payload<_Tp> _M_payload;
  };
  template <typename _Tp>
  struct _Optional_base<_Tp, false, true> : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
  {
    constexpr _Optional_base() = default;
    template <typename... _Args, enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>
    constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
        : _M_payload(in_place, std::forward<_Args>(__args)...)
    {
    }
    template <typename _Up,
              typename... _Args,
              enable_if_t<is_constructible_v<_Tp, initializer_list<_Up>&, _Args&&...>, bool> = false>
    constexpr explicit _Optional_base(in_place_t, initializer_list<_Up> __il, _Args&&... __args)
        : _M_payload(in_place, __il, std::forward<_Args>(__args)...)
    {
    }
    constexpr _Optional_base(const _Optional_base& __other)
        : _M_payload(__other._M_payload._M_engaged, __other._M_payload)
    {
    }
    constexpr _Optional_base(_Optional_base&& __other) = default;
    _Optional_base& operator=(const _Optional_base&) = default;
    _Optional_base& operator=(_Optional_base&&) = default;
    _Optional_payload<_Tp> _M_payload;
  };
  template <typename _Tp>
  struct _Optional_base<_Tp, true, false> : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
  {
    constexpr _Optional_base() = default;
    template <typename... _Args, enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>
    constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
        : _M_payload(in_place, std::forward<_Args>(__args)...)
    {
    }
    template <typename _Up,
              typename... _Args,
              enable_if_t<is_constructible_v<_Tp, initializer_list<_Up>&, _Args&&...>, bool> = false>
    constexpr explicit _Optional_base(in_place_t, initializer_list<_Up> __il, _Args&&... __args)
        : _M_payload(in_place, __il, std::forward<_Args>(__args)...)
    {
    }
    constexpr _Optional_base(const _Optional_base& __other) = default;
    constexpr _Optional_base(_Optional_base&& __other) noexcept(is_nothrow_move_constructible_v<_Tp>)
        : _M_payload(__other._M_payload._M_engaged, std::move(__other._M_payload))
    {
    }
    _Optional_base& operator=(const _Optional_base&) = default;
    _Optional_base& operator=(_Optional_base&&) = default;
    _Optional_payload<_Tp> _M_payload;
  };
  template <typename _Tp>
  struct _Optional_base<_Tp, true, true> : _Optional_base_impl<_Tp, _Optional_base<_Tp>>
  {
    constexpr _Optional_base() = default;
    template <typename... _Args, enable_if_t<is_constructible_v<_Tp, _Args&&...>, bool> = false>
    constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
        : _M_payload(in_place, std::forward<_Args>(__args)...)
    {
    }
    template <typename _Up,
              typename... _Args,
              enable_if_t<is_constructible_v<_Tp, initializer_list<_Up>&, _Args&&...>, bool> = false>
    constexpr explicit _Optional_base(in_place_t, initializer_list<_Up> __il, _Args&&... __args)
        : _M_payload(in_place, __il, std::forward<_Args>(__args)...)
    {
    }
    constexpr _Optional_base(const _Optional_base& __other) = default;
    constexpr _Optional_base(_Optional_base&& __other) = default;
    _Optional_base& operator=(const _Optional_base&) = default;
    _Optional_base& operator=(_Optional_base&&) = default;
    _Optional_payload<_Tp> _M_payload;
  };
  template <typename _Tp>
  class optional;
  template <typename _Tp, typename _Up>
  using __converts_from_optional = __or_<is_constructible<_Tp, const optional<_Up>&>,
                                         is_constructible<_Tp, optional<_Up>&>,
                                         is_constructible<_Tp, const optional<_Up>&&>,
                                         is_constructible<_Tp, optional<_Up>&&>,
                                         is_convertible<const optional<_Up>&, _Tp>,
                                         is_convertible<optional<_Up>&, _Tp>,
                                         is_convertible<const optional<_Up>&&, _Tp>,
                                         is_convertible<optional<_Up>&&, _Tp>>;
  template <typename _Tp, typename _Up>
  using __assigns_from_optional = __or_<is_assignable<_Tp&, const optional<_Up>&>,
                                        is_assignable<_Tp&, optional<_Up>&>,
                                        is_assignable<_Tp&, const optional<_Up>&&>,
                                        is_assignable<_Tp&, optional<_Up>&&>>;
  template <typename _Tp>
  class optional : private _Optional_base<_Tp>,
                   private _Enable_copy_move<is_copy_constructible_v<_Tp>,
                                             __and_v<is_copy_constructible<_Tp>, is_copy_assignable<_Tp>>,
                                             is_move_constructible_v<_Tp>,
                                             __and_v<is_move_constructible<_Tp>, is_move_assignable<_Tp>>,
                                             optional<_Tp>>
  {
    static_assert(!is_same_v<remove_cv_t<_Tp>, nullopt_t>);
    static_assert(!is_same_v<remove_cv_t<_Tp>, in_place_t>);
    static_assert(!is_reference_v<_Tp>);

  private:
    using _Base = _Optional_base<_Tp>;
    template <typename _Up>
    using __not_self = __not_<is_same<optional, __remove_cvref_t<_Up>>>;
    template <typename _Up>
    using __not_tag = __not_<is_same<in_place_t, __remove_cvref_t<_Up>>>;
    template <typename... _Cond>
    using _Requires = enable_if_t<__and_v<_Cond...>, bool>;

  public:
    using value_type = _Tp;
    constexpr optional() = default;
    constexpr optional(nullopt_t) noexcept {}
    template <
        typename _Up = _Tp,
        _Requires<__not_self<_Up>, __not_tag<_Up>, is_constructible<_Tp, _Up&&>, is_convertible<_Up&&, _Tp>> = true>
    constexpr optional(_Up&& __t) : _Base(std::in_place, std::forward<_Up>(__t))
    {
    }
    template <
        typename _Up = _Tp,
        _Requires<__not_self<_Up>, __not_tag<_Up>, is_constructible<_Tp, _Up&&>, __not_<is_convertible<_Up&&, _Tp>>> =
            false>
    explicit constexpr optional(_Up&& __t) : _Base(std::in_place, std::forward<_Up>(__t))
    {
    }
    template <typename _Up,
              _Requires<__not_<is_same<_Tp, _Up>>,
                        is_constructible<_Tp, const _Up&>,
                        is_convertible<const _Up&, _Tp>,
                        __not_<__converts_from_optional<_Tp, _Up>>> = true>
    constexpr optional(const optional<_Up>& __t)
    {
      if (__t)
        emplace(*__t);
    }
    template <typename _Up,
              _Requires<__not_<is_same<_Tp, _Up>>,
                        is_constructible<_Tp, const _Up&>,
                        __not_<is_convertible<const _Up&, _Tp>>,
                        __not_<__converts_from_optional<_Tp, _Up>>> = false>
    explicit constexpr optional(const optional<_Up>& __t)
    {
      if (__t)
        emplace(*__t);
    }
    template <typename _Up,
              _Requires<__not_<is_same<_Tp, _Up>>,
                        is_constructible<_Tp, _Up&&>,
                        is_convertible<_Up&&, _Tp>,
                        __not_<__converts_from_optional<_Tp, _Up>>> = true>
    constexpr optional(optional<_Up>&& __t)
    {
      if (__t)
        emplace(std::move(*__t));
    }
    template <typename _Up,
              _Requires<__not_<is_same<_Tp, _Up>>,
                        is_constructible<_Tp, _Up&&>,
                        __not_<is_convertible<_Up&&, _Tp>>,
                        __not_<__converts_from_optional<_Tp, _Up>>> = false>
    explicit constexpr optional(optional<_Up>&& __t)
    {
      if (__t)
        emplace(std::move(*__t));
    }
    template <typename... _Args, _Requires<is_constructible<_Tp, _Args&&...>> = false>
    explicit constexpr optional(in_place_t, _Args&&... __args) : _Base(std::in_place, std::forward<_Args>(__args)...)
    {
    }
    template <typename _Up,
              typename... _Args,
              _Requires<is_constructible<_Tp, initializer_list<_Up>&, _Args&&...>> = false>
    explicit constexpr optional(in_place_t, initializer_list<_Up> __il, _Args&&... __args)
        : _Base(std::in_place, __il, std::forward<_Args>(__args)...)
    {
    }
    optional& operator=(nullopt_t) noexcept
    {
      this->_M_reset();
      return *this;
    }
    template <typename _Up = _Tp>
    enable_if_t<__and_v<__not_self<_Up>,
                        __not_<__and_<is_scalar<_Tp>, is_same<_Tp, decay_t<_Up>>>>,
                        is_constructible<_Tp, _Up>,
                        is_assignable<_Tp&, _Up>>,
                optional&>
    operator=(_Up&& __u)
    {
      if (this->_M_is_engaged())
        this->_M_get() = std::forward<_Up>(__u);
      else
        this->_M_construct(std::forward<_Up>(__u));
      return *this;
    }
    template <typename _Up>
    enable_if_t<__and_v<__not_<is_same<_Tp, _Up>>,
                        is_constructible<_Tp, const _Up&>,
                        is_assignable<_Tp&, _Up>,
                        __not_<__converts_from_optional<_Tp, _Up>>,
                        __not_<__assigns_from_optional<_Tp, _Up>>>,
                optional&>
    operator=(const optional<_Up>& __u)
    {
      if (__u)
      {
        if (this->_M_is_engaged())
          this->_M_get() = *__u;
        else
          this->_M_construct(*__u);
      }
      else
      {
        this->_M_reset();
      }
      return *this;
    }
    template <typename _Up>
    enable_if_t<__and_v<__not_<is_same<_Tp, _Up>>,
                        is_constructible<_Tp, _Up>,
                        is_assignable<_Tp&, _Up>,
                        __not_<__converts_from_optional<_Tp, _Up>>,
                        __not_<__assigns_from_optional<_Tp, _Up>>>,
                optional&>
    operator=(optional<_Up>&& __u)
    {
      if (__u)
      {
        if (this->_M_is_engaged())
          this->_M_get() = std::move(*__u);
        else
          this->_M_construct(std::move(*__u));
      }
      else
      {
        this->_M_reset();
      }
      return *this;
    }
    template <typename... _Args>
    enable_if_t<is_constructible_v<_Tp, _Args&&...>, _Tp&> emplace(_Args&&... __args)
    {
      this->_M_reset();
      this->_M_construct(std::forward<_Args>(__args)...);
      return this->_M_get();
    }
    template <typename _Up, typename... _Args>
    enable_if_t<is_constructible_v<_Tp, initializer_list<_Up>&, _Args&&...>, _Tp&> emplace(initializer_list<_Up> __il,
                                                                                           _Args&&... __args)
    {
      this->_M_reset();
      this->_M_construct(__il, std::forward<_Args>(__args)...);
      return this->_M_get();
    }
    void swap(optional& __other) noexcept(is_nothrow_move_constructible_v<_Tp>&& is_nothrow_swappable_v<_Tp>)
    {
      using std::swap;
      if (this->_M_is_engaged() && __other._M_is_engaged())
        swap(this->_M_get(), __other._M_get());
      else if (this->_M_is_engaged())
      {
        __other._M_construct(std::move(this->_M_get()));
        this->_M_destruct();
      }
      else if (__other._M_is_engaged())
      {
        this->_M_construct(std::move(__other._M_get()));
        __other._M_destruct();
      }
    }
    constexpr const _Tp* operator->() const { return std::__addressof(this->_M_get()); }
    constexpr _Tp* operator->() { return std::__addressof(this->_M_get()); }
    constexpr const _Tp& operator*() const& { return this->_M_get(); }
    constexpr _Tp& operator*() & { return this->_M_get(); }
    constexpr _Tp&& operator*() && { return std::move(this->_M_get()); }
    constexpr const _Tp&& operator*() const&& { return std::move(this->_M_get()); }
    constexpr explicit operator bool() const noexcept { return this->_M_is_engaged(); }
    constexpr bool has_value() const noexcept { return this->_M_is_engaged(); }
    constexpr const _Tp& value() const&
    {
      return this->_M_is_engaged() ? this->_M_get() : (__throw_bad_optional_access(), this->_M_get());
    }
    constexpr _Tp& value() &
    {
      return this->_M_is_engaged() ? this->_M_get() : (__throw_bad_optional_access(), this->_M_get());
    }
    constexpr _Tp&& value() &&
    {
      return this->_M_is_engaged() ? std::move(this->_M_get())
                                   : (__throw_bad_optional_access(), std::move(this->_M_get()));
    }
    constexpr const _Tp&& value() const&&
    {
      return this->_M_is_engaged() ? std::move(this->_M_get())
                                   : (__throw_bad_optional_access(), std::move(this->_M_get()));
    }
    template <typename _Up>
    constexpr _Tp value_or(_Up&& __u) const&
    {
      static_assert(is_copy_constructible_v<_Tp>);
      static_assert(is_convertible_v<_Up&&, _Tp>);
      return this->_M_is_engaged() ? this->_M_get() : static_cast<_Tp>(std::forward<_Up>(__u));
    }
    template <typename _Up>
    constexpr _Tp value_or(_Up&& __u) &&
    {
      static_assert(is_move_constructible_v<_Tp>);
      static_assert(is_convertible_v<_Up&&, _Tp>);
      return this->_M_is_engaged() ? std::move(this->_M_get()) : static_cast<_Tp>(std::forward<_Up>(__u));
    }
    void reset() noexcept { this->_M_reset(); }
  };
  template <typename _Tp>
  using __optional_relop_t = enable_if_t<is_convertible<_Tp, bool>::value, bool>;
  template <typename _Tp, typename _Up>
  constexpr auto operator==(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
      ->__optional_relop_t<decltype(declval<_Tp>() == declval<_Up>())>
  {
    return static_cast<bool>(__lhs) == static_cast<bool>(__rhs) && (!__lhs || *__lhs == *__rhs);
  }
  template <typename _Tp, typename _Up>
  constexpr auto operator!=(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
      ->__optional_relop_t<decltype(declval<_Tp>() != declval<_Up>())>
  {
    return static_cast<bool>(__lhs) != static_cast<bool>(__rhs) || (static_cast<bool>(__lhs) && *__lhs != *__rhs);
  }
  template <typename _Tp, typename _Up>
  constexpr auto operator<(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
      ->__optional_relop_t<decltype(declval<_Tp>() < declval<_Up>())>
  {
    return static_cast<bool>(__rhs) && (!__lhs || *__lhs < *__rhs);
  }
  template <typename _Tp, typename _Up>
  constexpr auto operator>(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
      ->__optional_relop_t<decltype(declval<_Tp>() > declval<_Up>())>
  {
    return static_cast<bool>(__lhs) && (!__rhs || *__lhs > *__rhs);
  }
  template <typename _Tp, typename _Up>
  constexpr auto operator<=(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
      ->__optional_relop_t<decltype(declval<_Tp>() <= declval<_Up>())>
  {
    return !__lhs || (static_cast<bool>(__rhs) && *__lhs <= *__rhs);
  }
  template <typename _Tp, typename _Up>
  constexpr auto operator>=(const optional<_Tp>& __lhs, const optional<_Up>& __rhs)
      ->__optional_relop_t<decltype(declval<_Tp>() >= declval<_Up>())>
  {
    return !__rhs || (static_cast<bool>(__lhs) && *__lhs >= *__rhs);
  }
  template <typename _Tp>
  constexpr bool operator==(const optional<_Tp>& __lhs, nullopt_t) noexcept
  {
    return !__lhs;
  }
  template <typename _Tp>
  constexpr bool operator==(nullopt_t, const optional<_Tp>& __rhs) noexcept
  {
    return !__rhs;
  }
  template <typename _Tp>
  constexpr bool operator!=(const optional<_Tp>& __lhs, nullopt_t) noexcept
  {
    return static_cast<bool>(__lhs);
  }
  template <typename _Tp>
  constexpr bool operator!=(nullopt_t, const optional<_Tp>& __rhs) noexcept
  {
    return static_cast<bool>(__rhs);
  }
  template <typename _Tp>
  constexpr bool operator<(const optional<_Tp>&, nullopt_t) noexcept
  {
    return false;
  }
  template <typename _Tp>
  constexpr bool operator<(nullopt_t, const optional<_Tp>& __rhs) noexcept
  {
    return static_cast<bool>(__rhs);
  }
  template <typename _Tp>
  constexpr bool operator>(const optional<_Tp>& __lhs, nullopt_t) noexcept
  {
    return static_cast<bool>(__lhs);
  }
  template <typename _Tp>
  constexpr bool operator>(nullopt_t, const optional<_Tp>&) noexcept
  {
    return false;
  }
  template <typename _Tp>
  constexpr bool operator<=(const optional<_Tp>& __lhs, nullopt_t) noexcept
  {
    return !__lhs;
  }
  template <typename _Tp>
  constexpr bool operator<=(nullopt_t, const optional<_Tp>&) noexcept
  {
    return true;
  }
  template <typename _Tp>
  constexpr bool operator>=(const optional<_Tp>&, nullopt_t) noexcept
  {
    return true;
  }
  template <typename _Tp>
  constexpr bool operator>=(nullopt_t, const optional<_Tp>& __rhs) noexcept
  {
    return !__rhs;
  }
  template <typename _Tp, typename _Up>
  constexpr auto operator==(const optional<_Tp>& __lhs, const _Up& __rhs)
      ->__optional_relop_t<decltype(declval<_Tp>() == declval<_Up>())>
  {
    return __lhs && *__lhs == __rhs;
  }
  template <typename _Tp, typename _Up>
  constexpr auto operator==(const _Up& __lhs, const optional<_Tp>& __rhs)
      ->__optional_relop_t<decltype(declval<_Up>() == declval<_Tp>())>
  {
    return __rhs && __lhs == *__rhs;
  }
  template <typename _Tp, typename _Up>
  constexpr auto operator!=(const optional<_Tp>& __lhs, const _Up& __rhs)
      ->__optional_relop_t<decltype(declval<_Tp>() != declval<_Up>())>
  {
    return !__lhs || *__lhs != __rhs;
  }
  template <typename _Tp, typename _Up>
  constexpr auto operator!=(const _Up& __lhs, const optional<_Tp>& __rhs)
      ->__optional_relop_t<decltype(declval<_Up>() != declval<_Tp>())>
  {
    return !__rhs || __lhs != *__rhs;
  }
  template <typename _Tp, typename _Up>
  constexpr auto operator<(const optional<_Tp>& __lhs, const _Up& __rhs)
      ->__optional_relop_t<decltype(declval<_Tp>() < declval<_Up>())>
  {
    return !__lhs || *__lhs < __rhs;
  }
  template <typename _Tp, typename _Up>
  constexpr auto operator<(const _Up& __lhs, const optional<_Tp>& __rhs)
      ->__optional_relop_t<decltype(declval<_Up>() < declval<_Tp>())>
  {
    return __rhs && __lhs < *__rhs;
  }
  template <typename _Tp, typename _Up>
  constexpr auto operator>(const optional<_Tp>& __lhs, const _Up& __rhs)
      ->__optional_relop_t<decltype(declval<_Tp>() > declval<_Up>())>
  {
    return __lhs && *__lhs > __rhs;
  }
  template <typename _Tp, typename _Up>
  constexpr auto operator>(const _Up& __lhs, const optional<_Tp>& __rhs)
      ->__optional_relop_t<decltype(declval<_Up>() > declval<_Tp>())>
  {
    return !__rhs || __lhs > *__rhs;
  }
  template <typename _Tp, typename _Up>
  constexpr auto operator<=(const optional<_Tp>& __lhs, const _Up& __rhs)
      ->__optional_relop_t<decltype(declval<_Tp>() <= declval<_Up>())>
  {
    return !__lhs || *__lhs <= __rhs;
  }
  template <typename _Tp, typename _Up>
  constexpr auto operator<=(const _Up& __lhs, const optional<_Tp>& __rhs)
      ->__optional_relop_t<decltype(declval<_Up>() <= declval<_Tp>())>
  {
    return __rhs && __lhs <= *__rhs;
  }
  template <typename _Tp, typename _Up>
  constexpr auto operator>=(const optional<_Tp>& __lhs, const _Up& __rhs)
      ->__optional_relop_t<decltype(declval<_Tp>() >= declval<_Up>())>
  {
    return __lhs && *__lhs >= __rhs;
  }
  template <typename _Tp, typename _Up>
  constexpr auto operator>=(const _Up& __lhs, const optional<_Tp>& __rhs)
      ->__optional_relop_t<decltype(declval<_Up>() >= declval<_Tp>())>
  {
    return !__rhs || __lhs >= *__rhs;
  }
  template <typename _Tp>
  inline enable_if_t<is_move_constructible_v<_Tp> && is_swappable_v<_Tp>> swap(
      optional<_Tp> & __lhs, optional<_Tp> & __rhs) noexcept(noexcept(__lhs.swap(__rhs)))
  {
    __lhs.swap(__rhs);
  }
  template <typename _Tp>
  enable_if_t<!(is_move_constructible_v<_Tp> && is_swappable_v<_Tp>)> swap(optional<_Tp>&, optional<_Tp>&) = delete;
  template <typename _Tp>
  constexpr optional<decay_t<_Tp>> make_optional(_Tp && __t)
  {
    return optional<decay_t<_Tp>>{std::forward<_Tp>(__t)};
  }
  template <typename _Tp, typename... _Args>
  constexpr optional<_Tp> make_optional(_Args && ... __args)
  {
    return optional<_Tp>{in_place, std::forward<_Args>(__args)...};
  }
  template <typename _Tp, typename _Up, typename... _Args>
  constexpr optional<_Tp> make_optional(initializer_list<_Up> __il, _Args && ... __args)
  {
    return optional<_Tp>{in_place, __il, std::forward<_Args>(__args)...};
  }
  template <typename _Tp, typename _Up = remove_const_t<_Tp>, bool = __poison_hash<_Up>::__enable_hash_call>
  struct __optional_hash_call_base
  {
    size_t operator()(const optional<_Tp>& __t) const noexcept(noexcept(hash<_Up>{}(*__t)))
    {
      constexpr size_t __magic_disengaged_hash = static_cast<size_t>(-3333);
      return __t ? hash<_Up>{}(*__t) : __magic_disengaged_hash;
    }
  };
  template <typename _Tp, typename _Up>
  struct __optional_hash_call_base<_Tp, _Up, false>
  {
  };
  template <typename _Tp>
  struct hash<optional<_Tp>> : private __poison_hash<remove_const_t<_Tp>>, public __optional_hash_call_base<_Tp>
  {
    using result_type [[__deprecated__]] = size_t;
    using argument_type [[__deprecated__]] = optional<_Tp>;
  };
  template <typename _Tp>
  struct __is_fast_hash<hash<optional<_Tp>>> : __is_fast_hash<hash<_Tp>>
  {
  };
  template <typename _Tp>
  optional(_Tp) -> optional<_Tp>;
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _Val, typename _NodeAlloc>
  class _Node_handle_common
  {
    using _AllocTraits = allocator_traits<_NodeAlloc>;

  public:
    using allocator_type = __alloc_rebind<_NodeAlloc, _Val>;
    allocator_type get_allocator() const noexcept
    {
      ;
      return allocator_type(*_M_alloc);
    }
    explicit operator bool() const noexcept { return _M_ptr != nullptr; }
    [[nodiscard]] bool empty() const noexcept { return _M_ptr == nullptr; }

  protected:
    constexpr _Node_handle_common() noexcept : _M_ptr(), _M_alloc() {}
    ~_Node_handle_common() { _M_destroy(); }
    _Node_handle_common(_Node_handle_common&& __nh) noexcept : _M_ptr(__nh._M_ptr), _M_alloc(std::move(__nh._M_alloc))
    {
      __nh._M_ptr = nullptr;
      __nh._M_alloc = nullopt;
    }
    _Node_handle_common& operator=(_Node_handle_common&& __nh) noexcept
    {
      _M_destroy();
      _M_ptr = __nh._M_ptr;
      if constexpr (is_move_assignable_v<_NodeAlloc>)
      {
        if (_AllocTraits::propagate_on_container_move_assignment::value || !this->_M_alloc)
          this->_M_alloc = std::move(__nh._M_alloc);
        else
        {
          ;
        }
      }
      else
      {
        ;
      }
      __nh._M_ptr = nullptr;
      __nh._M_alloc = nullopt;
      return *this;
    }
    _Node_handle_common(typename _AllocTraits::pointer __ptr, const _NodeAlloc& __alloc)
        : _M_ptr(__ptr), _M_alloc(__alloc)
    {
    }
    void _M_swap(_Node_handle_common& __nh) noexcept
    {
      using std::swap;
      swap(_M_ptr, __nh._M_ptr);
      if (_AllocTraits::propagate_on_container_swap::value || !_M_alloc || !__nh._M_alloc)
        _M_alloc.swap(__nh._M_alloc);
      else
      {
        ;
      }
    }

  private:
    void _M_destroy() noexcept
    {
      if (_M_ptr != nullptr)
      {
        allocator_type __alloc(*_M_alloc);
        allocator_traits<allocator_type>::destroy(__alloc, _M_ptr->_M_valptr());
        _AllocTraits::deallocate(*_M_alloc, _M_ptr, 1);
      }
    }

  protected:
    typename _AllocTraits::pointer _M_ptr;

  private:
    optional<_NodeAlloc> _M_alloc;
    template <typename _Key2, typename _Value2, typename _KeyOfValue, typename _Compare, typename _ValueAlloc>
    friend class _Rb_tree;
  };
  template <typename _Key, typename _Value, typename _NodeAlloc>
  class _Node_handle : public _Node_handle_common<_Value, _NodeAlloc>
  {
  public:
    constexpr _Node_handle() noexcept = default;
    ~_Node_handle() = default;
    _Node_handle(_Node_handle&&) noexcept = default;
    _Node_handle& operator=(_Node_handle&&) noexcept = default;
    using key_type = _Key;
    using mapped_type = typename _Value::second_type;
    key_type& key() const noexcept
    {
      ;
      return *_M_pkey;
    }
    mapped_type& mapped() const noexcept
    {
      ;
      return *_M_pmapped;
    }
    void swap(_Node_handle& __nh) noexcept
    {
      this->_M_swap(__nh);
      using std::swap;
      swap(_M_pkey, __nh._M_pkey);
      swap(_M_pmapped, __nh._M_pmapped);
    }
    friend void swap(_Node_handle& __x, _Node_handle& __y) noexcept(noexcept(__x.swap(__y))) { __x.swap(__y); }

  private:
    using _AllocTraits = allocator_traits<_NodeAlloc>;
    _Node_handle(typename _AllocTraits::pointer __ptr, const _NodeAlloc& __alloc)
        : _Node_handle_common<_Value, _NodeAlloc>(__ptr, __alloc)
    {
      if (__ptr)
      {
        auto& __key = const_cast<_Key&>(__ptr->_M_valptr()->first);
        _M_pkey = _S_pointer_to(__key);
        _M_pmapped = _S_pointer_to(__ptr->_M_valptr()->second);
      }
      else
      {
        _M_pkey = nullptr;
        _M_pmapped = nullptr;
      }
    }
    template <typename _Tp>
    using __pointer = __ptr_rebind<typename _AllocTraits::pointer, remove_reference_t<_Tp>>;
    __pointer<_Key> _M_pkey = nullptr;
    __pointer<typename _Value::second_type> _M_pmapped = nullptr;
    template <typename _Tp>
    __pointer<_Tp> _S_pointer_to(_Tp& __obj)
    {
      return pointer_traits<__pointer<_Tp>>::pointer_to(__obj);
    }
    const key_type& _M_key() const noexcept { return key(); }
    template <typename _Key2, typename _Value2, typename _KeyOfValue, typename _Compare, typename _ValueAlloc>
    friend class _Rb_tree;
    template <typename _Key2,
              typename _Value2,
              typename _ValueAlloc,
              typename _ExtractKey,
              typename _Equal,
              typename _H1,
              typename _H2,
              typename _Hash,
              typename _RehashPolicy,
              typename _Traits>
    friend class _Hashtable;
  };
  template <typename _Value, typename _NodeAlloc>
  class _Node_handle<_Value, _Value, _NodeAlloc> : public _Node_handle_common<_Value, _NodeAlloc>
  {
  public:
    constexpr _Node_handle() noexcept = default;
    ~_Node_handle() = default;
    _Node_handle(_Node_handle&&) noexcept = default;
    _Node_handle& operator=(_Node_handle&&) noexcept = default;
    using value_type = _Value;
    value_type& value() const noexcept
    {
      ;
      return *this->_M_ptr->_M_valptr();
    }
    void swap(_Node_handle& __nh) noexcept { this->_M_swap(__nh); }
    friend void swap(_Node_handle& __x, _Node_handle& __y) noexcept(noexcept(__x.swap(__y))) { __x.swap(__y); }

  private:
    using _AllocTraits = allocator_traits<_NodeAlloc>;
    _Node_handle(typename _AllocTraits::pointer __ptr, const _NodeAlloc& __alloc)
        : _Node_handle_common<_Value, _NodeAlloc>(__ptr, __alloc)
    {
    }
    const value_type& _M_key() const noexcept { return value(); }
    template <typename _Key, typename _Val, typename _KeyOfValue, typename _Compare, typename _Alloc>
    friend class _Rb_tree;
    template <typename _Key2,
              typename _Value2,
              typename _ValueAlloc,
              typename _ExtractKey,
              typename _Equal,
              typename _H1,
              typename _H2,
              typename _Hash,
              typename _RehashPolicy,
              typename _Traits>
    friend class _Hashtable;
  };
  template <typename _Iterator, typename _NodeHandle>
  struct _Node_insert_return
  {
    _Iterator position = _Iterator();
    bool inserted = false;
    _NodeHandle node;
  };
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _Tp, typename _Hash>
  using __cache_default = __not_<__and_<__is_fast_hash<_Hash>, __is_nothrow_invocable<const _Hash&, const _Tp&>>>;
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  class _Hashtable
      : public __detail::_Hashtable_base<_Key, _Value, _ExtractKey, _Equal, _H1, _H2, _Hash, _Traits>,
        public __detail::_Map_base<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>,
        public __detail::_Insert<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>,
        public __detail::
            _Rehash_base<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>,
        public __detail::_Equality<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>,
        private __detail::_Hashtable_alloc<
            __alloc_rebind<_Alloc, __detail::_Hash_node<_Value, _Traits::__hash_cached::value>>>
  {
    static_assert(is_same<typename remove_cv<_Value>::type, _Value>::value,
                  "unordered container must have a non-const, non-volatile value_type");
    static_assert(is_same<typename _Alloc::value_type, _Value>{},
                  "unordered container must have the same value_type as its allocator");
    using __traits_type = _Traits;
    using __hash_cached = typename __traits_type::__hash_cached;
    using __node_type = __detail::_Hash_node<_Value, __hash_cached::value>;
    using __node_alloc_type = __alloc_rebind<_Alloc, __node_type>;
    using __hashtable_alloc = __detail::_Hashtable_alloc<__node_alloc_type>;
    using __value_alloc_traits = typename __hashtable_alloc::__value_alloc_traits;
    using __node_alloc_traits = typename __hashtable_alloc::__node_alloc_traits;
    using __node_base = typename __hashtable_alloc::__node_base;
    using __bucket_type = typename __hashtable_alloc::__bucket_type;

  public:
    typedef _Key key_type;
    typedef _Value value_type;
    typedef _Alloc allocator_type;
    typedef _Equal key_equal;
    typedef typename __value_alloc_traits::pointer pointer;
    typedef typename __value_alloc_traits::const_pointer const_pointer;
    typedef value_type& reference;
    typedef const value_type& const_reference;

  private:
    using __rehash_type = _RehashPolicy;
    using __rehash_state = typename __rehash_type::_State;
    using __constant_iterators = typename __traits_type::__constant_iterators;
    using __unique_keys = typename __traits_type::__unique_keys;
    using __key_extract =
        typename std::conditional<__constant_iterators::value, __detail::_Identity, __detail::_Select1st>::type;
    using __hashtable_base = __detail::_Hashtable_base<_Key, _Value, _ExtractKey, _Equal, _H1, _H2, _Hash, _Traits>;
    using __hash_code_base = typename __hashtable_base::__hash_code_base;
    using __hash_code = typename __hashtable_base::__hash_code;
    using __ireturn_type = typename __hashtable_base::__ireturn_type;
    using __map_base =
        __detail::_Map_base<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>;
    using __rehash_base =
        __detail::_Rehash_base<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>;
    using __eq_base =
        __detail::_Equality<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>;
    using __reuse_or_alloc_node_type = __detail::_ReuseOrAllocNode<__node_alloc_type>;
    template <typename _Cond>
    using __if_hash_cached = __or_<__not_<__hash_cached>, _Cond>;
    template <typename _Cond>
    using __if_hash_not_cached = __or_<__hash_cached, _Cond>;
    struct __hash_code_base_access : __hash_code_base
    {
      using __hash_code_base::_M_bucket_index;
    };
    static_assert(noexcept(declval<const __hash_code_base_access&>()._M_bucket_index((const __node_type*)nullptr,
                                                                                     (std::size_t)0)),
                  "Cache the hash code or qualify your functors involved"
                  " in hash code and bucket index computation with noexcept");
    static_assert(__if_hash_cached<is_default_constructible<_H2>>::value,
                  "Functor used to map hash code to bucket index"
                  " must be default constructible");
    template <typename _Keya,
              typename _Valuea,
              typename _Alloca,
              typename _ExtractKeya,
              typename _Equala,
              typename _H1a,
              typename _H2a,
              typename _Hasha,
              typename _RehashPolicya,
              typename _Traitsa,
              bool _Unique_keysa>
    friend struct __detail::_Map_base;
    template <typename _Keya,
              typename _Valuea,
              typename _Alloca,
              typename _ExtractKeya,
              typename _Equala,
              typename _H1a,
              typename _H2a,
              typename _Hasha,
              typename _RehashPolicya,
              typename _Traitsa>
    friend struct __detail::_Insert_base;
    template <typename _Keya,
              typename _Valuea,
              typename _Alloca,
              typename _ExtractKeya,
              typename _Equala,
              typename _H1a,
              typename _H2a,
              typename _Hasha,
              typename _RehashPolicya,
              typename _Traitsa,
              bool _Constant_iteratorsa>
    friend struct __detail::_Insert;

  public:
    using size_type = typename __hashtable_base::size_type;
    using difference_type = typename __hashtable_base::difference_type;
    using iterator = typename __hashtable_base::iterator;
    using const_iterator = typename __hashtable_base::const_iterator;
    using local_iterator = typename __hashtable_base::local_iterator;
    using const_local_iterator = typename __hashtable_base::const_local_iterator;
    using node_type = _Node_handle<_Key, _Value, __node_alloc_type>;
    using insert_return_type = _Node_insert_return<iterator, node_type>;

  private:
    __bucket_type* _M_buckets = &_M_single_bucket;
    size_type _M_bucket_count = 1;
    __node_base _M_before_begin;
    size_type _M_element_count = 0;
    _RehashPolicy _M_rehash_policy;
    __bucket_type _M_single_bucket = nullptr;
    bool _M_uses_single_bucket(__bucket_type* __bkts) const
    {
      return __builtin_expect(__bkts == &_M_single_bucket, false);
    }
    bool _M_uses_single_bucket() const { return _M_uses_single_bucket(_M_buckets); }
    __hashtable_alloc& _M_base_alloc() { return *this; }
    __bucket_type* _M_allocate_buckets(size_type __n)
    {
      if (__builtin_expect(__n == 1, false))
      {
        _M_single_bucket = nullptr;
        return &_M_single_bucket;
      }
      return __hashtable_alloc::_M_allocate_buckets(__n);
    }
    void _M_deallocate_buckets(__bucket_type* __bkts, size_type __n)
    {
      if (_M_uses_single_bucket(__bkts))
        return;
      __hashtable_alloc::_M_deallocate_buckets(__bkts, __n);
    }
    void _M_deallocate_buckets() { _M_deallocate_buckets(_M_buckets, _M_bucket_count); }
    __node_type* _M_bucket_begin(size_type __bkt) const;
    __node_type* _M_begin() const { return static_cast<__node_type*>(_M_before_begin._M_nxt); }
    template <typename _Ht, typename _NodeGenerator>
    void _M_assign_elements(_Ht&&, const _NodeGenerator&);
    template <typename _NodeGenerator>
    void _M_assign(const _Hashtable&, const _NodeGenerator&);
    void _M_move_assign(_Hashtable&&, std::true_type);
    void _M_move_assign(_Hashtable&&, std::false_type);
    void _M_reset() noexcept;
    _Hashtable(const _H1& __h1,
               const _H2& __h2,
               const _Hash& __h,
               const _Equal& __eq,
               const _ExtractKey& __exk,
               const allocator_type& __a)
        : __hashtable_base(__exk, __h1, __h2, __h, __eq), __hashtable_alloc(__node_alloc_type(__a))
    {
    }
    template <bool _No_realloc = true>
    static constexpr bool _S_nothrow_move()
    {
      if constexpr (_No_realloc)
        if constexpr (is_nothrow_copy_constructible<_H1>())
          return is_nothrow_copy_constructible<_Equal>();
      return false;
    }
    _Hashtable(_Hashtable&& __ht, __node_alloc_type&& __a, true_type) noexcept(_S_nothrow_move());
    _Hashtable(_Hashtable&&, __node_alloc_type&&, false_type);

  public:
    _Hashtable() = default;
    _Hashtable(size_type __bucket_hint,
               const _H1&,
               const _H2&,
               const _Hash&,
               const _Equal&,
               const _ExtractKey&,
               const allocator_type&);
    template <typename _InputIterator>
    _Hashtable(_InputIterator __first,
               _InputIterator __last,
               size_type __bucket_hint,
               const _H1&,
               const _H2&,
               const _Hash&,
               const _Equal&,
               const _ExtractKey&,
               const allocator_type&);
    _Hashtable(const _Hashtable&);
    _Hashtable(_Hashtable&& __ht) noexcept(_S_nothrow_move())
        : _Hashtable(std::move(__ht), std::move(__ht._M_node_allocator()), true_type{})
    {
    }
    _Hashtable(const _Hashtable&, const allocator_type&);
    _Hashtable(_Hashtable&& __ht,
               const allocator_type& __a) noexcept(_S_nothrow_move<__node_alloc_traits::_S_always_equal()>())
        : _Hashtable(std::move(__ht), __node_alloc_type(__a), typename __node_alloc_traits::is_always_equal{})
    {
    }
    explicit _Hashtable(const allocator_type& __a) : __hashtable_alloc(__node_alloc_type(__a)) {}
    explicit _Hashtable(size_type __n,
                        const _H1& __hf = _H1(),
                        const key_equal& __eql = key_equal(),
                        const allocator_type& __a = allocator_type())
        : _Hashtable(__n, __hf, _H2(), _Hash(), __eql, __key_extract(), __a)
    {
    }
    template <typename _InputIterator>
    _Hashtable(_InputIterator __f,
               _InputIterator __l,
               size_type __n = 0,
               const _H1& __hf = _H1(),
               const key_equal& __eql = key_equal(),
               const allocator_type& __a = allocator_type())
        : _Hashtable(__f, __l, __n, __hf, _H2(), _Hash(), __eql, __key_extract(), __a)
    {
    }
    _Hashtable(initializer_list<value_type> __l,
               size_type __n = 0,
               const _H1& __hf = _H1(),
               const key_equal& __eql = key_equal(),
               const allocator_type& __a = allocator_type())
        : _Hashtable(__l.begin(), __l.end(), __n, __hf, _H2(), _Hash(), __eql, __key_extract(), __a)
    {
    }
    _Hashtable& operator=(const _Hashtable& __ht);
    _Hashtable& operator=(_Hashtable&& __ht) noexcept(__node_alloc_traits::_S_nothrow_move() &&
                                                      is_nothrow_move_assignable<_H1>::value &&
                                                      is_nothrow_move_assignable<_Equal>::value)
    {
      constexpr bool __move_storage =
          __node_alloc_traits::_S_propagate_on_move_assign() || __node_alloc_traits::_S_always_equal();
      _M_move_assign(std::move(__ht), __bool_constant<__move_storage>());
      return *this;
    }
    _Hashtable& operator=(initializer_list<value_type> __l)
    {
      __reuse_or_alloc_node_type __roan(_M_begin(), *this);
      _M_before_begin._M_nxt = nullptr;
      clear();
      this->_M_insert_range(__l.begin(), __l.end(), __roan, __unique_keys());
      return *this;
    }
    ~_Hashtable() noexcept;
    void swap(_Hashtable&) noexcept(__and_<__is_nothrow_swappable<_H1>, __is_nothrow_swappable<_Equal>>::value);
    iterator begin() noexcept { return iterator(_M_begin()); }
    const_iterator begin() const noexcept { return const_iterator(_M_begin()); }
    iterator end() noexcept { return iterator(nullptr); }
    const_iterator end() const noexcept { return const_iterator(nullptr); }
    const_iterator cbegin() const noexcept { return const_iterator(_M_begin()); }
    const_iterator cend() const noexcept { return const_iterator(nullptr); }
    size_type size() const noexcept { return _M_element_count; }
    [[__nodiscard__]] bool empty() const noexcept { return size() == 0; }
    allocator_type get_allocator() const noexcept { return allocator_type(this->_M_node_allocator()); }
    size_type max_size() const noexcept { return __node_alloc_traits::max_size(this->_M_node_allocator()); }
    key_equal key_eq() const { return this->_M_eq(); }
    size_type bucket_count() const noexcept { return _M_bucket_count; }
    size_type max_bucket_count() const noexcept { return max_size(); }
    size_type bucket_size(size_type __n) const { return std::distance(begin(__n), end(__n)); }
    size_type bucket(const key_type& __k) const { return _M_bucket_index(__k, this->_M_hash_code(__k)); }
    local_iterator begin(size_type __n) { return local_iterator(*this, _M_bucket_begin(__n), __n, _M_bucket_count); }
    local_iterator end(size_type __n) { return local_iterator(*this, nullptr, __n, _M_bucket_count); }
    const_local_iterator begin(size_type __n) const
    {
      return const_local_iterator(*this, _M_bucket_begin(__n), __n, _M_bucket_count);
    }
    const_local_iterator end(size_type __n) const { return const_local_iterator(*this, nullptr, __n, _M_bucket_count); }
    const_local_iterator cbegin(size_type __n) const
    {
      return const_local_iterator(*this, _M_bucket_begin(__n), __n, _M_bucket_count);
    }
    const_local_iterator cend(size_type __n) const
    {
      return const_local_iterator(*this, nullptr, __n, _M_bucket_count);
    }
    float load_factor() const noexcept { return static_cast<float>(size()) / static_cast<float>(bucket_count()); }
    const _RehashPolicy& __rehash_policy() const { return _M_rehash_policy; }
    void __rehash_policy(const _RehashPolicy& __pol) { _M_rehash_policy = __pol; }
    iterator find(const key_type& __k);
    const_iterator find(const key_type& __k) const;
    size_type count(const key_type& __k) const;
    std::pair<iterator, iterator> equal_range(const key_type& __k);
    std::pair<const_iterator, const_iterator> equal_range(const key_type& __k) const;

  protected:
    size_type _M_bucket_index(__node_type* __n) const noexcept
    {
      return __hash_code_base::_M_bucket_index(__n, _M_bucket_count);
    }
    size_type _M_bucket_index(const key_type& __k, __hash_code __c) const
    {
      return __hash_code_base::_M_bucket_index(__k, __c, _M_bucket_count);
    }
    __node_base* _M_find_before_node(size_type, const key_type&, __hash_code) const;
    __node_type* _M_find_node(size_type __bkt, const key_type& __key, __hash_code __c) const
    {
      __node_base* __before_n = _M_find_before_node(__bkt, __key, __c);
      if (__before_n)
        return static_cast<__node_type*>(__before_n->_M_nxt);
      return nullptr;
    }
    void _M_insert_bucket_begin(size_type, __node_type*);
    void _M_remove_bucket_begin(size_type __bkt, __node_type* __next_n, size_type __next_bkt);
    __node_base* _M_get_previous_node(size_type __bkt, __node_base* __n);
    iterator _M_insert_unique_node(size_type __bkt, __hash_code __code, __node_type* __n, size_type __n_elt = 1);
    iterator _M_insert_multi_node(__node_type* __hint, __hash_code __code, __node_type* __n);
    template <typename... _Args>
    std::pair<iterator, bool> _M_emplace(std::true_type, _Args&&... __args);
    template <typename... _Args>
    iterator _M_emplace(std::false_type __uk, _Args&&... __args)
    {
      return _M_emplace(cend(), __uk, std::forward<_Args>(__args)...);
    }
    template <typename... _Args>
    iterator _M_emplace(const_iterator, std::true_type __uk, _Args&&... __args)
    {
      return _M_emplace(__uk, std::forward<_Args>(__args)...).first;
    }
    template <typename... _Args>
    iterator _M_emplace(const_iterator, std::false_type, _Args&&... __args);
    template <typename _Arg, typename _NodeGenerator>
    std::pair<iterator, bool> _M_insert(_Arg&&, const _NodeGenerator&, true_type, size_type = 1);
    template <typename _Arg, typename _NodeGenerator>
    iterator _M_insert(_Arg&& __arg, const _NodeGenerator& __node_gen, false_type __uk)
    {
      return _M_insert(cend(), std::forward<_Arg>(__arg), __node_gen, __uk);
    }
    template <typename _Arg, typename _NodeGenerator>
    iterator _M_insert(const_iterator, _Arg&& __arg, const _NodeGenerator& __node_gen, true_type __uk)
    {
      return _M_insert(std::forward<_Arg>(__arg), __node_gen, __uk).first;
    }
    template <typename _Arg, typename _NodeGenerator>
    iterator _M_insert(const_iterator, _Arg&&, const _NodeGenerator&, false_type);
    size_type _M_erase(std::true_type, const key_type&);
    size_type _M_erase(std::false_type, const key_type&);
    iterator _M_erase(size_type __bkt, __node_base* __prev_n, __node_type* __n);

  public:
    template <typename... _Args>
    __ireturn_type emplace(_Args&&... __args)
    {
      return _M_emplace(__unique_keys(), std::forward<_Args>(__args)...);
    }
    template <typename... _Args>
    iterator emplace_hint(const_iterator __hint, _Args&&... __args)
    {
      return _M_emplace(__hint, __unique_keys(), std::forward<_Args>(__args)...);
    }
    iterator erase(const_iterator);
    iterator erase(iterator __it) { return erase(const_iterator(__it)); }
    size_type erase(const key_type& __k) { return _M_erase(__unique_keys(), __k); }
    iterator erase(const_iterator, const_iterator);
    void clear() noexcept;
    void rehash(size_type __n);
    insert_return_type _M_reinsert_node(node_type&& __nh)
    {
      insert_return_type __ret;
      if (__nh.empty())
        __ret.position = end();
      else
      {
        ;
        const key_type& __k = __nh._M_key();
        __hash_code __code = this->_M_hash_code(__k);
        size_type __bkt = _M_bucket_index(__k, __code);
        if (__node_type* __n = _M_find_node(__bkt, __k, __code))
        {
          __ret.node = std::move(__nh);
          __ret.position = iterator(__n);
          __ret.inserted = false;
        }
        else
        {
          __ret.position = _M_insert_unique_node(__bkt, __code, __nh._M_ptr);
          __nh._M_ptr = nullptr;
          __ret.inserted = true;
        }
      }
      return __ret;
    }
    iterator _M_reinsert_node_multi(const_iterator __hint, node_type&& __nh)
    {
      iterator __ret;
      if (__nh.empty())
        __ret = end();
      else
      {
        ;
        auto __code = this->_M_hash_code(__nh._M_key());
        auto __node = std::exchange(__nh._M_ptr, nullptr);
        __ret = _M_insert_multi_node(__hint._M_cur, __code, __node);
      }
      return __ret;
    }
    node_type extract(const_iterator __pos)
    {
      __node_type* __n = __pos._M_cur;
      size_t __bkt = _M_bucket_index(__n);
      __node_base* __prev_n = _M_get_previous_node(__bkt, __n);
      if (__prev_n == _M_buckets[__bkt])
        _M_remove_bucket_begin(__bkt, __n->_M_next(), __n->_M_nxt ? _M_bucket_index(__n->_M_next()) : 0);
      else if (__n->_M_nxt)
      {
        size_type __next_bkt = _M_bucket_index(__n->_M_next());
        if (__next_bkt != __bkt)
          _M_buckets[__next_bkt] = __prev_n;
      }
      __prev_n->_M_nxt = __n->_M_nxt;
      __n->_M_nxt = nullptr;
      --_M_element_count;
      return {__n, this->_M_node_allocator()};
    }
    node_type extract(const _Key& __k)
    {
      node_type __nh;
      auto __pos = find(__k);
      if (__pos != end())
        __nh = extract(const_iterator(__pos));
      return __nh;
    }
    template <typename _Compatible_Hashtable>
    void _M_merge_unique(_Compatible_Hashtable& __src) noexcept
    {
      static_assert(is_same_v<typename _Compatible_Hashtable::node_type, node_type>, "Node types are compatible");
      ;
      auto __n_elt = __src.size();
      for (auto __i = __src.begin(), __end = __src.end(); __i != __end;)
      {
        auto __pos = __i++;
        const key_type& __k = this->_M_extract()(__pos._M_cur->_M_v());
        __hash_code __code = this->_M_hash_code(__k);
        size_type __bkt = _M_bucket_index(__k, __code);
        if (_M_find_node(__bkt, __k, __code) == nullptr)
        {
          auto __nh = __src.extract(__pos);
          _M_insert_unique_node(__bkt, __code, __nh._M_ptr, __n_elt);
          __nh._M_ptr = nullptr;
          __n_elt = 1;
        }
        else if (__n_elt != 1)
          --__n_elt;
      }
    }
    template <typename _Compatible_Hashtable>
    void _M_merge_multi(_Compatible_Hashtable& __src) noexcept
    {
      static_assert(is_same_v<typename _Compatible_Hashtable::node_type, node_type>, "Node types are compatible");
      ;
      this->reserve(size() + __src.size());
      for (auto __i = __src.begin(), __end = __src.end(); __i != __end;)
        _M_reinsert_node_multi(cend(), __src.extract(__i++));
    }

  private:
    void _M_rehash_aux(size_type __n, std::true_type);
    void _M_rehash_aux(size_type __n, std::false_type);
    void _M_rehash(size_type __n, const __rehash_state& __state);
  };
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  auto _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::_M_bucket_begin(
      size_type __bkt) const->__node_type*
  {
    __node_base* __n = _M_buckets[__bkt];
    return __n ? static_cast<__node_type*>(__n->_M_nxt) : nullptr;
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::_Hashtable(
      size_type __bucket_hint,
      const _H1& __h1,
      const _H2& __h2,
      const _Hash& __h,
      const _Equal& __eq,
      const _ExtractKey& __exk,
      const allocator_type& __a)
      : _Hashtable(__h1, __h2, __h, __eq, __exk, __a)
  {
    auto __bkt = _M_rehash_policy._M_next_bkt(__bucket_hint);
    if (__bkt > _M_bucket_count)
    {
      _M_buckets = _M_allocate_buckets(__bkt);
      _M_bucket_count = __bkt;
    }
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  template <typename _InputIterator>
  _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::_Hashtable(
      _InputIterator __f,
      _InputIterator __l,
      size_type __bucket_hint,
      const _H1& __h1,
      const _H2& __h2,
      const _Hash& __h,
      const _Equal& __eq,
      const _ExtractKey& __exk,
      const allocator_type& __a)
      : _Hashtable(__h1, __h2, __h, __eq, __exk, __a)
  {
    auto __nb_elems = __detail::__distance_fw(__f, __l);
    auto __bkt_count =
        _M_rehash_policy._M_next_bkt(std::max(_M_rehash_policy._M_bkt_for_elements(__nb_elems), __bucket_hint));
    if (__bkt_count > _M_bucket_count)
    {
      _M_buckets = _M_allocate_buckets(__bkt_count);
      _M_bucket_count = __bkt_count;
    }
    for (; __f != __l; ++__f)
      this->insert(*__f);
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  auto _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::operator=(
      const _Hashtable& __ht)
      ->_Hashtable&
  {
    if (&__ht == this)
      return *this;
    if (__node_alloc_traits::_S_propagate_on_copy_assign())
    {
      auto& __this_alloc = this->_M_node_allocator();
      auto& __that_alloc = __ht._M_node_allocator();
      if (!__node_alloc_traits::_S_always_equal() && __this_alloc != __that_alloc)
      {
        this->_M_deallocate_nodes(_M_begin());
        _M_before_begin._M_nxt = nullptr;
        _M_deallocate_buckets();
        _M_buckets = nullptr;
        std::__alloc_on_copy(__this_alloc, __that_alloc);
        __hashtable_base::operator=(__ht);
        _M_bucket_count = __ht._M_bucket_count;
        _M_element_count = __ht._M_element_count;
        _M_rehash_policy = __ht._M_rehash_policy;
        try
        {
          _M_assign(__ht, [this](const __node_type* __n) { return this->_M_allocate_node(__n->_M_v()); });
        }
        catch (...)
        {
          _M_reset();
          throw;
        }
        return *this;
      }
      std::__alloc_on_copy(__this_alloc, __that_alloc);
    }
    _M_assign_elements(
        __ht, [](const __reuse_or_alloc_node_type& __roan, const __node_type* __n) { return __roan(__n->_M_v()); });
    return *this;
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  template <typename _Ht, typename _NodeGenerator>
  void
  _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::_M_assign_elements(
      _Ht && __ht, const _NodeGenerator& __node_gen)
  {
    __bucket_type* __former_buckets = nullptr;
    std::size_t __former_bucket_count = _M_bucket_count;
    const __rehash_state& __former_state = _M_rehash_policy._M_state();
    if (_M_bucket_count != __ht._M_bucket_count)
    {
      __former_buckets = _M_buckets;
      _M_buckets = _M_allocate_buckets(__ht._M_bucket_count);
      _M_bucket_count = __ht._M_bucket_count;
    }
    else
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
    try
    {
      __hashtable_base::operator=(std::forward<_Ht>(__ht));
      _M_element_count = __ht._M_element_count;
      _M_rehash_policy = __ht._M_rehash_policy;
      __reuse_or_alloc_node_type __roan(_M_begin(), *this);
      _M_before_begin._M_nxt = nullptr;
      _M_assign(__ht, [&__node_gen, &__roan](__node_type* __n) { return __node_gen(__roan, __n); });
      if (__former_buckets)
        _M_deallocate_buckets(__former_buckets, __former_bucket_count);
    }
    catch (...)
    {
      if (__former_buckets)
      {
        _M_deallocate_buckets();
        _M_rehash_policy._M_reset(__former_state);
        _M_buckets = __former_buckets;
        _M_bucket_count = __former_bucket_count;
      }
      __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
      throw;
    }
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  template <typename _NodeGenerator>
  void _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::_M_assign(
      const _Hashtable& __ht, const _NodeGenerator& __node_gen)
  {
    __bucket_type* __buckets = nullptr;
    if (!_M_buckets)
      _M_buckets = __buckets = _M_allocate_buckets(_M_bucket_count);
    try
    {
      if (!__ht._M_before_begin._M_nxt)
        return;
      __node_type* __ht_n = __ht._M_begin();
      __node_type* __this_n = __node_gen(__ht_n);
      this->_M_copy_code(__this_n, __ht_n);
      _M_before_begin._M_nxt = __this_n;
      _M_buckets[_M_bucket_index(__this_n)] = &_M_before_begin;
      __node_base* __prev_n = __this_n;
      for (__ht_n = __ht_n->_M_next(); __ht_n; __ht_n = __ht_n->_M_next())
      {
        __this_n = __node_gen(__ht_n);
        __prev_n->_M_nxt = __this_n;
        this->_M_copy_code(__this_n, __ht_n);
        size_type __bkt = _M_bucket_index(__this_n);
        if (!_M_buckets[__bkt])
          _M_buckets[__bkt] = __prev_n;
        __prev_n = __this_n;
      }
    }
    catch (...)
    {
      clear();
      if (__buckets)
        _M_deallocate_buckets();
      throw;
    }
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  void
  _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::_M_reset() noexcept
  {
    _M_rehash_policy._M_reset();
    _M_bucket_count = 1;
    _M_single_bucket = nullptr;
    _M_buckets = &_M_single_bucket;
    _M_before_begin._M_nxt = nullptr;
    _M_element_count = 0;
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  void _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::_M_move_assign(
      _Hashtable && __ht, std::true_type)
  {
    this->_M_deallocate_nodes(_M_begin());
    _M_deallocate_buckets();
    __hashtable_base::operator=(std::move(__ht));
    _M_rehash_policy = __ht._M_rehash_policy;
    if (!__ht._M_uses_single_bucket())
      _M_buckets = __ht._M_buckets;
    else
    {
      _M_buckets = &_M_single_bucket;
      _M_single_bucket = __ht._M_single_bucket;
    }
    _M_bucket_count = __ht._M_bucket_count;
    _M_before_begin._M_nxt = __ht._M_before_begin._M_nxt;
    _M_element_count = __ht._M_element_count;
    std::__alloc_on_move(this->_M_node_allocator(), __ht._M_node_allocator());
    if (_M_begin())
      _M_buckets[_M_bucket_index(_M_begin())] = &_M_before_begin;
    __ht._M_reset();
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  void _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::_M_move_assign(
      _Hashtable && __ht, std::false_type)
  {
    if (__ht._M_node_allocator() == this->_M_node_allocator())
      _M_move_assign(std::move(__ht), std::true_type());
    else
    {
      _M_assign_elements(std::move(__ht), [](const __reuse_or_alloc_node_type& __roan, __node_type* __n) {
        return __roan(std::move_if_noexcept(__n->_M_v()));
      });
      __ht.clear();
    }
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::_Hashtable(
      const _Hashtable& __ht)
      : __hashtable_base(__ht),
        __map_base(__ht),
        __rehash_base(__ht),
        __hashtable_alloc(__node_alloc_traits::_S_select_on_copy(__ht._M_node_allocator())),
        _M_buckets(nullptr),
        _M_bucket_count(__ht._M_bucket_count),
        _M_element_count(__ht._M_element_count),
        _M_rehash_policy(__ht._M_rehash_policy)
  {
    _M_assign(__ht, [this](const __node_type* __n) { return this->_M_allocate_node(__n->_M_v()); });
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::_Hashtable(
      _Hashtable && __ht, __node_alloc_type && __a, true_type) noexcept(_S_nothrow_move())
      : __hashtable_base(__ht),
        __map_base(__ht),
        __rehash_base(__ht),
        __hashtable_alloc(std::move(__a)),
        _M_buckets(__ht._M_buckets),
        _M_bucket_count(__ht._M_bucket_count),
        _M_before_begin(__ht._M_before_begin._M_nxt),
        _M_element_count(__ht._M_element_count),
        _M_rehash_policy(__ht._M_rehash_policy)
  {
    if (__ht._M_uses_single_bucket())
    {
      _M_buckets = &_M_single_bucket;
      _M_single_bucket = __ht._M_single_bucket;
    }
    if (_M_begin())
      _M_buckets[_M_bucket_index(_M_begin())] = &_M_before_begin;
    __ht._M_reset();
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::_Hashtable(
      const _Hashtable& __ht, const allocator_type& __a)
      : __hashtable_base(__ht),
        __map_base(__ht),
        __rehash_base(__ht),
        __hashtable_alloc(__node_alloc_type(__a)),
        _M_buckets(),
        _M_bucket_count(__ht._M_bucket_count),
        _M_element_count(__ht._M_element_count),
        _M_rehash_policy(__ht._M_rehash_policy)
  {
    _M_assign(__ht, [this](const __node_type* __n) { return this->_M_allocate_node(__n->_M_v()); });
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::_Hashtable(
      _Hashtable && __ht, __node_alloc_type && __a, false_type)
      : __hashtable_base(__ht),
        __map_base(__ht),
        __rehash_base(__ht),
        __hashtable_alloc(std::move(__a)),
        _M_buckets(nullptr),
        _M_bucket_count(__ht._M_bucket_count),
        _M_element_count(__ht._M_element_count),
        _M_rehash_policy(__ht._M_rehash_policy)
  {
    if (__ht._M_node_allocator() == this->_M_node_allocator())
    {
      if (__ht._M_uses_single_bucket())
      {
        _M_buckets = &_M_single_bucket;
        _M_single_bucket = __ht._M_single_bucket;
      }
      else
        _M_buckets = __ht._M_buckets;
      _M_before_begin._M_nxt = __ht._M_before_begin._M_nxt;
      if (_M_begin())
        _M_buckets[_M_bucket_index(_M_begin())] = &_M_before_begin;
      __ht._M_reset();
    }
    else
    {
      _M_assign(__ht, [this](__node_type* __n) { return this->_M_allocate_node(std::move_if_noexcept(__n->_M_v())); });
      __ht.clear();
    }
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::~_Hashtable() noexcept
  {
    clear();
    _M_deallocate_buckets();
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  void _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::swap(
      _Hashtable & __x) noexcept(__and_<__is_nothrow_swappable<_H1>, __is_nothrow_swappable<_Equal>>::value)
  {
    this->_M_swap(__x);
    std::__alloc_on_swap(this->_M_node_allocator(), __x._M_node_allocator());
    std::swap(_M_rehash_policy, __x._M_rehash_policy);
    if (this->_M_uses_single_bucket())
    {
      if (!__x._M_uses_single_bucket())
      {
        _M_buckets = __x._M_buckets;
        __x._M_buckets = &__x._M_single_bucket;
      }
    }
    else if (__x._M_uses_single_bucket())
    {
      __x._M_buckets = _M_buckets;
      _M_buckets = &_M_single_bucket;
    }
    else
      std::swap(_M_buckets, __x._M_buckets);
    std::swap(_M_bucket_count, __x._M_bucket_count);
    std::swap(_M_before_begin._M_nxt, __x._M_before_begin._M_nxt);
    std::swap(_M_element_count, __x._M_element_count);
    std::swap(_M_single_bucket, __x._M_single_bucket);
    if (_M_begin())
      _M_buckets[_M_bucket_index(_M_begin())] = &_M_before_begin;
    if (__x._M_begin())
      __x._M_buckets[__x._M_bucket_index(__x._M_begin())] = &__x._M_before_begin;
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  auto _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::find(
      const key_type& __k)
      ->iterator
  {
    __hash_code __code = this->_M_hash_code(__k);
    std::size_t __n = _M_bucket_index(__k, __code);
    __node_type* __p = _M_find_node(__n, __k, __code);
    return __p ? iterator(__p) : end();
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  auto _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::find(
      const key_type& __k) const->const_iterator
  {
    __hash_code __code = this->_M_hash_code(__k);
    std::size_t __n = _M_bucket_index(__k, __code);
    __node_type* __p = _M_find_node(__n, __k, __code);
    return __p ? const_iterator(__p) : end();
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  auto _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::count(
      const key_type& __k) const->size_type
  {
    __hash_code __code = this->_M_hash_code(__k);
    std::size_t __n = _M_bucket_index(__k, __code);
    __node_type* __p = _M_bucket_begin(__n);
    if (!__p)
      return 0;
    std::size_t __result = 0;
    for (;; __p = __p->_M_next())
    {
      if (this->_M_equals(__k, __code, __p))
        ++__result;
      else if (__result)
        break;
      if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
        break;
    }
    return __result;
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  auto _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::equal_range(
      const key_type& __k)
      ->pair<iterator, iterator>
  {
    __hash_code __code = this->_M_hash_code(__k);
    std::size_t __n = _M_bucket_index(__k, __code);
    __node_type* __p = _M_find_node(__n, __k, __code);
    if (__p)
    {
      __node_type* __p1 = __p->_M_next();
      while (__p1 && _M_bucket_index(__p1) == __n && this->_M_equals(__k, __code, __p1))
        __p1 = __p1->_M_next();
      return std::make_pair(iterator(__p), iterator(__p1));
    }
    else
      return std::make_pair(end(), end());
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  auto _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::equal_range(
      const key_type& __k) const->pair<const_iterator, const_iterator>
  {
    __hash_code __code = this->_M_hash_code(__k);
    std::size_t __n = _M_bucket_index(__k, __code);
    __node_type* __p = _M_find_node(__n, __k, __code);
    if (__p)
    {
      __node_type* __p1 = __p->_M_next();
      while (__p1 && _M_bucket_index(__p1) == __n && this->_M_equals(__k, __code, __p1))
        __p1 = __p1->_M_next();
      return std::make_pair(const_iterator(__p), const_iterator(__p1));
    }
    else
      return std::make_pair(end(), end());
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  auto
  _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::_M_find_before_node(
      size_type __n, const key_type& __k, __hash_code __code) const->__node_base*
  {
    __node_base* __prev_p = _M_buckets[__n];
    if (!__prev_p)
      return nullptr;
    for (__node_type* __p = static_cast<__node_type*>(__prev_p->_M_nxt);; __p = __p->_M_next())
    {
      if (this->_M_equals(__k, __code, __p))
        return __prev_p;
      if (!__p->_M_nxt || _M_bucket_index(__p->_M_next()) != __n)
        break;
      __prev_p = __p;
    }
    return nullptr;
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  void _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::
      _M_insert_bucket_begin(size_type __bkt, __node_type * __node)
  {
    if (_M_buckets[__bkt])
    {
      __node->_M_nxt = _M_buckets[__bkt]->_M_nxt;
      _M_buckets[__bkt]->_M_nxt = __node;
    }
    else
    {
      __node->_M_nxt = _M_before_begin._M_nxt;
      _M_before_begin._M_nxt = __node;
      if (__node->_M_nxt)
        _M_buckets[_M_bucket_index(__node->_M_next())] = __node;
      _M_buckets[__bkt] = &_M_before_begin;
    }
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  void _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::
      _M_remove_bucket_begin(size_type __bkt, __node_type * __next, size_type __next_bkt)
  {
    if (!__next || __next_bkt != __bkt)
    {
      if (__next)
        _M_buckets[__next_bkt] = _M_buckets[__bkt];
      if (&_M_before_begin == _M_buckets[__bkt])
        _M_before_begin._M_nxt = __next;
      _M_buckets[__bkt] = nullptr;
    }
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  auto
  _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::_M_get_previous_node(
      size_type __bkt, __node_base * __n)
      ->__node_base*
  {
    __node_base* __prev_n = _M_buckets[__bkt];
    while (__prev_n->_M_nxt != __n)
      __prev_n = __prev_n->_M_nxt;
    return __prev_n;
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  template <typename... _Args>
  auto _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::_M_emplace(
      std::true_type, _Args && ... __args)
      ->pair<iterator, bool>
  {
    __node_type* __node = this->_M_allocate_node(std::forward<_Args>(__args)...);
    const key_type& __k = this->_M_extract()(__node->_M_v());
    __hash_code __code;
    try
    {
      __code = this->_M_hash_code(__k);
    }
    catch (...)
    {
      this->_M_deallocate_node(__node);
      throw;
    }
    size_type __bkt = _M_bucket_index(__k, __code);
    if (__node_type* __p = _M_find_node(__bkt, __k, __code))
    {
      this->_M_deallocate_node(__node);
      return std::make_pair(iterator(__p), false);
    }
    return std::make_pair(_M_insert_unique_node(__bkt, __code, __node), true);
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  template <typename... _Args>
  auto _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::_M_emplace(
      const_iterator __hint, std::false_type, _Args && ... __args)
      ->iterator
  {
    __node_type* __node = this->_M_allocate_node(std::forward<_Args>(__args)...);
    __hash_code __code;
    try
    {
      __code = this->_M_hash_code(this->_M_extract()(__node->_M_v()));
    }
    catch (...)
    {
      this->_M_deallocate_node(__node);
      throw;
    }
    return _M_insert_multi_node(__hint._M_cur, __code, __node);
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  auto
  _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::_M_insert_unique_node(
      size_type __bkt, __hash_code __code, __node_type * __node, size_type __n_elt)
      ->iterator
  {
    const __rehash_state& __saved_state = _M_rehash_policy._M_state();
    std::pair<bool, std::size_t> __do_rehash =
        _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, __n_elt);
    try
    {
      if (__do_rehash.first)
      {
        _M_rehash(__do_rehash.second, __saved_state);
        __bkt = _M_bucket_index(this->_M_extract()(__node->_M_v()), __code);
      }
      this->_M_store_code(__node, __code);
      _M_insert_bucket_begin(__bkt, __node);
      ++_M_element_count;
      return iterator(__node);
    }
    catch (...)
    {
      this->_M_deallocate_node(__node);
      throw;
    }
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  auto
  _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::_M_insert_multi_node(
      __node_type * __hint, __hash_code __code, __node_type * __node)
      ->iterator
  {
    const __rehash_state& __saved_state = _M_rehash_policy._M_state();
    std::pair<bool, std::size_t> __do_rehash = _M_rehash_policy._M_need_rehash(_M_bucket_count, _M_element_count, 1);
    try
    {
      if (__do_rehash.first)
        _M_rehash(__do_rehash.second, __saved_state);
      this->_M_store_code(__node, __code);
      const key_type& __k = this->_M_extract()(__node->_M_v());
      size_type __bkt = _M_bucket_index(__k, __code);
      __node_base* __prev = __builtin_expect(__hint != nullptr, false) && this->_M_equals(__k, __code, __hint)
                                ? __hint
                                : _M_find_before_node(__bkt, __k, __code);
      if (__prev)
      {
        __node->_M_nxt = __prev->_M_nxt;
        __prev->_M_nxt = __node;
        if (__builtin_expect(__prev == __hint, false))
          if (__node->_M_nxt && !this->_M_equals(__k, __code, __node->_M_next()))
          {
            size_type __next_bkt = _M_bucket_index(__node->_M_next());
            if (__next_bkt != __bkt)
              _M_buckets[__next_bkt] = __node;
          }
      }
      else
        _M_insert_bucket_begin(__bkt, __node);
      ++_M_element_count;
      return iterator(__node);
    }
    catch (...)
    {
      this->_M_deallocate_node(__node);
      throw;
    }
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  template <typename _Arg, typename _NodeGenerator>
  auto _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::_M_insert(
      _Arg && __v, const _NodeGenerator& __node_gen, true_type, size_type __n_elt)
      ->pair<iterator, bool>
  {
    const key_type& __k = this->_M_extract()(__v);
    __hash_code __code = this->_M_hash_code(__k);
    size_type __bkt = _M_bucket_index(__k, __code);
    __node_type* __n = _M_find_node(__bkt, __k, __code);
    if (__n)
      return std::make_pair(iterator(__n), false);
    __n = __node_gen(std::forward<_Arg>(__v));
    return {_M_insert_unique_node(__bkt, __code, __n, __n_elt), true};
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  template <typename _Arg, typename _NodeGenerator>
  auto _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::_M_insert(
      const_iterator __hint, _Arg && __v, const _NodeGenerator& __node_gen, false_type)
      ->iterator
  {
    __hash_code __code = this->_M_hash_code(this->_M_extract()(__v));
    __node_type* __node = __node_gen(std::forward<_Arg>(__v));
    return _M_insert_multi_node(__hint._M_cur, __code, __node);
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  auto _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::erase(
      const_iterator __it)
      ->iterator
  {
    __node_type* __n = __it._M_cur;
    std::size_t __bkt = _M_bucket_index(__n);
    __node_base* __prev_n = _M_get_previous_node(__bkt, __n);
    return _M_erase(__bkt, __prev_n, __n);
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  auto _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::_M_erase(
      size_type __bkt, __node_base * __prev_n, __node_type * __n)
      ->iterator
  {
    if (__prev_n == _M_buckets[__bkt])
      _M_remove_bucket_begin(__bkt, __n->_M_next(), __n->_M_nxt ? _M_bucket_index(__n->_M_next()) : 0);
    else if (__n->_M_nxt)
    {
      size_type __next_bkt = _M_bucket_index(__n->_M_next());
      if (__next_bkt != __bkt)
        _M_buckets[__next_bkt] = __prev_n;
    }
    __prev_n->_M_nxt = __n->_M_nxt;
    iterator __result(__n->_M_next());
    this->_M_deallocate_node(__n);
    --_M_element_count;
    return __result;
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  auto _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::_M_erase(
      std::true_type, const key_type& __k)
      ->size_type
  {
    __hash_code __code = this->_M_hash_code(__k);
    std::size_t __bkt = _M_bucket_index(__k, __code);
    __node_base* __prev_n = _M_find_before_node(__bkt, __k, __code);
    if (!__prev_n)
      return 0;
    __node_type* __n = static_cast<__node_type*>(__prev_n->_M_nxt);
    _M_erase(__bkt, __prev_n, __n);
    return 1;
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  auto _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::_M_erase(
      std::false_type, const key_type& __k)
      ->size_type
  {
    __hash_code __code = this->_M_hash_code(__k);
    std::size_t __bkt = _M_bucket_index(__k, __code);
    __node_base* __prev_n = _M_find_before_node(__bkt, __k, __code);
    if (!__prev_n)
      return 0;
    __node_type* __n = static_cast<__node_type*>(__prev_n->_M_nxt);
    __node_type* __n_last = __n;
    std::size_t __n_last_bkt = __bkt;
    do
    {
      __n_last = __n_last->_M_next();
      if (!__n_last)
        break;
      __n_last_bkt = _M_bucket_index(__n_last);
    } while (__n_last_bkt == __bkt && this->_M_equals(__k, __code, __n_last));
    size_type __result = 0;
    do
    {
      __node_type* __p = __n->_M_next();
      this->_M_deallocate_node(__n);
      __n = __p;
      ++__result;
      --_M_element_count;
    } while (__n != __n_last);
    if (__prev_n == _M_buckets[__bkt])
      _M_remove_bucket_begin(__bkt, __n_last, __n_last_bkt);
    else if (__n_last && __n_last_bkt != __bkt)
      _M_buckets[__n_last_bkt] = __prev_n;
    __prev_n->_M_nxt = __n_last;
    return __result;
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  auto _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::erase(
      const_iterator __first, const_iterator __last)
      ->iterator
  {
    __node_type* __n = __first._M_cur;
    __node_type* __last_n = __last._M_cur;
    if (__n == __last_n)
      return iterator(__n);
    std::size_t __bkt = _M_bucket_index(__n);
    __node_base* __prev_n = _M_get_previous_node(__bkt, __n);
    bool __is_bucket_begin = __n == _M_bucket_begin(__bkt);
    std::size_t __n_bkt = __bkt;
    for (;;)
    {
      do
      {
        __node_type* __tmp = __n;
        __n = __n->_M_next();
        this->_M_deallocate_node(__tmp);
        --_M_element_count;
        if (!__n)
          break;
        __n_bkt = _M_bucket_index(__n);
      } while (__n != __last_n && __n_bkt == __bkt);
      if (__is_bucket_begin)
        _M_remove_bucket_begin(__bkt, __n, __n_bkt);
      if (__n == __last_n)
        break;
      __is_bucket_begin = true;
      __bkt = __n_bkt;
    }
    if (__n && (__n_bkt != __bkt || __is_bucket_begin))
      _M_buckets[__n_bkt] = __prev_n;
    __prev_n->_M_nxt = __n;
    return iterator(__n);
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  void _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::clear() noexcept
  {
    this->_M_deallocate_nodes(_M_begin());
    __builtin_memset(_M_buckets, 0, _M_bucket_count * sizeof(__bucket_type));
    _M_element_count = 0;
    _M_before_begin._M_nxt = nullptr;
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  void _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::rehash(
      size_type __n)
  {
    const __rehash_state& __saved_state = _M_rehash_policy._M_state();
    std::size_t __buckets = std::max(_M_rehash_policy._M_bkt_for_elements(_M_element_count + 1), __n);
    __buckets = _M_rehash_policy._M_next_bkt(__buckets);
    if (__buckets != _M_bucket_count)
      _M_rehash(__buckets, __saved_state);
    else
      _M_rehash_policy._M_reset(__saved_state);
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  void _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::_M_rehash(
      size_type __n, const __rehash_state& __state)
  {
    try
    {
      _M_rehash_aux(__n, __unique_keys());
    }
    catch (...)
    {
      _M_rehash_policy._M_reset(__state);
      throw;
    }
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  void _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::_M_rehash_aux(
      size_type __n, std::true_type)
  {
    __bucket_type* __new_buckets = _M_allocate_buckets(__n);
    __node_type* __p = _M_begin();
    _M_before_begin._M_nxt = nullptr;
    std::size_t __bbegin_bkt = 0;
    while (__p)
    {
      __node_type* __next = __p->_M_next();
      std::size_t __bkt = __hash_code_base::_M_bucket_index(__p, __n);
      if (!__new_buckets[__bkt])
      {
        __p->_M_nxt = _M_before_begin._M_nxt;
        _M_before_begin._M_nxt = __p;
        __new_buckets[__bkt] = &_M_before_begin;
        if (__p->_M_nxt)
          __new_buckets[__bbegin_bkt] = __p;
        __bbegin_bkt = __bkt;
      }
      else
      {
        __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
        __new_buckets[__bkt]->_M_nxt = __p;
      }
      __p = __next;
    }
    _M_deallocate_buckets();
    _M_bucket_count = __n;
    _M_buckets = __new_buckets;
  }
  template <typename _Key,
            typename _Value,
            typename _Alloc,
            typename _ExtractKey,
            typename _Equal,
            typename _H1,
            typename _H2,
            typename _Hash,
            typename _RehashPolicy,
            typename _Traits>
  void _Hashtable<_Key, _Value, _Alloc, _ExtractKey, _Equal, _H1, _H2, _Hash, _RehashPolicy, _Traits>::_M_rehash_aux(
      size_type __n, std::false_type)
  {
    __bucket_type* __new_buckets = _M_allocate_buckets(__n);
    __node_type* __p = _M_begin();
    _M_before_begin._M_nxt = nullptr;
    std::size_t __bbegin_bkt = 0;
    std::size_t __prev_bkt = 0;
    __node_type* __prev_p = nullptr;
    bool __check_bucket = false;
    while (__p)
    {
      __node_type* __next = __p->_M_next();
      std::size_t __bkt = __hash_code_base::_M_bucket_index(__p, __n);
      if (__prev_p && __prev_bkt == __bkt)
      {
        __p->_M_nxt = __prev_p->_M_nxt;
        __prev_p->_M_nxt = __p;
        __check_bucket = true;
      }
      else
      {
        if (__check_bucket)
        {
          if (__prev_p->_M_nxt)
          {
            std::size_t __next_bkt = __hash_code_base::_M_bucket_index(__prev_p->_M_next(), __n);
            if (__next_bkt != __prev_bkt)
              __new_buckets[__next_bkt] = __prev_p;
          }
          __check_bucket = false;
        }
        if (!__new_buckets[__bkt])
        {
          __p->_M_nxt = _M_before_begin._M_nxt;
          _M_before_begin._M_nxt = __p;
          __new_buckets[__bkt] = &_M_before_begin;
          if (__p->_M_nxt)
            __new_buckets[__bbegin_bkt] = __p;
          __bbegin_bkt = __bkt;
        }
        else
        {
          __p->_M_nxt = __new_buckets[__bkt]->_M_nxt;
          __new_buckets[__bkt]->_M_nxt = __p;
        }
      }
      __prev_p = __p;
      __prev_bkt = __bkt;
      __p = __next;
    }
    if (__check_bucket && __prev_p->_M_nxt)
    {
      std::size_t __next_bkt = __hash_code_base::_M_bucket_index(__prev_p->_M_next(), __n);
      if (__next_bkt != __prev_bkt)
        __new_buckets[__next_bkt] = __prev_p;
    }
    _M_deallocate_buckets();
    _M_bucket_count = __n;
    _M_buckets = __new_buckets;
  }
  template <typename, typename, typename>
  class _Hash_merge_helper
  {
  };
  template <typename _Hash>
  using _RequireNotAllocatorOrIntegral = __enable_if_t<!__or_<is_integral<_Hash>, __is_allocator<_Hash>>::value>;
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <bool _Cache>
  using __umap_traits = __detail::_Hashtable_traits<_Cache, false, true>;
  template <typename _Key,
            typename _Tp,
            typename _Hash = hash<_Key>,
            typename _Pred = std::equal_to<_Key>,
            typename _Alloc = std::allocator<std::pair<const _Key, _Tp>>,
            typename _Tr = __umap_traits<__cache_default<_Key, _Hash>::value>>
  using __umap_hashtable = _Hashtable<_Key,
                                      std::pair<const _Key, _Tp>,
                                      _Alloc,
                                      __detail::_Select1st,
                                      _Pred,
                                      _Hash,
                                      __detail::_Mod_range_hashing,
                                      __detail::_Default_ranged_hash,
                                      __detail::_Prime_rehash_policy,
                                      _Tr>;
  template <bool _Cache>
  using __ummap_traits = __detail::_Hashtable_traits<_Cache, false, false>;
  template <typename _Key,
            typename _Tp,
            typename _Hash = hash<_Key>,
            typename _Pred = std::equal_to<_Key>,
            typename _Alloc = std::allocator<std::pair<const _Key, _Tp>>,
            typename _Tr = __ummap_traits<__cache_default<_Key, _Hash>::value>>
  using __ummap_hashtable = _Hashtable<_Key,
                                       std::pair<const _Key, _Tp>,
                                       _Alloc,
                                       __detail::_Select1st,
                                       _Pred,
                                       _Hash,
                                       __detail::_Mod_range_hashing,
                                       __detail::_Default_ranged_hash,
                                       __detail::_Prime_rehash_policy,
                                       _Tr>;
  template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
  class unordered_multimap;
  template <typename _Key,
            typename _Tp,
            typename _Hash = hash<_Key>,
            typename _Pred = equal_to<_Key>,
            typename _Alloc = allocator<std::pair<const _Key, _Tp>>>
  class unordered_map
  {
    typedef __umap_hashtable<_Key, _Tp, _Hash, _Pred, _Alloc> _Hashtable;
    _Hashtable _M_h;

  public:
    typedef typename _Hashtable::key_type key_type;
    typedef typename _Hashtable::value_type value_type;
    typedef typename _Hashtable::mapped_type mapped_type;
    typedef typename _Hashtable::hasher hasher;
    typedef typename _Hashtable::key_equal key_equal;
    typedef typename _Hashtable::allocator_type allocator_type;
    typedef typename _Hashtable::pointer pointer;
    typedef typename _Hashtable::const_pointer const_pointer;
    typedef typename _Hashtable::reference reference;
    typedef typename _Hashtable::const_reference const_reference;
    typedef typename _Hashtable::iterator iterator;
    typedef typename _Hashtable::const_iterator const_iterator;
    typedef typename _Hashtable::local_iterator local_iterator;
    typedef typename _Hashtable::const_local_iterator const_local_iterator;
    typedef typename _Hashtable::size_type size_type;
    typedef typename _Hashtable::difference_type difference_type;
    using node_type = typename _Hashtable::node_type;
    using insert_return_type = typename _Hashtable::insert_return_type;
    unordered_map() = default;
    explicit unordered_map(size_type __n,
                           const hasher& __hf = hasher(),
                           const key_equal& __eql = key_equal(),
                           const allocator_type& __a = allocator_type())
        : _M_h(__n, __hf, __eql, __a)
    {
    }
    template <typename _InputIterator>
    unordered_map(_InputIterator __first,
                  _InputIterator __last,
                  size_type __n = 0,
                  const hasher& __hf = hasher(),
                  const key_equal& __eql = key_equal(),
                  const allocator_type& __a = allocator_type())
        : _M_h(__first, __last, __n, __hf, __eql, __a)
    {
    }
    unordered_map(const unordered_map&) = default;
    unordered_map(unordered_map&&) = default;
    explicit unordered_map(const allocator_type& __a) : _M_h(__a) {}
    unordered_map(const unordered_map& __umap, const allocator_type& __a) : _M_h(__umap._M_h, __a) {}
    unordered_map(unordered_map&& __umap,
                  const allocator_type& __a) noexcept(noexcept(_Hashtable(std::move(__umap._M_h), __a)))
        : _M_h(std::move(__umap._M_h), __a)
    {
    }
    unordered_map(initializer_list<value_type> __l,
                  size_type __n = 0,
                  const hasher& __hf = hasher(),
                  const key_equal& __eql = key_equal(),
                  const allocator_type& __a = allocator_type())
        : _M_h(__l, __n, __hf, __eql, __a)
    {
    }
    unordered_map(size_type __n, const allocator_type& __a) : unordered_map(__n, hasher(), key_equal(), __a) {}
    unordered_map(size_type __n, const hasher& __hf, const allocator_type& __a)
        : unordered_map(__n, __hf, key_equal(), __a)
    {
    }
    template <typename _InputIterator>
    unordered_map(_InputIterator __first, _InputIterator __last, size_type __n, const allocator_type& __a)
        : unordered_map(__first, __last, __n, hasher(), key_equal(), __a)
    {
    }
    template <typename _InputIterator>
    unordered_map(_InputIterator __first,
                  _InputIterator __last,
                  size_type __n,
                  const hasher& __hf,
                  const allocator_type& __a)
        : unordered_map(__first, __last, __n, __hf, key_equal(), __a)
    {
    }
    unordered_map(initializer_list<value_type> __l, size_type __n, const allocator_type& __a)
        : unordered_map(__l, __n, hasher(), key_equal(), __a)
    {
    }
    unordered_map(initializer_list<value_type> __l, size_type __n, const hasher& __hf, const allocator_type& __a)
        : unordered_map(__l, __n, __hf, key_equal(), __a)
    {
    }
    unordered_map& operator=(const unordered_map&) = default;
    unordered_map& operator=(unordered_map&&) = default;
    unordered_map& operator=(initializer_list<value_type> __l)
    {
      _M_h = __l;
      return *this;
    }
    allocator_type get_allocator() const noexcept { return _M_h.get_allocator(); }
    [[__nodiscard__]] bool empty() const noexcept { return _M_h.empty(); }
    size_type size() const noexcept { return _M_h.size(); }
    size_type max_size() const noexcept { return _M_h.max_size(); }
    iterator begin() noexcept { return _M_h.begin(); }
    const_iterator begin() const noexcept { return _M_h.begin(); }
    const_iterator cbegin() const noexcept { return _M_h.begin(); }
    iterator end() noexcept { return _M_h.end(); }
    const_iterator end() const noexcept { return _M_h.end(); }
    const_iterator cend() const noexcept { return _M_h.end(); }
    template <typename... _Args>
    std::pair<iterator, bool> emplace(_Args&&... __args)
    {
      return _M_h.emplace(std::forward<_Args>(__args)...);
    }
    template <typename... _Args>
    iterator emplace_hint(const_iterator __pos, _Args&&... __args)
    {
      return _M_h.emplace_hint(__pos, std::forward<_Args>(__args)...);
    }
    node_type extract(const_iterator __pos)
    {
      ;
      return _M_h.extract(__pos);
    }
    node_type extract(const key_type& __key) { return _M_h.extract(__key); }
    insert_return_type insert(node_type&& __nh) { return _M_h._M_reinsert_node(std::move(__nh)); }
    iterator insert(const_iterator, node_type&& __nh) { return _M_h._M_reinsert_node(std::move(__nh)).position; }
    template <typename... _Args>
    pair<iterator, bool> try_emplace(const key_type& __k, _Args&&... __args)
    {
      iterator __i = find(__k);
      if (__i == end())
      {
        __i = emplace(std::piecewise_construct,
                      std::forward_as_tuple(__k),
                      std::forward_as_tuple(std::forward<_Args>(__args)...))
                  .first;
        return {__i, true};
      }
      return {__i, false};
    }
    template <typename... _Args>
    pair<iterator, bool> try_emplace(key_type&& __k, _Args&&... __args)
    {
      iterator __i = find(__k);
      if (__i == end())
      {
        __i = emplace(std::piecewise_construct,
                      std::forward_as_tuple(std::move(__k)),
                      std::forward_as_tuple(std::forward<_Args>(__args)...))
                  .first;
        return {__i, true};
      }
      return {__i, false};
    }
    template <typename... _Args>
    iterator try_emplace(const_iterator __hint, const key_type& __k, _Args&&... __args)
    {
      iterator __i = find(__k);
      if (__i == end())
        __i = emplace_hint(__hint,
                           std::piecewise_construct,
                           std::forward_as_tuple(__k),
                           std::forward_as_tuple(std::forward<_Args>(__args)...));
      return __i;
    }
    template <typename... _Args>
    iterator try_emplace(const_iterator __hint, key_type&& __k, _Args&&... __args)
    {
      iterator __i = find(__k);
      if (__i == end())
        __i = emplace_hint(__hint,
                           std::piecewise_construct,
                           std::forward_as_tuple(std::move(__k)),
                           std::forward_as_tuple(std::forward<_Args>(__args)...));
      return __i;
    }
    std::pair<iterator, bool> insert(const value_type& __x) { return _M_h.insert(__x); }
    std::pair<iterator, bool> insert(value_type&& __x) { return _M_h.insert(std::move(__x)); }
    template <typename _Pair>
    __enable_if_t<is_constructible<value_type, _Pair&&>::value, pair<iterator, bool>> insert(_Pair&& __x)
    {
      return _M_h.emplace(std::forward<_Pair>(__x));
    }
    iterator insert(const_iterator __hint, const value_type& __x) { return _M_h.insert(__hint, __x); }
    iterator insert(const_iterator __hint, value_type&& __x) { return _M_h.insert(__hint, std::move(__x)); }
    template <typename _Pair>
    __enable_if_t<is_constructible<value_type, _Pair&&>::value, iterator> insert(const_iterator __hint, _Pair&& __x)
    {
      return _M_h.emplace_hint(__hint, std::forward<_Pair>(__x));
    }
    template <typename _InputIterator>
    void insert(_InputIterator __first, _InputIterator __last)
    {
      _M_h.insert(__first, __last);
    }
    void insert(initializer_list<value_type> __l) { _M_h.insert(__l); }
    template <typename _Obj>
    pair<iterator, bool> insert_or_assign(const key_type& __k, _Obj&& __obj)
    {
      iterator __i = find(__k);
      if (__i == end())
      {
        __i =
            emplace(
                std::piecewise_construct, std::forward_as_tuple(__k), std::forward_as_tuple(std::forward<_Obj>(__obj)))
                .first;
        return {__i, true};
      }
      (*__i).second = std::forward<_Obj>(__obj);
      return {__i, false};
    }
    template <typename _Obj>
    pair<iterator, bool> insert_or_assign(key_type&& __k, _Obj&& __obj)
    {
      iterator __i = find(__k);
      if (__i == end())
      {
        __i = emplace(std::piecewise_construct,
                      std::forward_as_tuple(std::move(__k)),
                      std::forward_as_tuple(std::forward<_Obj>(__obj)))
                  .first;
        return {__i, true};
      }
      (*__i).second = std::forward<_Obj>(__obj);
      return {__i, false};
    }
    template <typename _Obj>
    iterator insert_or_assign(const_iterator __hint, const key_type& __k, _Obj&& __obj)
    {
      iterator __i = find(__k);
      if (__i == end())
      {
        return emplace_hint(__hint,
                            std::piecewise_construct,
                            std::forward_as_tuple(__k),
                            std::forward_as_tuple(std::forward<_Obj>(__obj)));
      }
      (*__i).second = std::forward<_Obj>(__obj);
      return __i;
    }
    template <typename _Obj>
    iterator insert_or_assign(const_iterator __hint, key_type&& __k, _Obj&& __obj)
    {
      iterator __i = find(__k);
      if (__i == end())
      {
        return emplace_hint(__hint,
                            std::piecewise_construct,
                            std::forward_as_tuple(std::move(__k)),
                            std::forward_as_tuple(std::forward<_Obj>(__obj)));
      }
      (*__i).second = std::forward<_Obj>(__obj);
      return __i;
    }
    iterator erase(const_iterator __position) { return _M_h.erase(__position); }
    iterator erase(iterator __position) { return _M_h.erase(__position); }
    size_type erase(const key_type& __x) { return _M_h.erase(__x); }
    iterator erase(const_iterator __first, const_iterator __last) { return _M_h.erase(__first, __last); }
    void clear() noexcept { _M_h.clear(); }
    void swap(unordered_map& __x) noexcept(noexcept(_M_h.swap(__x._M_h))) { _M_h.swap(__x._M_h); }
    template <typename, typename, typename>
    friend class std::_Hash_merge_helper;
    template <typename _H2, typename _P2>
    void merge(unordered_map<_Key, _Tp, _H2, _P2, _Alloc>& __source)
    {
      using _Merge_helper = _Hash_merge_helper<unordered_map, _H2, _P2>;
      _M_h._M_merge_unique(_Merge_helper::_S_get_table(__source));
    }
    template <typename _H2, typename _P2>
    void merge(unordered_map<_Key, _Tp, _H2, _P2, _Alloc>&& __source)
    {
      merge(__source);
    }
    template <typename _H2, typename _P2>
    void merge(unordered_multimap<_Key, _Tp, _H2, _P2, _Alloc>& __source)
    {
      using _Merge_helper = _Hash_merge_helper<unordered_map, _H2, _P2>;
      _M_h._M_merge_unique(_Merge_helper::_S_get_table(__source));
    }
    template <typename _H2, typename _P2>
    void merge(unordered_multimap<_Key, _Tp, _H2, _P2, _Alloc>&& __source)
    {
      merge(__source);
    }
    hasher hash_function() const { return _M_h.hash_function(); }
    key_equal key_eq() const { return _M_h.key_eq(); }
    iterator find(const key_type& __x) { return _M_h.find(__x); }
    const_iterator find(const key_type& __x) const { return _M_h.find(__x); }
    size_type count(const key_type& __x) const { return _M_h.count(__x); }
    std::pair<iterator, iterator> equal_range(const key_type& __x) { return _M_h.equal_range(__x); }
    std::pair<const_iterator, const_iterator> equal_range(const key_type& __x) const { return _M_h.equal_range(__x); }
    mapped_type& operator[](const key_type& __k) { return _M_h[__k]; }
    mapped_type& operator[](key_type&& __k) { return _M_h[std::move(__k)]; }
    mapped_type& at(const key_type& __k) { return _M_h.at(__k); }
    const mapped_type& at(const key_type& __k) const { return _M_h.at(__k); }
    size_type bucket_count() const noexcept { return _M_h.bucket_count(); }
    size_type max_bucket_count() const noexcept { return _M_h.max_bucket_count(); }
    size_type bucket_size(size_type __n) const { return _M_h.bucket_size(__n); }
    size_type bucket(const key_type& __key) const { return _M_h.bucket(__key); }
    local_iterator begin(size_type __n) { return _M_h.begin(__n); }
    const_local_iterator begin(size_type __n) const { return _M_h.begin(__n); }
    const_local_iterator cbegin(size_type __n) const { return _M_h.cbegin(__n); }
    local_iterator end(size_type __n) { return _M_h.end(__n); }
    const_local_iterator end(size_type __n) const { return _M_h.end(__n); }
    const_local_iterator cend(size_type __n) const { return _M_h.cend(__n); }
    float load_factor() const noexcept { return _M_h.load_factor(); }
    float max_load_factor() const noexcept { return _M_h.max_load_factor(); }
    void max_load_factor(float __z) { _M_h.max_load_factor(__z); }
    void rehash(size_type __n) { _M_h.rehash(__n); }
    void reserve(size_type __n) { _M_h.reserve(__n); }
    template <typename _Key1, typename _Tp1, typename _Hash1, typename _Pred1, typename _Alloc1>
    friend bool operator==(const unordered_map<_Key1, _Tp1, _Hash1, _Pred1, _Alloc1>&,
                           const unordered_map<_Key1, _Tp1, _Hash1, _Pred1, _Alloc1>&);
  };
  template <typename _InputIterator,
            typename _Hash = hash<__iter_key_t<_InputIterator>>,
            typename _Pred = equal_to<__iter_key_t<_InputIterator>>,
            typename _Allocator = allocator<__iter_to_alloc_t<_InputIterator>>,
            typename = _RequireInputIter<_InputIterator>,
            typename = _RequireNotAllocatorOrIntegral<_Hash>,
            typename = _RequireNotAllocator<_Pred>,
            typename = _RequireAllocator<_Allocator>>
  unordered_map(_InputIterator,
                _InputIterator,
                typename unordered_map<int, int>::size_type = {},
                _Hash = _Hash(),
                _Pred = _Pred(),
                _Allocator = _Allocator())
      -> unordered_map<__iter_key_t<_InputIterator>, __iter_val_t<_InputIterator>, _Hash, _Pred, _Allocator>;
  template <typename _Key,
            typename _Tp,
            typename _Hash = hash<_Key>,
            typename _Pred = equal_to<_Key>,
            typename _Allocator = allocator<pair<const _Key, _Tp>>,
            typename = _RequireNotAllocatorOrIntegral<_Hash>,
            typename = _RequireNotAllocator<_Pred>,
            typename = _RequireAllocator<_Allocator>>
  unordered_map(initializer_list<pair<_Key, _Tp>>,
                typename unordered_map<int, int>::size_type = {},
                _Hash = _Hash(),
                _Pred = _Pred(),
                _Allocator = _Allocator()) -> unordered_map<_Key, _Tp, _Hash, _Pred, _Allocator>;
  template <typename _InputIterator,
            typename _Allocator,
            typename = _RequireInputIter<_InputIterator>,
            typename = _RequireAllocator<_Allocator>>
  unordered_map(_InputIterator, _InputIterator, typename unordered_map<int, int>::size_type, _Allocator)
      -> unordered_map<__iter_key_t<_InputIterator>,
                       __iter_val_t<_InputIterator>,
                       hash<__iter_key_t<_InputIterator>>,
                       equal_to<__iter_key_t<_InputIterator>>,
                       _Allocator>;
  template <typename _InputIterator,
            typename _Allocator,
            typename = _RequireInputIter<_InputIterator>,
            typename = _RequireAllocator<_Allocator>>
  unordered_map(_InputIterator, _InputIterator, _Allocator) -> unordered_map<__iter_key_t<_InputIterator>,
                                                                             __iter_val_t<_InputIterator>,
                                                                             hash<__iter_key_t<_InputIterator>>,
                                                                             equal_to<__iter_key_t<_InputIterator>>,
                                                                             _Allocator>;
  template <typename _InputIterator,
            typename _Hash,
            typename _Allocator,
            typename = _RequireInputIter<_InputIterator>,
            typename = _RequireNotAllocatorOrIntegral<_Hash>,
            typename = _RequireAllocator<_Allocator>>
  unordered_map(_InputIterator, _InputIterator, typename unordered_map<int, int>::size_type, _Hash, _Allocator)
      -> unordered_map<__iter_key_t<_InputIterator>,
                       __iter_val_t<_InputIterator>,
                       _Hash,
                       equal_to<__iter_key_t<_InputIterator>>,
                       _Allocator>;
  template <typename _Key, typename _Tp, typename _Allocator, typename = _RequireAllocator<_Allocator>>
  unordered_map(initializer_list<pair<_Key, _Tp>>, typename unordered_map<int, int>::size_type, _Allocator)
      -> unordered_map<_Key, _Tp, hash<_Key>, equal_to<_Key>, _Allocator>;
  template <typename _Key, typename _Tp, typename _Allocator, typename = _RequireAllocator<_Allocator>>
  unordered_map(initializer_list<pair<_Key, _Tp>>, _Allocator)
      -> unordered_map<_Key, _Tp, hash<_Key>, equal_to<_Key>, _Allocator>;
  template <typename _Key,
            typename _Tp,
            typename _Hash,
            typename _Allocator,
            typename = _RequireNotAllocatorOrIntegral<_Hash>,
            typename = _RequireAllocator<_Allocator>>
  unordered_map(initializer_list<pair<_Key, _Tp>>, typename unordered_map<int, int>::size_type, _Hash, _Allocator)
      -> unordered_map<_Key, _Tp, _Hash, equal_to<_Key>, _Allocator>;
  template <typename _Key,
            typename _Tp,
            typename _Hash = hash<_Key>,
            typename _Pred = equal_to<_Key>,
            typename _Alloc = allocator<std::pair<const _Key, _Tp>>>
  class unordered_multimap
  {
    typedef __ummap_hashtable<_Key, _Tp, _Hash, _Pred, _Alloc> _Hashtable;
    _Hashtable _M_h;

  public:
    typedef typename _Hashtable::key_type key_type;
    typedef typename _Hashtable::value_type value_type;
    typedef typename _Hashtable::mapped_type mapped_type;
    typedef typename _Hashtable::hasher hasher;
    typedef typename _Hashtable::key_equal key_equal;
    typedef typename _Hashtable::allocator_type allocator_type;
    typedef typename _Hashtable::pointer pointer;
    typedef typename _Hashtable::const_pointer const_pointer;
    typedef typename _Hashtable::reference reference;
    typedef typename _Hashtable::const_reference const_reference;
    typedef typename _Hashtable::iterator iterator;
    typedef typename _Hashtable::const_iterator const_iterator;
    typedef typename _Hashtable::local_iterator local_iterator;
    typedef typename _Hashtable::const_local_iterator const_local_iterator;
    typedef typename _Hashtable::size_type size_type;
    typedef typename _Hashtable::difference_type difference_type;
    using node_type = typename _Hashtable::node_type;
    unordered_multimap() = default;
    explicit unordered_multimap(size_type __n,
                                const hasher& __hf = hasher(),
                                const key_equal& __eql = key_equal(),
                                const allocator_type& __a = allocator_type())
        : _M_h(__n, __hf, __eql, __a)
    {
    }
    template <typename _InputIterator>
    unordered_multimap(_InputIterator __first,
                       _InputIterator __last,
                       size_type __n = 0,
                       const hasher& __hf = hasher(),
                       const key_equal& __eql = key_equal(),
                       const allocator_type& __a = allocator_type())
        : _M_h(__first, __last, __n, __hf, __eql, __a)
    {
    }
    unordered_multimap(const unordered_multimap&) = default;
    unordered_multimap(unordered_multimap&&) = default;
    explicit unordered_multimap(const allocator_type& __a) : _M_h(__a) {}
    unordered_multimap(const unordered_multimap& __ummap, const allocator_type& __a) : _M_h(__ummap._M_h, __a) {}
    unordered_multimap(unordered_multimap&& __ummap,
                       const allocator_type& __a) noexcept(noexcept(_Hashtable(std::move(__ummap._M_h), __a)))
        : _M_h(std::move(__ummap._M_h), __a)
    {
    }
    unordered_multimap(initializer_list<value_type> __l,
                       size_type __n = 0,
                       const hasher& __hf = hasher(),
                       const key_equal& __eql = key_equal(),
                       const allocator_type& __a = allocator_type())
        : _M_h(__l, __n, __hf, __eql, __a)
    {
    }
    unordered_multimap(size_type __n, const allocator_type& __a) : unordered_multimap(__n, hasher(), key_equal(), __a)
    {
    }
    unordered_multimap(size_type __n, const hasher& __hf, const allocator_type& __a)
        : unordered_multimap(__n, __hf, key_equal(), __a)
    {
    }
    template <typename _InputIterator>
    unordered_multimap(_InputIterator __first, _InputIterator __last, size_type __n, const allocator_type& __a)
        : unordered_multimap(__first, __last, __n, hasher(), key_equal(), __a)
    {
    }
    template <typename _InputIterator>
    unordered_multimap(_InputIterator __first,
                       _InputIterator __last,
                       size_type __n,
                       const hasher& __hf,
                       const allocator_type& __a)
        : unordered_multimap(__first, __last, __n, __hf, key_equal(), __a)
    {
    }
    unordered_multimap(initializer_list<value_type> __l, size_type __n, const allocator_type& __a)
        : unordered_multimap(__l, __n, hasher(), key_equal(), __a)
    {
    }
    unordered_multimap(initializer_list<value_type> __l, size_type __n, const hasher& __hf, const allocator_type& __a)
        : unordered_multimap(__l, __n, __hf, key_equal(), __a)
    {
    }
    unordered_multimap& operator=(const unordered_multimap&) = default;
    unordered_multimap& operator=(unordered_multimap&&) = default;
    unordered_multimap& operator=(initializer_list<value_type> __l)
    {
      _M_h = __l;
      return *this;
    }
    allocator_type get_allocator() const noexcept { return _M_h.get_allocator(); }
    [[__nodiscard__]] bool empty() const noexcept { return _M_h.empty(); }
    size_type size() const noexcept { return _M_h.size(); }
    size_type max_size() const noexcept { return _M_h.max_size(); }
    iterator begin() noexcept { return _M_h.begin(); }
    const_iterator begin() const noexcept { return _M_h.begin(); }
    const_iterator cbegin() const noexcept { return _M_h.begin(); }
    iterator end() noexcept { return _M_h.end(); }
    const_iterator end() const noexcept { return _M_h.end(); }
    const_iterator cend() const noexcept { return _M_h.end(); }
    template <typename... _Args>
    iterator emplace(_Args&&... __args)
    {
      return _M_h.emplace(std::forward<_Args>(__args)...);
    }
    template <typename... _Args>
    iterator emplace_hint(const_iterator __pos, _Args&&... __args)
    {
      return _M_h.emplace_hint(__pos, std::forward<_Args>(__args)...);
    }
    iterator insert(const value_type& __x) { return _M_h.insert(__x); }
    iterator insert(value_type&& __x) { return _M_h.insert(std::move(__x)); }
    template <typename _Pair>
    __enable_if_t<is_constructible<value_type, _Pair&&>::value, iterator> insert(_Pair&& __x)
    {
      return _M_h.emplace(std::forward<_Pair>(__x));
    }
    iterator insert(const_iterator __hint, const value_type& __x) { return _M_h.insert(__hint, __x); }
    iterator insert(const_iterator __hint, value_type&& __x) { return _M_h.insert(__hint, std::move(__x)); }
    template <typename _Pair>
    __enable_if_t<is_constructible<value_type, _Pair&&>::value, iterator> insert(const_iterator __hint, _Pair&& __x)
    {
      return _M_h.emplace_hint(__hint, std::forward<_Pair>(__x));
    }
    template <typename _InputIterator>
    void insert(_InputIterator __first, _InputIterator __last)
    {
      _M_h.insert(__first, __last);
    }
    void insert(initializer_list<value_type> __l) { _M_h.insert(__l); }
    node_type extract(const_iterator __pos)
    {
      ;
      return _M_h.extract(__pos);
    }
    node_type extract(const key_type& __key) { return _M_h.extract(__key); }
    iterator insert(node_type&& __nh) { return _M_h._M_reinsert_node_multi(cend(), std::move(__nh)); }
    iterator insert(const_iterator __hint, node_type&& __nh)
    {
      return _M_h._M_reinsert_node_multi(__hint, std::move(__nh));
    }
    iterator erase(const_iterator __position) { return _M_h.erase(__position); }
    iterator erase(iterator __position) { return _M_h.erase(__position); }
    size_type erase(const key_type& __x) { return _M_h.erase(__x); }
    iterator erase(const_iterator __first, const_iterator __last) { return _M_h.erase(__first, __last); }
    void clear() noexcept { _M_h.clear(); }
    void swap(unordered_multimap& __x) noexcept(noexcept(_M_h.swap(__x._M_h))) { _M_h.swap(__x._M_h); }
    template <typename, typename, typename>
    friend class std::_Hash_merge_helper;
    template <typename _H2, typename _P2>
    void merge(unordered_multimap<_Key, _Tp, _H2, _P2, _Alloc>& __source)
    {
      using _Merge_helper = _Hash_merge_helper<unordered_multimap, _H2, _P2>;
      _M_h._M_merge_multi(_Merge_helper::_S_get_table(__source));
    }
    template <typename _H2, typename _P2>
    void merge(unordered_multimap<_Key, _Tp, _H2, _P2, _Alloc>&& __source)
    {
      merge(__source);
    }
    template <typename _H2, typename _P2>
    void merge(unordered_map<_Key, _Tp, _H2, _P2, _Alloc>& __source)
    {
      using _Merge_helper = _Hash_merge_helper<unordered_multimap, _H2, _P2>;
      _M_h._M_merge_multi(_Merge_helper::_S_get_table(__source));
    }
    template <typename _H2, typename _P2>
    void merge(unordered_map<_Key, _Tp, _H2, _P2, _Alloc>&& __source)
    {
      merge(__source);
    }
    hasher hash_function() const { return _M_h.hash_function(); }
    key_equal key_eq() const { return _M_h.key_eq(); }
    iterator find(const key_type& __x) { return _M_h.find(__x); }
    const_iterator find(const key_type& __x) const { return _M_h.find(__x); }
    size_type count(const key_type& __x) const { return _M_h.count(__x); }
    std::pair<iterator, iterator> equal_range(const key_type& __x) { return _M_h.equal_range(__x); }
    std::pair<const_iterator, const_iterator> equal_range(const key_type& __x) const { return _M_h.equal_range(__x); }
    size_type bucket_count() const noexcept { return _M_h.bucket_count(); }
    size_type max_bucket_count() const noexcept { return _M_h.max_bucket_count(); }
    size_type bucket_size(size_type __n) const { return _M_h.bucket_size(__n); }
    size_type bucket(const key_type& __key) const { return _M_h.bucket(__key); }
    local_iterator begin(size_type __n) { return _M_h.begin(__n); }
    const_local_iterator begin(size_type __n) const { return _M_h.begin(__n); }
    const_local_iterator cbegin(size_type __n) const { return _M_h.cbegin(__n); }
    local_iterator end(size_type __n) { return _M_h.end(__n); }
    const_local_iterator end(size_type __n) const { return _M_h.end(__n); }
    const_local_iterator cend(size_type __n) const { return _M_h.cend(__n); }
    float load_factor() const noexcept { return _M_h.load_factor(); }
    float max_load_factor() const noexcept { return _M_h.max_load_factor(); }
    void max_load_factor(float __z) { _M_h.max_load_factor(__z); }
    void rehash(size_type __n) { _M_h.rehash(__n); }
    void reserve(size_type __n) { _M_h.reserve(__n); }
    template <typename _Key1, typename _Tp1, typename _Hash1, typename _Pred1, typename _Alloc1>
    friend bool operator==(const unordered_multimap<_Key1, _Tp1, _Hash1, _Pred1, _Alloc1>&,
                           const unordered_multimap<_Key1, _Tp1, _Hash1, _Pred1, _Alloc1>&);
  };
  template <typename _InputIterator,
            typename _Hash = hash<__iter_key_t<_InputIterator>>,
            typename _Pred = equal_to<__iter_key_t<_InputIterator>>,
            typename _Allocator = allocator<__iter_to_alloc_t<_InputIterator>>,
            typename = _RequireInputIter<_InputIterator>,
            typename = _RequireNotAllocatorOrIntegral<_Hash>,
            typename = _RequireNotAllocator<_Pred>,
            typename = _RequireAllocator<_Allocator>>
  unordered_multimap(_InputIterator,
                     _InputIterator,
                     unordered_multimap<int, int>::size_type = {},
                     _Hash = _Hash(),
                     _Pred = _Pred(),
                     _Allocator = _Allocator())
      -> unordered_multimap<__iter_key_t<_InputIterator>, __iter_val_t<_InputIterator>, _Hash, _Pred, _Allocator>;
  template <typename _Key,
            typename _Tp,
            typename _Hash = hash<_Key>,
            typename _Pred = equal_to<_Key>,
            typename _Allocator = allocator<pair<const _Key, _Tp>>,
            typename = _RequireNotAllocatorOrIntegral<_Hash>,
            typename = _RequireNotAllocator<_Pred>,
            typename = _RequireAllocator<_Allocator>>
  unordered_multimap(initializer_list<pair<_Key, _Tp>>,
                     unordered_multimap<int, int>::size_type = {},
                     _Hash = _Hash(),
                     _Pred = _Pred(),
                     _Allocator = _Allocator()) -> unordered_multimap<_Key, _Tp, _Hash, _Pred, _Allocator>;
  template <typename _InputIterator,
            typename _Allocator,
            typename = _RequireInputIter<_InputIterator>,
            typename = _RequireAllocator<_Allocator>>
  unordered_multimap(_InputIterator, _InputIterator, unordered_multimap<int, int>::size_type, _Allocator)
      -> unordered_multimap<__iter_key_t<_InputIterator>,
                            __iter_val_t<_InputIterator>,
                            hash<__iter_key_t<_InputIterator>>,
                            equal_to<__iter_key_t<_InputIterator>>,
                            _Allocator>;
  template <typename _InputIterator,
            typename _Allocator,
            typename = _RequireInputIter<_InputIterator>,
            typename = _RequireAllocator<_Allocator>>
  unordered_multimap(_InputIterator, _InputIterator, _Allocator)
      -> unordered_multimap<__iter_key_t<_InputIterator>,
                            __iter_val_t<_InputIterator>,
                            hash<__iter_key_t<_InputIterator>>,
                            equal_to<__iter_key_t<_InputIterator>>,
                            _Allocator>;
  template <typename _InputIterator,
            typename _Hash,
            typename _Allocator,
            typename = _RequireInputIter<_InputIterator>,
            typename = _RequireNotAllocatorOrIntegral<_Hash>,
            typename = _RequireAllocator<_Allocator>>
  unordered_multimap(_InputIterator, _InputIterator, unordered_multimap<int, int>::size_type, _Hash, _Allocator)
      -> unordered_multimap<__iter_key_t<_InputIterator>,
                            __iter_val_t<_InputIterator>,
                            _Hash,
                            equal_to<__iter_key_t<_InputIterator>>,
                            _Allocator>;
  template <typename _Key, typename _Tp, typename _Allocator, typename = _RequireAllocator<_Allocator>>
  unordered_multimap(initializer_list<pair<_Key, _Tp>>, unordered_multimap<int, int>::size_type, _Allocator)
      -> unordered_multimap<_Key, _Tp, hash<_Key>, equal_to<_Key>, _Allocator>;
  template <typename _Key, typename _Tp, typename _Allocator, typename = _RequireAllocator<_Allocator>>
  unordered_multimap(initializer_list<pair<_Key, _Tp>>, _Allocator)
      -> unordered_multimap<_Key, _Tp, hash<_Key>, equal_to<_Key>, _Allocator>;
  template <typename _Key,
            typename _Tp,
            typename _Hash,
            typename _Allocator,
            typename = _RequireNotAllocatorOrIntegral<_Hash>,
            typename = _RequireAllocator<_Allocator>>
  unordered_multimap(initializer_list<pair<_Key, _Tp>>, unordered_multimap<int, int>::size_type, _Hash, _Allocator)
      -> unordered_multimap<_Key, _Tp, _Hash, equal_to<_Key>, _Allocator>;
  template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
  inline void swap(unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc> & __x,
                   unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc> & __y) noexcept(noexcept(__x.swap(__y)))
  {
    __x.swap(__y);
  }
  template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
  inline void swap(unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc> & __x,
                   unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc> & __y) noexcept(noexcept(__x.swap(__y)))
  {
    __x.swap(__y);
  }
  template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
  inline bool operator==(const unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,
                         const unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)
  {
    return __x._M_h._M_equal(__y._M_h);
  }
  template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
  inline bool operator!=(const unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,
                         const unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)
  {
    return !(__x == __y);
  }
  template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
  inline bool operator==(const unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,
                         const unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)
  {
    return __x._M_h._M_equal(__y._M_h);
  }
  template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
  inline bool operator!=(const unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,
                         const unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __y)
  {
    return !(__x == __y);
  }
  template <typename _Key,
            typename _Val,
            typename _Hash1,
            typename _Eq1,
            typename _Alloc,
            typename _Hash2,
            typename _Eq2>
  struct _Hash_merge_helper<std::unordered_map<_Key, _Val, _Hash1, _Eq1, _Alloc>, _Hash2, _Eq2>
  {
  private:
    template <typename... _Tp>
    using unordered_map = std::unordered_map<_Tp...>;
    template <typename... _Tp>
    using unordered_multimap = std::unordered_multimap<_Tp...>;
    friend unordered_map<_Key, _Val, _Hash1, _Eq1, _Alloc>;
    static auto& _S_get_table(unordered_map<_Key, _Val, _Hash2, _Eq2, _Alloc>& __map) { return __map._M_h; }
    static auto& _S_get_table(unordered_multimap<_Key, _Val, _Hash2, _Eq2, _Alloc>& __map) { return __map._M_h; }
  };
  template <typename _Key,
            typename _Val,
            typename _Hash1,
            typename _Eq1,
            typename _Alloc,
            typename _Hash2,
            typename _Eq2>
  struct _Hash_merge_helper<std::unordered_multimap<_Key, _Val, _Hash1, _Eq1, _Alloc>, _Hash2, _Eq2>
  {
  private:
    template <typename... _Tp>
    using unordered_map = std::unordered_map<_Tp...>;
    template <typename... _Tp>
    using unordered_multimap = std::unordered_multimap<_Tp...>;
    friend unordered_multimap<_Key, _Val, _Hash1, _Eq1, _Alloc>;
    static auto& _S_get_table(unordered_map<_Key, _Val, _Hash2, _Eq2, _Alloc>& __map) { return __map._M_h; }
    static auto& _S_get_table(unordered_multimap<_Key, _Val, _Hash2, _Eq2, _Alloc>& __map) { return __map._M_h; }
  };
}  // namespace )
namespace std
{
namespace __detail
{
template <typename _Container, typename _Predicate>
typename _Container::size_type __erase_nodes_if(_Container& __cont, _Predicate __pred)
{
  typename _Container::size_type __num = 0;
  for (auto __iter = __cont.begin(), __last = __cont.end(); __iter != __last;)
  {
    if (__pred(*__iter))
    {
      __iter = __cont.erase(__iter);
      ++__num;
    }
    else
      ++__iter;
  }
  return __num;
}
}  // namespace __detail
}  // namespace std
namespace std __attribute__((__visibility__("default")))
{
  namespace pmr
  {
  template <typename _Tp>
  class polymorphic_allocator;
  template <typename _Key, typename _Tp, typename _Hash = std::hash<_Key>, typename _Pred = std::equal_to<_Key>>
  using unordered_map = std::unordered_map<_Key, _Tp, _Hash, _Pred, polymorphic_allocator<pair<const _Key, _Tp>>>;
  template <typename _Key, typename _Tp, typename _Hash = std::hash<_Key>, typename _Pred = std::equal_to<_Key>>
  using unordered_multimap =
      std::unordered_multimap<_Key, _Tp, _Hash, _Pred, polymorphic_allocator<pair<const _Key, _Tp>>>;
  }  // namespace pmr
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _T1, typename... _Args>
  inline void _Construct(_T1 * __p, _Args && ... __args)
  {
    ::new (static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...);
  }
  template <typename _T1>
  inline void _Construct_novalue(_T1 * __p)
  {
    ::new (static_cast<void*>(__p)) _T1;
  }
  template <typename _Tp>
  inline void _Destroy(_Tp * __pointer)
  {
    __pointer->~_Tp();
  }
  template <bool>
  struct _Destroy_aux
  {
    template <typename _ForwardIterator>
    static void __destroy(_ForwardIterator __first, _ForwardIterator __last)
    {
      for (; __first != __last; ++__first)
        std::_Destroy(std::__addressof(*__first));
    }
  };
  template <>
  struct _Destroy_aux<true>
  {
    template <typename _ForwardIterator>
    static void __destroy(_ForwardIterator, _ForwardIterator)
    {
    }
  };
  template <typename _ForwardIterator>
  inline void _Destroy(_ForwardIterator __first, _ForwardIterator __last)
  {
    typedef typename iterator_traits<_ForwardIterator>::value_type _Value_type;
    static_assert(is_destructible<_Value_type>::value, "value type is destructible");
    std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::__destroy(__first, __last);
  }
  template <bool>
  struct _Destroy_n_aux
  {
    template <typename _ForwardIterator, typename _Size>
    static _ForwardIterator __destroy_n(_ForwardIterator __first, _Size __count)
    {
      for (; __count > 0; (void)++__first, --__count)
        std::_Destroy(std::__addressof(*__first));
      return __first;
    }
  };
  template <>
  struct _Destroy_n_aux<true>
  {
    template <typename _ForwardIterator, typename _Size>
    static _ForwardIterator __destroy_n(_ForwardIterator __first, _Size __count)
    {
      std::advance(__first, __count);
      return __first;
    }
  };
  template <typename _ForwardIterator, typename _Size>
  inline _ForwardIterator _Destroy_n(_ForwardIterator __first, _Size __count)
  {
    typedef typename iterator_traits<_ForwardIterator>::value_type _Value_type;
    static_assert(is_destructible<_Value_type>::value, "value type is destructible");
    return std::_Destroy_n_aux<__has_trivial_destructor(_Value_type)>::__destroy_n(__first, __count);
  }
  template <typename _ForwardIterator, typename _Allocator>
  void _Destroy(_ForwardIterator __first, _ForwardIterator __last, _Allocator & __alloc)
  {
    typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
    for (; __first != __last; ++__first)
      __traits::destroy(__alloc, std::__addressof(*__first));
  }
  template <typename _ForwardIterator, typename _Tp>
  inline void _Destroy(_ForwardIterator __first, _ForwardIterator __last, allocator<_Tp>&)
  {
    _Destroy(__first, __last);
  }
  template <typename _Tp>
  inline void destroy_at(_Tp * __location)
  {
    std::_Destroy(__location);
  }
  template <typename _ForwardIterator>
  inline void destroy(_ForwardIterator __first, _ForwardIterator __last)
  {
    std::_Destroy(__first, __last);
  }
  template <typename _ForwardIterator, typename _Size>
  inline _ForwardIterator destroy_n(_ForwardIterator __first, _Size __count)
  {
    return std::_Destroy_n(__first, __count);
  }
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <bool _TrivialValueTypes>
  struct __uninitialized_copy
  {
    template <typename _InputIterator, typename _ForwardIterator>
    static _ForwardIterator __uninit_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator __result)
    {
      _ForwardIterator __cur = __result;
      try
      {
        for (; __first != __last; ++__first, (void)++__cur)
          std::_Construct(std::__addressof(*__cur), *__first);
        return __cur;
      }
      catch (...)
      {
        std::_Destroy(__result, __cur);
        throw;
      }
    }
  };
  template <>
  struct __uninitialized_copy<true>
  {
    template <typename _InputIterator, typename _ForwardIterator>
    static _ForwardIterator __uninit_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator __result)
    {
      return std::copy(__first, __last, __result);
    }
  };
  template <typename _InputIterator, typename _ForwardIterator>
  inline _ForwardIterator uninitialized_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator __result)
  {
    typedef typename iterator_traits<_InputIterator>::value_type _ValueType1;
    typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType2;
    static_assert(is_constructible<_ValueType2, decltype(*__first)>::value,
                  "result type must be constructible from value type of input range");
    typedef typename iterator_traits<_InputIterator>::reference _RefType1;
    typedef typename iterator_traits<_ForwardIterator>::reference _RefType2;
    const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
    return std::__uninitialized_copy < __is_trivial(_ValueType1) && __is_trivial(_ValueType2) &&
           __assignable > ::__uninit_copy(__first, __last, __result);
  }
  template <bool _TrivialValueType>
  struct __uninitialized_fill
  {
    template <typename _ForwardIterator, typename _Tp>
    static void __uninit_fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __x)
    {
      _ForwardIterator __cur = __first;
      try
      {
        for (; __cur != __last; ++__cur)
          std::_Construct(std::__addressof(*__cur), __x);
      }
      catch (...)
      {
        std::_Destroy(__first, __cur);
        throw;
      }
    }
  };
  template <>
  struct __uninitialized_fill<true>
  {
    template <typename _ForwardIterator, typename _Tp>
    static void __uninit_fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __x)
    {
      std::fill(__first, __last, __x);
    }
  };
  template <typename _ForwardIterator, typename _Tp>
  inline void uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __x)
  {
    typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;
    static_assert(is_constructible<_ValueType, const _Tp&>::value, "result type must be constructible from input type");
    const bool __assignable = is_copy_assignable<_ValueType>::value;
    std::__uninitialized_fill<__is_trivial(_ValueType) && __assignable>::__uninit_fill(__first, __last, __x);
  }
  template <bool _TrivialValueType>
  struct __uninitialized_fill_n
  {
    template <typename _ForwardIterator, typename _Size, typename _Tp>
    static _ForwardIterator __uninit_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
    {
      _ForwardIterator __cur = __first;
      try
      {
        for (; __n > 0; --__n, (void)++__cur)
          std::_Construct(std::__addressof(*__cur), __x);
        return __cur;
      }
      catch (...)
      {
        std::_Destroy(__first, __cur);
        throw;
      }
    }
  };
  template <>
  struct __uninitialized_fill_n<true>
  {
    template <typename _ForwardIterator, typename _Size, typename _Tp>
    static _ForwardIterator __uninit_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
    {
      return std::fill_n(__first, __n, __x);
    }
  };
  template <typename _ForwardIterator, typename _Size, typename _Tp>
  inline _ForwardIterator uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
  {
    typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;
    static_assert(is_constructible<_ValueType, const _Tp&>::value, "result type must be constructible from input type");
    const bool __assignable = is_copy_assignable<_ValueType>::value;
    return __uninitialized_fill_n < __is_trivial(_ValueType) && __assignable > ::__uninit_fill_n(__first, __n, __x);
  }
  template <typename _InputIterator, typename _ForwardIterator, typename _Allocator>
  _ForwardIterator __uninitialized_copy_a(
      _InputIterator __first, _InputIterator __last, _ForwardIterator __result, _Allocator & __alloc)
  {
    _ForwardIterator __cur = __result;
    try
    {
      typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
      for (; __first != __last; ++__first, (void)++__cur)
        __traits::construct(__alloc, std::__addressof(*__cur), *__first);
      return __cur;
    }
    catch (...)
    {
      std::_Destroy(__result, __cur, __alloc);
      throw;
    }
  }
  template <typename _InputIterator, typename _ForwardIterator, typename _Tp>
  inline _ForwardIterator __uninitialized_copy_a(
      _InputIterator __first, _InputIterator __last, _ForwardIterator __result, allocator<_Tp>&)
  {
    return std::uninitialized_copy(__first, __last, __result);
  }
  template <typename _InputIterator, typename _ForwardIterator, typename _Allocator>
  inline _ForwardIterator __uninitialized_move_a(
      _InputIterator __first, _InputIterator __last, _ForwardIterator __result, _Allocator & __alloc)
  {
    return std::__uninitialized_copy_a(
        std::make_move_iterator(__first), std::make_move_iterator(__last), __result, __alloc);
  }
  template <typename _InputIterator, typename _ForwardIterator, typename _Allocator>
  inline _ForwardIterator __uninitialized_move_if_noexcept_a(
      _InputIterator __first, _InputIterator __last, _ForwardIterator __result, _Allocator & __alloc)
  {
    return std::__uninitialized_copy_a(std::__make_move_if_noexcept_iterator(__first),
                                       std::__make_move_if_noexcept_iterator(__last),
                                       __result,
                                       __alloc);
  }
  template <typename _ForwardIterator, typename _Tp, typename _Allocator>
  void __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __x, _Allocator& __alloc)
  {
    _ForwardIterator __cur = __first;
    try
    {
      typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
      for (; __cur != __last; ++__cur)
        __traits::construct(__alloc, std::__addressof(*__cur), __x);
    }
    catch (...)
    {
      std::_Destroy(__first, __cur, __alloc);
      throw;
    }
  }
  template <typename _ForwardIterator, typename _Tp, typename _Tp2>
  inline void __uninitialized_fill_a(
      _ForwardIterator __first, _ForwardIterator __last, const _Tp& __x, allocator<_Tp2>&)
  {
    std::uninitialized_fill(__first, __last, __x);
  }
  template <typename _ForwardIterator, typename _Size, typename _Tp, typename _Allocator>
  _ForwardIterator __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, const _Tp& __x, _Allocator& __alloc)
  {
    _ForwardIterator __cur = __first;
    try
    {
      typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
      for (; __n > 0; --__n, (void)++__cur)
        __traits::construct(__alloc, std::__addressof(*__cur), __x);
      return __cur;
    }
    catch (...)
    {
      std::_Destroy(__first, __cur, __alloc);
      throw;
    }
  }
  template <typename _ForwardIterator, typename _Size, typename _Tp, typename _Tp2>
  inline _ForwardIterator __uninitialized_fill_n_a(
      _ForwardIterator __first, _Size __n, const _Tp& __x, allocator<_Tp2>&)
  {
    return std::uninitialized_fill_n(__first, __n, __x);
  }
  template <typename _InputIterator1, typename _InputIterator2, typename _ForwardIterator, typename _Allocator>
  inline _ForwardIterator __uninitialized_copy_move(_InputIterator1 __first1,
                                                    _InputIterator1 __last1,
                                                    _InputIterator2 __first2,
                                                    _InputIterator2 __last2,
                                                    _ForwardIterator __result,
                                                    _Allocator & __alloc)
  {
    _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1, __result, __alloc);
    try
    {
      return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
    }
    catch (...)
    {
      std::_Destroy(__result, __mid, __alloc);
      throw;
    }
  }
  template <typename _InputIterator1, typename _InputIterator2, typename _ForwardIterator, typename _Allocator>
  inline _ForwardIterator __uninitialized_move_copy(_InputIterator1 __first1,
                                                    _InputIterator1 __last1,
                                                    _InputIterator2 __first2,
                                                    _InputIterator2 __last2,
                                                    _ForwardIterator __result,
                                                    _Allocator & __alloc)
  {
    _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1, __result, __alloc);
    try
    {
      return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
    }
    catch (...)
    {
      std::_Destroy(__result, __mid, __alloc);
      throw;
    }
  }
  template <typename _ForwardIterator, typename _Tp, typename _InputIterator, typename _Allocator>
  inline _ForwardIterator __uninitialized_fill_move(_ForwardIterator __result,
                                                    _ForwardIterator __mid,
                                                    const _Tp& __x,
                                                    _InputIterator __first,
                                                    _InputIterator __last,
                                                    _Allocator& __alloc)
  {
    std::__uninitialized_fill_a(__result, __mid, __x, __alloc);
    try
    {
      return std::__uninitialized_move_a(__first, __last, __mid, __alloc);
    }
    catch (...)
    {
      std::_Destroy(__result, __mid, __alloc);
      throw;
    }
  }
  template <typename _InputIterator, typename _ForwardIterator, typename _Tp, typename _Allocator>
  inline void __uninitialized_move_fill(_InputIterator __first1,
                                        _InputIterator __last1,
                                        _ForwardIterator __first2,
                                        _ForwardIterator __last2,
                                        const _Tp& __x,
                                        _Allocator& __alloc)
  {
    _ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1, __first2, __alloc);
    try
    {
      std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc);
    }
    catch (...)
    {
      std::_Destroy(__first2, __mid2, __alloc);
      throw;
    }
  }
  template <bool _TrivialValueType>
  struct __uninitialized_default_1
  {
    template <typename _ForwardIterator>
    static void __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
    {
      _ForwardIterator __cur = __first;
      try
      {
        for (; __cur != __last; ++__cur)
          std::_Construct(std::__addressof(*__cur));
      }
      catch (...)
      {
        std::_Destroy(__first, __cur);
        throw;
      }
    }
  };
  template <>
  struct __uninitialized_default_1<true>
  {
    template <typename _ForwardIterator>
    static void __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;
      std::fill(__first, __last, _ValueType());
    }
  };
  template <bool _TrivialValueType>
  struct __uninitialized_default_n_1
  {
    template <typename _ForwardIterator, typename _Size>
    static _ForwardIterator __uninit_default_n(_ForwardIterator __first, _Size __n)
    {
      _ForwardIterator __cur = __first;
      try
      {
        for (; __n > 0; --__n, (void)++__cur)
          std::_Construct(std::__addressof(*__cur));
        return __cur;
      }
      catch (...)
      {
        std::_Destroy(__first, __cur);
        throw;
      }
    }
  };
  template <>
  struct __uninitialized_default_n_1<true>
  {
    template <typename _ForwardIterator, typename _Size>
    static _ForwardIterator __uninit_default_n(_ForwardIterator __first, _Size __n)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;
      return std::fill_n(__first, __n, _ValueType());
    }
  };
  template <typename _ForwardIterator>
  inline void __uninitialized_default(_ForwardIterator __first, _ForwardIterator __last)
  {
    typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;
    const bool __assignable = is_copy_assignable<_ValueType>::value;
    std::__uninitialized_default_1<__is_trivial(_ValueType) && __assignable>::__uninit_default(__first, __last);
  }
  template <typename _ForwardIterator, typename _Size>
  inline _ForwardIterator __uninitialized_default_n(_ForwardIterator __first, _Size __n)
  {
    typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;
    const bool __assignable = is_copy_assignable<_ValueType>::value;
    return __uninitialized_default_n_1 < __is_trivial(_ValueType) && __assignable > ::__uninit_default_n(__first, __n);
  }
  template <typename _ForwardIterator, typename _Allocator>
  void __uninitialized_default_a(_ForwardIterator __first, _ForwardIterator __last, _Allocator & __alloc)
  {
    _ForwardIterator __cur = __first;
    try
    {
      typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
      for (; __cur != __last; ++__cur)
        __traits::construct(__alloc, std::__addressof(*__cur));
    }
    catch (...)
    {
      std::_Destroy(__first, __cur, __alloc);
      throw;
    }
  }
  template <typename _ForwardIterator, typename _Tp>
  inline void __uninitialized_default_a(_ForwardIterator __first, _ForwardIterator __last, allocator<_Tp>&)
  {
    std::__uninitialized_default(__first, __last);
  }
  template <typename _ForwardIterator, typename _Size, typename _Allocator>
  _ForwardIterator __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, _Allocator & __alloc)
  {
    _ForwardIterator __cur = __first;
    try
    {
      typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
      for (; __n > 0; --__n, (void)++__cur)
        __traits::construct(__alloc, std::__addressof(*__cur));
      return __cur;
    }
    catch (...)
    {
      std::_Destroy(__first, __cur, __alloc);
      throw;
    }
  }
  template <typename _ForwardIterator, typename _Size, typename _Tp>
  inline _ForwardIterator __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, allocator<_Tp>&)
  {
    return std::__uninitialized_default_n(__first, __n);
  }
  template <bool _TrivialValueType>
  struct __uninitialized_default_novalue_1
  {
    template <typename _ForwardIterator>
    static void __uninit_default_novalue(_ForwardIterator __first, _ForwardIterator __last)
    {
      _ForwardIterator __cur = __first;
      try
      {
        for (; __cur != __last; ++__cur)
          std::_Construct_novalue(std::__addressof(*__cur));
      }
      catch (...)
      {
        std::_Destroy(__first, __cur);
        throw;
      }
    }
  };
  template <>
  struct __uninitialized_default_novalue_1<true>
  {
    template <typename _ForwardIterator>
    static void __uninit_default_novalue(_ForwardIterator __first, _ForwardIterator __last)
    {
    }
  };
  template <bool _TrivialValueType>
  struct __uninitialized_default_novalue_n_1
  {
    template <typename _ForwardIterator, typename _Size>
    static _ForwardIterator __uninit_default_novalue_n(_ForwardIterator __first, _Size __n)
    {
      _ForwardIterator __cur = __first;
      try
      {
        for (; __n > 0; --__n, (void)++__cur)
          std::_Construct_novalue(std::__addressof(*__cur));
        return __cur;
      }
      catch (...)
      {
        std::_Destroy(__first, __cur);
        throw;
      }
    }
  };
  template <>
  struct __uninitialized_default_novalue_n_1<true>
  {
    template <typename _ForwardIterator, typename _Size>
    static _ForwardIterator __uninit_default_novalue_n(_ForwardIterator __first, _Size __n)
    {
      return std::next(__first, __n);
    }
  };
  template <typename _ForwardIterator>
  inline void __uninitialized_default_novalue(_ForwardIterator __first, _ForwardIterator __last)
  {
    typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;
    std::__uninitialized_default_novalue_1<
        is_trivially_default_constructible<_ValueType>::value>::__uninit_default_novalue(__first, __last);
  }
  template <typename _ForwardIterator, typename _Size>
  inline _ForwardIterator __uninitialized_default_novalue_n(_ForwardIterator __first, _Size __n)
  {
    typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;
    return __uninitialized_default_novalue_n_1<
        is_trivially_default_constructible<_ValueType>::value>::__uninit_default_novalue_n(__first, __n);
  }
  template <typename _InputIterator, typename _Size, typename _ForwardIterator>
  _ForwardIterator __uninitialized_copy_n(
      _InputIterator __first, _Size __n, _ForwardIterator __result, input_iterator_tag)
  {
    _ForwardIterator __cur = __result;
    try
    {
      for (; __n > 0; --__n, (void)++__first, ++__cur)
        std::_Construct(std::__addressof(*__cur), *__first);
      return __cur;
    }
    catch (...)
    {
      std::_Destroy(__result, __cur);
      throw;
    }
  }
  template <typename _RandomAccessIterator, typename _Size, typename _ForwardIterator>
  inline _ForwardIterator __uninitialized_copy_n(
      _RandomAccessIterator __first, _Size __n, _ForwardIterator __result, random_access_iterator_tag)
  {
    return std::uninitialized_copy(__first, __first + __n, __result);
  }
  template <typename _InputIterator, typename _Size, typename _ForwardIterator>
  pair<_InputIterator, _ForwardIterator> __uninitialized_copy_n_pair(
      _InputIterator __first, _Size __n, _ForwardIterator __result, input_iterator_tag)
  {
    _ForwardIterator __cur = __result;
    try
    {
      for (; __n > 0; --__n, (void)++__first, ++__cur)
        std::_Construct(std::__addressof(*__cur), *__first);
      return {__first, __cur};
    }
    catch (...)
    {
      std::_Destroy(__result, __cur);
      throw;
    }
  }
  template <typename _RandomAccessIterator, typename _Size, typename _ForwardIterator>
  inline pair<_RandomAccessIterator, _ForwardIterator> __uninitialized_copy_n_pair(
      _RandomAccessIterator __first, _Size __n, _ForwardIterator __result, random_access_iterator_tag)
  {
    auto __second_res = uninitialized_copy(__first, __first + __n, __result);
    auto __first_res = std::next(__first, __n);
    return {__first_res, __second_res};
  }
  template <typename _InputIterator, typename _Size, typename _ForwardIterator>
  inline _ForwardIterator uninitialized_copy_n(_InputIterator __first, _Size __n, _ForwardIterator __result)
  {
    return std::__uninitialized_copy_n(__first, __n, __result, std::__iterator_category(__first));
  }
  template <typename _InputIterator, typename _Size, typename _ForwardIterator>
  inline pair<_InputIterator, _ForwardIterator> __uninitialized_copy_n_pair(
      _InputIterator __first, _Size __n, _ForwardIterator __result)
  {
    return std::__uninitialized_copy_n_pair(__first, __n, __result, std::__iterator_category(__first));
  }
  template <typename _ForwardIterator>
  inline void uninitialized_default_construct(_ForwardIterator __first, _ForwardIterator __last)
  {
    __uninitialized_default_novalue(__first, __last);
  }
  template <typename _ForwardIterator, typename _Size>
  inline _ForwardIterator uninitialized_default_construct_n(_ForwardIterator __first, _Size __count)
  {
    return __uninitialized_default_novalue_n(__first, __count);
  }
  template <typename _ForwardIterator>
  inline void uninitialized_value_construct(_ForwardIterator __first, _ForwardIterator __last)
  {
    return __uninitialized_default(__first, __last);
  }
  template <typename _ForwardIterator, typename _Size>
  inline _ForwardIterator uninitialized_value_construct_n(_ForwardIterator __first, _Size __count)
  {
    return __uninitialized_default_n(__first, __count);
  }
  template <typename _InputIterator, typename _ForwardIterator>
  inline _ForwardIterator uninitialized_move(_InputIterator __first, _InputIterator __last, _ForwardIterator __result)
  {
    return std::uninitialized_copy(std::make_move_iterator(__first), std::make_move_iterator(__last), __result);
  }
  template <typename _InputIterator, typename _Size, typename _ForwardIterator>
  inline pair<_InputIterator, _ForwardIterator> uninitialized_move_n(
      _InputIterator __first, _Size __count, _ForwardIterator __result)
  {
    auto __res = std::__uninitialized_copy_n_pair(std::make_move_iterator(__first), __count, __result);
    return {__res.first.base(), __res.second};
  }
  template <typename _Tp, typename _Up, typename _Allocator>
  inline void __relocate_object_a(_Tp * __dest, _Up * __orig, _Allocator & __alloc) noexcept(
      noexcept(std::allocator_traits<_Allocator>::construct(__alloc, __dest, std::move(*__orig)))&& noexcept(
          std::allocator_traits<_Allocator>::destroy(__alloc, std::__addressof(*__orig))))
  {
    typedef std::allocator_traits<_Allocator> __traits;
    __traits::construct(__alloc, __dest, std::move(*__orig));
    __traits::destroy(__alloc, std::__addressof(*__orig));
  }
  template <typename _Tp, typename = void>
  struct __is_bitwise_relocatable : is_trivial<_Tp>
  {
  };
  template <typename _Tp, typename _Up>
  inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*> __relocate_a_1(
      _Tp * __first, _Tp * __last, _Tp * __result, allocator<_Up>&) noexcept
  {
    ptrdiff_t __count = __last - __first;
    if (__count > 0)
      __builtin_memmove(__result, __first, __count * sizeof(_Tp));
    return __result + __count;
  }
  template <typename _InputIterator, typename _ForwardIterator, typename _Allocator>
  inline _ForwardIterator __relocate_a_1(
      _InputIterator __first,
      _InputIterator __last,
      _ForwardIterator __result,
      _Allocator & __alloc) noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
                                                                       std::addressof(*__first),
                                                                       __alloc)))
  {
    typedef typename iterator_traits<_InputIterator>::value_type _ValueType;
    typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType2;
    static_assert(std::is_same<_ValueType, _ValueType2>::value,
                  "relocation is only possible for values of the same type");
    _ForwardIterator __cur = __result;
    for (; __first != __last; ++__first, (void)++__cur)
      std::__relocate_object_a(std::__addressof(*__cur), std::__addressof(*__first), __alloc);
    return __cur;
  }
  template <typename _InputIterator, typename _ForwardIterator, typename _Allocator>
  inline _ForwardIterator
  __relocate_a(_InputIterator __first, _InputIterator __last, _ForwardIterator __result, _Allocator & __alloc) noexcept(
      noexcept(
          __relocate_a_1(std::__niter_base(__first), std::__niter_base(__last), std::__niter_base(__result), __alloc)))
  {
    return __relocate_a_1(std::__niter_base(__first), std::__niter_base(__last), std::__niter_base(__result), __alloc);
  }
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _Tp, typename _Alloc>
  struct _Vector_base
  {
    typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template rebind<_Tp>::other _Tp_alloc_type;
    typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer pointer;
    struct _Vector_impl_data
    {
      pointer _M_start;
      pointer _M_finish;
      pointer _M_end_of_storage;
      _Vector_impl_data() noexcept : _M_start(), _M_finish(), _M_end_of_storage() {}
      _Vector_impl_data(_Vector_impl_data&& __x) noexcept
          : _M_start(__x._M_start), _M_finish(__x._M_finish), _M_end_of_storage(__x._M_end_of_storage)
      {
        __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer();
      }
      void _M_copy_data(_Vector_impl_data const& __x) noexcept
      {
        _M_start = __x._M_start;
        _M_finish = __x._M_finish;
        _M_end_of_storage = __x._M_end_of_storage;
      }
      void _M_swap_data(_Vector_impl_data& __x) noexcept
      {
        _Vector_impl_data __tmp;
        __tmp._M_copy_data(*this);
        _M_copy_data(__x);
        __x._M_copy_data(__tmp);
      }
    };
    struct _Vector_impl : public _Tp_alloc_type, public _Vector_impl_data
    {
      _Vector_impl() noexcept(is_nothrow_default_constructible<_Tp_alloc_type>::value) : _Tp_alloc_type() {}
      _Vector_impl(_Tp_alloc_type const& __a) noexcept : _Tp_alloc_type(__a) {}
      _Vector_impl(_Vector_impl&& __x) noexcept : _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x)) {}
      _Vector_impl(_Tp_alloc_type&& __a) noexcept : _Tp_alloc_type(std::move(__a)) {}
      _Vector_impl(_Tp_alloc_type&& __a, _Vector_impl&& __rv) noexcept
          : _Tp_alloc_type(std::move(__a)), _Vector_impl_data(std::move(__rv))
      {
      }
    };

  public:
    typedef _Alloc allocator_type;
    _Tp_alloc_type& _M_get_Tp_allocator() noexcept { return this->_M_impl; }
    const _Tp_alloc_type& _M_get_Tp_allocator() const noexcept { return this->_M_impl; }
    allocator_type get_allocator() const noexcept { return allocator_type(_M_get_Tp_allocator()); }
    _Vector_base() = default;
    _Vector_base(const allocator_type& __a) noexcept : _M_impl(__a) {}
    _Vector_base(size_t __n) : _M_impl() { _M_create_storage(__n); }
    _Vector_base(size_t __n, const allocator_type& __a) : _M_impl(__a) { _M_create_storage(__n); }
    _Vector_base(_Vector_base&&) = default;
    _Vector_base(_Tp_alloc_type&& __a) noexcept : _M_impl(std::move(__a)) {}
    _Vector_base(_Vector_base&& __x, const allocator_type& __a) : _M_impl(__a)
    {
      if (__x.get_allocator() == __a)
        this->_M_impl._M_swap_data(__x._M_impl);
      else
      {
        size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
        _M_create_storage(__n);
      }
    }
    _Vector_base(const allocator_type& __a, _Vector_base&& __x) : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
    {
    }
    ~_Vector_base() noexcept { _M_deallocate(_M_impl._M_start, _M_impl._M_end_of_storage - _M_impl._M_start); }

  public:
    _Vector_impl _M_impl;
    pointer _M_allocate(size_t __n)
    {
      typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
      return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    }
    void _M_deallocate(pointer __p, size_t __n)
    {
      typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
      if (__p)
        _Tr::deallocate(_M_impl, __p, __n);
    }

  protected:
    void _M_create_storage(size_t __n)
    {
      this->_M_impl._M_start = this->_M_allocate(__n);
      this->_M_impl._M_finish = this->_M_impl._M_start;
      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    }
  };
  template <typename _Tp, typename _Alloc = std::allocator<_Tp>>
  class vector : protected _Vector_base<_Tp, _Alloc>
  {
    static_assert(is_same<typename remove_cv<_Tp>::type, _Tp>::value,
                  "std::vector must have a non-const, non-volatile value_type");
    static_assert(is_same<typename _Alloc::value_type, _Tp>::value,
                  "std::vector must have the same value_type as its allocator");
    typedef _Vector_base<_Tp, _Alloc> _Base;
    typedef typename _Base::_Tp_alloc_type _Tp_alloc_type;
    typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Alloc_traits;

  public:
    typedef _Tp value_type;
    typedef typename _Base::pointer pointer;
    typedef typename _Alloc_traits::const_pointer const_pointer;
    typedef typename _Alloc_traits::reference reference;
    typedef typename _Alloc_traits::const_reference const_reference;
    typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
    typedef __gnu_cxx::__normal_iterator<const_pointer, vector> const_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
    typedef std::reverse_iterator<iterator> reverse_iterator;
    typedef size_t size_type;
    typedef ptrdiff_t difference_type;
    typedef _Alloc allocator_type;

  private:
    static constexpr bool _S_nothrow_relocate(true_type)
    {
      return noexcept(std::__relocate_a(
          std::declval<pointer>(), std::declval<pointer>(), std::declval<pointer>(), std::declval<_Tp_alloc_type&>()));
    }
    static constexpr bool _S_nothrow_relocate(false_type) { return false; }
    static constexpr bool _S_use_relocate() { return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{}); }
    static pointer _S_do_relocate(pointer __first,
                                  pointer __last,
                                  pointer __result,
                                  _Tp_alloc_type& __alloc,
                                  true_type) noexcept
    {
      return std::__relocate_a(__first, __last, __result, __alloc);
    }
    static pointer _S_do_relocate(pointer, pointer, pointer __result, _Tp_alloc_type&, false_type) noexcept
    {
      return __result;
    }
    static pointer _S_relocate(pointer __first, pointer __last, pointer __result, _Tp_alloc_type& __alloc) noexcept
    {
      using __do_it = __bool_constant<_S_use_relocate()>;
      return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
    }

  protected:
    using _Base::_M_allocate;
    using _Base::_M_deallocate;
    using _Base::_M_get_Tp_allocator;
    using _Base::_M_impl;

  public:
    vector() = default;
    explicit vector(const allocator_type& __a) noexcept : _Base(__a) {}
    explicit vector(size_type __n, const allocator_type& __a = allocator_type())
        : _Base(_S_check_init_len(__n, __a), __a)
    {
      _M_default_initialize(__n);
    }
    vector(size_type __n, const value_type& __value, const allocator_type& __a = allocator_type())
        : _Base(_S_check_init_len(__n, __a), __a)
    {
      _M_fill_initialize(__n, __value);
    }
    vector(const vector& __x) : _Base(__x.size(), _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
    {
      this->_M_impl._M_finish =
          std::__uninitialized_copy_a(__x.begin(), __x.end(), this->_M_impl._M_start, _M_get_Tp_allocator());
    }
    vector(vector&&) noexcept = default;
    vector(const vector& __x, const allocator_type& __a) : _Base(__x.size(), __a)
    {
      this->_M_impl._M_finish =
          std::__uninitialized_copy_a(__x.begin(), __x.end(), this->_M_impl._M_start, _M_get_Tp_allocator());
    }

  private:
    vector(vector&& __rv, const allocator_type& __m, true_type) noexcept : _Base(__m, std::move(__rv)) {}
    vector(vector&& __rv, const allocator_type& __m, false_type) : _Base(__m)
    {
      if (__rv.get_allocator() == __m)
        this->_M_impl._M_swap_data(__rv._M_impl);
      else if (!__rv.empty())
      {
        this->_M_create_storage(__rv.size());
        this->_M_impl._M_finish =
            std::__uninitialized_move_a(__rv.begin(), __rv.end(), this->_M_impl._M_start, _M_get_Tp_allocator());
        __rv.clear();
      }
    }

  public:
    vector(vector&& __rv, const allocator_type& __m) noexcept(
        noexcept(vector(std::declval<vector&&>(),
                        std::declval<const allocator_type&>(),
                        std::declval<typename _Alloc_traits::is_always_equal>())))
        : vector(std::move(__rv), __m, typename _Alloc_traits::is_always_equal{})
    {
    }
    vector(initializer_list<value_type> __l, const allocator_type& __a = allocator_type()) : _Base(__a)
    {
      _M_range_initialize(__l.begin(), __l.end(), random_access_iterator_tag());
    }
    template <typename _InputIterator, typename = std::_RequireInputIter<_InputIterator>>
    vector(_InputIterator __first, _InputIterator __last, const allocator_type& __a = allocator_type()) : _Base(__a)
    {
      _M_range_initialize(__first, __last, std::__iterator_category(__first));
    }
    ~vector() noexcept
    {
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish, _M_get_Tp_allocator());
      ;
    }
    vector& operator=(const vector& __x);
    vector& operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
    {
      constexpr bool __move_storage = _Alloc_traits::_S_propagate_on_move_assign() || _Alloc_traits::_S_always_equal();
      _M_move_assign(std::move(__x), __bool_constant<__move_storage>());
      return *this;
    }
    vector& operator=(initializer_list<value_type> __l)
    {
      this->_M_assign_aux(__l.begin(), __l.end(), random_access_iterator_tag());
      return *this;
    }
    void assign(size_type __n, const value_type& __val) { _M_fill_assign(__n, __val); }
    template <typename _InputIterator, typename = std::_RequireInputIter<_InputIterator>>
    void assign(_InputIterator __first, _InputIterator __last)
    {
      _M_assign_dispatch(__first, __last, __false_type());
    }
    void assign(initializer_list<value_type> __l)
    {
      this->_M_assign_aux(__l.begin(), __l.end(), random_access_iterator_tag());
    }
    using _Base::get_allocator;
    iterator begin() noexcept { return iterator(this->_M_impl._M_start); }
    const_iterator begin() const noexcept { return const_iterator(this->_M_impl._M_start); }
    iterator end() noexcept { return iterator(this->_M_impl._M_finish); }
    const_iterator end() const noexcept { return const_iterator(this->_M_impl._M_finish); }
    reverse_iterator rbegin() noexcept { return reverse_iterator(end()); }
    const_reverse_iterator rbegin() const noexcept { return const_reverse_iterator(end()); }
    reverse_iterator rend() noexcept { return reverse_iterator(begin()); }
    const_reverse_iterator rend() const noexcept { return const_reverse_iterator(begin()); }
    const_iterator cbegin() const noexcept { return const_iterator(this->_M_impl._M_start); }
    const_iterator cend() const noexcept { return const_iterator(this->_M_impl._M_finish); }
    const_reverse_iterator crbegin() const noexcept { return const_reverse_iterator(end()); }
    const_reverse_iterator crend() const noexcept { return const_reverse_iterator(begin()); }
    size_type size() const noexcept { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    size_type max_size() const noexcept { return _S_max_size(_M_get_Tp_allocator()); }
    void resize(size_type __new_size)
    {
      if (__new_size > size())
        _M_default_append(__new_size - size());
      else if (__new_size < size())
        _M_erase_at_end(this->_M_impl._M_start + __new_size);
    }
    void resize(size_type __new_size, const value_type& __x)
    {
      if (__new_size > size())
        _M_fill_insert(end(), __new_size - size(), __x);
      else if (__new_size < size())
        _M_erase_at_end(this->_M_impl._M_start + __new_size);
    }
    void shrink_to_fit() { _M_shrink_to_fit(); }
    size_type capacity() const noexcept { return size_type(this->_M_impl._M_end_of_storage - this->_M_impl._M_start); }
    [[__nodiscard__]] bool empty() const noexcept { return begin() == end(); }
    void reserve(size_type __n);
    reference operator[](size_type __n) noexcept
    {
      ;
      return *(this->_M_impl._M_start + __n);
    }
    const_reference operator[](size_type __n) const noexcept
    {
      ;
      return *(this->_M_impl._M_start + __n);
    }

  protected:
    void _M_range_check(size_type __n) const
    {
      if (__n >= this->size())
        __throw_out_of_range_fmt(("vector::_M_range_check: __n "
                                  "(which is %zu) >= this->size() "
                                  "(which is %zu)"),
                                 __n,
                                 this->size());
    }

  public:
    reference at(size_type __n)
    {
      _M_range_check(__n);
      return (*this)[__n];
    }
    const_reference at(size_type __n) const
    {
      _M_range_check(__n);
      return (*this)[__n];
    }
    reference front() noexcept
    {
      ;
      return *begin();
    }
    const_reference front() const noexcept
    {
      ;
      return *begin();
    }
    reference back() noexcept
    {
      ;
      return *(end() - 1);
    }
    const_reference back() const noexcept
    {
      ;
      return *(end() - 1);
    }
    _Tp* data() noexcept { return _M_data_ptr(this->_M_impl._M_start); }
    const _Tp* data() const noexcept { return _M_data_ptr(this->_M_impl._M_start); }
    void push_back(const value_type& __x)
    {
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
      {
        ;
        _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish, __x);
        ++this->_M_impl._M_finish;
        ;
      }
      else
        _M_realloc_insert(end(), __x);
    }
    void push_back(value_type&& __x) { emplace_back(std::move(__x)); }
    template <typename... _Args>
    reference emplace_back(_Args&&... __args);
    void pop_back() noexcept
    {
      ;
      --this->_M_impl._M_finish;
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
      ;
    }
    template <typename... _Args>
    iterator emplace(const_iterator __position, _Args&&... __args)
    {
      return _M_emplace_aux(__position, std::forward<_Args>(__args)...);
    }
    iterator insert(const_iterator __position, const value_type& __x);
    iterator insert(const_iterator __position, value_type&& __x) { return _M_insert_rval(__position, std::move(__x)); }
    iterator insert(const_iterator __position, initializer_list<value_type> __l)
    {
      auto __offset = __position - cbegin();
      _M_range_insert(begin() + __offset, __l.begin(), __l.end(), std::random_access_iterator_tag());
      return begin() + __offset;
    }
    iterator insert(const_iterator __position, size_type __n, const value_type& __x)
    {
      difference_type __offset = __position - cbegin();
      _M_fill_insert(begin() + __offset, __n, __x);
      return begin() + __offset;
    }
    template <typename _InputIterator, typename = std::_RequireInputIter<_InputIterator>>
    iterator insert(const_iterator __position, _InputIterator __first, _InputIterator __last)
    {
      difference_type __offset = __position - cbegin();
      _M_insert_dispatch(begin() + __offset, __first, __last, __false_type());
      return begin() + __offset;
    }
    iterator erase(const_iterator __position) { return _M_erase(begin() + (__position - cbegin())); }
    iterator erase(const_iterator __first, const_iterator __last)
    {
      const auto __beg = begin();
      const auto __cbeg = cbegin();
      return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
    }
    void swap(vector& __x) noexcept
    {
      ;
      this->_M_impl._M_swap_data(__x._M_impl);
      _Alloc_traits::_S_on_swap(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
    }
    void clear() noexcept { _M_erase_at_end(this->_M_impl._M_start); }

  protected:
    template <typename _ForwardIterator>
    pointer _M_allocate_and_copy(size_type __n, _ForwardIterator __first, _ForwardIterator __last)
    {
      pointer __result = this->_M_allocate(__n);
      try
      {
        std::__uninitialized_copy_a(__first, __last, __result, _M_get_Tp_allocator());
        return __result;
      }
      catch (...)
      {
        _M_deallocate(__result, __n);
        throw;
      }
    }
    template <typename _InputIterator>
    void _M_range_initialize(_InputIterator __first, _InputIterator __last, std::input_iterator_tag)
    {
      try
      {
        for (; __first != __last; ++__first)
          emplace_back(*__first);
      }
      catch (...)
      {
        clear();
        throw;
      }
    }
    template <typename _ForwardIterator>
    void _M_range_initialize(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag)
    {
      const size_type __n = std::distance(__first, __last);
      this->_M_impl._M_start = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
      this->_M_impl._M_finish =
          std::__uninitialized_copy_a(__first, __last, this->_M_impl._M_start, _M_get_Tp_allocator());
    }
    void _M_fill_initialize(size_type __n, const value_type& __value)
    {
      this->_M_impl._M_finish =
          std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value, _M_get_Tp_allocator());
    }
    void _M_default_initialize(size_type __n)
    {
      this->_M_impl._M_finish = std::__uninitialized_default_n_a(this->_M_impl._M_start, __n, _M_get_Tp_allocator());
    }
    template <typename _Integer>
    void _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
    {
      _M_fill_assign(__n, __val);
    }
    template <typename _InputIterator>
    void _M_assign_dispatch(_InputIterator __first, _InputIterator __last, __false_type)
    {
      _M_assign_aux(__first, __last, std::__iterator_category(__first));
    }
    template <typename _InputIterator>
    void _M_assign_aux(_InputIterator __first, _InputIterator __last, std::input_iterator_tag);
    template <typename _ForwardIterator>
    void _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag);
    void _M_fill_assign(size_type __n, const value_type& __val);
    template <typename _Integer>
    void _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val, __true_type)
    {
      _M_fill_insert(__pos, __n, __val);
    }
    template <typename _InputIterator>
    void _M_insert_dispatch(iterator __pos, _InputIterator __first, _InputIterator __last, __false_type)
    {
      _M_range_insert(__pos, __first, __last, std::__iterator_category(__first));
    }
    template <typename _InputIterator>
    void _M_range_insert(iterator __pos, _InputIterator __first, _InputIterator __last, std::input_iterator_tag);
    template <typename _ForwardIterator>
    void _M_range_insert(iterator __pos, _ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag);
    void _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);
    void _M_default_append(size_type __n);
    bool _M_shrink_to_fit();
    struct _Temporary_value
    {
      template <typename... _Args>
      explicit _Temporary_value(vector* __vec, _Args&&... __args) : _M_this(__vec)
      {
        _Alloc_traits::construct(_M_this->_M_impl, _M_ptr(), std::forward<_Args>(__args)...);
      }
      ~_Temporary_value() { _Alloc_traits::destroy(_M_this->_M_impl, _M_ptr()); }
      value_type& _M_val() { return *_M_ptr(); }

    private:
      _Tp* _M_ptr() { return reinterpret_cast<_Tp*>(&__buf); }
      vector* _M_this;
      typename aligned_storage<sizeof(_Tp), alignof(_Tp)>::type __buf;
    };
    template <typename _Arg>
    void _M_insert_aux(iterator __position, _Arg&& __arg);
    template <typename... _Args>
    void _M_realloc_insert(iterator __position, _Args&&... __args);
    iterator _M_insert_rval(const_iterator __position, value_type&& __v);
    template <typename... _Args>
    iterator _M_emplace_aux(const_iterator __position, _Args&&... __args);
    iterator _M_emplace_aux(const_iterator __position, value_type&& __v)
    {
      return _M_insert_rval(__position, std::move(__v));
    }
    size_type _M_check_len(size_type __n, const char* __s) const
    {
      if (max_size() - size() < __n)
        __throw_length_error((__s));
      const size_type __len = size() + (std::max)(size(), __n);
      return (__len < size() || __len > max_size()) ? max_size() : __len;
    }
    static size_type _S_check_init_len(size_type __n, const allocator_type& __a)
    {
      if (__n > _S_max_size(_Tp_alloc_type(__a)))
        __throw_length_error(("cannot create std::vector larger than max_size()"));
      return __n;
    }
    static size_type _S_max_size(const _Tp_alloc_type& __a) noexcept
    {
      const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
      const size_t __allocmax = _Alloc_traits::max_size(__a);
      return (std::min)(__diffmax, __allocmax);
    }
    void _M_erase_at_end(pointer __pos) noexcept
    {
      if (size_type __n = this->_M_impl._M_finish - __pos)
      {
        std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
        this->_M_impl._M_finish = __pos;
        ;
      }
    }
    iterator _M_erase(iterator __position);
    iterator _M_erase(iterator __first, iterator __last);

  private:
    void _M_move_assign(vector&& __x, true_type) noexcept
    {
      vector __tmp(get_allocator());
      this->_M_impl._M_swap_data(__x._M_impl);
      __tmp._M_impl._M_swap_data(__x._M_impl);
      std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
    }
    void _M_move_assign(vector&& __x, false_type)
    {
      if (__x._M_get_Tp_allocator() == this->_M_get_Tp_allocator())
        _M_move_assign(std::move(__x), true_type());
      else
      {
        this->assign(std::__make_move_if_noexcept_iterator(__x.begin()),
                     std::__make_move_if_noexcept_iterator(__x.end()));
        __x.clear();
      }
    }
    template <typename _Up>
    _Up* _M_data_ptr(_Up* __ptr) const noexcept
    {
      return __ptr;
    }
    template <typename _Ptr>
    typename std::pointer_traits<_Ptr>::element_type* _M_data_ptr(_Ptr __ptr) const
    {
      return empty() ? nullptr : std::__to_address(__ptr);
    }
  };
  template <typename _InputIterator,
            typename _ValT = typename iterator_traits<_InputIterator>::value_type,
            typename _Allocator = allocator<_ValT>,
            typename = _RequireInputIter<_InputIterator>,
            typename = _RequireAllocator<_Allocator>>
  vector(_InputIterator, _InputIterator, _Allocator = _Allocator()) -> vector<_ValT, _Allocator>;
  template <typename _Tp, typename _Alloc>
  inline bool operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
  {
    return (__x.size() == __y.size() && std::equal(__x.begin(), __x.end(), __y.begin()));
  }
  template <typename _Tp, typename _Alloc>
  inline bool operator<(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
  {
    return std::lexicographical_compare(__x.begin(), __x.end(), __y.begin(), __y.end());
  }
  template <typename _Tp, typename _Alloc>
  inline bool operator!=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
  {
    return !(__x == __y);
  }
  template <typename _Tp, typename _Alloc>
  inline bool operator>(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
  {
    return __y < __x;
  }
  template <typename _Tp, typename _Alloc>
  inline bool operator<=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
  {
    return !(__y < __x);
  }
  template <typename _Tp, typename _Alloc>
  inline bool operator>=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
  {
    return !(__x < __y);
  }
  template <typename _Tp, typename _Alloc>
  inline void swap(vector<_Tp, _Alloc> & __x, vector<_Tp, _Alloc> & __y) noexcept(noexcept(__x.swap(__y)))
  {
    __x.swap(__y);
  }
  namespace __detail::__variant
  {
  template <typename>
  struct _Never_valueless_alt;
  template <typename _Tp, typename _Alloc>
  struct _Never_valueless_alt<std::vector<_Tp, _Alloc>> : std::is_nothrow_move_assignable<std::vector<_Tp, _Alloc>>
  {
  };
  }  // namespace __detail::__variant
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  typedef unsigned long _Bit_type;
  enum
  {
    _S_word_bit = int(8 * sizeof(_Bit_type))
  };
  struct _Bit_reference
  {
    _Bit_type* _M_p;
    _Bit_type _M_mask;
    _Bit_reference(_Bit_type* __x, _Bit_type __y) : _M_p(__x), _M_mask(__y) {}
    _Bit_reference() noexcept : _M_p(0), _M_mask(0) {}
    _Bit_reference(const _Bit_reference&) = default;
    operator bool() const noexcept { return !!(*_M_p & _M_mask); }
    _Bit_reference& operator=(bool __x) noexcept
    {
      if (__x)
        *_M_p |= _M_mask;
      else
        *_M_p &= ~_M_mask;
      return *this;
    }
    _Bit_reference& operator=(const _Bit_reference& __x) noexcept { return *this = bool(__x); }
    bool operator==(const _Bit_reference& __x) const { return bool(*this) == bool(__x); }
    bool operator<(const _Bit_reference& __x) const { return !bool(*this) && bool(__x); }
    void flip() noexcept { *_M_p ^= _M_mask; }
  };
  inline void swap(_Bit_reference __x, _Bit_reference __y) noexcept
  {
    bool __tmp = __x;
    __x = __y;
    __y = __tmp;
  }
  inline void swap(_Bit_reference __x, bool& __y) noexcept
  {
    bool __tmp = __x;
    __x = __y;
    __y = __tmp;
  }
  inline void swap(bool& __x, _Bit_reference __y) noexcept
  {
    bool __tmp = __x;
    __x = __y;
    __y = __tmp;
  }
  struct _Bit_iterator_base : public std::iterator<std::random_access_iterator_tag, bool>
  {
    _Bit_type* _M_p;
    unsigned int _M_offset;
    _Bit_iterator_base(_Bit_type* __x, unsigned int __y) : _M_p(__x), _M_offset(__y) {}
    void _M_bump_up()
    {
      if (_M_offset++ == int(_S_word_bit) - 1)
      {
        _M_offset = 0;
        ++_M_p;
      }
    }
    void _M_bump_down()
    {
      if (_M_offset-- == 0)
      {
        _M_offset = int(_S_word_bit) - 1;
        --_M_p;
      }
    }
    void _M_incr(ptrdiff_t __i)
    {
      difference_type __n = __i + _M_offset;
      _M_p += __n / int(_S_word_bit);
      __n = __n % int(_S_word_bit);
      if (__n < 0)
      {
        __n += int(_S_word_bit);
        --_M_p;
      }
      _M_offset = static_cast<unsigned int>(__n);
    }
    bool operator==(const _Bit_iterator_base& __i) const { return _M_p == __i._M_p && _M_offset == __i._M_offset; }
    bool operator<(const _Bit_iterator_base& __i) const
    {
      return _M_p < __i._M_p || (_M_p == __i._M_p && _M_offset < __i._M_offset);
    }
    bool operator!=(const _Bit_iterator_base& __i) const { return !(*this == __i); }
    bool operator>(const _Bit_iterator_base& __i) const { return __i < *this; }
    bool operator<=(const _Bit_iterator_base& __i) const { return !(__i < *this); }
    bool operator>=(const _Bit_iterator_base& __i) const { return !(*this < __i); }
  };
  inline ptrdiff_t operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
  {
    return (int(_S_word_bit) * (__x._M_p - __y._M_p) + __x._M_offset - __y._M_offset);
  }
  struct _Bit_iterator : public _Bit_iterator_base
  {
    typedef _Bit_reference reference;
    typedef _Bit_reference* pointer;
    typedef _Bit_iterator iterator;
    _Bit_iterator() : _Bit_iterator_base(0, 0) {}
    _Bit_iterator(_Bit_type* __x, unsigned int __y) : _Bit_iterator_base(__x, __y) {}
    iterator _M_const_cast() const { return *this; }
    reference operator*() const { return reference(_M_p, 1UL << _M_offset); }
    iterator& operator++()
    {
      _M_bump_up();
      return *this;
    }
    iterator operator++(int)
    {
      iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }
    iterator& operator--()
    {
      _M_bump_down();
      return *this;
    }
    iterator operator--(int)
    {
      iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }
    iterator& operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }
    iterator& operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }
    iterator operator+(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp += __i;
    }
    iterator operator-(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp -= __i;
    }
    reference operator[](difference_type __i) const { return *(*this + __i); }
  };
  inline _Bit_iterator operator+(ptrdiff_t __n, const _Bit_iterator& __x) { return __x + __n; }
  struct _Bit_const_iterator : public _Bit_iterator_base
  {
    typedef bool reference;
    typedef bool const_reference;
    typedef const bool* pointer;
    typedef _Bit_const_iterator const_iterator;
    _Bit_const_iterator() : _Bit_iterator_base(0, 0) {}
    _Bit_const_iterator(_Bit_type* __x, unsigned int __y) : _Bit_iterator_base(__x, __y) {}
    _Bit_const_iterator(const _Bit_iterator& __x) : _Bit_iterator_base(__x._M_p, __x._M_offset) {}
    _Bit_iterator _M_const_cast() const { return _Bit_iterator(_M_p, _M_offset); }
    const_reference operator*() const { return _Bit_reference(_M_p, 1UL << _M_offset); }
    const_iterator& operator++()
    {
      _M_bump_up();
      return *this;
    }
    const_iterator operator++(int)
    {
      const_iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }
    const_iterator& operator--()
    {
      _M_bump_down();
      return *this;
    }
    const_iterator operator--(int)
    {
      const_iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }
    const_iterator& operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }
    const_iterator& operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }
    const_iterator operator+(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp += __i;
    }
    const_iterator operator-(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp -= __i;
    }
    const_reference operator[](difference_type __i) const { return *(*this + __i); }
  };
  inline _Bit_const_iterator operator+(ptrdiff_t __n, const _Bit_const_iterator& __x) { return __x + __n; }
  inline void __fill_bvector(_Bit_type * __v, unsigned int __first, unsigned int __last, bool __x)
  {
    const _Bit_type __fmask = ~0ul << __first;
    const _Bit_type __lmask = ~0ul >> (_S_word_bit - __last);
    const _Bit_type __mask = __fmask & __lmask;
    if (__x)
      *__v |= __mask;
    else
      *__v &= ~__mask;
  }
  inline void fill(_Bit_iterator __first, _Bit_iterator __last, const bool& __x)
  {
    if (__first._M_p != __last._M_p)
    {
      _Bit_type* __first_p = __first._M_p;
      if (__first._M_offset != 0)
        __fill_bvector(__first_p++, __first._M_offset, _S_word_bit, __x);
      __builtin_memset(__first_p, __x ? ~0 : 0, (__last._M_p - __first_p) * sizeof(_Bit_type));
      if (__last._M_offset != 0)
        __fill_bvector(__last._M_p, 0, __last._M_offset, __x);
    }
    else if (__first._M_offset != __last._M_offset)
      __fill_bvector(__first._M_p, __first._M_offset, __last._M_offset, __x);
  }
  template <typename _Alloc>
  struct _Bvector_base
  {
    typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template rebind<_Bit_type>::other _Bit_alloc_type;
    typedef typename __gnu_cxx::__alloc_traits<_Bit_alloc_type> _Bit_alloc_traits;
    typedef typename _Bit_alloc_traits::pointer _Bit_pointer;
    struct _Bvector_impl_data
    {
      _Bit_iterator _M_start;
      _Bit_iterator _M_finish;
      _Bit_pointer _M_end_of_storage;
      _Bvector_impl_data() noexcept : _M_start(), _M_finish(), _M_end_of_storage() {}
      _Bvector_impl_data(_Bvector_impl_data&& __x) noexcept
          : _M_start(__x._M_start), _M_finish(__x._M_finish), _M_end_of_storage(__x._M_end_of_storage)
      {
        __x._M_reset();
      }
      void _M_move_data(_Bvector_impl_data&& __x) noexcept
      {
        this->_M_start = __x._M_start;
        this->_M_finish = __x._M_finish;
        this->_M_end_of_storage = __x._M_end_of_storage;
        __x._M_reset();
      }
      void _M_reset() noexcept
      {
        _M_start = _M_finish = _Bit_iterator();
        _M_end_of_storage = _Bit_pointer();
      }
    };
    struct _Bvector_impl : public _Bit_alloc_type, public _Bvector_impl_data
    {
    public:
      _Bvector_impl() noexcept(is_nothrow_default_constructible<_Bit_alloc_type>::value) : _Bit_alloc_type() {}
      _Bvector_impl(const _Bit_alloc_type& __a) noexcept : _Bit_alloc_type(__a) {}
      _Bvector_impl(_Bvector_impl&&) = default;
      _Bit_type* _M_end_addr() const noexcept
      {
        if (this->_M_end_of_storage)
          return std::__addressof(this->_M_end_of_storage[-1]) + 1;
        return 0;
      }
    };

  public:
    typedef _Alloc allocator_type;
    _Bit_alloc_type& _M_get_Bit_allocator() noexcept { return this->_M_impl; }
    const _Bit_alloc_type& _M_get_Bit_allocator() const noexcept { return this->_M_impl; }
    allocator_type get_allocator() const noexcept { return allocator_type(_M_get_Bit_allocator()); }
    _Bvector_base() = default;
    _Bvector_base(const allocator_type& __a) : _M_impl(__a) {}
    _Bvector_base(_Bvector_base&&) = default;
    ~_Bvector_base() { this->_M_deallocate(); }

  protected:
    _Bvector_impl _M_impl;
    _Bit_pointer _M_allocate(size_t __n) { return _Bit_alloc_traits::allocate(_M_impl, _S_nword(__n)); }
    void _M_deallocate()
    {
      if (_M_impl._M_start._M_p)
      {
        const size_t __n = _M_impl._M_end_addr() - _M_impl._M_start._M_p;
        _Bit_alloc_traits::deallocate(_M_impl, _M_impl._M_end_of_storage - __n, __n);
        _M_impl._M_reset();
      }
    }
    void _M_move_data(_Bvector_base&& __x) noexcept { _M_impl._M_move_data(std::move(__x._M_impl)); }
    static size_t _S_nword(size_t __n) { return (__n + int(_S_word_bit) - 1) / int(_S_word_bit); }
  };
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _Alloc>
  class vector<bool, _Alloc> : protected _Bvector_base<_Alloc>
  {
    typedef _Bvector_base<_Alloc> _Base;
    typedef typename _Base::_Bit_pointer _Bit_pointer;
    typedef typename _Base::_Bit_alloc_traits _Bit_alloc_traits;
    friend struct std::hash<vector>;

  public:
    typedef bool value_type;
    typedef size_t size_type;
    typedef ptrdiff_t difference_type;
    typedef _Bit_reference reference;
    typedef bool const_reference;
    typedef _Bit_reference* pointer;
    typedef const bool* const_pointer;
    typedef _Bit_iterator iterator;
    typedef _Bit_const_iterator const_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
    typedef std::reverse_iterator<iterator> reverse_iterator;
    typedef _Alloc allocator_type;
    allocator_type get_allocator() const { return _Base::get_allocator(); }

  protected:
    using _Base::_M_allocate;
    using _Base::_M_deallocate;
    using _Base::_M_get_Bit_allocator;
    using _Base::_S_nword;

  public:
    vector() = default;
    explicit vector(const allocator_type& __a) : _Base(__a) {}
    explicit vector(size_type __n, const allocator_type& __a = allocator_type()) : vector(__n, false, __a) {}
    vector(size_type __n, const bool& __value, const allocator_type& __a = allocator_type()) : _Base(__a)
    {
      _M_initialize(__n);
      _M_initialize_value(__value);
    }
    vector(const vector& __x) : _Base(_Bit_alloc_traits::_S_select_on_copy(__x._M_get_Bit_allocator()))
    {
      _M_initialize(__x.size());
      _M_copy_aligned(__x.begin(), __x.end(), this->_M_impl._M_start);
    }
    vector(vector&&) = default;
    vector(vector&& __x, const allocator_type& __a) noexcept(_Bit_alloc_traits::_S_always_equal()) : _Base(__a)
    {
      if (__x.get_allocator() == __a)
        this->_M_move_data(std::move(__x));
      else
      {
        _M_initialize(__x.size());
        _M_copy_aligned(__x.begin(), __x.end(), begin());
        __x.clear();
      }
    }
    vector(const vector& __x, const allocator_type& __a) : _Base(__a)
    {
      _M_initialize(__x.size());
      _M_copy_aligned(__x.begin(), __x.end(), this->_M_impl._M_start);
    }
    vector(initializer_list<bool> __l, const allocator_type& __a = allocator_type()) : _Base(__a)
    {
      _M_initialize_range(__l.begin(), __l.end(), random_access_iterator_tag());
    }
    template <typename _InputIterator, typename = std::_RequireInputIter<_InputIterator>>
    vector(_InputIterator __first, _InputIterator __last, const allocator_type& __a = allocator_type()) : _Base(__a)
    {
      _M_initialize_dispatch(__first, __last, __false_type());
    }
    ~vector() noexcept {}
    vector& operator=(const vector& __x)
    {
      if (&__x == this)
        return *this;
      if (_Bit_alloc_traits::_S_propagate_on_copy_assign())
      {
        if (this->_M_get_Bit_allocator() != __x._M_get_Bit_allocator())
        {
          this->_M_deallocate();
          std::__alloc_on_copy(_M_get_Bit_allocator(), __x._M_get_Bit_allocator());
          _M_initialize(__x.size());
        }
        else
          std::__alloc_on_copy(_M_get_Bit_allocator(), __x._M_get_Bit_allocator());
      }
      if (__x.size() > capacity())
      {
        this->_M_deallocate();
        _M_initialize(__x.size());
      }
      this->_M_impl._M_finish = _M_copy_aligned(__x.begin(), __x.end(), begin());
      return *this;
    }
    vector& operator=(vector&& __x) noexcept(_Bit_alloc_traits::_S_nothrow_move())
    {
      if (_Bit_alloc_traits::_S_propagate_on_move_assign() ||
          this->_M_get_Bit_allocator() == __x._M_get_Bit_allocator())
      {
        this->_M_deallocate();
        this->_M_move_data(std::move(__x));
        std::__alloc_on_move(_M_get_Bit_allocator(), __x._M_get_Bit_allocator());
      }
      else
      {
        if (__x.size() > capacity())
        {
          this->_M_deallocate();
          _M_initialize(__x.size());
        }
        this->_M_impl._M_finish = _M_copy_aligned(__x.begin(), __x.end(), begin());
        __x.clear();
      }
      return *this;
    }
    vector& operator=(initializer_list<bool> __l)
    {
      this->assign(__l.begin(), __l.end());
      return *this;
    }
    void assign(size_type __n, const bool& __x) { _M_fill_assign(__n, __x); }
    template <typename _InputIterator, typename = std::_RequireInputIter<_InputIterator>>
    void assign(_InputIterator __first, _InputIterator __last)
    {
      _M_assign_aux(__first, __last, std::__iterator_category(__first));
    }
    void assign(initializer_list<bool> __l) { _M_assign_aux(__l.begin(), __l.end(), random_access_iterator_tag()); }
    iterator begin() noexcept { return iterator(this->_M_impl._M_start._M_p, 0); }
    const_iterator begin() const noexcept { return const_iterator(this->_M_impl._M_start._M_p, 0); }
    iterator end() noexcept { return this->_M_impl._M_finish; }
    const_iterator end() const noexcept { return this->_M_impl._M_finish; }
    reverse_iterator rbegin() noexcept { return reverse_iterator(end()); }
    const_reverse_iterator rbegin() const noexcept { return const_reverse_iterator(end()); }
    reverse_iterator rend() noexcept { return reverse_iterator(begin()); }
    const_reverse_iterator rend() const noexcept { return const_reverse_iterator(begin()); }
    const_iterator cbegin() const noexcept { return const_iterator(this->_M_impl._M_start._M_p, 0); }
    const_iterator cend() const noexcept { return this->_M_impl._M_finish; }
    const_reverse_iterator crbegin() const noexcept { return const_reverse_iterator(end()); }
    const_reverse_iterator crend() const noexcept { return const_reverse_iterator(begin()); }
    size_type size() const noexcept { return size_type(end() - begin()); }
    size_type max_size() const noexcept
    {
      const size_type __isize = __gnu_cxx::__numeric_traits<difference_type>::__max - int(_S_word_bit) + 1;
      const size_type __asize = _Bit_alloc_traits::max_size(_M_get_Bit_allocator());
      return (__asize <= __isize / int(_S_word_bit) ? __asize* int(_S_word_bit) : __isize);
    }
    size_type capacity() const noexcept { return size_type(const_iterator(this->_M_impl._M_end_addr(), 0) - begin()); }
    bool empty() const noexcept { return begin() == end(); }
    reference operator[](size_type __n)
    {
      return *iterator(this->_M_impl._M_start._M_p + __n / int(_S_word_bit), __n % int(_S_word_bit));
    }
    const_reference operator[](size_type __n) const
    {
      return *const_iterator(this->_M_impl._M_start._M_p + __n / int(_S_word_bit), __n % int(_S_word_bit));
    }

  protected:
    void _M_range_check(size_type __n) const
    {
      if (__n >= this->size())
        __throw_out_of_range_fmt(("vector<bool>::_M_range_check: __n "
                                  "(which is %zu) >= this->size() "
                                  "(which is %zu)"),
                                 __n,
                                 this->size());
    }

  public:
    reference at(size_type __n)
    {
      _M_range_check(__n);
      return (*this)[__n];
    }
    const_reference at(size_type __n) const
    {
      _M_range_check(__n);
      return (*this)[__n];
    }
    void reserve(size_type __n)
    {
      if (__n > max_size())
        __throw_length_error(("vector::reserve"));
      if (capacity() < __n)
        _M_reallocate(__n);
    }
    reference front() { return *begin(); }
    const_reference front() const { return *begin(); }
    reference back() { return *(end() - 1); }
    const_reference back() const { return *(end() - 1); }
    void data() noexcept {}
    void push_back(bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_addr())
        *this->_M_impl._M_finish++ = __x;
      else
        _M_insert_aux(end(), __x);
    }
    void swap(vector& __x) noexcept
    {
      std::swap(this->_M_impl._M_start, __x._M_impl._M_start);
      std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);
      std::swap(this->_M_impl._M_end_of_storage, __x._M_impl._M_end_of_storage);
      _Bit_alloc_traits::_S_on_swap(_M_get_Bit_allocator(), __x._M_get_Bit_allocator());
    }
    static void swap(reference __x, reference __y) noexcept
    {
      bool __tmp = __x;
      __x = __y;
      __y = __tmp;
    }
    iterator insert(const_iterator __position, const bool& __x = bool())
    {
      const difference_type __n = __position - begin();
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_addr() && __position == end())
        *this->_M_impl._M_finish++ = __x;
      else
        _M_insert_aux(__position._M_const_cast(), __x);
      return begin() + __n;
    }
    template <typename _InputIterator, typename = std::_RequireInputIter<_InputIterator>>
    iterator insert(const_iterator __position, _InputIterator __first, _InputIterator __last)
    {
      difference_type __offset = __position - cbegin();
      _M_insert_dispatch(__position._M_const_cast(), __first, __last, __false_type());
      return begin() + __offset;
    }
    iterator insert(const_iterator __position, size_type __n, const bool& __x)
    {
      difference_type __offset = __position - cbegin();
      _M_fill_insert(__position._M_const_cast(), __n, __x);
      return begin() + __offset;
    }
    iterator insert(const_iterator __p, initializer_list<bool> __l)
    {
      return this->insert(__p, __l.begin(), __l.end());
    }
    void pop_back() { --this->_M_impl._M_finish; }
    iterator erase(const_iterator __position) { return _M_erase(__position._M_const_cast()); }
    iterator erase(const_iterator __first, const_iterator __last)
    {
      return _M_erase(__first._M_const_cast(), __last._M_const_cast());
    }
    void resize(size_type __new_size, bool __x = bool())
    {
      if (__new_size < size())
        _M_erase_at_end(begin() + difference_type(__new_size));
      else
        insert(end(), __new_size - size(), __x);
    }
    void shrink_to_fit() { _M_shrink_to_fit(); }
    void flip() noexcept
    {
      _Bit_type* const __end = this->_M_impl._M_end_addr();
      for (_Bit_type* __p = this->_M_impl._M_start._M_p; __p != __end; ++__p)
        *__p = ~*__p;
    }
    void clear() noexcept { _M_erase_at_end(begin()); }
    template <typename... _Args>
    reference emplace_back(_Args&&... __args)
    {
      push_back(bool(__args...));
      return back();
    }
    template <typename... _Args>
    iterator emplace(const_iterator __pos, _Args&&... __args)
    {
      return insert(__pos, bool(__args...));
    }

  protected:
    iterator _M_copy_aligned(const_iterator __first, const_iterator __last, iterator __result)
    {
      _Bit_type* __q = std::copy(__first._M_p, __last._M_p, __result._M_p);
      return std::copy(const_iterator(__last._M_p, 0), __last, iterator(__q, 0));
    }
    void _M_initialize(size_type __n)
    {
      if (__n)
      {
        _Bit_pointer __q = this->_M_allocate(__n);
        this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
        this->_M_impl._M_start = iterator(std::__addressof(*__q), 0);
      }
      else
      {
        this->_M_impl._M_end_of_storage = _Bit_pointer();
        this->_M_impl._M_start = iterator(0, 0);
      }
      this->_M_impl._M_finish = this->_M_impl._M_start + difference_type(__n);
    }
    void _M_initialize_value(bool __x)
    {
      if (_Bit_type* __p = this->_M_impl._M_start._M_p)
        __builtin_memset(__p, __x ? ~0 : 0, (this->_M_impl._M_end_addr() - __p) * sizeof(_Bit_type));
    }
    void _M_reallocate(size_type __n);
    bool _M_shrink_to_fit();
    template <typename _Integer>
    void _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)
    {
      _M_initialize(static_cast<size_type>(__n));
      _M_initialize_value(__x);
    }
    template <typename _InputIterator>
    void _M_initialize_dispatch(_InputIterator __first, _InputIterator __last, __false_type)
    {
      _M_initialize_range(__first, __last, std::__iterator_category(__first));
    }
    template <typename _InputIterator>
    void _M_initialize_range(_InputIterator __first, _InputIterator __last, std::input_iterator_tag)
    {
      for (; __first != __last; ++__first)
        push_back(*__first);
    }
    template <typename _ForwardIterator>
    void _M_initialize_range(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag)
    {
      const size_type __n = std::distance(__first, __last);
      _M_initialize(__n);
      std::copy(__first, __last, this->_M_impl._M_start);
    }
    void _M_fill_assign(size_t __n, bool __x)
    {
      if (__n > size())
      {
        _M_initialize_value(__x);
        insert(end(), __n - size(), __x);
      }
      else
      {
        _M_erase_at_end(begin() + __n);
        _M_initialize_value(__x);
      }
    }
    template <typename _InputIterator>
    void _M_assign_aux(_InputIterator __first, _InputIterator __last, std::input_iterator_tag)
    {
      iterator __cur = begin();
      for (; __first != __last && __cur != end(); ++__cur, (void)++__first)
        *__cur = *__first;
      if (__first == __last)
        _M_erase_at_end(__cur);
      else
        insert(end(), __first, __last);
    }
    template <typename _ForwardIterator>
    void _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag)
    {
      const size_type __len = std::distance(__first, __last);
      if (__len < size())
        _M_erase_at_end(std::copy(__first, __last, begin()));
      else
      {
        _ForwardIterator __mid = __first;
        std::advance(__mid, size());
        std::copy(__first, __mid, begin());
        insert(end(), __mid, __last);
      }
    }
    template <typename _Integer>
    void _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x, __true_type)
    {
      _M_fill_insert(__pos, __n, __x);
    }
    template <typename _InputIterator>
    void _M_insert_dispatch(iterator __pos, _InputIterator __first, _InputIterator __last, __false_type)
    {
      _M_insert_range(__pos, __first, __last, std::__iterator_category(__first));
    }
    void _M_fill_insert(iterator __position, size_type __n, bool __x);
    template <typename _InputIterator>
    void _M_insert_range(iterator __pos, _InputIterator __first, _InputIterator __last, std::input_iterator_tag)
    {
      for (; __first != __last; ++__first)
      {
        __pos = insert(__pos, *__first);
        ++__pos;
      }
    }
    template <typename _ForwardIterator>
    void _M_insert_range(iterator __position,
                         _ForwardIterator __first,
                         _ForwardIterator __last,
                         std::forward_iterator_tag);
    void _M_insert_aux(iterator __position, bool __x);
    size_type _M_check_len(size_type __n, const char* __s) const
    {
      if (max_size() - size() < __n)
        __throw_length_error((__s));
      const size_type __len = size() + std::max(size(), __n);
      return (__len < size() || __len > max_size()) ? max_size() : __len;
    }
    void _M_erase_at_end(iterator __pos) { this->_M_impl._M_finish = __pos; }
    iterator _M_erase(iterator __pos);
    iterator _M_erase(iterator __first, iterator __last);
  };
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _Alloc>
  struct hash<std::vector<bool, _Alloc>> : public __hash_base<size_t, std::vector<bool, _Alloc>>
  {
    size_t operator()(const std::vector<bool, _Alloc>&) const noexcept;
  };
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _Tp, typename _Alloc>
  void vector<_Tp, _Alloc>::reserve(size_type __n)
  {
    if (__n > this->max_size())
      __throw_length_error(("vector::reserve"));
    if (this->capacity() < __n)
    {
      const size_type __old_size = size();
      pointer __tmp;
      if constexpr (_S_use_relocate())
      {
        __tmp = this->_M_allocate(__n);
        _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish, __tmp, _M_get_Tp_allocator());
      }
      else
      {
        __tmp = _M_allocate_and_copy(__n,
                                     std::__make_move_if_noexcept_iterator(this->_M_impl._M_start),
                                     std::__make_move_if_noexcept_iterator(this->_M_impl._M_finish));
        std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish, _M_get_Tp_allocator());
      };
      _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage - this->_M_impl._M_start);
      this->_M_impl._M_start = __tmp;
      this->_M_impl._M_finish = __tmp + __old_size;
      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    }
  }
  template <typename _Tp, typename _Alloc>
  template <typename... _Args>
  typename vector<_Tp, _Alloc>::reference vector<_Tp, _Alloc>::emplace_back(_Args && ... __args)
  {
    if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    {
      ;
      _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish, std::forward<_Args>(__args)...);
      ++this->_M_impl._M_finish;
      ;
    }
    else
      _M_realloc_insert(end(), std::forward<_Args>(__args)...);
    return back();
  }
  template <typename _Tp, typename _Alloc>
  typename vector<_Tp, _Alloc>::iterator vector<_Tp, _Alloc>::insert(const_iterator __position, const value_type& __x)
  {
    const size_type __n = __position - begin();
    if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
      if (__position == end())
      {
        ;
        _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish, __x);
        ++this->_M_impl._M_finish;
        ;
      }
      else
      {
        const auto __pos = begin() + (__position - cbegin());
        _Temporary_value __x_copy(this, __x);
        _M_insert_aux(__pos, std::move(__x_copy._M_val()));
      }
    else
      _M_realloc_insert(begin() + (__position - cbegin()), __x);
    return iterator(this->_M_impl._M_start + __n);
  }
  template <typename _Tp, typename _Alloc>
  typename vector<_Tp, _Alloc>::iterator vector<_Tp, _Alloc>::_M_erase(iterator __position)
  {
    if (__position + 1 != end())
      std::move(__position + 1, end(), __position);
    --this->_M_impl._M_finish;
    _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
    ;
    return __position;
  }
  template <typename _Tp, typename _Alloc>
  typename vector<_Tp, _Alloc>::iterator vector<_Tp, _Alloc>::_M_erase(iterator __first, iterator __last)
  {
    if (__first != __last)
    {
      if (__last != end())
        std::move(__last, end(), __first);
      _M_erase_at_end(__first.base() + (end() - __last));
    }
    return __first;
  }
  template <typename _Tp, typename _Alloc>
  vector<_Tp, _Alloc>& vector<_Tp, _Alloc>::operator=(const vector<_Tp, _Alloc>& __x)
  {
    if (&__x != this)
    {
      ;
      if (_Alloc_traits::_S_propagate_on_copy_assign())
      {
        if (!_Alloc_traits::_S_always_equal() && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
        {
          this->clear();
          _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage - this->_M_impl._M_start);
          this->_M_impl._M_start = nullptr;
          this->_M_impl._M_finish = nullptr;
          this->_M_impl._M_end_of_storage = nullptr;
        }
        std::__alloc_on_copy(_M_get_Tp_allocator(), __x._M_get_Tp_allocator());
      }
      const size_type __xlen = __x.size();
      if (__xlen > capacity())
      {
        pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(), __x.end());
        std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish, _M_get_Tp_allocator());
        _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage - this->_M_impl._M_start);
        this->_M_impl._M_start = __tmp;
        this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
      }
      else if (size() >= __xlen)
      {
        std::_Destroy(std::copy(__x.begin(), __x.end(), begin()), end(), _M_get_Tp_allocator());
      }
      else
      {
        std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(), this->_M_impl._M_start);
        std::__uninitialized_copy_a(
            __x._M_impl._M_start + size(), __x._M_impl._M_finish, this->_M_impl._M_finish, _M_get_Tp_allocator());
      }
      this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
    }
    return *this;
  }
  template <typename _Tp, typename _Alloc>
  void vector<_Tp, _Alloc>::_M_fill_assign(size_t __n, const value_type& __val)
  {
    if (__n > capacity())
    {
      vector __tmp(__n, __val, _M_get_Tp_allocator());
      __tmp._M_impl._M_swap_data(this->_M_impl);
    }
    else if (__n > size())
    {
      std::fill(begin(), end(), __val);
      const size_type __add = __n - size();
      ;
      this->_M_impl._M_finish =
          std::__uninitialized_fill_n_a(this->_M_impl._M_finish, __add, __val, _M_get_Tp_allocator());
      ;
    }
    else
      _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));
  }
  template <typename _Tp, typename _Alloc>
  template <typename _InputIterator>
  void vector<_Tp, _Alloc>::_M_assign_aux(_InputIterator __first, _InputIterator __last, std::input_iterator_tag)
  {
    pointer __cur(this->_M_impl._M_start);
    for (; __first != __last && __cur != this->_M_impl._M_finish; ++__cur, (void)++__first)
      *__cur = *__first;
    if (__first == __last)
      _M_erase_at_end(__cur);
    else
      _M_range_insert(end(), __first, __last, std::__iterator_category(__first));
  }
  template <typename _Tp, typename _Alloc>
  template <typename _ForwardIterator>
  void vector<_Tp, _Alloc>::_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag)
  {
    const size_type __len = std::distance(__first, __last);
    if (__len > capacity())
    {
      _S_check_init_len(__len, _M_get_Tp_allocator());
      pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish, _M_get_Tp_allocator());
      ;
      _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage - this->_M_impl._M_start);
      this->_M_impl._M_start = __tmp;
      this->_M_impl._M_finish = this->_M_impl._M_start + __len;
      this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
    }
    else if (size() >= __len)
      _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
    else
    {
      _ForwardIterator __mid = __first;
      std::advance(__mid, size());
      std::copy(__first, __mid, this->_M_impl._M_start);
      const size_type __attribute__((__unused__)) __n = __len - size();
      ;
      this->_M_impl._M_finish =
          std::__uninitialized_copy_a(__mid, __last, this->_M_impl._M_finish, _M_get_Tp_allocator());
      ;
    }
  }
  template <typename _Tp, typename _Alloc>
  auto vector<_Tp, _Alloc>::_M_insert_rval(const_iterator __position, value_type && __v)->iterator
  {
    const auto __n = __position - cbegin();
    if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
      if (__position == cend())
      {
        ;
        _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish, std::move(__v));
        ++this->_M_impl._M_finish;
        ;
      }
      else
        _M_insert_aux(begin() + __n, std::move(__v));
    else
      _M_realloc_insert(begin() + __n, std::move(__v));
    return iterator(this->_M_impl._M_start + __n);
  }
  template <typename _Tp, typename _Alloc>
  template <typename... _Args>
  auto vector<_Tp, _Alloc>::_M_emplace_aux(const_iterator __position, _Args && ... __args)->iterator
  {
    const auto __n = __position - cbegin();
    if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
      if (__position == cend())
      {
        ;
        _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish, std::forward<_Args>(__args)...);
        ++this->_M_impl._M_finish;
        ;
      }
      else
      {
        _Temporary_value __tmp(this, std::forward<_Args>(__args)...);
        _M_insert_aux(begin() + __n, std::move(__tmp._M_val()));
      }
    else
      _M_realloc_insert(begin() + __n, std::forward<_Args>(__args)...);
    return iterator(this->_M_impl._M_start + __n);
  }
  template <typename _Tp, typename _Alloc>
  template <typename _Arg>
  void vector<_Tp, _Alloc>::_M_insert_aux(iterator __position, _Arg && __arg)
  {
    ;
    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish, std::move(*(this->_M_impl._M_finish - 1)));
    ++this->_M_impl._M_finish;
    ;
    std::move_backward(__position.base(), this->_M_impl._M_finish - 2, this->_M_impl._M_finish - 1);
    *__position = std::forward<_Arg>(__arg);
  }
  template <typename _Tp, typename _Alloc>
  template <typename... _Args>
  void vector<_Tp, _Alloc>::_M_realloc_insert(iterator __position, _Args && ... __args)
  {
    const size_type __len = _M_check_len(size_type(1), "vector::_M_realloc_insert");
    pointer __old_start = this->_M_impl._M_start;
    pointer __old_finish = this->_M_impl._M_finish;
    const size_type __elems_before = __position - begin();
    pointer __new_start(this->_M_allocate(__len));
    pointer __new_finish(__new_start);
    try
    {
      _Alloc_traits::construct(this->_M_impl, __new_start + __elems_before, std::forward<_Args>(__args)...);
      __new_finish = pointer();
      if constexpr (_S_use_relocate())
      {
        __new_finish = _S_relocate(__old_start, __position.base(), __new_start, _M_get_Tp_allocator());
        ++__new_finish;
        __new_finish = _S_relocate(__position.base(), __old_finish, __new_finish, _M_get_Tp_allocator());
      }
      else
      {
        __new_finish =
            std::__uninitialized_move_if_noexcept_a(__old_start, __position.base(), __new_start, _M_get_Tp_allocator());
        ++__new_finish;
        __new_finish = std::__uninitialized_move_if_noexcept_a(
            __position.base(), __old_finish, __new_finish, _M_get_Tp_allocator());
      }
    }
    catch (...)
    {
      if (!__new_finish)
        _Alloc_traits::destroy(this->_M_impl, __new_start + __elems_before);
      else
        std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
      _M_deallocate(__new_start, __len);
      throw;
    }
    if constexpr (!_S_use_relocate())
      std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
    ;
    _M_deallocate(__old_start, this->_M_impl._M_end_of_storage - __old_start);
    this->_M_impl._M_start = __new_start;
    this->_M_impl._M_finish = __new_finish;
    this->_M_impl._M_end_of_storage = __new_start + __len;
  }
  template <typename _Tp, typename _Alloc>
  void vector<_Tp, _Alloc>::_M_fill_insert(iterator __position, size_type __n, const value_type& __x)
  {
    if (__n != 0)
    {
      if (size_type(this->_M_impl._M_end_of_storage - this->_M_impl._M_finish) >= __n)
      {
        _Temporary_value __tmp(this, __x);
        value_type& __x_copy = __tmp._M_val();
        const size_type __elems_after = end() - __position;
        pointer __old_finish(this->_M_impl._M_finish);
        if (__elems_after > __n)
        {
          ;
          std::__uninitialized_move_a(
              this->_M_impl._M_finish - __n, this->_M_impl._M_finish, this->_M_impl._M_finish, _M_get_Tp_allocator());
          this->_M_impl._M_finish += __n;
          ;
          std::move_backward(__position.base(), __old_finish - __n, __old_finish);
          std::fill(__position.base(), __position.base() + __n, __x_copy);
        }
        else
        {
          ;
          this->_M_impl._M_finish = std::__uninitialized_fill_n_a(
              this->_M_impl._M_finish, __n - __elems_after, __x_copy, _M_get_Tp_allocator());
          ;
          std::__uninitialized_move_a(__position.base(), __old_finish, this->_M_impl._M_finish, _M_get_Tp_allocator());
          this->_M_impl._M_finish += __elems_after;
          ;
          std::fill(__position.base(), __old_finish, __x_copy);
        }
      }
      else
      {
        const size_type __len = _M_check_len(__n, "vector::_M_fill_insert");
        const size_type __elems_before = __position - begin();
        pointer __new_start(this->_M_allocate(__len));
        pointer __new_finish(__new_start);
        try
        {
          std::__uninitialized_fill_n_a(__new_start + __elems_before, __n, __x, _M_get_Tp_allocator());
          __new_finish = pointer();
          __new_finish = std::__uninitialized_move_if_noexcept_a(
              this->_M_impl._M_start, __position.base(), __new_start, _M_get_Tp_allocator());
          __new_finish += __n;
          __new_finish = std::__uninitialized_move_if_noexcept_a(
              __position.base(), this->_M_impl._M_finish, __new_finish, _M_get_Tp_allocator());
        }
        catch (...)
        {
          if (!__new_finish)
            std::_Destroy(__new_start + __elems_before, __new_start + __elems_before + __n, _M_get_Tp_allocator());
          else
            std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
          _M_deallocate(__new_start, __len);
          throw;
        }
        std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish, _M_get_Tp_allocator());
        ;
        _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage - this->_M_impl._M_start);
        this->_M_impl._M_start = __new_start;
        this->_M_impl._M_finish = __new_finish;
        this->_M_impl._M_end_of_storage = __new_start + __len;
      }
    }
  }
  template <typename _Tp, typename _Alloc>
  void vector<_Tp, _Alloc>::_M_default_append(size_type __n)
  {
    if (__n != 0)
    {
      const size_type __size = size();
      size_type __navail = size_type(this->_M_impl._M_end_of_storage - this->_M_impl._M_finish);
      if (__size > max_size() || __navail > max_size() - __size)
        __builtin_unreachable();
      if (__navail >= __n)
      {
        ;
        this->_M_impl._M_finish = std::__uninitialized_default_n_a(this->_M_impl._M_finish, __n, _M_get_Tp_allocator());
        ;
      }
      else
      {
        const size_type __len = _M_check_len(__n, "vector::_M_default_append");
        pointer __new_start(this->_M_allocate(__len));
        if constexpr (_S_use_relocate())
        {
          try
          {
            std::__uninitialized_default_n_a(__new_start + __size, __n, _M_get_Tp_allocator());
          }
          catch (...)
          {
            _M_deallocate(__new_start, __len);
            throw;
          }
          _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish, __new_start, _M_get_Tp_allocator());
        }
        else
        {
          pointer __destroy_from = pointer();
          try
          {
            std::__uninitialized_default_n_a(__new_start + __size, __n, _M_get_Tp_allocator());
            __destroy_from = __new_start + __size;
            std::__uninitialized_move_if_noexcept_a(
                this->_M_impl._M_start, this->_M_impl._M_finish, __new_start, _M_get_Tp_allocator());
          }
          catch (...)
          {
            if (__destroy_from)
              std::_Destroy(__destroy_from, __destroy_from + __n, _M_get_Tp_allocator());
            _M_deallocate(__new_start, __len);
            throw;
          }
          std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish, _M_get_Tp_allocator());
        };
        _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage - this->_M_impl._M_start);
        this->_M_impl._M_start = __new_start;
        this->_M_impl._M_finish = __new_start + __size + __n;
        this->_M_impl._M_end_of_storage = __new_start + __len;
      }
    }
  }
  template <typename _Tp, typename _Alloc>
  bool vector<_Tp, _Alloc>::_M_shrink_to_fit()
  {
    if (capacity() == size())
      return false;
    ;
    return std::__shrink_to_fit_aux<vector>::_S_do_it(*this);
  }
  template <typename _Tp, typename _Alloc>
  template <typename _InputIterator>
  void vector<_Tp, _Alloc>::_M_range_insert(
      iterator __pos, _InputIterator __first, _InputIterator __last, std::input_iterator_tag)
  {
    if (__pos == end())
    {
      for (; __first != __last; ++__first)
        insert(end(), *__first);
    }
    else if (__first != __last)
    {
      vector __tmp(__first, __last, _M_get_Tp_allocator());
      insert(__pos, std::make_move_iterator(__tmp.begin()), std::make_move_iterator(__tmp.end()));
    }
  }
  template <typename _Tp, typename _Alloc>
  template <typename _ForwardIterator>
  void vector<_Tp, _Alloc>::_M_range_insert(
      iterator __position, _ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag)
  {
    if (__first != __last)
    {
      const size_type __n = std::distance(__first, __last);
      if (size_type(this->_M_impl._M_end_of_storage - this->_M_impl._M_finish) >= __n)
      {
        const size_type __elems_after = end() - __position;
        pointer __old_finish(this->_M_impl._M_finish);
        if (__elems_after > __n)
        {
          ;
          std::__uninitialized_move_a(
              this->_M_impl._M_finish - __n, this->_M_impl._M_finish, this->_M_impl._M_finish, _M_get_Tp_allocator());
          this->_M_impl._M_finish += __n;
          ;
          std::move_backward(__position.base(), __old_finish - __n, __old_finish);
          std::copy(__first, __last, __position);
        }
        else
        {
          _ForwardIterator __mid = __first;
          std::advance(__mid, __elems_after);
          ;
          std::__uninitialized_copy_a(__mid, __last, this->_M_impl._M_finish, _M_get_Tp_allocator());
          this->_M_impl._M_finish += __n - __elems_after;
          ;
          std::__uninitialized_move_a(__position.base(), __old_finish, this->_M_impl._M_finish, _M_get_Tp_allocator());
          this->_M_impl._M_finish += __elems_after;
          ;
          std::copy(__first, __mid, __position);
        }
      }
      else
      {
        const size_type __len = _M_check_len(__n, "vector::_M_range_insert");
        pointer __new_start(this->_M_allocate(__len));
        pointer __new_finish(__new_start);
        try
        {
          __new_finish = std::__uninitialized_move_if_noexcept_a(
              this->_M_impl._M_start, __position.base(), __new_start, _M_get_Tp_allocator());
          __new_finish = std::__uninitialized_copy_a(__first, __last, __new_finish, _M_get_Tp_allocator());
          __new_finish = std::__uninitialized_move_if_noexcept_a(
              __position.base(), this->_M_impl._M_finish, __new_finish, _M_get_Tp_allocator());
        }
        catch (...)
        {
          std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
          _M_deallocate(__new_start, __len);
          throw;
        }
        std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish, _M_get_Tp_allocator());
        ;
        _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage - this->_M_impl._M_start);
        this->_M_impl._M_start = __new_start;
        this->_M_impl._M_finish = __new_finish;
        this->_M_impl._M_end_of_storage = __new_start + __len;
      }
    }
  }
  template <typename _Alloc>
  void vector<bool, _Alloc>::_M_reallocate(size_type __n)
  {
    _Bit_pointer __q = this->_M_allocate(__n);
    iterator __start(std::__addressof(*__q), 0);
    iterator __finish(_M_copy_aligned(begin(), end(), __start));
    this->_M_deallocate();
    this->_M_impl._M_start = __start;
    this->_M_impl._M_finish = __finish;
    this->_M_impl._M_end_of_storage = __q + _S_nword(__n);
  }
  template <typename _Alloc>
  void vector<bool, _Alloc>::_M_fill_insert(iterator __position, size_type __n, bool __x)
  {
    if (__n == 0)
      return;
    if (capacity() - size() >= __n)
    {
      std::copy_backward(__position, end(), this->_M_impl._M_finish + difference_type(__n));
      std::fill(__position, __position + difference_type(__n), __x);
      this->_M_impl._M_finish += difference_type(__n);
    }
    else
    {
      const size_type __len = _M_check_len(__n, "vector<bool>::_M_fill_insert");
      _Bit_pointer __q = this->_M_allocate(__len);
      iterator __start(std::__addressof(*__q), 0);
      iterator __i = _M_copy_aligned(begin(), __position, __start);
      std::fill(__i, __i + difference_type(__n), __x);
      iterator __finish = std::copy(__position, end(), __i + difference_type(__n));
      this->_M_deallocate();
      this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
      this->_M_impl._M_start = __start;
      this->_M_impl._M_finish = __finish;
    }
  }
  template <typename _Alloc>
  template <typename _ForwardIterator>
  void vector<bool, _Alloc>::_M_insert_range(
      iterator __position, _ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag)
  {
    if (__first != __last)
    {
      size_type __n = std::distance(__first, __last);
      if (capacity() - size() >= __n)
      {
        std::copy_backward(__position, end(), this->_M_impl._M_finish + difference_type(__n));
        std::copy(__first, __last, __position);
        this->_M_impl._M_finish += difference_type(__n);
      }
      else
      {
        const size_type __len = _M_check_len(__n, "vector<bool>::_M_insert_range");
        _Bit_pointer __q = this->_M_allocate(__len);
        iterator __start(std::__addressof(*__q), 0);
        iterator __i = _M_copy_aligned(begin(), __position, __start);
        __i = std::copy(__first, __last, __i);
        iterator __finish = std::copy(__position, end(), __i);
        this->_M_deallocate();
        this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
        this->_M_impl._M_start = __start;
        this->_M_impl._M_finish = __finish;
      }
    }
  }
  template <typename _Alloc>
  void vector<bool, _Alloc>::_M_insert_aux(iterator __position, bool __x)
  {
    if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_addr())
    {
      std::copy_backward(__position, this->_M_impl._M_finish, this->_M_impl._M_finish + 1);
      *__position = __x;
      ++this->_M_impl._M_finish;
    }
    else
    {
      const size_type __len = _M_check_len(size_type(1), "vector<bool>::_M_insert_aux");
      _Bit_pointer __q = this->_M_allocate(__len);
      iterator __start(std::__addressof(*__q), 0);
      iterator __i = _M_copy_aligned(begin(), __position, __start);
      *__i++ = __x;
      iterator __finish = std::copy(__position, end(), __i);
      this->_M_deallocate();
      this->_M_impl._M_end_of_storage = __q + _S_nword(__len);
      this->_M_impl._M_start = __start;
      this->_M_impl._M_finish = __finish;
    }
  }
  template <typename _Alloc>
  typename vector<bool, _Alloc>::iterator vector<bool, _Alloc>::_M_erase(iterator __position)
  {
    if (__position + 1 != end())
      std::copy(__position + 1, end(), __position);
    --this->_M_impl._M_finish;
    return __position;
  }
  template <typename _Alloc>
  typename vector<bool, _Alloc>::iterator vector<bool, _Alloc>::_M_erase(iterator __first, iterator __last)
  {
    if (__first != __last)
      _M_erase_at_end(std::copy(__last, end(), __first));
    return __first;
  }
  template <typename _Alloc>
  bool vector<bool, _Alloc>::_M_shrink_to_fit()
  {
    if (capacity() - size() < int(_S_word_bit))
      return false;
    try
    {
      _M_reallocate(size());
      return true;
    }
    catch (...)
    {
      return false;
    }
  }
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _Alloc>
  size_t hash<std::vector<bool, _Alloc>>::operator()(const std::vector<bool, _Alloc>& __b) const noexcept
  {
    size_t __hash = 0;
    using std::_Bit_type;
    using std::_S_word_bit;
    const size_t __words = __b.size() / _S_word_bit;
    if (__words)
    {
      const size_t __clength = __words * sizeof(_Bit_type);
      __hash = std::_Hash_impl::hash(__b._M_impl._M_start._M_p, __clength);
    }
    const size_t __extrabits = __b.size() % _S_word_bit;
    if (__extrabits)
    {
      _Bit_type __hiword = *__b._M_impl._M_finish._M_p;
      __hiword &= ~((~static_cast<_Bit_type>(0)) << __extrabits);
      const size_t __clength = (__extrabits + 8 - 1) / 8;
      if (__words)
        __hash = std::_Hash_impl::hash(&__hiword, __clength, __hash);
      else
        __hash = std::_Hash_impl::hash(&__hiword, __clength);
    }
    return __hash;
  }
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  namespace pmr
  {
  template <typename _Tp>
  class polymorphic_allocator;
  template <typename _Tp>
  using vector = std::vector<_Tp, polymorphic_allocator<_Tp>>;
  }  // namespace pmr
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _IIter, typename _Predicate>
  bool all_of(_IIter, _IIter, _Predicate);
  template <typename _IIter, typename _Predicate>
  bool any_of(_IIter, _IIter, _Predicate);
  template <typename _FIter, typename _Tp>
  bool binary_search(_FIter, _FIter, const _Tp&);
  template <typename _FIter, typename _Tp, typename _Compare>
  bool binary_search(_FIter, _FIter, const _Tp&, _Compare);
  template <typename _Tp>
  constexpr const _Tp& clamp(const _Tp&, const _Tp&, const _Tp&);
  template <typename _Tp, typename _Compare>
  constexpr const _Tp& clamp(const _Tp&, const _Tp&, const _Tp&, _Compare);
  template <typename _IIter, typename _OIter>
  _OIter copy(_IIter, _IIter, _OIter);
  template <typename _BIter1, typename _BIter2>
  _BIter2 copy_backward(_BIter1, _BIter1, _BIter2);
  template <typename _IIter, typename _OIter, typename _Predicate>
  _OIter copy_if(_IIter, _IIter, _OIter, _Predicate);
  template <typename _IIter, typename _Size, typename _OIter>
  _OIter copy_n(_IIter, _Size, _OIter);
  template <typename _FIter, typename _Tp>
  pair<_FIter, _FIter> equal_range(_FIter, _FIter, const _Tp&);
  template <typename _FIter, typename _Tp, typename _Compare>
  pair<_FIter, _FIter> equal_range(_FIter, _FIter, const _Tp&, _Compare);
  template <typename _FIter, typename _Tp>
  void fill(_FIter, _FIter, const _Tp&);
  template <typename _OIter, typename _Size, typename _Tp>
  _OIter fill_n(_OIter, _Size, const _Tp&);
  template <typename _FIter1, typename _FIter2>
  _FIter1 find_end(_FIter1, _FIter1, _FIter2, _FIter2);
  template <typename _FIter1, typename _FIter2, typename _BinaryPredicate>
  _FIter1 find_end(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);
  template <typename _IIter, typename _Predicate>
  _IIter find_if_not(_IIter, _IIter, _Predicate);
  template <typename _IIter1, typename _IIter2>
  bool includes(_IIter1, _IIter1, _IIter2, _IIter2);
  template <typename _IIter1, typename _IIter2, typename _Compare>
  bool includes(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);
  template <typename _BIter>
  void inplace_merge(_BIter, _BIter, _BIter);
  template <typename _BIter, typename _Compare>
  void inplace_merge(_BIter, _BIter, _BIter, _Compare);
  template <typename _RAIter>
  bool is_heap(_RAIter, _RAIter);
  template <typename _RAIter, typename _Compare>
  bool is_heap(_RAIter, _RAIter, _Compare);
  template <typename _RAIter>
  _RAIter is_heap_until(_RAIter, _RAIter);
  template <typename _RAIter, typename _Compare>
  _RAIter is_heap_until(_RAIter, _RAIter, _Compare);
  template <typename _IIter, typename _Predicate>
  bool is_partitioned(_IIter, _IIter, _Predicate);
  template <typename _FIter1, typename _FIter2>
  bool is_permutation(_FIter1, _FIter1, _FIter2);
  template <typename _FIter1, typename _FIter2, typename _BinaryPredicate>
  bool is_permutation(_FIter1, _FIter1, _FIter2, _BinaryPredicate);
  template <typename _FIter>
  bool is_sorted(_FIter, _FIter);
  template <typename _FIter, typename _Compare>
  bool is_sorted(_FIter, _FIter, _Compare);
  template <typename _FIter>
  _FIter is_sorted_until(_FIter, _FIter);
  template <typename _FIter, typename _Compare>
  _FIter is_sorted_until(_FIter, _FIter, _Compare);
  template <typename _FIter1, typename _FIter2>
  void iter_swap(_FIter1, _FIter2);
  template <typename _FIter, typename _Tp>
  _FIter lower_bound(_FIter, _FIter, const _Tp&);
  template <typename _FIter, typename _Tp, typename _Compare>
  _FIter lower_bound(_FIter, _FIter, const _Tp&, _Compare);
  template <typename _RAIter>
  void make_heap(_RAIter, _RAIter);
  template <typename _RAIter, typename _Compare>
  void make_heap(_RAIter, _RAIter, _Compare);
  template <typename _Tp>
  constexpr const _Tp& max(const _Tp&, const _Tp&);
  template <typename _Tp, typename _Compare>
  constexpr const _Tp& max(const _Tp&, const _Tp&, _Compare);
  template <typename _Tp>
  constexpr const _Tp& min(const _Tp&, const _Tp&);
  template <typename _Tp, typename _Compare>
  constexpr const _Tp& min(const _Tp&, const _Tp&, _Compare);
  template <typename _Tp>
  constexpr pair<const _Tp&, const _Tp&> minmax(const _Tp&, const _Tp&);
  template <typename _Tp, typename _Compare>
  constexpr pair<const _Tp&, const _Tp&> minmax(const _Tp&, const _Tp&, _Compare);
  template <typename _FIter>
  constexpr pair<_FIter, _FIter> minmax_element(_FIter, _FIter);
  template <typename _FIter, typename _Compare>
  constexpr pair<_FIter, _FIter> minmax_element(_FIter, _FIter, _Compare);
  template <typename _Tp>
  constexpr _Tp min(initializer_list<_Tp>);
  template <typename _Tp, typename _Compare>
  constexpr _Tp min(initializer_list<_Tp>, _Compare);
  template <typename _Tp>
  constexpr _Tp max(initializer_list<_Tp>);
  template <typename _Tp, typename _Compare>
  constexpr _Tp max(initializer_list<_Tp>, _Compare);
  template <typename _Tp>
  constexpr pair<_Tp, _Tp> minmax(initializer_list<_Tp>);
  template <typename _Tp, typename _Compare>
  constexpr pair<_Tp, _Tp> minmax(initializer_list<_Tp>, _Compare);
  template <typename _BIter>
  bool next_permutation(_BIter, _BIter);
  template <typename _BIter, typename _Compare>
  bool next_permutation(_BIter, _BIter, _Compare);
  template <typename _IIter, typename _Predicate>
  bool none_of(_IIter, _IIter, _Predicate);
  template <typename _IIter, typename _RAIter>
  _RAIter partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter);
  template <typename _IIter, typename _RAIter, typename _Compare>
  _RAIter partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter, _Compare);
  template <typename _IIter, typename _OIter1, typename _OIter2, typename _Predicate>
  pair<_OIter1, _OIter2> partition_copy(_IIter, _IIter, _OIter1, _OIter2, _Predicate);
  template <typename _FIter, typename _Predicate>
  _FIter partition_point(_FIter, _FIter, _Predicate);
  template <typename _RAIter>
  void pop_heap(_RAIter, _RAIter);
  template <typename _RAIter, typename _Compare>
  void pop_heap(_RAIter, _RAIter, _Compare);
  template <typename _BIter>
  bool prev_permutation(_BIter, _BIter);
  template <typename _BIter, typename _Compare>
  bool prev_permutation(_BIter, _BIter, _Compare);
  template <typename _RAIter>
  void push_heap(_RAIter, _RAIter);
  template <typename _RAIter, typename _Compare>
  void push_heap(_RAIter, _RAIter, _Compare);
  template <typename _FIter, typename _Tp>
  _FIter remove(_FIter, _FIter, const _Tp&);
  template <typename _FIter, typename _Predicate>
  _FIter remove_if(_FIter, _FIter, _Predicate);
  template <typename _IIter, typename _OIter, typename _Tp>
  _OIter remove_copy(_IIter, _IIter, _OIter, const _Tp&);
  template <typename _IIter, typename _OIter, typename _Predicate>
  _OIter remove_copy_if(_IIter, _IIter, _OIter, _Predicate);
  template <typename _IIter, typename _OIter, typename _Tp>
  _OIter replace_copy(_IIter, _IIter, _OIter, const _Tp&, const _Tp&);
  template <typename _Iter, typename _OIter, typename _Predicate, typename _Tp>
  _OIter replace_copy_if(_Iter, _Iter, _OIter, _Predicate, const _Tp&);
  template <typename _BIter>
  void reverse(_BIter, _BIter);
  template <typename _BIter, typename _OIter>
  _OIter reverse_copy(_BIter, _BIter, _OIter);
  inline namespace _V2
  {
  template <typename _FIter>
  _FIter rotate(_FIter, _FIter, _FIter);
  }
  template <typename _FIter, typename _OIter>
  _OIter rotate_copy(_FIter, _FIter, _FIter, _OIter);
  template <typename _RAIter, typename _UGenerator>
  void shuffle(_RAIter, _RAIter, _UGenerator &&);
  template <typename _RAIter>
  void sort_heap(_RAIter, _RAIter);
  template <typename _RAIter, typename _Compare>
  void sort_heap(_RAIter, _RAIter, _Compare);
  template <typename _BIter, typename _Predicate>
  _BIter stable_partition(_BIter, _BIter, _Predicate);
  template <typename _FIter1, typename _FIter2>
  _FIter2 swap_ranges(_FIter1, _FIter1, _FIter2);
  template <typename _FIter>
  _FIter unique(_FIter, _FIter);
  template <typename _FIter, typename _BinaryPredicate>
  _FIter unique(_FIter, _FIter, _BinaryPredicate);
  template <typename _FIter, typename _Tp>
  _FIter upper_bound(_FIter, _FIter, const _Tp&);
  template <typename _FIter, typename _Tp, typename _Compare>
  _FIter upper_bound(_FIter, _FIter, const _Tp&, _Compare);
  template <typename _FIter>
  _FIter adjacent_find(_FIter, _FIter);
  template <typename _FIter, typename _BinaryPredicate>
  _FIter adjacent_find(_FIter, _FIter, _BinaryPredicate);
  template <typename _IIter, typename _Tp>
  typename iterator_traits<_IIter>::difference_type count(_IIter, _IIter, const _Tp&);
  template <typename _IIter, typename _Predicate>
  typename iterator_traits<_IIter>::difference_type count_if(_IIter, _IIter, _Predicate);
  template <typename _IIter1, typename _IIter2>
  bool equal(_IIter1, _IIter1, _IIter2);
  template <typename _IIter1, typename _IIter2, typename _BinaryPredicate>
  bool equal(_IIter1, _IIter1, _IIter2, _BinaryPredicate);
  template <typename _IIter, typename _Tp>
  _IIter find(_IIter, _IIter, const _Tp&);
  template <typename _FIter1, typename _FIter2>
  _FIter1 find_first_of(_FIter1, _FIter1, _FIter2, _FIter2);
  template <typename _FIter1, typename _FIter2, typename _BinaryPredicate>
  _FIter1 find_first_of(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);
  template <typename _IIter, typename _Predicate>
  _IIter find_if(_IIter, _IIter, _Predicate);
  template <typename _IIter, typename _Funct>
  _Funct for_each(_IIter, _IIter, _Funct);
  template <typename _FIter, typename _Generator>
  void generate(_FIter, _FIter, _Generator);
  template <typename _OIter, typename _Size, typename _Generator>
  _OIter generate_n(_OIter, _Size, _Generator);
  template <typename _IIter1, typename _IIter2>
  bool lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2);
  template <typename _IIter1, typename _IIter2, typename _Compare>
  bool lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);
  template <typename _FIter>
  constexpr _FIter max_element(_FIter, _FIter);
  template <typename _FIter, typename _Compare>
  constexpr _FIter max_element(_FIter, _FIter, _Compare);
  template <typename _IIter1, typename _IIter2, typename _OIter>
  _OIter merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);
  template <typename _IIter1, typename _IIter2, typename _OIter, typename _Compare>
  _OIter merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);
  template <typename _FIter>
  constexpr _FIter min_element(_FIter, _FIter);
  template <typename _FIter, typename _Compare>
  constexpr _FIter min_element(_FIter, _FIter, _Compare);
  template <typename _IIter1, typename _IIter2>
  pair<_IIter1, _IIter2> mismatch(_IIter1, _IIter1, _IIter2);
  template <typename _IIter1, typename _IIter2, typename _BinaryPredicate>
  pair<_IIter1, _IIter2> mismatch(_IIter1, _IIter1, _IIter2, _BinaryPredicate);
  template <typename _RAIter>
  void nth_element(_RAIter, _RAIter, _RAIter);
  template <typename _RAIter, typename _Compare>
  void nth_element(_RAIter, _RAIter, _RAIter, _Compare);
  template <typename _RAIter>
  void partial_sort(_RAIter, _RAIter, _RAIter);
  template <typename _RAIter, typename _Compare>
  void partial_sort(_RAIter, _RAIter, _RAIter, _Compare);
  template <typename _BIter, typename _Predicate>
  _BIter partition(_BIter, _BIter, _Predicate);
  template <typename _RAIter>
  void random_shuffle(_RAIter, _RAIter);
  template <typename _RAIter, typename _Generator>
  void random_shuffle(_RAIter, _RAIter, _Generator &&);
  template <typename _FIter, typename _Tp>
  void replace(_FIter, _FIter, const _Tp&, const _Tp&);
  template <typename _FIter, typename _Predicate, typename _Tp>
  void replace_if(_FIter, _FIter, _Predicate, const _Tp&);
  template <typename _FIter1, typename _FIter2>
  _FIter1 search(_FIter1, _FIter1, _FIter2, _FIter2);
  template <typename _FIter1, typename _FIter2, typename _BinaryPredicate>
  _FIter1 search(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);
  template <typename _FIter, typename _Size, typename _Tp>
  _FIter search_n(_FIter, _FIter, _Size, const _Tp&);
  template <typename _FIter, typename _Size, typename _Tp, typename _BinaryPredicate>
  _FIter search_n(_FIter, _FIter, _Size, const _Tp&, _BinaryPredicate);
  template <typename _IIter1, typename _IIter2, typename _OIter>
  _OIter set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);
  template <typename _IIter1, typename _IIter2, typename _OIter, typename _Compare>
  _OIter set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);
  template <typename _IIter1, typename _IIter2, typename _OIter>
  _OIter set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);
  template <typename _IIter1, typename _IIter2, typename _OIter, typename _Compare>
  _OIter set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);
  template <typename _IIter1, typename _IIter2, typename _OIter>
  _OIter set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);
  template <typename _IIter1, typename _IIter2, typename _OIter, typename _Compare>
  _OIter set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);
  template <typename _IIter1, typename _IIter2, typename _OIter>
  _OIter set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);
  template <typename _IIter1, typename _IIter2, typename _OIter, typename _Compare>
  _OIter set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);
  template <typename _RAIter>
  void sort(_RAIter, _RAIter);
  template <typename _RAIter, typename _Compare>
  void sort(_RAIter, _RAIter, _Compare);
  template <typename _RAIter>
  void stable_sort(_RAIter, _RAIter);
  template <typename _RAIter, typename _Compare>
  void stable_sort(_RAIter, _RAIter, _Compare);
  template <typename _IIter, typename _OIter, typename _UnaryOperation>
  _OIter transform(_IIter, _IIter, _OIter, _UnaryOperation);
  template <typename _IIter1, typename _IIter2, typename _OIter, typename _BinaryOperation>
  _OIter transform(_IIter1, _IIter1, _IIter2, _OIter, _BinaryOperation);
  template <typename _IIter, typename _OIter>
  _OIter unique_copy(_IIter, _IIter, _OIter);
  template <typename _IIter, typename _OIter, typename _BinaryPredicate>
  _OIter unique_copy(_IIter, _IIter, _OIter, _BinaryPredicate);
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _RandomAccessIterator, typename _Distance, typename _Compare>
  _Distance __is_heap_until(_RandomAccessIterator __first, _Distance __n, _Compare & __comp)
  {
    _Distance __parent = 0;
    for (_Distance __child = 1; __child < __n; ++__child)
    {
      if (__comp(__first + __parent, __first + __child))
        return __child;
      if ((__child & 1) == 0)
        ++__parent;
    }
    return __n;
  }
  template <typename _RandomAccessIterator, typename _Distance>
  inline bool __is_heap(_RandomAccessIterator __first, _Distance __n)
  {
    __gnu_cxx::__ops::_Iter_less_iter __comp;
    return std::__is_heap_until(__first, __n, __comp) == __n;
  }
  template <typename _RandomAccessIterator, typename _Compare, typename _Distance>
  inline bool __is_heap(_RandomAccessIterator __first, _Compare __comp, _Distance __n)
  {
    typedef __decltype(__comp) _Cmp;
    __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(std::move(__comp));
    return std::__is_heap_until(__first, __n, __cmp) == __n;
  }
  template <typename _RandomAccessIterator>
  inline bool __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
  {
    return std::__is_heap(__first, std::distance(__first, __last));
  }
  template <typename _RandomAccessIterator, typename _Compare>
  inline bool __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
  {
    return std::__is_heap(__first, std::move(__comp), std::distance(__first, __last));
  }
  template <typename _RandomAccessIterator, typename _Distance, typename _Tp, typename _Compare>
  void __push_heap(
      _RandomAccessIterator __first, _Distance __holeIndex, _Distance __topIndex, _Tp __value, _Compare & __comp)
  {
    _Distance __parent = (__holeIndex - 1) / 2;
    while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
    {
      *(__first + __holeIndex) = std::move(*(__first + __parent));
      __holeIndex = __parent;
      __parent = (__holeIndex - 1) / 2;
    }
    *(__first + __holeIndex) = std::move(__value);
  }
  template <typename _RandomAccessIterator>
  inline void push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
  {
    typedef typename iterator_traits<_RandomAccessIterator>::value_type _ValueType;
    typedef typename iterator_traits<_RandomAccessIterator>::difference_type _DistanceType;
    ;
    ;
    ;
    __gnu_cxx::__ops::_Iter_less_val __comp;
    _ValueType __value = std::move(*(__last - 1));
    std::__push_heap(__first, _DistanceType((__last - __first) - 1), _DistanceType(0), std::move(__value), __comp);
  }
  template <typename _RandomAccessIterator, typename _Compare>
  inline void push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
  {
    typedef typename iterator_traits<_RandomAccessIterator>::value_type _ValueType;
    typedef typename iterator_traits<_RandomAccessIterator>::difference_type _DistanceType;
    ;
    ;
    ;
    __decltype(__gnu_cxx::__ops::__iter_comp_val(std::move(__comp))) __cmp(std::move(__comp));
    _ValueType __value = std::move(*(__last - 1));
    std::__push_heap(__first, _DistanceType((__last - __first) - 1), _DistanceType(0), std::move(__value), __cmp);
  }
  template <typename _RandomAccessIterator, typename _Distance, typename _Tp, typename _Compare>
  void __adjust_heap(
      _RandomAccessIterator __first, _Distance __holeIndex, _Distance __len, _Tp __value, _Compare __comp)
  {
    const _Distance __topIndex = __holeIndex;
    _Distance __secondChild = __holeIndex;
    while (__secondChild < (__len - 1) / 2)
    {
      __secondChild = 2 * (__secondChild + 1);
      if (__comp(__first + __secondChild, __first + (__secondChild - 1)))
        __secondChild--;
      *(__first + __holeIndex) = std::move(*(__first + __secondChild));
      __holeIndex = __secondChild;
    }
    if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
    {
      __secondChild = 2 * (__secondChild + 1);
      *(__first + __holeIndex) = std::move(*(__first + (__secondChild - 1)));
      __holeIndex = __secondChild - 1;
    }
    __decltype(__gnu_cxx::__ops::__iter_comp_val(std::move(__comp))) __cmp(std::move(__comp));
    std::__push_heap(__first, __holeIndex, __topIndex, std::move(__value), __cmp);
  }
  template <typename _RandomAccessIterator, typename _Compare>
  inline void __pop_heap(
      _RandomAccessIterator __first, _RandomAccessIterator __last, _RandomAccessIterator __result, _Compare & __comp)
  {
    typedef typename iterator_traits<_RandomAccessIterator>::value_type _ValueType;
    typedef typename iterator_traits<_RandomAccessIterator>::difference_type _DistanceType;
    _ValueType __value = std::move(*__result);
    *__result = std::move(*__first);
    std::__adjust_heap(__first, _DistanceType(0), _DistanceType(__last - __first), std::move(__value), __comp);
  }
  template <typename _RandomAccessIterator>
  inline void pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
  {
    ;
    ;
    ;
    ;
    if (__last - __first > 1)
    {
      --__last;
      __gnu_cxx::__ops::_Iter_less_iter __comp;
      std::__pop_heap(__first, __last, __last, __comp);
    }
  }
  template <typename _RandomAccessIterator, typename _Compare>
  inline void pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
  {
    ;
    ;
    ;
    ;
    if (__last - __first > 1)
    {
      typedef __decltype(__comp) _Cmp;
      __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(std::move(__comp));
      --__last;
      std::__pop_heap(__first, __last, __last, __cmp);
    }
  }
  template <typename _RandomAccessIterator, typename _Compare>
  void __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare & __comp)
  {
    typedef typename iterator_traits<_RandomAccessIterator>::value_type _ValueType;
    typedef typename iterator_traits<_RandomAccessIterator>::difference_type _DistanceType;
    if (__last - __first < 2)
      return;
    const _DistanceType __len = __last - __first;
    _DistanceType __parent = (__len - 2) / 2;
    while (true)
    {
      _ValueType __value = std::move(*(__first + __parent));
      std::__adjust_heap(__first, __parent, __len, std::move(__value), __comp);
      if (__parent == 0)
        return;
      __parent--;
    }
  }
  template <typename _RandomAccessIterator>
  inline void make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
  {
    ;
    ;
    __gnu_cxx::__ops::_Iter_less_iter __comp;
    std::__make_heap(__first, __last, __comp);
  }
  template <typename _RandomAccessIterator, typename _Compare>
  inline void make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
  {
    ;
    ;
    typedef __decltype(__comp) _Cmp;
    __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(std::move(__comp));
    std::__make_heap(__first, __last, __cmp);
  }
  template <typename _RandomAccessIterator, typename _Compare>
  void __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare & __comp)
  {
    while (__last - __first > 1)
    {
      --__last;
      std::__pop_heap(__first, __last, __last, __comp);
    }
  }
  template <typename _RandomAccessIterator>
  inline void sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
  {
    ;
    ;
    ;
    __gnu_cxx::__ops::_Iter_less_iter __comp;
    std::__sort_heap(__first, __last, __comp);
  }
  template <typename _RandomAccessIterator, typename _Compare>
  inline void sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
  {
    ;
    ;
    ;
    typedef __decltype(__comp) _Cmp;
    __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(std::move(__comp));
    std::__sort_heap(__first, __last, __cmp);
  }
  template <typename _RandomAccessIterator>
  inline _RandomAccessIterator is_heap_until(_RandomAccessIterator __first, _RandomAccessIterator __last)
  {
    ;
    ;
    __gnu_cxx::__ops::_Iter_less_iter __comp;
    return __first + std::__is_heap_until(__first, std::distance(__first, __last), __comp);
  }
  template <typename _RandomAccessIterator, typename _Compare>
  inline _RandomAccessIterator is_heap_until(
      _RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
  {
    ;
    ;
    typedef __decltype(__comp) _Cmp;
    __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(std::move(__comp));
    return __first + std::__is_heap_until(__first, std::distance(__first, __last), __cmp);
  }
  template <typename _RandomAccessIterator>
  inline bool is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
  {
    return std::is_heap_until(__first, __last) == __last;
  }
  template <typename _RandomAccessIterator, typename _Compare>
  inline bool is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
  {
    ;
    ;
    const auto __dist = std::distance(__first, __last);
    typedef __decltype(__comp) _Cmp;
    __gnu_cxx::__ops::_Iter_comp_iter<_Cmp> __cmp(std::move(__comp));
    return std::__is_heap_until(__first, __dist, __cmp) == __dist;
  }
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _Tp>
  pair<_Tp*, ptrdiff_t> get_temporary_buffer(ptrdiff_t __len) noexcept
  {
    const ptrdiff_t __max = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
    if (__len > __max)
      __len = __max;
    while (__len > 0)
    {
      _Tp* __tmp = static_cast<_Tp*>(::operator new(__len * sizeof(_Tp), std::nothrow));
      if (__tmp != 0)
        return std::pair<_Tp*, ptrdiff_t>(__tmp, __len);
      __len /= 2;
    }
    return std::pair<_Tp*, ptrdiff_t>(static_cast<_Tp*>(0), 0);
  }
  template <typename _Tp>
  inline void return_temporary_buffer(_Tp * __p)
  {
    ::operator delete(__p);
  }
  template <typename _ForwardIterator, typename _Tp>
  class _Temporary_buffer
  {
  public:
    typedef _Tp value_type;
    typedef value_type* pointer;
    typedef pointer iterator;
    typedef ptrdiff_t size_type;

  protected:
    size_type _M_original_len;
    size_type _M_len;
    pointer _M_buffer;

  public:
    size_type size() const { return _M_len; }
    size_type requested_size() const { return _M_original_len; }
    iterator begin() { return _M_buffer; }
    iterator end() { return _M_buffer + _M_len; }
    _Temporary_buffer(_ForwardIterator __seed, size_type __original_len);
    ~_Temporary_buffer()
    {
      std::_Destroy(_M_buffer, _M_buffer + _M_len);
      std::return_temporary_buffer(_M_buffer);
    }

  private:
    _Temporary_buffer(const _Temporary_buffer&);
    void operator=(const _Temporary_buffer&);
  };
  template <bool>
  struct __uninitialized_construct_buf_dispatch
  {
    template <typename _Pointer, typename _ForwardIterator>
    static void __ucr(_Pointer __first, _Pointer __last, _ForwardIterator __seed)
    {
      if (__first == __last)
        return;
      _Pointer __cur = __first;
      try
      {
        std::_Construct(std::__addressof(*__first), std::move(*__seed));
        _Pointer __prev = __cur;
        ++__cur;
        for (; __cur != __last; ++__cur, ++__prev)
          std::_Construct(std::__addressof(*__cur), std::move(*__prev));
        *__seed = std::move(*__prev);
      }
      catch (...)
      {
        std::_Destroy(__first, __cur);
        throw;
      }
    }
  };
  template <>
  struct __uninitialized_construct_buf_dispatch<true>
  {
    template <typename _Pointer, typename _ForwardIterator>
    static void __ucr(_Pointer, _Pointer, _ForwardIterator)
    {
    }
  };
  template <typename _Pointer, typename _ForwardIterator>
  inline void __uninitialized_construct_buf(_Pointer __first, _Pointer __last, _ForwardIterator __seed)
  {
    typedef typename std::iterator_traits<_Pointer>::value_type _ValueType;
    std::__uninitialized_construct_buf_dispatch<__has_trivial_constructor(_ValueType)>::__ucr(__first, __last, __seed);
  }
  template <typename _ForwardIterator, typename _Tp>
  _Temporary_buffer<_ForwardIterator, _Tp>::_Temporary_buffer(_ForwardIterator __seed, size_type __original_len)
      : _M_original_len(__original_len), _M_len(0), _M_buffer(0)
  {
    try
    {
      std::pair<pointer, size_type> __p(std::get_temporary_buffer<value_type>(_M_original_len));
      _M_buffer = __p.first;
      _M_len = __p.second;
      if (_M_buffer)
        std::__uninitialized_construct_buf(_M_buffer, _M_buffer + _M_len, __seed);
    }
    catch (...)
    {
      std::return_temporary_buffer(_M_buffer);
      _M_buffer = 0;
      _M_len = 0;
      throw;
    }
  }
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  namespace __detail
  {
  template <typename _Tp>
  inline bool _Power_of_2(_Tp __x)
  {
    return ((__x - 1) & __x) == 0;
  }
  }  // namespace __detail
  template <typename _IntType = int>
  class uniform_int_distribution
  {
    static_assert(std::is_integral<_IntType>::value, "template argument must be an integral type");

  public:
    typedef _IntType result_type;
    struct param_type
    {
      typedef uniform_int_distribution<_IntType> distribution_type;
      param_type() : param_type(0) {}
      explicit param_type(_IntType __a, _IntType __b = numeric_limits<_IntType>::max()) : _M_a(__a), _M_b(__b) { ; }
      result_type a() const { return _M_a; }
      result_type b() const { return _M_b; }
      friend bool operator==(const param_type& __p1, const param_type& __p2)
      {
        return __p1._M_a == __p2._M_a && __p1._M_b == __p2._M_b;
      }
      friend bool operator!=(const param_type& __p1, const param_type& __p2) { return !(__p1 == __p2); }

    private:
      _IntType _M_a;
      _IntType _M_b;
    };

  public:
    uniform_int_distribution() : uniform_int_distribution(0) {}
    explicit uniform_int_distribution(_IntType __a, _IntType __b = numeric_limits<_IntType>::max()) : _M_param(__a, __b)
    {
    }
    explicit uniform_int_distribution(const param_type& __p) : _M_param(__p) {}
    void reset() {}
    result_type a() const { return _M_param.a(); }
    result_type b() const { return _M_param.b(); }
    param_type param() const { return _M_param; }
    void param(const param_type& __param) { _M_param = __param; }
    result_type min() const { return this->a(); }
    result_type max() const { return this->b(); }
    template <typename _UniformRandomNumberGenerator>
    result_type operator()(_UniformRandomNumberGenerator& __urng)
    {
      return this->operator()(__urng, _M_param);
    }
    template <typename _UniformRandomNumberGenerator>
    result_type operator()(_UniformRandomNumberGenerator& __urng, const param_type& __p);
    template <typename _ForwardIterator, typename _UniformRandomNumberGenerator>
    void __generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator& __urng)
    {
      this->__generate(__f, __t, __urng, _M_param);
    }
    template <typename _ForwardIterator, typename _UniformRandomNumberGenerator>
    void __generate(_ForwardIterator __f,
                    _ForwardIterator __t,
                    _UniformRandomNumberGenerator& __urng,
                    const param_type& __p)
    {
      this->__generate_impl(__f, __t, __urng, __p);
    }
    template <typename _UniformRandomNumberGenerator>
    void __generate(result_type* __f, result_type* __t, _UniformRandomNumberGenerator& __urng, const param_type& __p)
    {
      this->__generate_impl(__f, __t, __urng, __p);
    }
    friend bool operator==(const uniform_int_distribution& __d1, const uniform_int_distribution& __d2)
    {
      return __d1._M_param == __d2._M_param;
    }

  private:
    template <typename _ForwardIterator, typename _UniformRandomNumberGenerator>
    void __generate_impl(_ForwardIterator __f,
                         _ForwardIterator __t,
                         _UniformRandomNumberGenerator& __urng,
                         const param_type& __p);
    param_type _M_param;
  };
  template <typename _IntType>
  template <typename _UniformRandomNumberGenerator>
  typename uniform_int_distribution<_IntType>::result_type uniform_int_distribution<_IntType>::operator()(
      _UniformRandomNumberGenerator& __urng, const param_type& __param)
  {
    typedef typename _UniformRandomNumberGenerator::result_type _Gresult_type;
    typedef typename std::make_unsigned<result_type>::type __utype;
    typedef typename std::common_type<_Gresult_type, __utype>::type __uctype;
    const __uctype __urngmin = __urng.min();
    const __uctype __urngmax = __urng.max();
    const __uctype __urngrange = __urngmax - __urngmin;
    const __uctype __urange = __uctype(__param.b()) - __uctype(__param.a());
    __uctype __ret;
    if (__urngrange > __urange)
    {
      const __uctype __uerange = __urange + 1;
      const __uctype __scaling = __urngrange / __uerange;
      const __uctype __past = __uerange * __scaling;
      do
        __ret = __uctype(__urng()) - __urngmin;
      while (__ret >= __past);
      __ret /= __scaling;
    }
    else if (__urngrange < __urange)
    {
      __uctype __tmp;
      do
      {
        const __uctype __uerngrange = __urngrange + 1;
        __tmp = (__uerngrange * operator()(__urng, param_type(0, __urange / __uerngrange)));
        __ret = __tmp + (__uctype(__urng()) - __urngmin);
      } while (__ret > __urange || __ret < __tmp);
    }
    else
      __ret = __uctype(__urng()) - __urngmin;
    return __ret + __param.a();
  }
  template <typename _IntType>
  template <typename _ForwardIterator, typename _UniformRandomNumberGenerator>
  void uniform_int_distribution<_IntType>::__generate_impl(
      _ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type& __param)
  {
    typedef typename _UniformRandomNumberGenerator::result_type _Gresult_type;
    typedef typename std::make_unsigned<result_type>::type __utype;
    typedef typename std::common_type<_Gresult_type, __utype>::type __uctype;
    const __uctype __urngmin = __urng.min();
    const __uctype __urngmax = __urng.max();
    const __uctype __urngrange = __urngmax - __urngmin;
    const __uctype __urange = __uctype(__param.b()) - __uctype(__param.a());
    __uctype __ret;
    if (__urngrange > __urange)
    {
      if (__detail::_Power_of_2(__urngrange + 1) && __detail::_Power_of_2(__urange + 1))
      {
        while (__f != __t)
        {
          __ret = __uctype(__urng()) - __urngmin;
          *__f++ = (__ret & __urange) + __param.a();
        }
      }
      else
      {
        const __uctype __uerange = __urange + 1;
        const __uctype __scaling = __urngrange / __uerange;
        const __uctype __past = __uerange * __scaling;
        while (__f != __t)
        {
          do
            __ret = __uctype(__urng()) - __urngmin;
          while (__ret >= __past);
          *__f++ = __ret / __scaling + __param.a();
        }
      }
    }
    else if (__urngrange < __urange)
    {
      __uctype __tmp;
      while (__f != __t)
      {
        do
        {
          const __uctype __uerngrange = __urngrange + 1;
          __tmp = (__uerngrange * operator()(__urng, param_type(0, __urange / __uerngrange)));
          __ret = __tmp + (__uctype(__urng()) - __urngmin);
        } while (__ret > __urange || __ret < __tmp);
        *__f++ = __ret;
      }
    }
    else
      while (__f != __t)
        *__f++ = __uctype(__urng()) - __urngmin + __param.a();
  }
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _Iterator, typename _Compare>
  void __move_median_to_first(_Iterator __result, _Iterator __a, _Iterator __b, _Iterator __c, _Compare __comp)
  {
    if (__comp(__a, __b))
    {
      if (__comp(__b, __c))
        std::iter_swap(__result, __b);
      else if (__comp(__a, __c))
        std::iter_swap(__result, __c);
      else
        std::iter_swap(__result, __a);
    }
    else if (__comp(__a, __c))
      std::iter_swap(__result, __a);
    else if (__comp(__b, __c))
      std::iter_swap(__result, __c);
    else
      std::iter_swap(__result, __b);
  }
  template <typename _InputIterator, typename _Predicate>
  inline _InputIterator __find_if(_InputIterator __first, _InputIterator __last, _Predicate __pred, input_iterator_tag)
  {
    while (__first != __last && !__pred(__first))
      ++__first;
    return __first;
  }
  template <typename _RandomAccessIterator, typename _Predicate>
  _RandomAccessIterator __find_if(
      _RandomAccessIterator __first, _RandomAccessIterator __last, _Predicate __pred, random_access_iterator_tag)
  {
    typename iterator_traits<_RandomAccessIterator>::difference_type __trip_count = (__last - __first) >> 2;
    for (; __trip_count > 0; --__trip_count)
    {
      if (__pred(__first))
        return __first;
      ++__first;
      if (__pred(__first))
        return __first;
      ++__first;
      if (__pred(__first))
        return __first;
      ++__first;
      if (__pred(__first))
        return __first;
      ++__first;
    }
    switch (__last - __first)
    {
      case 3:
        if (__pred(__first))
          return __first;
        ++__first;
      case 2:
        if (__pred(__first))
          return __first;
        ++__first;
      case 1:
        if (__pred(__first))
          return __first;
        ++__first;
      case 0:
      default:
        return __last;
    }
  }
  template <typename _Iterator, typename _Predicate>
  inline _Iterator __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)
  {
    return __find_if(__first, __last, __pred, std::__iterator_category(__first));
  }
  template <typename _InputIterator, typename _Predicate>
  inline _InputIterator __find_if_not(_InputIterator __first, _InputIterator __last, _Predicate __pred)
  {
    return std::__find_if(__first, __last, __gnu_cxx::__ops::__negate(__pred), std::__iterator_category(__first));
  }
  template <typename _InputIterator, typename _Predicate, typename _Distance>
  _InputIterator __find_if_not_n(_InputIterator __first, _Distance & __len, _Predicate __pred)
  {
    for (; __len; --__len, (void)++__first)
      if (!__pred(__first))
        break;
    return __first;
  }
  template <typename _ForwardIterator1, typename _ForwardIterator2, typename _BinaryPredicate>
  _ForwardIterator1 __search(_ForwardIterator1 __first1,
                             _ForwardIterator1 __last1,
                             _ForwardIterator2 __first2,
                             _ForwardIterator2 __last2,
                             _BinaryPredicate __predicate)
  {
    if (__first1 == __last1 || __first2 == __last2)
      return __first1;
    _ForwardIterator2 __p1(__first2);
    if (++__p1 == __last2)
      return std::__find_if(__first1, __last1, __gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2));
    _ForwardIterator2 __p;
    _ForwardIterator1 __current = __first1;
    for (;;)
    {
      __first1 = std::__find_if(__first1, __last1, __gnu_cxx::__ops::__iter_comp_iter(__predicate, __first2));
      if (__first1 == __last1)
        return __last1;
      __p = __p1;
      __current = __first1;
      if (++__current == __last1)
        return __last1;
      while (__predicate(__current, __p))
      {
        if (++__p == __last2)
          return __first1;
        if (++__current == __last1)
          return __last1;
      }
      ++__first1;
    }
    return __first1;
  }
  template <typename _ForwardIterator, typename _Integer, typename _UnaryPredicate>
  _ForwardIterator __search_n_aux(_ForwardIterator __first,
                                  _ForwardIterator __last,
                                  _Integer __count,
                                  _UnaryPredicate __unary_pred,
                                  std::forward_iterator_tag)
  {
    __first = std::__find_if(__first, __last, __unary_pred);
    while (__first != __last)
    {
      typename iterator_traits<_ForwardIterator>::difference_type __n = __count;
      _ForwardIterator __i = __first;
      ++__i;
      while (__i != __last && __n != 1 && __unary_pred(__i))
      {
        ++__i;
        --__n;
      }
      if (__n == 1)
        return __first;
      if (__i == __last)
        return __last;
      __first = std::__find_if(++__i, __last, __unary_pred);
    }
    return __last;
  }
  template <typename _RandomAccessIter, typename _Integer, typename _UnaryPredicate>
  _RandomAccessIter __search_n_aux(_RandomAccessIter __first,
                                   _RandomAccessIter __last,
                                   _Integer __count,
                                   _UnaryPredicate __unary_pred,
                                   std::random_access_iterator_tag)
  {
    typedef typename std::iterator_traits<_RandomAccessIter>::difference_type _DistanceType;
    _DistanceType __tailSize = __last - __first;
    _DistanceType __remainder = __count;
    while (__remainder <= __tailSize)
    {
      __first += __remainder;
      __tailSize -= __remainder;
      _RandomAccessIter __backTrack = __first;
      while (__unary_pred(--__backTrack))
      {
        if (--__remainder == 0)
          return (__first - __count);
      }
      __remainder = __count + 1 - (__first - __backTrack);
    }
    return __last;
  }
  template <typename _ForwardIterator, typename _Integer, typename _UnaryPredicate>
  _ForwardIterator __search_n(
      _ForwardIterator __first, _ForwardIterator __last, _Integer __count, _UnaryPredicate __unary_pred)
  {
    if (__count <= 0)
      return __first;
    if (__count == 1)
      return std::__find_if(__first, __last, __unary_pred);
    return std::__search_n_aux(__first, __last, __count, __unary_pred, std::__iterator_category(__first));
  }
  template <typename _ForwardIterator1, typename _ForwardIterator2, typename _BinaryPredicate>
  _ForwardIterator1 __find_end(_ForwardIterator1 __first1,
                               _ForwardIterator1 __last1,
                               _ForwardIterator2 __first2,
                               _ForwardIterator2 __last2,
                               forward_iterator_tag,
                               forward_iterator_tag,
                               _BinaryPredicate __comp)
  {
    if (__first2 == __last2)
      return __last1;
    _ForwardIterator1 __result = __last1;
    while (1)
    {
      _ForwardIterator1 __new_result = std::__search(__first1, __last1, __first2, __last2, __comp);
      if (__new_result == __last1)
        return __result;
      else
      {
        __result = __new_result;
        __first1 = __new_result;
        ++__first1;
      }
    }
  }
  template <typename _BidirectionalIterator1, typename _BidirectionalIterator2, typename _BinaryPredicate>
  _BidirectionalIterator1 __find_end(_BidirectionalIterator1 __first1,
                                     _BidirectionalIterator1 __last1,
                                     _BidirectionalIterator2 __first2,
                                     _BidirectionalIterator2 __last2,
                                     bidirectional_iterator_tag,
                                     bidirectional_iterator_tag,
                                     _BinaryPredicate __comp)
  {
    typedef reverse_iterator<_BidirectionalIterator1> _RevIterator1;
    typedef reverse_iterator<_BidirectionalIterator2> _RevIterator2;
    _RevIterator1 __rlast1(__first1);
    _RevIterator2 __rlast2(__first2);
    _RevIterator1 __rresult = std::__search(_RevIterator1(__last1), __rlast1, _RevIterator2(__last2), __rlast2, __comp);
    if (__rresult == __rlast1)
      return __last1;
    else
    {
      _BidirectionalIterator1 __result = __rresult.base();
      std::advance(__result, -std::distance(__first2, __last2));
      return __result;
    }
  }
  template <typename _ForwardIterator1, typename _ForwardIterator2>
  inline _ForwardIterator1 find_end(
      _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2)
  {
    ;
    ;
    return std::__find_end(__first1,
                           __last1,
                           __first2,
                           __last2,
                           std::__iterator_category(__first1),
                           std::__iterator_category(__first2),
                           __gnu_cxx::__ops::__iter_equal_to_iter());
  }
  template <typename _ForwardIterator1, typename _ForwardIterator2, typename _BinaryPredicate>
  inline _ForwardIterator1 find_end(_ForwardIterator1 __first1,
                                    _ForwardIterator1 __last1,
                                    _ForwardIterator2 __first2,
                                    _ForwardIterator2 __last2,
                                    _BinaryPredicate __comp)
  {
    ;
    ;
    return std::__find_end(__first1,
                           __last1,
                           __first2,
                           __last2,
                           std::__iterator_category(__first1),
                           std::__iterator_category(__first2),
                           __gnu_cxx::__ops::__iter_comp_iter(__comp));
  }
  template <typename _InputIterator, typename _Predicate>
  inline bool all_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
  {
    return __last == std::find_if_not(__first, __last, __pred);
  }
  template <typename _InputIterator, typename _Predicate>
  inline bool none_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
  {
    return __last == std::find_if(__first, __last, __pred);
  }
  template <typename _InputIterator, typename _Predicate>
  inline bool any_of(_InputIterator __first, _InputIterator __last, _Predicate __pred)
  {
    return !std::none_of(__first, __last, __pred);
  }
  template <typename _InputIterator, typename _Predicate>
  inline _InputIterator find_if_not(_InputIterator __first, _InputIterator __last, _Predicate __pred)
  {
    ;
    return std::__find_if_not(__first, __last, __gnu_cxx::__ops::__pred_iter(__pred));
  }
  template <typename _InputIterator, typename _Predicate>
  inline bool is_partitioned(_InputIterator __first, _InputIterator __last, _Predicate __pred)
  {
    __first = std::find_if_not(__first, __last, __pred);
    if (__first == __last)
      return true;
    ++__first;
    return std::none_of(__first, __last, __pred);
  }
  template <typename _ForwardIterator, typename _Predicate>
  _ForwardIterator partition_point(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)
  {
    ;
    typedef typename iterator_traits<_ForwardIterator>::difference_type _DistanceType;
    _DistanceType __len = std::distance(__first, __last);
    _DistanceType __half;
    _ForwardIterator __middle;
    while (__len > 0)
    {
      __half = __len >> 1;
      __middle = __first;
      std::advance(__middle, __half);
      if (__pred(*__middle))
      {
        __first = __middle;
        ++__first;
        __len = __len - __half - 1;
      }
      else
        __len = __half;
    }
    return __first;
  }
  template <typename _InputIterator, typename _OutputIterator, typename _Predicate>
  _OutputIterator __remove_copy_if(
      _InputIterator __first, _InputIterator __last, _OutputIterator __result, _Predicate __pred)
  {
    for (; __first != __last; ++__first)
      if (!__pred(__first))
      {
        *__result = *__first;
        ++__result;
      }
    return __result;
  }
  template <typename _InputIterator, typename _OutputIterator, typename _Tp>
  inline _OutputIterator remove_copy(
      _InputIterator __first, _InputIterator __last, _OutputIterator __result, const _Tp& __value)
  {
    ;
    return std::__remove_copy_if(__first, __last, __result, __gnu_cxx::__ops::__iter_equals_val(__value));
  }
  template <typename _InputIterator, typename _OutputIterator, typename _Predicate>
  inline _OutputIterator remove_copy_if(
      _InputIterator __first, _InputIterator __last, _OutputIterator __result, _Predicate __pred)
  {
    ;
    return std::__remove_copy_if(__first, __last, __result, __gnu_cxx::__ops::__pred_iter(__pred));
  }
  template <typename _InputIterator, typename _OutputIterator, typename _Predicate>
  _OutputIterator copy_if(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _Predicate __pred)
  {
    ;
    for (; __first != __last; ++__first)
      if (__pred(*__first))
      {
        *__result = *__first;
        ++__result;
      }
    return __result;
  }
  template <typename _InputIterator, typename _Size, typename _OutputIterator>
  _OutputIterator __copy_n(_InputIterator __first, _Size __n, _OutputIterator __result, input_iterator_tag)
  {
    if (__n > 0)
    {
      while (true)
      {
        *__result = *__first;
        ++__result;
        if (--__n > 0)
          ++__first;
        else
          break;
      }
    }
    return __result;
  }
  template <typename _RandomAccessIterator, typename _Size, typename _OutputIterator>
  inline _OutputIterator __copy_n(
      _RandomAccessIterator __first, _Size __n, _OutputIterator __result, random_access_iterator_tag)
  {
    return std::copy(__first, __first + __n, __result);
  }
  template <typename _InputIterator, typename _Size, typename _OutputIterator>
  inline _OutputIterator copy_n(_InputIterator __first, _Size __n, _OutputIterator __result)
  {
    if (__n <= 0)
      return __result;
    ;
    ;
    return std::__copy_n(__first, __n, __result, std::__iterator_category(__first));
  }
  template <typename _InputIterator, typename _OutputIterator1, typename _OutputIterator2, typename _Predicate>
  pair<_OutputIterator1, _OutputIterator2> partition_copy(_InputIterator __first,
                                                          _InputIterator __last,
                                                          _OutputIterator1 __out_true,
                                                          _OutputIterator2 __out_false,
                                                          _Predicate __pred)
  {
    ;
    for (; __first != __last; ++__first)
      if (__pred(*__first))
      {
        *__out_true = *__first;
        ++__out_true;
      }
      else
      {
        *__out_false = *__first;
        ++__out_false;
      }
    return pair<_OutputIterator1, _OutputIterator2>(__out_true, __out_false);
  }
  template <typename _ForwardIterator, typename _Predicate>
  _ForwardIterator __remove_if(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)
  {
    __first = std::__find_if(__first, __last, __pred);
    if (__first == __last)
      return __first;
    _ForwardIterator __result = __first;
    ++__first;
    for (; __first != __last; ++__first)
      if (!__pred(__first))
      {
        *__result = std::move(*__first);
        ++__result;
      }
    return __result;
  }
  template <typename _ForwardIterator, typename _Tp>
  inline _ForwardIterator remove(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
  {
    ;
    return std::__remove_if(__first, __last, __gnu_cxx::__ops::__iter_equals_val(__value));
  }
  template <typename _ForwardIterator, typename _Predicate>
  inline _ForwardIterator remove_if(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)
  {
    ;
    return std::__remove_if(__first, __last, __gnu_cxx::__ops::__pred_iter(__pred));
  }
  template <typename _ForwardIterator, typename _BinaryPredicate>
  _ForwardIterator __adjacent_find(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __binary_pred)
  {
    if (__first == __last)
      return __last;
    _ForwardIterator __next = __first;
    while (++__next != __last)
    {
      if (__binary_pred(__first, __next))
        return __first;
      __first = __next;
    }
    return __last;
  }
  template <typename _ForwardIterator, typename _BinaryPredicate>
  _ForwardIterator __unique(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __binary_pred)
  {
    __first = std::__adjacent_find(__first, __last, __binary_pred);
    if (__first == __last)
      return __last;
    _ForwardIterator __dest = __first;
    ++__first;
    while (++__first != __last)
      if (!__binary_pred(__dest, __first))
        *++__dest = std::move(*__first);
    return ++__dest;
  }
  template <typename _ForwardIterator>
  inline _ForwardIterator unique(_ForwardIterator __first, _ForwardIterator __last)
  {
    ;
    return std::__unique(__first, __last, __gnu_cxx::__ops::__iter_equal_to_iter());
  }
  template <typename _ForwardIterator, typename _BinaryPredicate>
  inline _ForwardIterator unique(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __binary_pred)
  {
    ;
    return std::__unique(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
  }
  template <typename _ForwardIterator, typename _OutputIterator, typename _BinaryPredicate>
  _OutputIterator __unique_copy(_ForwardIterator __first,
                                _ForwardIterator __last,
                                _OutputIterator __result,
                                _BinaryPredicate __binary_pred,
                                forward_iterator_tag,
                                output_iterator_tag)
  {
    _ForwardIterator __next = __first;
    *__result = *__first;
    while (++__next != __last)
      if (!__binary_pred(__first, __next))
      {
        __first = __next;
        *++__result = *__first;
      }
    return ++__result;
  }
  template <typename _InputIterator, typename _OutputIterator, typename _BinaryPredicate>
  _OutputIterator __unique_copy(_InputIterator __first,
                                _InputIterator __last,
                                _OutputIterator __result,
                                _BinaryPredicate __binary_pred,
                                input_iterator_tag,
                                output_iterator_tag)
  {
    typename iterator_traits<_InputIterator>::value_type __value = *__first;
    __decltype(__gnu_cxx::__ops::__iter_comp_val(__binary_pred)) __rebound_pred =
        __gnu_cxx::__ops::__iter_comp_val(__binary_pred);
    *__result = __value;
    while (++__first != __last)
      if (!__rebound_pred(__first, __value))
      {
        __value = *__first;
        *++__result = __value;
      }
    return ++__result;
  }
  template <typename _InputIterator, typename _ForwardIterator, typename _BinaryPredicate>
  _ForwardIterator __unique_copy(_InputIterator __first,
                                 _InputIterator __last,
                                 _ForwardIterator __result,
                                 _BinaryPredicate __binary_pred,
                                 input_iterator_tag,
                                 forward_iterator_tag)
  {
    *__result = *__first;
    while (++__first != __last)
      if (!__binary_pred(__result, __first))
        *++__result = *__first;
    return ++__result;
  }
  template <typename _BidirectionalIterator>
  void __reverse(_BidirectionalIterator __first, _BidirectionalIterator __last, bidirectional_iterator_tag)
  {
    while (true)
      if (__first == __last || __first == --__last)
        return;
      else
      {
        std::iter_swap(__first, __last);
        ++__first;
      }
  }
  template <typename _RandomAccessIterator>
  void __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last, random_access_iterator_tag)
  {
    if (__first == __last)
      return;
    --__last;
    while (__first < __last)
    {
      std::iter_swap(__first, __last);
      ++__first;
      --__last;
    }
  }
  template <typename _BidirectionalIterator>
  inline void reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)
  {
    ;
    std::__reverse(__first, __last, std::__iterator_category(__first));
  }
  template <typename _BidirectionalIterator, typename _OutputIterator>
  _OutputIterator reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last, _OutputIterator __result)
  {
    ;
    while (__first != __last)
    {
      --__last;
      *__result = *__last;
      ++__result;
    }
    return __result;
  }
  template <typename _EuclideanRingElement>
  _EuclideanRingElement __gcd(_EuclideanRingElement __m, _EuclideanRingElement __n)
  {
    while (__n != 0)
    {
      _EuclideanRingElement __t = __m % __n;
      __m = __n;
      __n = __t;
    }
    return __m;
  }
  inline namespace _V2
  {
  template <typename _ForwardIterator>
  _ForwardIterator __rotate(_ForwardIterator __first,
                            _ForwardIterator __middle,
                            _ForwardIterator __last,
                            forward_iterator_tag)
  {
    if (__first == __middle)
      return __last;
    else if (__last == __middle)
      return __first;
    _ForwardIterator __first2 = __middle;
    do
    {
      std::iter_swap(__first, __first2);
      ++__first;
      ++__first2;
      if (__first == __middle)
        __middle = __first2;
    } while (__first2 != __last);
    _ForwardIterator __ret = __first;
    __first2 = __middle;
    while (__first2 != __last)
    {
      std::iter_swap(__first, __first2);
      ++__first;
      ++__first2;
      if (__first == __middle)
        __middle = __first2;
      else if (__first2 == __last)
        __first2 = __middle;
    }
    return __ret;
  }
  template <typename _BidirectionalIterator>
  _BidirectionalIterator __rotate(_BidirectionalIterator __first,
                                  _BidirectionalIterator __middle,
                                  _BidirectionalIterator __last,
                                  bidirectional_iterator_tag)
  {
    if (__first == __middle)
      return __last;
    else if (__last == __middle)
      return __first;
    std::__reverse(__first, __middle, bidirectional_iterator_tag());
    std::__reverse(__middle, __last, bidirectional_iterator_tag());
    while (__first != __middle && __middle != __last)
    {
      std::iter_swap(__first, --__last);
      ++__first;
    }
    if (__first == __middle)
    {
      std::__reverse(__middle, __last, bidirectional_iterator_tag());
      return __last;
    }
    else
    {
      std::__reverse(__first, __middle, bidirectional_iterator_tag());
      return __first;
    }
  }
  template <typename _RandomAccessIterator>
  _RandomAccessIterator __rotate(_RandomAccessIterator __first,
                                 _RandomAccessIterator __middle,
                                 _RandomAccessIterator __last,
                                 random_access_iterator_tag)
  {
    if (__first == __middle)
      return __last;
    else if (__last == __middle)
      return __first;
    typedef typename iterator_traits<_RandomAccessIterator>::difference_type _Distance;
    typedef typename iterator_traits<_RandomAccessIterator>::value_type _ValueType;
    _Distance __n = __last - __first;
    _Distance __k = __middle - __first;
    if (__k == __n - __k)
    {
      std::swap_ranges(__first, __middle, __middle);
      return __middle;
    }
    _RandomAccessIterator __p = __first;
    _RandomAccessIterator __ret = __first + (__last - __middle);
    for (;;)
    {
      if (__k < __n - __k)
      {
        if (__is_pod(_ValueType) && __k == 1)
        {
          _ValueType __t = std::move(*__p);
          std::move(__p + 1, __p + __n, __p);
          *(__p + __n - 1) = std::move(__t);
          return __ret;
        }
        _RandomAccessIterator __q = __p + __k;
        for (_Distance __i = 0; __i < __n - __k; ++__i)
        {
          std::iter_swap(__p, __q);
          ++__p;
          ++__q;
        }
        __n %= __k;
        if (__n == 0)
          return __ret;
        std::swap(__n, __k);
        __k = __n - __k;
      }
      else
      {
        __k = __n - __k;
        if (__is_pod(_ValueType) && __k == 1)
        {
          _ValueType __t = std::move(*(__p + __n - 1));
          std::move_backward(__p, __p + __n - 1, __p + __n);
          *__p = std::move(__t);
          return __ret;
        }
        _RandomAccessIterator __q = __p + __n;
        __p = __q - __k;
        for (_Distance __i = 0; __i < __n - __k; ++__i)
        {
          --__p;
          --__q;
          std::iter_swap(__p, __q);
        }
        __n %= __k;
        if (__n == 0)
          return __ret;
        std::swap(__n, __k);
      }
    }
  }
  template <typename _ForwardIterator>
  inline _ForwardIterator rotate(_ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last)
  {
    ;
    ;
    return std::__rotate(__first, __middle, __last, std::__iterator_category(__first));
  }
  }  // namespace _V2
  template <typename _ForwardIterator, typename _OutputIterator>
  inline _OutputIterator rotate_copy(
      _ForwardIterator __first, _ForwardIterator __middle, _ForwardIterator __last, _OutputIterator __result)
  {
    ;
    ;
    return std::copy(__first, __middle, std::copy(__middle, __last, __result));
  }
  template <typename _ForwardIterator, typename _Predicate>
  _ForwardIterator __partition(
      _ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, forward_iterator_tag)
  {
    if (__first == __last)
      return __first;
    while (__pred(*__first))
      if (++__first == __last)
        return __first;
    _ForwardIterator __next = __first;
    while (++__next != __last)
      if (__pred(*__next))
      {
        std::iter_swap(__first, __next);
        ++__first;
      }
    return __first;
  }
  template <typename _BidirectionalIterator, typename _Predicate>
  _BidirectionalIterator __partition(
      _BidirectionalIterator __first, _BidirectionalIterator __last, _Predicate __pred, bidirectional_iterator_tag)
  {
    while (true)
    {
      while (true)
        if (__first == __last)
          return __first;
        else if (__pred(*__first))
          ++__first;
        else
          break;
      --__last;
      while (true)
        if (__first == __last)
          return __first;
        else if (!bool(__pred(*__last)))
          --__last;
        else
          break;
      std::iter_swap(__first, __last);
      ++__first;
    }
  }
  template <typename _ForwardIterator, typename _Pointer, typename _Predicate, typename _Distance>
  _ForwardIterator __stable_partition_adaptive(_ForwardIterator __first,
                                               _ForwardIterator __last,
                                               _Predicate __pred,
                                               _Distance __len,
                                               _Pointer __buffer,
                                               _Distance __buffer_size)
  {
    if (__len == 1)
      return __first;
    if (__len <= __buffer_size)
    {
      _ForwardIterator __result1 = __first;
      _Pointer __result2 = __buffer;
      *__result2 = std::move(*__first);
      ++__result2;
      ++__first;
      for (; __first != __last; ++__first)
        if (__pred(__first))
        {
          *__result1 = std::move(*__first);
          ++__result1;
        }
        else
        {
          *__result2 = std::move(*__first);
          ++__result2;
        }
      std::move(__buffer, __result2, __result1);
      return __result1;
    }
    _ForwardIterator __middle = __first;
    std::advance(__middle, __len / 2);
    _ForwardIterator __left_split =
        std::__stable_partition_adaptive(__first, __middle, __pred, __len / 2, __buffer, __buffer_size);
    _Distance __right_len = __len - __len / 2;
    _ForwardIterator __right_split = std::__find_if_not_n(__middle, __right_len, __pred);
    if (__right_len)
      __right_split =
          std::__stable_partition_adaptive(__right_split, __last, __pred, __right_len, __buffer, __buffer_size);
    return std::rotate(__left_split, __middle, __right_split);
  }
  template <typename _ForwardIterator, typename _Predicate>
  _ForwardIterator __stable_partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)
  {
    __first = std::__find_if_not(__first, __last, __pred);
    if (__first == __last)
      return __first;
    typedef typename iterator_traits<_ForwardIterator>::value_type _ValueType;
    typedef typename iterator_traits<_ForwardIterator>::difference_type _DistanceType;
    _Temporary_buffer<_ForwardIterator, _ValueType> __buf(__first, std::distance(__first, __last));
    return std::__stable_partition_adaptive(
        __first, __last, __pred, _DistanceType(__buf.requested_size()), __buf.begin(), _DistanceType(__buf.size()));
  }
  template <typename _ForwardIterator, typename _Predicate>
  inline _ForwardIterator stable_partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)
  {
    ;
    return std::__stable_partition(__first, __last, __gnu_cxx::__ops::__pred_iter(__pred));
  }
  template <typename _RandomAccessIterator, typename _Compare>
  void __heap_select(
      _RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last, _Compare __comp)
  {
    std::__make_heap(__first, __middle, __comp);
    for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
      if (__comp(__i, __first))
        std::__pop_heap(__first, __middle, __i, __comp);
  }
  template <typename _InputIterator, typename _RandomAccessIterator, typename _Compare>
  _RandomAccessIterator __partial_sort_copy(_InputIterator __first,
                                            _InputIterator __last,
                                            _RandomAccessIterator __result_first,
                                            _RandomAccessIterator __result_last,
                                            _Compare __comp)
  {
    typedef typename iterator_traits<_InputIterator>::value_type _InputValueType;
    typedef iterator_traits<_RandomAccessIterator> _RItTraits;
    typedef typename _RItTraits::difference_type _DistanceType;
    if (__result_first == __result_last)
      return __result_last;
    _RandomAccessIterator __result_real_last = __result_first;
    while (__first != __last && __result_real_last != __result_last)
    {
      *__result_real_last = *__first;
      ++__result_real_last;
      ++__first;
    }
    std::__make_heap(__result_first, __result_real_last, __comp);
    while (__first != __last)
    {
      if (__comp(__first, __result_first))
        std::__adjust_heap(__result_first,
                           _DistanceType(0),
                           _DistanceType(__result_real_last - __result_first),
                           _InputValueType(*__first),
                           __comp);
      ++__first;
    }
    std::__sort_heap(__result_first, __result_real_last, __comp);
    return __result_real_last;
  }
  template <typename _InputIterator, typename _RandomAccessIterator>
  inline _RandomAccessIterator partial_sort_copy(_InputIterator __first,
                                                 _InputIterator __last,
                                                 _RandomAccessIterator __result_first,
                                                 _RandomAccessIterator __result_last)
  {
    ;
    ;
    ;
    return std::__partial_sort_copy(
        __first, __last, __result_first, __result_last, __gnu_cxx::__ops::__iter_less_iter());
  }
  template <typename _InputIterator, typename _RandomAccessIterator, typename _Compare>
  inline _RandomAccessIterator partial_sort_copy(_InputIterator __first,
                                                 _InputIterator __last,
                                                 _RandomAccessIterator __result_first,
                                                 _RandomAccessIterator __result_last,
                                                 _Compare __comp)
  {
    ;
    ;
    ;
    return std::__partial_sort_copy(
        __first, __last, __result_first, __result_last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
  }
  template <typename _RandomAccessIterator, typename _Compare>
  void __unguarded_linear_insert(_RandomAccessIterator __last, _Compare __comp)
  {
    typename iterator_traits<_RandomAccessIterator>::value_type __val = std::move(*__last);
    _RandomAccessIterator __next = __last;
    --__next;
    while (__comp(__val, __next))
    {
      *__last = std::move(*__next);
      __last = __next;
      --__next;
    }
    *__last = std::move(__val);
  }
  template <typename _RandomAccessIterator, typename _Compare>
  void __insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
  {
    if (__first == __last)
      return;
    for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
    {
      if (__comp(__i, __first))
      {
        typename iterator_traits<_RandomAccessIterator>::value_type __val = std::move(*__i);
        std::move_backward(__first, __i, __i + 1);
        *__first = std::move(__val);
      }
      else
        std::__unguarded_linear_insert(__i, __gnu_cxx::__ops::__val_comp_iter(__comp));
    }
  }
  template <typename _RandomAccessIterator, typename _Compare>
  inline void __unguarded_insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
  {
    for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
      std::__unguarded_linear_insert(__i, __gnu_cxx::__ops::__val_comp_iter(__comp));
  }
  enum
  {
    _S_threshold = 16
  };
  template <typename _RandomAccessIterator, typename _Compare>
  void __final_insertion_sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
  {
    if (__last - __first > int(_S_threshold))
    {
      std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
      std::__unguarded_insertion_sort(__first + int(_S_threshold), __last, __comp);
    }
    else
      std::__insertion_sort(__first, __last, __comp);
  }
  template <typename _RandomAccessIterator, typename _Compare>
  _RandomAccessIterator __unguarded_partition(
      _RandomAccessIterator __first, _RandomAccessIterator __last, _RandomAccessIterator __pivot, _Compare __comp)
  {
    while (true)
    {
      while (__comp(__first, __pivot))
        ++__first;
      --__last;
      while (__comp(__pivot, __last))
        --__last;
      if (!(__first < __last))
        return __first;
      std::iter_swap(__first, __last);
      ++__first;
    }
  }
  template <typename _RandomAccessIterator, typename _Compare>
  inline _RandomAccessIterator __unguarded_partition_pivot(
      _RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
  {
    _RandomAccessIterator __mid = __first + (__last - __first) / 2;
    std::__move_median_to_first(__first, __first + 1, __mid, __last - 1, __comp);
    return std::__unguarded_partition(__first + 1, __last, __first, __comp);
  }
  template <typename _RandomAccessIterator, typename _Compare>
  inline void __partial_sort(
      _RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last, _Compare __comp)
  {
    std::__heap_select(__first, __middle, __last, __comp);
    std::__sort_heap(__first, __middle, __comp);
  }
  template <typename _RandomAccessIterator, typename _Size, typename _Compare>
  void __introsort_loop(
      _RandomAccessIterator __first, _RandomAccessIterator __last, _Size __depth_limit, _Compare __comp)
  {
    while (__last - __first > int(_S_threshold))
    {
      if (__depth_limit == 0)
      {
        std::__partial_sort(__first, __last, __last, __comp);
        return;
      }
      --__depth_limit;
      _RandomAccessIterator __cut = std::__unguarded_partition_pivot(__first, __last, __comp);
      std::__introsort_loop(__cut, __last, __depth_limit, __comp);
      __last = __cut;
    }
  }
  template <typename _RandomAccessIterator, typename _Compare>
  inline void __sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
  {
    if (__first != __last)
    {
      std::__introsort_loop(__first, __last, std::__lg(__last - __first) * 2, __comp);
      std::__final_insertion_sort(__first, __last, __comp);
    }
  }
  template <typename _RandomAccessIterator, typename _Size, typename _Compare>
  void __introselect(_RandomAccessIterator __first,
                     _RandomAccessIterator __nth,
                     _RandomAccessIterator __last,
                     _Size __depth_limit,
                     _Compare __comp)
  {
    while (__last - __first > 3)
    {
      if (__depth_limit == 0)
      {
        std::__heap_select(__first, __nth + 1, __last, __comp);
        std::iter_swap(__first, __nth);
        return;
      }
      --__depth_limit;
      _RandomAccessIterator __cut = std::__unguarded_partition_pivot(__first, __last, __comp);
      if (__cut <= __nth)
        __first = __cut;
      else
        __last = __cut;
    }
    std::__insertion_sort(__first, __last, __comp);
  }
  template <typename _ForwardIterator, typename _Tp, typename _Compare>
  inline _ForwardIterator lower_bound(
      _ForwardIterator __first, _ForwardIterator __last, const _Tp& __val, _Compare __comp)
  {
    ;
    return std::__lower_bound(__first, __last, __val, __gnu_cxx::__ops::__iter_comp_val(__comp));
  }
  template <typename _ForwardIterator, typename _Tp, typename _Compare>
  _ForwardIterator __upper_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __val, _Compare __comp)
  {
    typedef typename iterator_traits<_ForwardIterator>::difference_type _DistanceType;
    _DistanceType __len = std::distance(__first, __last);
    while (__len > 0)
    {
      _DistanceType __half = __len >> 1;
      _ForwardIterator __middle = __first;
      std::advance(__middle, __half);
      if (__comp(__val, __middle))
        __len = __half;
      else
      {
        __first = __middle;
        ++__first;
        __len = __len - __half - 1;
      }
    }
    return __first;
  }
  template <typename _ForwardIterator, typename _Tp>
  inline _ForwardIterator upper_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __val)
  {
    ;
    return std::__upper_bound(__first, __last, __val, __gnu_cxx::__ops::__val_less_iter());
  }
  template <typename _ForwardIterator, typename _Tp, typename _Compare>
  inline _ForwardIterator upper_bound(
      _ForwardIterator __first, _ForwardIterator __last, const _Tp& __val, _Compare __comp)
  {
    ;
    return std::__upper_bound(__first, __last, __val, __gnu_cxx::__ops::__val_comp_iter(__comp));
  }
  template <typename _ForwardIterator, typename _Tp, typename _CompareItTp, typename _CompareTpIt>
  pair<_ForwardIterator, _ForwardIterator> __equal_range(_ForwardIterator __first,
                                                         _ForwardIterator __last,
                                                         const _Tp& __val,
                                                         _CompareItTp __comp_it_val,
                                                         _CompareTpIt __comp_val_it)
  {
    typedef typename iterator_traits<_ForwardIterator>::difference_type _DistanceType;
    _DistanceType __len = std::distance(__first, __last);
    while (__len > 0)
    {
      _DistanceType __half = __len >> 1;
      _ForwardIterator __middle = __first;
      std::advance(__middle, __half);
      if (__comp_it_val(__middle, __val))
      {
        __first = __middle;
        ++__first;
        __len = __len - __half - 1;
      }
      else if (__comp_val_it(__val, __middle))
        __len = __half;
      else
      {
        _ForwardIterator __left = std::__lower_bound(__first, __middle, __val, __comp_it_val);
        std::advance(__first, __len);
        _ForwardIterator __right = std::__upper_bound(++__middle, __first, __val, __comp_val_it);
        return pair<_ForwardIterator, _ForwardIterator>(__left, __right);
      }
    }
    return pair<_ForwardIterator, _ForwardIterator>(__first, __first);
  }
  template <typename _ForwardIterator, typename _Tp>
  inline pair<_ForwardIterator, _ForwardIterator> equal_range(
      _ForwardIterator __first, _ForwardIterator __last, const _Tp& __val)
  {
    ;
    ;
    return std::__equal_range(
        __first, __last, __val, __gnu_cxx::__ops::__iter_less_val(), __gnu_cxx::__ops::__val_less_iter());
  }
  template <typename _ForwardIterator, typename _Tp, typename _Compare>
  inline pair<_ForwardIterator, _ForwardIterator> equal_range(
      _ForwardIterator __first, _ForwardIterator __last, const _Tp& __val, _Compare __comp)
  {
    ;
    ;
    return std::__equal_range(
        __first, __last, __val, __gnu_cxx::__ops::__iter_comp_val(__comp), __gnu_cxx::__ops::__val_comp_iter(__comp));
  }
  template <typename _ForwardIterator, typename _Tp>
  bool binary_search(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __val)
  {
    ;
    ;
    _ForwardIterator __i = std::__lower_bound(__first, __last, __val, __gnu_cxx::__ops::__iter_less_val());
    return __i != __last && !(__val < *__i);
  }
  template <typename _ForwardIterator, typename _Tp, typename _Compare>
  bool binary_search(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __val, _Compare __comp)
  {
    ;
    ;
    _ForwardIterator __i = std::__lower_bound(__first, __last, __val, __gnu_cxx::__ops::__iter_comp_val(__comp));
    return __i != __last && !bool(__comp(__val, *__i));
  }
  template <typename _InputIterator1, typename _InputIterator2, typename _OutputIterator, typename _Compare>
  void __move_merge_adaptive(_InputIterator1 __first1,
                             _InputIterator1 __last1,
                             _InputIterator2 __first2,
                             _InputIterator2 __last2,
                             _OutputIterator __result,
                             _Compare __comp)
  {
    while (__first1 != __last1 && __first2 != __last2)
    {
      if (__comp(__first2, __first1))
      {
        *__result = std::move(*__first2);
        ++__first2;
      }
      else
      {
        *__result = std::move(*__first1);
        ++__first1;
      }
      ++__result;
    }
    if (__first1 != __last1)
      std::move(__first1, __last1, __result);
  }
  template <typename _BidirectionalIterator1,
            typename _BidirectionalIterator2,
            typename _BidirectionalIterator3,
            typename _Compare>
  void __move_merge_adaptive_backward(_BidirectionalIterator1 __first1,
                                      _BidirectionalIterator1 __last1,
                                      _BidirectionalIterator2 __first2,
                                      _BidirectionalIterator2 __last2,
                                      _BidirectionalIterator3 __result,
                                      _Compare __comp)
  {
    if (__first1 == __last1)
    {
      std::move_backward(__first2, __last2, __result);
      return;
    }
    else if (__first2 == __last2)
      return;
    --__last1;
    --__last2;
    while (true)
    {
      if (__comp(__last2, __last1))
      {
        *--__result = std::move(*__last1);
        if (__first1 == __last1)
        {
          std::move_backward(__first2, ++__last2, __result);
          return;
        }
        --__last1;
      }
      else
      {
        *--__result = std::move(*__last2);
        if (__first2 == __last2)
          return;
        --__last2;
      }
    }
  }
  template <typename _BidirectionalIterator1, typename _BidirectionalIterator2, typename _Distance>
  _BidirectionalIterator1 __rotate_adaptive(_BidirectionalIterator1 __first,
                                            _BidirectionalIterator1 __middle,
                                            _BidirectionalIterator1 __last,
                                            _Distance __len1,
                                            _Distance __len2,
                                            _BidirectionalIterator2 __buffer,
                                            _Distance __buffer_size)
  {
    _BidirectionalIterator2 __buffer_end;
    if (__len1 > __len2 && __len2 <= __buffer_size)
    {
      if (__len2)
      {
        __buffer_end = std::move(__middle, __last, __buffer);
        std::move_backward(__first, __middle, __last);
        return std::move(__buffer, __buffer_end, __first);
      }
      else
        return __first;
    }
    else if (__len1 <= __buffer_size)
    {
      if (__len1)
      {
        __buffer_end = std::move(__first, __middle, __buffer);
        std::move(__middle, __last, __first);
        return std::move_backward(__buffer, __buffer_end, __last);
      }
      else
        return __last;
    }
    else
      return std::rotate(__first, __middle, __last);
  }
  template <typename _BidirectionalIterator, typename _Distance, typename _Pointer, typename _Compare>
  void __merge_adaptive(_BidirectionalIterator __first,
                        _BidirectionalIterator __middle,
                        _BidirectionalIterator __last,
                        _Distance __len1,
                        _Distance __len2,
                        _Pointer __buffer,
                        _Distance __buffer_size,
                        _Compare __comp)
  {
    if (__len1 <= __len2 && __len1 <= __buffer_size)
    {
      _Pointer __buffer_end = std::move(__first, __middle, __buffer);
      std::__move_merge_adaptive(__buffer, __buffer_end, __middle, __last, __first, __comp);
    }
    else if (__len2 <= __buffer_size)
    {
      _Pointer __buffer_end = std::move(__middle, __last, __buffer);
      std::__move_merge_adaptive_backward(__first, __middle, __buffer, __buffer_end, __last, __comp);
    }
    else
    {
      _BidirectionalIterator __first_cut = __first;
      _BidirectionalIterator __second_cut = __middle;
      _Distance __len11 = 0;
      _Distance __len22 = 0;
      if (__len1 > __len2)
      {
        __len11 = __len1 / 2;
        std::advance(__first_cut, __len11);
        __second_cut = std::__lower_bound(__middle, __last, *__first_cut, __gnu_cxx::__ops::__iter_comp_val(__comp));
        __len22 = std::distance(__middle, __second_cut);
      }
      else
      {
        __len22 = __len2 / 2;
        std::advance(__second_cut, __len22);
        __first_cut = std::__upper_bound(__first, __middle, *__second_cut, __gnu_cxx::__ops::__val_comp_iter(__comp));
        __len11 = std::distance(__first, __first_cut);
      }
      _BidirectionalIterator __new_middle = std::__rotate_adaptive(
          __first_cut, __middle, __second_cut, __len1 - __len11, __len22, __buffer, __buffer_size);
      std::__merge_adaptive(__first, __first_cut, __new_middle, __len11, __len22, __buffer, __buffer_size, __comp);
      std::__merge_adaptive(
          __new_middle, __second_cut, __last, __len1 - __len11, __len2 - __len22, __buffer, __buffer_size, __comp);
    }
  }
  template <typename _BidirectionalIterator, typename _Distance, typename _Compare>
  void __merge_without_buffer(_BidirectionalIterator __first,
                              _BidirectionalIterator __middle,
                              _BidirectionalIterator __last,
                              _Distance __len1,
                              _Distance __len2,
                              _Compare __comp)
  {
    if (__len1 == 0 || __len2 == 0)
      return;
    if (__len1 + __len2 == 2)
    {
      if (__comp(__middle, __first))
        std::iter_swap(__first, __middle);
      return;
    }
    _BidirectionalIterator __first_cut = __first;
    _BidirectionalIterator __second_cut = __middle;
    _Distance __len11 = 0;
    _Distance __len22 = 0;
    if (__len1 > __len2)
    {
      __len11 = __len1 / 2;
      std::advance(__first_cut, __len11);
      __second_cut = std::__lower_bound(__middle, __last, *__first_cut, __gnu_cxx::__ops::__iter_comp_val(__comp));
      __len22 = std::distance(__middle, __second_cut);
    }
    else
    {
      __len22 = __len2 / 2;
      std::advance(__second_cut, __len22);
      __first_cut = std::__upper_bound(__first, __middle, *__second_cut, __gnu_cxx::__ops::__val_comp_iter(__comp));
      __len11 = std::distance(__first, __first_cut);
    }
    _BidirectionalIterator __new_middle = std::rotate(__first_cut, __middle, __second_cut);
    std::__merge_without_buffer(__first, __first_cut, __new_middle, __len11, __len22, __comp);
    std::__merge_without_buffer(__new_middle, __second_cut, __last, __len1 - __len11, __len2 - __len22, __comp);
  }
  template <typename _BidirectionalIterator, typename _Compare>
  void __inplace_merge(
      _BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Compare __comp)
  {
    typedef typename iterator_traits<_BidirectionalIterator>::value_type _ValueType;
    typedef typename iterator_traits<_BidirectionalIterator>::difference_type _DistanceType;
    if (__first == __middle || __middle == __last)
      return;
    const _DistanceType __len1 = std::distance(__first, __middle);
    const _DistanceType __len2 = std::distance(__middle, __last);
    typedef _Temporary_buffer<_BidirectionalIterator, _ValueType> _TmpBuf;
    _TmpBuf __buf(__first, __len1 + __len2);
    if (__buf.begin() == 0)
      std::__merge_without_buffer(__first, __middle, __last, __len1, __len2, __comp);
    else
      std::__merge_adaptive(
          __first, __middle, __last, __len1, __len2, __buf.begin(), _DistanceType(__buf.size()), __comp);
  }
  template <typename _BidirectionalIterator>
  inline void inplace_merge(
      _BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last)
  {
    ;
    ;
    ;
    std::__inplace_merge(__first, __middle, __last, __gnu_cxx::__ops::__iter_less_iter());
  }
  template <typename _BidirectionalIterator, typename _Compare>
  inline void inplace_merge(
      _BidirectionalIterator __first, _BidirectionalIterator __middle, _BidirectionalIterator __last, _Compare __comp)
  {
    ;
    ;
    ;
    std::__inplace_merge(__first, __middle, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
  }
  template <typename _InputIterator, typename _OutputIterator, typename _Compare>
  _OutputIterator __move_merge(_InputIterator __first1,
                               _InputIterator __last1,
                               _InputIterator __first2,
                               _InputIterator __last2,
                               _OutputIterator __result,
                               _Compare __comp)
  {
    while (__first1 != __last1 && __first2 != __last2)
    {
      if (__comp(__first2, __first1))
      {
        *__result = std::move(*__first2);
        ++__first2;
      }
      else
      {
        *__result = std::move(*__first1);
        ++__first1;
      }
      ++__result;
    }
    return std::move(__first2, __last2, std::move(__first1, __last1, __result));
  }
  template <typename _RandomAccessIterator1, typename _RandomAccessIterator2, typename _Distance, typename _Compare>
  void __merge_sort_loop(_RandomAccessIterator1 __first,
                         _RandomAccessIterator1 __last,
                         _RandomAccessIterator2 __result,
                         _Distance __step_size,
                         _Compare __comp)
  {
    const _Distance __two_step = 2 * __step_size;
    while (__last - __first >= __two_step)
    {
      __result = std::__move_merge(
          __first, __first + __step_size, __first + __step_size, __first + __two_step, __result, __comp);
      __first += __two_step;
    }
    __step_size = std::min(_Distance(__last - __first), __step_size);
    std::__move_merge(__first, __first + __step_size, __first + __step_size, __last, __result, __comp);
  }
  template <typename _RandomAccessIterator, typename _Distance, typename _Compare>
  void __chunk_insertion_sort(
      _RandomAccessIterator __first, _RandomAccessIterator __last, _Distance __chunk_size, _Compare __comp)
  {
    while (__last - __first >= __chunk_size)
    {
      std::__insertion_sort(__first, __first + __chunk_size, __comp);
      __first += __chunk_size;
    }
    std::__insertion_sort(__first, __last, __comp);
  }
  enum
  {
    _S_chunk_size = 7
  };
  template <typename _RandomAccessIterator, typename _Pointer, typename _Compare>
  void __merge_sort_with_buffer(
      _RandomAccessIterator __first, _RandomAccessIterator __last, _Pointer __buffer, _Compare __comp)
  {
    typedef typename iterator_traits<_RandomAccessIterator>::difference_type _Distance;
    const _Distance __len = __last - __first;
    const _Pointer __buffer_last = __buffer + __len;
    _Distance __step_size = _S_chunk_size;
    std::__chunk_insertion_sort(__first, __last, __step_size, __comp);
    while (__step_size < __len)
    {
      std::__merge_sort_loop(__first, __last, __buffer, __step_size, __comp);
      __step_size *= 2;
      std::__merge_sort_loop(__buffer, __buffer_last, __first, __step_size, __comp);
      __step_size *= 2;
    }
  }
  template <typename _RandomAccessIterator, typename _Pointer, typename _Distance, typename _Compare>
  void __stable_sort_adaptive(_RandomAccessIterator __first,
                              _RandomAccessIterator __last,
                              _Pointer __buffer,
                              _Distance __buffer_size,
                              _Compare __comp)
  {
    const _Distance __len = (__last - __first + 1) / 2;
    const _RandomAccessIterator __middle = __first + __len;
    if (__len > __buffer_size)
    {
      std::__stable_sort_adaptive(__first, __middle, __buffer, __buffer_size, __comp);
      std::__stable_sort_adaptive(__middle, __last, __buffer, __buffer_size, __comp);
    }
    else
    {
      std::__merge_sort_with_buffer(__first, __middle, __buffer, __comp);
      std::__merge_sort_with_buffer(__middle, __last, __buffer, __comp);
    }
    std::__merge_adaptive(__first,
                          __middle,
                          __last,
                          _Distance(__middle - __first),
                          _Distance(__last - __middle),
                          __buffer,
                          __buffer_size,
                          __comp);
  }
  template <typename _RandomAccessIterator, typename _Compare>
  void __inplace_stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
  {
    if (__last - __first < 15)
    {
      std::__insertion_sort(__first, __last, __comp);
      return;
    }
    _RandomAccessIterator __middle = __first + (__last - __first) / 2;
    std::__inplace_stable_sort(__first, __middle, __comp);
    std::__inplace_stable_sort(__middle, __last, __comp);
    std::__merge_without_buffer(__first, __middle, __last, __middle - __first, __last - __middle, __comp);
  }
  template <typename _InputIterator1, typename _InputIterator2, typename _Compare>
  bool __includes(_InputIterator1 __first1,
                  _InputIterator1 __last1,
                  _InputIterator2 __first2,
                  _InputIterator2 __last2,
                  _Compare __comp)
  {
    while (__first1 != __last1 && __first2 != __last2)
      if (__comp(__first2, __first1))
        return false;
      else if (__comp(__first1, __first2))
        ++__first1;
      else
      {
        ++__first1;
        ++__first2;
      }
    return __first2 == __last2;
  }
  template <typename _InputIterator1, typename _InputIterator2>
  inline bool includes(
      _InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 __first2, _InputIterator2 __last2)
  {
    ;
    ;
    ;
    ;
    return std::__includes(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_less_iter());
  }
  template <typename _InputIterator1, typename _InputIterator2, typename _Compare>
  inline bool includes(_InputIterator1 __first1,
                       _InputIterator1 __last1,
                       _InputIterator2 __first2,
                       _InputIterator2 __last2,
                       _Compare __comp)
  {
    ;
    ;
    ;
    ;
    return std::__includes(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__comp));
  }
  template <typename _BidirectionalIterator, typename _Compare>
  bool __next_permutation(_BidirectionalIterator __first, _BidirectionalIterator __last, _Compare __comp)
  {
    if (__first == __last)
      return false;
    _BidirectionalIterator __i = __first;
    ++__i;
    if (__i == __last)
      return false;
    __i = __last;
    --__i;
    for (;;)
    {
      _BidirectionalIterator __ii = __i;
      --__i;
      if (__comp(__i, __ii))
      {
        _BidirectionalIterator __j = __last;
        while (!__comp(__i, --__j))
        {
        }
        std::iter_swap(__i, __j);
        std::__reverse(__ii, __last, std::__iterator_category(__first));
        return true;
      }
      if (__i == __first)
      {
        std::__reverse(__first, __last, std::__iterator_category(__first));
        return false;
      }
    }
  }
  template <typename _BidirectionalIterator>
  inline bool next_permutation(_BidirectionalIterator __first, _BidirectionalIterator __last)
  {
    ;
    ;
    return std::__next_permutation(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
  }
  template <typename _BidirectionalIterator, typename _Compare>
  inline bool next_permutation(_BidirectionalIterator __first, _BidirectionalIterator __last, _Compare __comp)
  {
    ;
    ;
    return std::__next_permutation(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
  }
  template <typename _BidirectionalIterator, typename _Compare>
  bool __prev_permutation(_BidirectionalIterator __first, _BidirectionalIterator __last, _Compare __comp)
  {
    if (__first == __last)
      return false;
    _BidirectionalIterator __i = __first;
    ++__i;
    if (__i == __last)
      return false;
    __i = __last;
    --__i;
    for (;;)
    {
      _BidirectionalIterator __ii = __i;
      --__i;
      if (__comp(__ii, __i))
      {
        _BidirectionalIterator __j = __last;
        while (!__comp(--__j, __i))
        {
        }
        std::iter_swap(__i, __j);
        std::__reverse(__ii, __last, std::__iterator_category(__first));
        return true;
      }
      if (__i == __first)
      {
        std::__reverse(__first, __last, std::__iterator_category(__first));
        return false;
      }
    }
  }
  template <typename _BidirectionalIterator>
  inline bool prev_permutation(_BidirectionalIterator __first, _BidirectionalIterator __last)
  {
    ;
    ;
    return std::__prev_permutation(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
  }
  template <typename _BidirectionalIterator, typename _Compare>
  inline bool prev_permutation(_BidirectionalIterator __first, _BidirectionalIterator __last, _Compare __comp)
  {
    ;
    ;
    return std::__prev_permutation(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
  }
  template <typename _InputIterator, typename _OutputIterator, typename _Predicate, typename _Tp>
  _OutputIterator __replace_copy_if(_InputIterator __first,
                                    _InputIterator __last,
                                    _OutputIterator __result,
                                    _Predicate __pred,
                                    const _Tp& __new_value)
  {
    for (; __first != __last; ++__first, (void)++__result)
      if (__pred(__first))
        *__result = __new_value;
      else
        *__result = *__first;
    return __result;
  }
  template <typename _InputIterator, typename _OutputIterator, typename _Tp>
  inline _OutputIterator replace_copy(_InputIterator __first,
                                      _InputIterator __last,
                                      _OutputIterator __result,
                                      const _Tp& __old_value,
                                      const _Tp& __new_value)
  {
    ;
    return std::__replace_copy_if(
        __first, __last, __result, __gnu_cxx::__ops::__iter_equals_val(__old_value), __new_value);
  }
  template <typename _InputIterator, typename _OutputIterator, typename _Predicate, typename _Tp>
  inline _OutputIterator replace_copy_if(_InputIterator __first,
                                         _InputIterator __last,
                                         _OutputIterator __result,
                                         _Predicate __pred,
                                         const _Tp& __new_value)
  {
    ;
    return std::__replace_copy_if(__first, __last, __result, __gnu_cxx::__ops::__pred_iter(__pred), __new_value);
  }
  template <typename _InputIterator, typename _Predicate>
  typename iterator_traits<_InputIterator>::difference_type __count_if(
      _InputIterator __first, _InputIterator __last, _Predicate __pred)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    for (; __first != __last; ++__first)
      if (__pred(__first))
        ++__n;
    return __n;
  }
  template <typename _ForwardIterator>
  inline bool is_sorted(_ForwardIterator __first, _ForwardIterator __last)
  {
    return std::is_sorted_until(__first, __last) == __last;
  }
  template <typename _ForwardIterator, typename _Compare>
  inline bool is_sorted(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp)
  {
    return std::is_sorted_until(__first, __last, __comp) == __last;
  }
  template <typename _ForwardIterator, typename _Compare>
  _ForwardIterator __is_sorted_until(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp)
  {
    if (__first == __last)
      return __last;
    _ForwardIterator __next = __first;
    for (++__next; __next != __last; __first = __next, (void)++__next)
      if (__comp(__next, __first))
        return __next;
    return __next;
  }
  template <typename _ForwardIterator>
  inline _ForwardIterator is_sorted_until(_ForwardIterator __first, _ForwardIterator __last)
  {
    ;
    ;
    return std::__is_sorted_until(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
  }
  template <typename _ForwardIterator, typename _Compare>
  inline _ForwardIterator is_sorted_until(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp)
  {
    ;
    ;
    return std::__is_sorted_until(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
  }
  template <typename _Tp>
  constexpr inline pair<const _Tp&, const _Tp&> minmax(const _Tp& __a, const _Tp& __b)
  {
    return __b < __a ? pair<const _Tp&, const _Tp&>(__b, __a) : pair<const _Tp&, const _Tp&>(__a, __b);
  }
  template <typename _Tp, typename _Compare>
  constexpr inline pair<const _Tp&, const _Tp&> minmax(const _Tp& __a, const _Tp& __b, _Compare __comp)
  {
    return __comp(__b, __a) ? pair<const _Tp&, const _Tp&>(__b, __a) : pair<const _Tp&, const _Tp&>(__a, __b);
  }
  template <typename _ForwardIterator, typename _Compare>
  constexpr pair<_ForwardIterator, _ForwardIterator> __minmax_element(
      _ForwardIterator __first, _ForwardIterator __last, _Compare __comp)
  {
    _ForwardIterator __next = __first;
    if (__first == __last || ++__next == __last)
      return std::make_pair(__first, __first);
    _ForwardIterator __min{}, __max{};
    if (__comp(__next, __first))
    {
      __min = __next;
      __max = __first;
    }
    else
    {
      __min = __first;
      __max = __next;
    }
    __first = __next;
    ++__first;
    while (__first != __last)
    {
      __next = __first;
      if (++__next == __last)
      {
        if (__comp(__first, __min))
          __min = __first;
        else if (!__comp(__first, __max))
          __max = __first;
        break;
      }
      if (__comp(__next, __first))
      {
        if (__comp(__next, __min))
          __min = __next;
        if (!__comp(__first, __max))
          __max = __first;
      }
      else
      {
        if (__comp(__first, __min))
          __min = __first;
        if (!__comp(__next, __max))
          __max = __next;
      }
      __first = __next;
      ++__first;
    }
    return std::make_pair(__min, __max);
  }
  template <typename _ForwardIterator>
  constexpr inline pair<_ForwardIterator, _ForwardIterator> minmax_element(_ForwardIterator __first,
                                                                           _ForwardIterator __last)
  {
    ;
    ;
    return std::__minmax_element(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
  }
  template <typename _ForwardIterator, typename _Compare>
  constexpr inline pair<_ForwardIterator, _ForwardIterator> minmax_element(
      _ForwardIterator __first, _ForwardIterator __last, _Compare __comp)
  {
    ;
    ;
    return std::__minmax_element(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
  }
  template <typename _Tp>
  constexpr inline _Tp min(initializer_list<_Tp> __l)
  {
    return *std::min_element(__l.begin(), __l.end());
  }
  template <typename _Tp, typename _Compare>
  constexpr inline _Tp min(initializer_list<_Tp> __l, _Compare __comp)
  {
    return *std::min_element(__l.begin(), __l.end(), __comp);
  }
  template <typename _Tp>
  constexpr inline _Tp max(initializer_list<_Tp> __l)
  {
    return *std::max_element(__l.begin(), __l.end());
  }
  template <typename _Tp, typename _Compare>
  constexpr inline _Tp max(initializer_list<_Tp> __l, _Compare __comp)
  {
    return *std::max_element(__l.begin(), __l.end(), __comp);
  }
  template <typename _Tp>
  constexpr inline pair<_Tp, _Tp> minmax(initializer_list<_Tp> __l)
  {
    pair<const _Tp*, const _Tp*> __p = std::minmax_element(__l.begin(), __l.end());
    return std::make_pair(*__p.first, *__p.second);
  }
  template <typename _Tp, typename _Compare>
  constexpr inline pair<_Tp, _Tp> minmax(initializer_list<_Tp> __l, _Compare __comp)
  {
    pair<const _Tp*, const _Tp*> __p = std::minmax_element(__l.begin(), __l.end(), __comp);
    return std::make_pair(*__p.first, *__p.second);
  }
  template <typename _ForwardIterator1, typename _ForwardIterator2, typename _BinaryPredicate>
  bool __is_permutation(
      _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _BinaryPredicate __pred)
  {
    for (; __first1 != __last1; ++__first1, (void)++__first2)
      if (!__pred(__first1, __first2))
        break;
    if (__first1 == __last1)
      return true;
    _ForwardIterator2 __last2 = __first2;
    std::advance(__last2, std::distance(__first1, __last1));
    for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan)
    {
      if (__scan != std::__find_if(__first1, __scan, __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)))
        continue;
      auto __matches = std::__count_if(__first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan));
      if (0 == __matches ||
          std::__count_if(__scan, __last1, __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)) != __matches)
        return false;
    }
    return true;
  }
  template <typename _ForwardIterator1, typename _ForwardIterator2>
  inline bool is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2)
  {
    ;
    return std::__is_permutation(__first1, __last1, __first2, __gnu_cxx::__ops::__iter_equal_to_iter());
  }
  template <typename _ForwardIterator1, typename _ForwardIterator2, typename _BinaryPredicate>
  inline bool is_permutation(
      _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _BinaryPredicate __pred)
  {
    ;
    return std::__is_permutation(__first1, __last1, __first2, __gnu_cxx::__ops::__iter_comp_iter(__pred));
  }
  template <typename _ForwardIterator1, typename _ForwardIterator2, typename _BinaryPredicate>
  bool __is_permutation(_ForwardIterator1 __first1,
                        _ForwardIterator1 __last1,
                        _ForwardIterator2 __first2,
                        _ForwardIterator2 __last2,
                        _BinaryPredicate __pred)
  {
    using _Cat1 = typename iterator_traits<_ForwardIterator1>::iterator_category;
    using _Cat2 = typename iterator_traits<_ForwardIterator2>::iterator_category;
    using _It1_is_RA = is_same<_Cat1, random_access_iterator_tag>;
    using _It2_is_RA = is_same<_Cat2, random_access_iterator_tag>;
    constexpr bool __ra_iters = _It1_is_RA() && _It2_is_RA();
    if (__ra_iters)
    {
      auto __d1 = std::distance(__first1, __last1);
      auto __d2 = std::distance(__first2, __last2);
      if (__d1 != __d2)
        return false;
    }
    for (; __first1 != __last1 && __first2 != __last2; ++__first1, (void)++__first2)
      if (!__pred(__first1, __first2))
        break;
    if (__ra_iters)
    {
      if (__first1 == __last1)
        return true;
    }
    else
    {
      auto __d1 = std::distance(__first1, __last1);
      auto __d2 = std::distance(__first2, __last2);
      if (__d1 == 0 && __d2 == 0)
        return true;
      if (__d1 != __d2)
        return false;
    }
    for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan)
    {
      if (__scan != std::__find_if(__first1, __scan, __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)))
        continue;
      auto __matches = std::__count_if(__first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan));
      if (0 == __matches ||
          std::__count_if(__scan, __last1, __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)) != __matches)
        return false;
    }
    return true;
  }
  template <typename _ForwardIterator1, typename _ForwardIterator2>
  inline bool is_permutation(
      _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2)
  {
    ;
    ;
    return std::__is_permutation(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_equal_to_iter());
  }
  template <typename _ForwardIterator1, typename _ForwardIterator2, typename _BinaryPredicate>
  inline bool is_permutation(_ForwardIterator1 __first1,
                             _ForwardIterator1 __last1,
                             _ForwardIterator2 __first2,
                             _ForwardIterator2 __last2,
                             _BinaryPredicate __pred)
  {
    ;
    ;
    return std::__is_permutation(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__pred));
  }
  template <typename _Tp>
  constexpr const _Tp& clamp(const _Tp& __val, const _Tp& __lo, const _Tp& __hi)
  {
    ;
    return (__val < __lo) ? __lo : (__hi < __val) ? __hi : __val;
  }
  template <typename _Tp, typename _Compare>
  constexpr const _Tp& clamp(const _Tp& __val, const _Tp& __lo, const _Tp& __hi, _Compare __comp)
  {
    ;
    return __comp(__val, __lo) ? __lo : __comp(__hi, __val) ? __hi : __val;
  }
  template <typename _IntType, typename _UniformRandomBitGenerator>
  pair<_IntType, _IntType> __gen_two_uniform_ints(_IntType __b0, _IntType __b1, _UniformRandomBitGenerator && __g)
  {
    _IntType __x = uniform_int_distribution<_IntType>{0, (__b0 * __b1) - 1}(__g);
    return std::make_pair(__x / __b1, __x % __b1);
  }
  template <typename _RandomAccessIterator, typename _UniformRandomNumberGenerator>
  void shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last, _UniformRandomNumberGenerator && __g)
  {
    ;
    if (__first == __last)
      return;
    typedef typename iterator_traits<_RandomAccessIterator>::difference_type _DistanceType;
    typedef typename std::make_unsigned<_DistanceType>::type __ud_type;
    typedef typename std::uniform_int_distribution<__ud_type> __distr_type;
    typedef typename __distr_type::param_type __p_type;
    typedef typename remove_reference<_UniformRandomNumberGenerator>::type _Gen;
    typedef typename common_type<typename _Gen::result_type, __ud_type>::type __uc_type;
    const __uc_type __urngrange = __g.max() - __g.min();
    const __uc_type __urange = __uc_type(__last - __first);
    if (__urngrange / __urange >= __urange)
    {
      _RandomAccessIterator __i = __first + 1;
      if ((__urange % 2) == 0)
      {
        __distr_type __d{0, 1};
        std::iter_swap(__i++, __first + __d(__g));
      }
      while (__i != __last)
      {
        const __uc_type __swap_range = __uc_type(__i - __first) + 1;
        const pair<__uc_type, __uc_type> __pospos = __gen_two_uniform_ints(__swap_range, __swap_range + 1, __g);
        std::iter_swap(__i++, __first + __pospos.first);
        std::iter_swap(__i++, __first + __pospos.second);
      }
      return;
    }
    __distr_type __d;
    for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
      std::iter_swap(__i, __first + __d(__g, __p_type(0, __i - __first)));
  }
  template <typename _InputIterator, typename _Function>
  _Function for_each(_InputIterator __first, _InputIterator __last, _Function __f)
  {
    ;
    for (; __first != __last; ++__first)
      __f(*__first);
    return __f;
  }
  template <typename _InputIterator, typename _Size, typename _Function>
  _InputIterator for_each_n(_InputIterator __first, _Size __n, _Function __f)
  {
    typename iterator_traits<_InputIterator>::difference_type __n2 = __n;
    using _Cat = typename iterator_traits<_InputIterator>::iterator_category;
    if constexpr (is_base_of_v<random_access_iterator_tag, _Cat>)
    {
      if (__n2 <= 0)
        return __first;
      auto __last = __first + __n2;
      std::for_each(__first, __last, std::move(__f));
      return __last;
    }
    else
    {
      while (__n2-- > 0)
      {
        __f(*__first);
        ++__first;
      }
      return __first;
    }
  }
  template <typename _InputIterator, typename _Tp>
  inline _InputIterator find(_InputIterator __first, _InputIterator __last, const _Tp& __val)
  {
    ;
    return std::__find_if(__first, __last, __gnu_cxx::__ops::__iter_equals_val(__val));
  }
  template <typename _InputIterator, typename _Predicate>
  inline _InputIterator find_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
  {
    ;
    return std::__find_if(__first, __last, __gnu_cxx::__ops::__pred_iter(__pred));
  }
  template <typename _InputIterator, typename _ForwardIterator>
  _InputIterator find_first_of(
      _InputIterator __first1, _InputIterator __last1, _ForwardIterator __first2, _ForwardIterator __last2)
  {
    ;
    ;
    for (; __first1 != __last1; ++__first1)
      for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
        if (*__first1 == *__iter)
          return __first1;
    return __last1;
  }
  template <typename _InputIterator, typename _ForwardIterator, typename _BinaryPredicate>
  _InputIterator find_first_of(_InputIterator __first1,
                               _InputIterator __last1,
                               _ForwardIterator __first2,
                               _ForwardIterator __last2,
                               _BinaryPredicate __comp)
  {
    ;
    ;
    for (; __first1 != __last1; ++__first1)
      for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
        if (__comp(*__first1, *__iter))
          return __first1;
    return __last1;
  }
  template <typename _ForwardIterator>
  inline _ForwardIterator adjacent_find(_ForwardIterator __first, _ForwardIterator __last)
  {
    ;
    return std::__adjacent_find(__first, __last, __gnu_cxx::__ops::__iter_equal_to_iter());
  }
  template <typename _ForwardIterator, typename _BinaryPredicate>
  inline _ForwardIterator adjacent_find(
      _ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __binary_pred)
  {
    ;
    return std::__adjacent_find(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__binary_pred));
  }
  template <typename _InputIterator, typename _Tp>
  inline typename iterator_traits<_InputIterator>::difference_type count(
      _InputIterator __first, _InputIterator __last, const _Tp& __value)
  {
    ;
    return std::__count_if(__first, __last, __gnu_cxx::__ops::__iter_equals_val(__value));
  }
  template <typename _InputIterator, typename _Predicate>
  inline typename iterator_traits<_InputIterator>::difference_type count_if(
      _InputIterator __first, _InputIterator __last, _Predicate __pred)
  {
    ;
    return std::__count_if(__first, __last, __gnu_cxx::__ops::__pred_iter(__pred));
  }
  template <typename _ForwardIterator1, typename _ForwardIterator2>
  inline _ForwardIterator1 search(
      _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _ForwardIterator2 __last2)
  {
    ;
    ;
    return std::__search(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_equal_to_iter());
  }
  template <typename _ForwardIterator1, typename _ForwardIterator2, typename _BinaryPredicate>
  inline _ForwardIterator1 search(_ForwardIterator1 __first1,
                                  _ForwardIterator1 __last1,
                                  _ForwardIterator2 __first2,
                                  _ForwardIterator2 __last2,
                                  _BinaryPredicate __predicate)
  {
    ;
    ;
    return std::__search(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__predicate));
  }
  template <typename _ForwardIterator, typename _Integer, typename _Tp>
  inline _ForwardIterator search_n(
      _ForwardIterator __first, _ForwardIterator __last, _Integer __count, const _Tp& __val)
  {
    ;
    return std::__search_n(__first, __last, __count, __gnu_cxx::__ops::__iter_equals_val(__val));
  }
  template <typename _ForwardIterator, typename _Integer, typename _Tp, typename _BinaryPredicate>
  inline _ForwardIterator search_n(_ForwardIterator __first,
                                   _ForwardIterator __last,
                                   _Integer __count,
                                   const _Tp& __val,
                                   _BinaryPredicate __binary_pred)
  {
    ;
    return std::__search_n(__first, __last, __count, __gnu_cxx::__ops::__iter_comp_val(__binary_pred, __val));
  }
  template <typename _ForwardIterator, typename _Searcher>
  inline _ForwardIterator search(_ForwardIterator __first, _ForwardIterator __last, const _Searcher& __searcher)
  {
    return __searcher(__first, __last).first;
  }
  template <typename _InputIterator, typename _OutputIterator, typename _UnaryOperation>
  _OutputIterator transform(
      _InputIterator __first, _InputIterator __last, _OutputIterator __result, _UnaryOperation __unary_op)
  {
    ;
    for (; __first != __last; ++__first, (void)++__result)
      *__result = __unary_op(*__first);
    return __result;
  }
  template <typename _InputIterator1, typename _InputIterator2, typename _OutputIterator, typename _BinaryOperation>
  _OutputIterator transform(_InputIterator1 __first1,
                            _InputIterator1 __last1,
                            _InputIterator2 __first2,
                            _OutputIterator __result,
                            _BinaryOperation __binary_op)
  {
    ;
    for (; __first1 != __last1; ++__first1, (void)++__first2, ++__result)
      *__result = __binary_op(*__first1, *__first2);
    return __result;
  }
  template <typename _ForwardIterator, typename _Tp>
  void replace(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __old_value, const _Tp& __new_value)
  {
    ;
    for (; __first != __last; ++__first)
      if (*__first == __old_value)
        *__first = __new_value;
  }
  template <typename _ForwardIterator, typename _Predicate, typename _Tp>
  void replace_if(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred, const _Tp& __new_value)
  {
    ;
    for (; __first != __last; ++__first)
      if (__pred(*__first))
        *__first = __new_value;
  }
  template <typename _ForwardIterator, typename _Generator>
  void generate(_ForwardIterator __first, _ForwardIterator __last, _Generator __gen)
  {
    ;
    for (; __first != __last; ++__first)
      *__first = __gen();
  }
  template <typename _OutputIterator, typename _Size, typename _Generator>
  _OutputIterator generate_n(_OutputIterator __first, _Size __n, _Generator __gen)
  {
    for (__decltype(__n + 0) __niter = __n; __niter > 0; --__niter, (void)++__first)
      *__first = __gen();
    return __first;
  }
  template <typename _InputIterator, typename _OutputIterator>
  inline _OutputIterator unique_copy(_InputIterator __first, _InputIterator __last, _OutputIterator __result)
  {
    ;
    if (__first == __last)
      return __result;
    return std::__unique_copy(__first,
                              __last,
                              __result,
                              __gnu_cxx::__ops::__iter_equal_to_iter(),
                              std::__iterator_category(__first),
                              std::__iterator_category(__result));
  }
  template <typename _InputIterator, typename _OutputIterator, typename _BinaryPredicate>
  inline _OutputIterator unique_copy(
      _InputIterator __first, _InputIterator __last, _OutputIterator __result, _BinaryPredicate __binary_pred)
  {
    ;
    if (__first == __last)
      return __result;
    return std::__unique_copy(__first,
                              __last,
                              __result,
                              __gnu_cxx::__ops::__iter_comp_iter(__binary_pred),
                              std::__iterator_category(__first),
                              std::__iterator_category(__result));
  }
  template <typename _RandomAccessIterator>
  inline void random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last)
  {
    ;
    if (__first != __last)
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
      {
        _RandomAccessIterator __j = __first + std::rand() % ((__i - __first) + 1);
        if (__i != __j)
          std::iter_swap(__i, __j);
      }
  }
  template <typename _RandomAccessIterator, typename _RandomNumberGenerator>
  void random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last, _RandomNumberGenerator && __rand)
  {
    ;
    if (__first == __last)
      return;
    for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
    {
      _RandomAccessIterator __j = __first + __rand((__i - __first) + 1);
      if (__i != __j)
        std::iter_swap(__i, __j);
    }
  }
  template <typename _ForwardIterator, typename _Predicate>
  inline _ForwardIterator partition(_ForwardIterator __first, _ForwardIterator __last, _Predicate __pred)
  {
    ;
    return std::__partition(__first, __last, __pred, std::__iterator_category(__first));
  }
  template <typename _RandomAccessIterator>
  inline void partial_sort(_RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last)
  {
    ;
    ;
    ;
    std::__partial_sort(__first, __middle, __last, __gnu_cxx::__ops::__iter_less_iter());
  }
  template <typename _RandomAccessIterator, typename _Compare>
  inline void partial_sort(
      _RandomAccessIterator __first, _RandomAccessIterator __middle, _RandomAccessIterator __last, _Compare __comp)
  {
    ;
    ;
    ;
    std::__partial_sort(__first, __middle, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
  }
  template <typename _RandomAccessIterator>
  inline void nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last)
  {
    ;
    ;
    ;
    if (__first == __last || __nth == __last)
      return;
    std::__introselect(__first, __nth, __last, std::__lg(__last - __first) * 2, __gnu_cxx::__ops::__iter_less_iter());
  }
  template <typename _RandomAccessIterator, typename _Compare>
  inline void nth_element(
      _RandomAccessIterator __first, _RandomAccessIterator __nth, _RandomAccessIterator __last, _Compare __comp)
  {
    ;
    ;
    ;
    if (__first == __last || __nth == __last)
      return;
    std::__introselect(
        __first, __nth, __last, std::__lg(__last - __first) * 2, __gnu_cxx::__ops::__iter_comp_iter(__comp));
  }
  template <typename _RandomAccessIterator>
  inline void sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
  {
    ;
    ;
    std::__sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
  }
  template <typename _RandomAccessIterator, typename _Compare>
  inline void sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
  {
    ;
    ;
    std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
  }
  template <typename _InputIterator1, typename _InputIterator2, typename _OutputIterator, typename _Compare>
  _OutputIterator __merge(_InputIterator1 __first1,
                          _InputIterator1 __last1,
                          _InputIterator2 __first2,
                          _InputIterator2 __last2,
                          _OutputIterator __result,
                          _Compare __comp)
  {
    while (__first1 != __last1 && __first2 != __last2)
    {
      if (__comp(__first2, __first1))
      {
        *__result = *__first2;
        ++__first2;
      }
      else
      {
        *__result = *__first1;
        ++__first1;
      }
      ++__result;
    }
    return std::copy(__first2, __last2, std::copy(__first1, __last1, __result));
  }
  template <typename _InputIterator1, typename _InputIterator2, typename _OutputIterator>
  inline _OutputIterator merge(_InputIterator1 __first1,
                               _InputIterator1 __last1,
                               _InputIterator2 __first2,
                               _InputIterator2 __last2,
                               _OutputIterator __result)
  {
    ;
    ;
    ;
    ;
    return std::__merge(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_less_iter());
  }
  template <typename _InputIterator1, typename _InputIterator2, typename _OutputIterator, typename _Compare>
  inline _OutputIterator merge(_InputIterator1 __first1,
                               _InputIterator1 __last1,
                               _InputIterator2 __first2,
                               _InputIterator2 __last2,
                               _OutputIterator __result,
                               _Compare __comp)
  {
    ;
    ;
    ;
    ;
    return std::__merge(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_comp_iter(__comp));
  }
  template <typename _RandomAccessIterator, typename _Compare>
  inline void __stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
  {
    typedef typename iterator_traits<_RandomAccessIterator>::value_type _ValueType;
    typedef typename iterator_traits<_RandomAccessIterator>::difference_type _DistanceType;
    typedef _Temporary_buffer<_RandomAccessIterator, _ValueType> _TmpBuf;
    _TmpBuf __buf(__first, std::distance(__first, __last));
    if (__buf.begin() == 0)
      std::__inplace_stable_sort(__first, __last, __comp);
    else
      std::__stable_sort_adaptive(__first, __last, __buf.begin(), _DistanceType(__buf.size()), __comp);
  }
  template <typename _RandomAccessIterator>
  inline void stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
  {
    ;
    ;
    std::__stable_sort(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
  }
  template <typename _RandomAccessIterator, typename _Compare>
  inline void stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp)
  {
    ;
    ;
    std::__stable_sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
  }
  template <typename _InputIterator1, typename _InputIterator2, typename _OutputIterator, typename _Compare>
  _OutputIterator __set_union(_InputIterator1 __first1,
                              _InputIterator1 __last1,
                              _InputIterator2 __first2,
                              _InputIterator2 __last2,
                              _OutputIterator __result,
                              _Compare __comp)
  {
    while (__first1 != __last1 && __first2 != __last2)
    {
      if (__comp(__first1, __first2))
      {
        *__result = *__first1;
        ++__first1;
      }
      else if (__comp(__first2, __first1))
      {
        *__result = *__first2;
        ++__first2;
      }
      else
      {
        *__result = *__first1;
        ++__first1;
        ++__first2;
      }
      ++__result;
    }
    return std::copy(__first2, __last2, std::copy(__first1, __last1, __result));
  }
  template <typename _InputIterator1, typename _InputIterator2, typename _OutputIterator>
  inline _OutputIterator set_union(_InputIterator1 __first1,
                                   _InputIterator1 __last1,
                                   _InputIterator2 __first2,
                                   _InputIterator2 __last2,
                                   _OutputIterator __result)
  {
    ;
    ;
    ;
    ;
    return std::__set_union(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_less_iter());
  }
  template <typename _InputIterator1, typename _InputIterator2, typename _OutputIterator, typename _Compare>
  inline _OutputIterator set_union(_InputIterator1 __first1,
                                   _InputIterator1 __last1,
                                   _InputIterator2 __first2,
                                   _InputIterator2 __last2,
                                   _OutputIterator __result,
                                   _Compare __comp)
  {
    ;
    ;
    ;
    ;
    return std::__set_union(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_comp_iter(__comp));
  }
  template <typename _InputIterator1, typename _InputIterator2, typename _OutputIterator, typename _Compare>
  _OutputIterator __set_intersection(_InputIterator1 __first1,
                                     _InputIterator1 __last1,
                                     _InputIterator2 __first2,
                                     _InputIterator2 __last2,
                                     _OutputIterator __result,
                                     _Compare __comp)
  {
    while (__first1 != __last1 && __first2 != __last2)
      if (__comp(__first1, __first2))
        ++__first1;
      else if (__comp(__first2, __first1))
        ++__first2;
      else
      {
        *__result = *__first1;
        ++__first1;
        ++__first2;
        ++__result;
      }
    return __result;
  }
  template <typename _InputIterator1, typename _InputIterator2, typename _OutputIterator>
  inline _OutputIterator set_intersection(_InputIterator1 __first1,
                                          _InputIterator1 __last1,
                                          _InputIterator2 __first2,
                                          _InputIterator2 __last2,
                                          _OutputIterator __result)
  {
    ;
    ;
    ;
    ;
    return std::__set_intersection(
        __first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_less_iter());
  }
  template <typename _InputIterator1, typename _InputIterator2, typename _OutputIterator, typename _Compare>
  inline _OutputIterator set_intersection(_InputIterator1 __first1,
                                          _InputIterator1 __last1,
                                          _InputIterator2 __first2,
                                          _InputIterator2 __last2,
                                          _OutputIterator __result,
                                          _Compare __comp)
  {
    ;
    ;
    ;
    ;
    return std::__set_intersection(
        __first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_comp_iter(__comp));
  }
  template <typename _InputIterator1, typename _InputIterator2, typename _OutputIterator, typename _Compare>
  _OutputIterator __set_difference(_InputIterator1 __first1,
                                   _InputIterator1 __last1,
                                   _InputIterator2 __first2,
                                   _InputIterator2 __last2,
                                   _OutputIterator __result,
                                   _Compare __comp)
  {
    while (__first1 != __last1 && __first2 != __last2)
      if (__comp(__first1, __first2))
      {
        *__result = *__first1;
        ++__first1;
        ++__result;
      }
      else if (__comp(__first2, __first1))
        ++__first2;
      else
      {
        ++__first1;
        ++__first2;
      }
    return std::copy(__first1, __last1, __result);
  }
  template <typename _InputIterator1, typename _InputIterator2, typename _OutputIterator>
  inline _OutputIterator set_difference(_InputIterator1 __first1,
                                        _InputIterator1 __last1,
                                        _InputIterator2 __first2,
                                        _InputIterator2 __last2,
                                        _OutputIterator __result)
  {
    ;
    ;
    ;
    ;
    return std::__set_difference(__first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_less_iter());
  }
  template <typename _InputIterator1, typename _InputIterator2, typename _OutputIterator, typename _Compare>
  inline _OutputIterator set_difference(_InputIterator1 __first1,
                                        _InputIterator1 __last1,
                                        _InputIterator2 __first2,
                                        _InputIterator2 __last2,
                                        _OutputIterator __result,
                                        _Compare __comp)
  {
    ;
    ;
    ;
    ;
    return std::__set_difference(
        __first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_comp_iter(__comp));
  }
  template <typename _InputIterator1, typename _InputIterator2, typename _OutputIterator, typename _Compare>
  _OutputIterator __set_symmetric_difference(_InputIterator1 __first1,
                                             _InputIterator1 __last1,
                                             _InputIterator2 __first2,
                                             _InputIterator2 __last2,
                                             _OutputIterator __result,
                                             _Compare __comp)
  {
    while (__first1 != __last1 && __first2 != __last2)
      if (__comp(__first1, __first2))
      {
        *__result = *__first1;
        ++__first1;
        ++__result;
      }
      else if (__comp(__first2, __first1))
      {
        *__result = *__first2;
        ++__first2;
        ++__result;
      }
      else
      {
        ++__first1;
        ++__first2;
      }
    return std::copy(__first2, __last2, std::copy(__first1, __last1, __result));
  }
  template <typename _InputIterator1, typename _InputIterator2, typename _OutputIterator>
  inline _OutputIterator set_symmetric_difference(_InputIterator1 __first1,
                                                  _InputIterator1 __last1,
                                                  _InputIterator2 __first2,
                                                  _InputIterator2 __last2,
                                                  _OutputIterator __result)
  {
    ;
    ;
    ;
    ;
    return std::__set_symmetric_difference(
        __first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_less_iter());
  }
  template <typename _InputIterator1, typename _InputIterator2, typename _OutputIterator, typename _Compare>
  inline _OutputIterator set_symmetric_difference(_InputIterator1 __first1,
                                                  _InputIterator1 __last1,
                                                  _InputIterator2 __first2,
                                                  _InputIterator2 __last2,
                                                  _OutputIterator __result,
                                                  _Compare __comp)
  {
    ;
    ;
    ;
    ;
    return std::__set_symmetric_difference(
        __first1, __last1, __first2, __last2, __result, __gnu_cxx::__ops::__iter_comp_iter(__comp));
  }
  template <typename _ForwardIterator, typename _Compare>
  constexpr _ForwardIterator __min_element(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp)
  {
    if (__first == __last)
      return __first;
    _ForwardIterator __result = __first;
    while (++__first != __last)
      if (__comp(__first, __result))
        __result = __first;
    return __result;
  }
  template <typename _ForwardIterator>
  constexpr _ForwardIterator inline min_element(_ForwardIterator __first, _ForwardIterator __last)
  {
    ;
    ;
    return std::__min_element(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
  }
  template <typename _ForwardIterator, typename _Compare>
  constexpr inline _ForwardIterator min_element(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp)
  {
    ;
    ;
    return std::__min_element(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
  }
  template <typename _ForwardIterator, typename _Compare>
  constexpr _ForwardIterator __max_element(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp)
  {
    if (__first == __last)
      return __first;
    _ForwardIterator __result = __first;
    while (++__first != __last)
      if (__comp(__result, __first))
        __result = __first;
    return __result;
  }
  template <typename _ForwardIterator>
  constexpr inline _ForwardIterator max_element(_ForwardIterator __first, _ForwardIterator __last)
  {
    ;
    ;
    return std::__max_element(__first, __last, __gnu_cxx::__ops::__iter_less_iter());
  }
  template <typename _ForwardIterator, typename _Compare>
  constexpr inline _ForwardIterator max_element(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp)
  {
    ;
    ;
    return std::__max_element(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
  }
  template <typename _InputIterator,
            typename _RandomAccessIterator,
            typename _Size,
            typename _UniformRandomBitGenerator>
  _RandomAccessIterator __sample(_InputIterator __first,
                                 _InputIterator __last,
                                 input_iterator_tag,
                                 _RandomAccessIterator __out,
                                 random_access_iterator_tag,
                                 _Size __n,
                                 _UniformRandomBitGenerator && __g)
  {
    using __distrib_type = uniform_int_distribution<_Size>;
    using __param_type = typename __distrib_type::param_type;
    __distrib_type __d{};
    _Size __sample_sz = 0;
    while (__first != __last && __sample_sz != __n)
    {
      __out[__sample_sz++] = *__first;
      ++__first;
    }
    for (auto __pop_sz = __sample_sz; __first != __last; ++__first, (void)++__pop_sz)
    {
      const auto __k = __d(__g, __param_type{0, __pop_sz});
      if (__k < __n)
        __out[__k] = *__first;
    }
    return __out + __sample_sz;
  }
  template <typename _ForwardIterator,
            typename _OutputIterator,
            typename _Cat,
            typename _Size,
            typename _UniformRandomBitGenerator>
  _OutputIterator __sample(_ForwardIterator __first,
                           _ForwardIterator __last,
                           forward_iterator_tag,
                           _OutputIterator __out,
                           _Cat,
                           _Size __n,
                           _UniformRandomBitGenerator && __g)
  {
    using __distrib_type = uniform_int_distribution<_Size>;
    using __param_type = typename __distrib_type::param_type;
    using _USize = make_unsigned_t<_Size>;
    using _Gen = remove_reference_t<_UniformRandomBitGenerator>;
    using __uc_type = common_type_t<typename _Gen::result_type, _USize>;
    if (__first == __last)
      return __out;
    __distrib_type __d{};
    _Size __unsampled_sz = std::distance(__first, __last);
    __n = std::min(__n, __unsampled_sz);
    const __uc_type __urngrange = __g.max() - __g.min();
    if (__urngrange / __uc_type(__unsampled_sz) >= __uc_type(__unsampled_sz))
    {
      while (__n != 0 && __unsampled_sz >= 2)
      {
        const pair<_Size, _Size> __p = __gen_two_uniform_ints(__unsampled_sz, __unsampled_sz - 1, __g);
        --__unsampled_sz;
        if (__p.first < __n)
        {
          *__out++ = *__first;
          --__n;
        }
        ++__first;
        if (__n == 0)
          break;
        --__unsampled_sz;
        if (__p.second < __n)
        {
          *__out++ = *__first;
          --__n;
        }
        ++__first;
      }
    }
    for (; __n != 0; ++__first)
      if (__d(__g, __param_type{0, --__unsampled_sz}) < __n)
      {
        *__out++ = *__first;
        --__n;
      }
    return __out;
  }
  template <typename _PopulationIterator,
            typename _SampleIterator,
            typename _Distance,
            typename _UniformRandomBitGenerator>
  _SampleIterator sample(_PopulationIterator __first,
                         _PopulationIterator __last,
                         _SampleIterator __out,
                         _Distance __n,
                         _UniformRandomBitGenerator && __g)
  {
    using __pop_cat = typename std::iterator_traits<_PopulationIterator>::iterator_category;
    using __samp_cat = typename std::iterator_traits<_SampleIterator>::iterator_category;
    static_assert(__or_<is_convertible<__pop_cat, forward_iterator_tag>,
                        is_convertible<__samp_cat, random_access_iterator_tag>>::value,
                  "output range must use a RandomAccessIterator when input range"
                  " does not meet the ForwardIterator requirements");
    static_assert(is_integral<_Distance>::value, "sample size must be an integer type");
    typename iterator_traits<_PopulationIterator>::difference_type __d = __n;
    return std::__sample(
        __first, __last, __pop_cat{}, __out, __samp_cat{}, __d, std::forward<_UniformRandomBitGenerator>(__g));
  }
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _Callable, typename... _Args>
  inline invoke_result_t<_Callable, _Args...> invoke(
      _Callable && __fn, _Args && ... __args) noexcept(is_nothrow_invocable_v<_Callable, _Args...>)
  {
    return std::__invoke(std::forward<_Callable>(__fn), std::forward<_Args>(__args)...);
  }
  template <typename _MemFunPtr, bool __is_mem_fn = is_member_function_pointer<_MemFunPtr>::value>
  class _Mem_fn_base : public _Mem_fn_traits<_MemFunPtr>::__maybe_type
  {
    using _Traits = _Mem_fn_traits<_MemFunPtr>;
    using _Arity = typename _Traits::__arity;
    using _Varargs = typename _Traits::__vararg;
    template <typename _Func, typename... _BoundArgs>
    friend struct _Bind_check_arity;
    _MemFunPtr _M_pmf;

  public:
    using result_type = typename _Traits::__result_type;
    explicit constexpr _Mem_fn_base(_MemFunPtr __pmf) noexcept : _M_pmf(__pmf) {}
    template <typename... _Args>
    auto operator()(_Args&&... __args) const noexcept(noexcept(std::__invoke(_M_pmf, std::forward<_Args>(__args)...)))
        -> decltype(std::__invoke(_M_pmf, std::forward<_Args>(__args)...))
    {
      return std::__invoke(_M_pmf, std::forward<_Args>(__args)...);
    }
  };
  template <typename _MemObjPtr>
  class _Mem_fn_base<_MemObjPtr, false>
  {
    using _Arity = integral_constant<size_t, 0>;
    using _Varargs = false_type;
    template <typename _Func, typename... _BoundArgs>
    friend struct _Bind_check_arity;
    _MemObjPtr _M_pm;

  public:
    explicit constexpr _Mem_fn_base(_MemObjPtr __pm) noexcept : _M_pm(__pm) {}
    template <typename _Tp>
    auto operator()(_Tp&& __obj) const noexcept(noexcept(std::__invoke(_M_pm, std::forward<_Tp>(__obj))))
        -> decltype(std::__invoke(_M_pm, std::forward<_Tp>(__obj)))
    {
      return std::__invoke(_M_pm, std::forward<_Tp>(__obj));
    }
  };
  template <typename _MemberPointer>
  struct _Mem_fn;
  template <typename _Res, typename _Class>
  struct _Mem_fn<_Res _Class::*> : _Mem_fn_base<_Res _Class::*>
  {
    using _Mem_fn_base<_Res _Class::*>::_Mem_fn_base;
  };
  template <typename _Tp, typename _Class>
  inline _Mem_fn<_Tp _Class::*> mem_fn(_Tp _Class::*__pm) noexcept
  {
    return _Mem_fn<_Tp _Class::*>(__pm);
  }
  template <typename _Tp>
  struct is_bind_expression : public false_type
  {
  };
  template <typename _Tp>
  struct is_placeholder : public integral_constant<int, 0>
  {
  };
  template <typename _Tp>
  inline constexpr bool is_bind_expression_v = is_bind_expression<_Tp>::value;
  template <typename _Tp>
  inline constexpr int is_placeholder_v = is_placeholder<_Tp>::value;
  template <int _Num>
  struct _Placeholder
  {
  };
  namespace placeholders
  {
  extern const _Placeholder<1> _1;
  extern const _Placeholder<2> _2;
  extern const _Placeholder<3> _3;
  extern const _Placeholder<4> _4;
  extern const _Placeholder<5> _5;
  extern const _Placeholder<6> _6;
  extern const _Placeholder<7> _7;
  extern const _Placeholder<8> _8;
  extern const _Placeholder<9> _9;
  extern const _Placeholder<10> _10;
  extern const _Placeholder<11> _11;
  extern const _Placeholder<12> _12;
  extern const _Placeholder<13> _13;
  extern const _Placeholder<14> _14;
  extern const _Placeholder<15> _15;
  extern const _Placeholder<16> _16;
  extern const _Placeholder<17> _17;
  extern const _Placeholder<18> _18;
  extern const _Placeholder<19> _19;
  extern const _Placeholder<20> _20;
  extern const _Placeholder<21> _21;
  extern const _Placeholder<22> _22;
  extern const _Placeholder<23> _23;
  extern const _Placeholder<24> _24;
  extern const _Placeholder<25> _25;
  extern const _Placeholder<26> _26;
  extern const _Placeholder<27> _27;
  extern const _Placeholder<28> _28;
  extern const _Placeholder<29> _29;
  }  // namespace placeholders
  template <int _Num>
  struct is_placeholder<_Placeholder<_Num>> : public integral_constant<int, _Num>
  {
  };
  template <int _Num>
  struct is_placeholder<const _Placeholder<_Num>> : public integral_constant<int, _Num>
  {
  };
  template <std::size_t __i, typename _Tuple>
  using _Safe_tuple_element_t =
      typename enable_if<(__i < tuple_size<_Tuple>::value), tuple_element<__i, _Tuple>>::type::type;
  template <typename _Arg,
            bool _IsBindExp = is_bind_expression<_Arg>::value,
            bool _IsPlaceholder = (is_placeholder<_Arg>::value > 0)>
  class _Mu;
  template <typename _Tp>
  class _Mu<reference_wrapper<_Tp>, false, false>
  {
  public:
    template <typename _CVRef, typename _Tuple>
    _Tp& operator()(_CVRef& __arg, _Tuple&) const volatile
    {
      return __arg.get();
    }
  };
  template <typename _Arg>
  class _Mu<_Arg, true, false>
  {
  public:
    template <typename _CVArg, typename... _Args>
    auto operator()(_CVArg& __arg, tuple<_Args...>& __tuple) const volatile -> decltype(__arg(declval<_Args>()...))
    {
      typedef typename _Build_index_tuple<sizeof...(_Args)>::__type _Indexes;
      return this->__call(__arg, __tuple, _Indexes());
    }

  private:
    template <typename _CVArg, typename... _Args, std::size_t... _Indexes>
    auto __call(_CVArg& __arg, tuple<_Args...>& __tuple, const _Index_tuple<_Indexes...>&) const volatile
        -> decltype(__arg(declval<_Args>()...))
    {
      return __arg(std::get<_Indexes>(std::move(__tuple))...);
    }
  };
  template <typename _Arg>
  class _Mu<_Arg, false, true>
  {
  public:
    template <typename _Tuple>
    _Safe_tuple_element_t<(is_placeholder<_Arg>::value - 1), _Tuple>&& operator()(const volatile _Arg&,
                                                                                  _Tuple& __tuple) const volatile
    {
      return ::std::get<(is_placeholder<_Arg>::value - 1)>(std::move(__tuple));
    }
  };
  template <typename _Arg>
  class _Mu<_Arg, false, false>
  {
  public:
    template <typename _CVArg, typename _Tuple>
    _CVArg&& operator()(_CVArg&& __arg, _Tuple&) const volatile
    {
      return std::forward<_CVArg>(__arg);
    }
  };
  template <std::size_t _Ind, typename... _Tp>
  inline auto __volget(volatile tuple<_Tp...> & __tuple)->__tuple_element_t<_Ind, tuple<_Tp...>> volatile&
  {
    return std::get<_Ind>(const_cast<tuple<_Tp...>&>(__tuple));
  }
  template <std::size_t _Ind, typename... _Tp>
  inline auto __volget(const volatile tuple<_Tp...>& __tuple)->__tuple_element_t<_Ind, tuple<_Tp...>> const volatile&
  {
    return std::get<_Ind>(const_cast<const tuple<_Tp...>&>(__tuple));
  }
  template <typename _Signature>
  struct _Bind;
  template <typename _Functor, typename... _Bound_args>
  class _Bind<_Functor(_Bound_args...)> : public _Weak_result_type<_Functor>
  {
    typedef typename _Build_index_tuple<sizeof...(_Bound_args)>::__type _Bound_indexes;
    _Functor _M_f;
    tuple<_Bound_args...> _M_bound_args;
    template <typename _Result, typename... _Args, std::size_t... _Indexes>
    _Result __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
    {
      return std::__invoke(_M_f, _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...);
    }
    template <typename _Result, typename... _Args, std::size_t... _Indexes>
    _Result __call_c(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) const
    {
      return std::__invoke(_M_f, _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...);
    }
    template <typename _Result, typename... _Args, std::size_t... _Indexes>
    _Result __call_v(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) volatile
    {
      return std::__invoke(_M_f, _Mu<_Bound_args>()(__volget<_Indexes>(_M_bound_args), __args)...);
    }
    template <typename _Result, typename... _Args, std::size_t... _Indexes>
    _Result __call_c_v(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) const volatile
    {
      return std::__invoke(_M_f, _Mu<_Bound_args>()(__volget<_Indexes>(_M_bound_args), __args)...);
    }
    template <typename _BoundArg, typename _CallArgs>
    using _Mu_type =
        decltype(_Mu<typename remove_cv<_BoundArg>::type>()(std::declval<_BoundArg&>(), std::declval<_CallArgs&>()));
    template <typename _Fn, typename _CallArgs, typename... _BArgs>
    using _Res_type_impl = typename result_of<_Fn&(_Mu_type<_BArgs, _CallArgs>&&...)>::type;
    template <typename _CallArgs>
    using _Res_type = _Res_type_impl<_Functor, _CallArgs, _Bound_args...>;
    template <typename _CallArgs>
    using __dependent = typename enable_if<bool(tuple_size<_CallArgs>::value + 1), _Functor>::type;
    template <typename _CallArgs, template <class> class __cv_quals>
    using _Res_type_cv = _Res_type_impl<typename __cv_quals<__dependent<_CallArgs>>::type,
                                        _CallArgs,
                                        typename __cv_quals<_Bound_args>::type...>;

  public:
    template <typename... _Args>
    explicit _Bind(const _Functor& __f, _Args&&... __args) : _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
    {
    }
    template <typename... _Args>
    explicit _Bind(_Functor&& __f, _Args&&... __args)
        : _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
    {
    }
    _Bind(const _Bind&) = default;
    _Bind(_Bind&& __b) : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args)) {}
    template <typename... _Args, typename _Result = _Res_type<tuple<_Args...>>>
    _Result operator()(_Args&&... __args)
    {
      return this->__call<_Result>(std::forward_as_tuple(std::forward<_Args>(__args)...), _Bound_indexes());
    }
    template <typename... _Args, typename _Result = _Res_type_cv<tuple<_Args...>, add_const>>
    _Result operator()(_Args&&... __args) const
    {
      return this->__call_c<_Result>(std::forward_as_tuple(std::forward<_Args>(__args)...), _Bound_indexes());
    }
    template <typename... _Args, typename _Result = _Res_type_cv<tuple<_Args...>, add_volatile>>
    [[deprecated("std::bind does not support volatile in C++17")]] _Result operator()(_Args&&... __args) volatile
    {
      return this->__call_v<_Result>(std::forward_as_tuple(std::forward<_Args>(__args)...), _Bound_indexes());
    }
    template <typename... _Args, typename _Result = _Res_type_cv<tuple<_Args...>, add_cv>>
    [[deprecated("std::bind does not support volatile in C++17")]] _Result operator()(_Args&&... __args) const volatile
    {
      return this->__call_c_v<_Result>(std::forward_as_tuple(std::forward<_Args>(__args)...), _Bound_indexes());
    }
  };
  template <typename _Result, typename _Signature>
  struct _Bind_result;
  template <typename _Result, typename _Functor, typename... _Bound_args>
  class _Bind_result<_Result, _Functor(_Bound_args...)>
  {
    typedef typename _Build_index_tuple<sizeof...(_Bound_args)>::__type _Bound_indexes;
    _Functor _M_f;
    tuple<_Bound_args...> _M_bound_args;
    template <typename _Res>
    using __enable_if_void = typename enable_if<is_void<_Res>{}>::type;
    template <typename _Res>
    using __disable_if_void = typename enable_if<!is_void<_Res>{}, _Result>::type;
    template <typename _Res, typename... _Args, std::size_t... _Indexes>
    __disable_if_void<_Res> __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
    {
      return std::__invoke(_M_f, _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...);
    }
    template <typename _Res, typename... _Args, std::size_t... _Indexes>
    __enable_if_void<_Res> __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
    {
      std::__invoke(_M_f, _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...);
    }
    template <typename _Res, typename... _Args, std::size_t... _Indexes>
    __disable_if_void<_Res> __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) const
    {
      return std::__invoke(_M_f, _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...);
    }
    template <typename _Res, typename... _Args, std::size_t... _Indexes>
    __enable_if_void<_Res> __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) const
    {
      std::__invoke(_M_f, _Mu<_Bound_args>()(std::get<_Indexes>(_M_bound_args), __args)...);
    }
    template <typename _Res, typename... _Args, std::size_t... _Indexes>
    __disable_if_void<_Res> __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) volatile
    {
      return std::__invoke(_M_f, _Mu<_Bound_args>()(__volget<_Indexes>(_M_bound_args), __args)...);
    }
    template <typename _Res, typename... _Args, std::size_t... _Indexes>
    __enable_if_void<_Res> __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) volatile
    {
      std::__invoke(_M_f, _Mu<_Bound_args>()(__volget<_Indexes>(_M_bound_args), __args)...);
    }
    template <typename _Res, typename... _Args, std::size_t... _Indexes>
    __disable_if_void<_Res> __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) const volatile
    {
      return std::__invoke(_M_f, _Mu<_Bound_args>()(__volget<_Indexes>(_M_bound_args), __args)...);
    }
    template <typename _Res, typename... _Args, std::size_t... _Indexes>
    __enable_if_void<_Res> __call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>) const volatile
    {
      std::__invoke(_M_f, _Mu<_Bound_args>()(__volget<_Indexes>(_M_bound_args), __args)...);
    }

  public:
    typedef _Result result_type;
    template <typename... _Args>
    explicit _Bind_result(const _Functor& __f, _Args&&... __args)
        : _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
    {
    }
    template <typename... _Args>
    explicit _Bind_result(_Functor&& __f, _Args&&... __args)
        : _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
    {
    }
    _Bind_result(const _Bind_result&) = default;
    _Bind_result(_Bind_result&& __b) : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args)) {}
    template <typename... _Args>
    result_type operator()(_Args&&... __args)
    {
      return this->__call<_Result>(std::forward_as_tuple(std::forward<_Args>(__args)...), _Bound_indexes());
    }
    template <typename... _Args>
    result_type operator()(_Args&&... __args) const
    {
      return this->__call<_Result>(std::forward_as_tuple(std::forward<_Args>(__args)...), _Bound_indexes());
    }
    template <typename... _Args>
    [[deprecated("std::bind does not support volatile in C++17")]] result_type operator()(_Args&&... __args) volatile
    {
      return this->__call<_Result>(std::forward_as_tuple(std::forward<_Args>(__args)...), _Bound_indexes());
    }
    template <typename... _Args>
    [[deprecated("std::bind does not support volatile in C++17")]] result_type operator()(_Args&&... __args) const
        volatile
    {
      return this->__call<_Result>(std::forward_as_tuple(std::forward<_Args>(__args)...), _Bound_indexes());
    }
  };
  template <typename _Signature>
  struct is_bind_expression<_Bind<_Signature>> : public true_type
  {
  };
  template <typename _Signature>
  struct is_bind_expression<const _Bind<_Signature>> : public true_type
  {
  };
  template <typename _Signature>
  struct is_bind_expression<volatile _Bind<_Signature>> : public true_type
  {
  };
  template <typename _Signature>
  struct is_bind_expression<const volatile _Bind<_Signature>> : public true_type
  {
  };
  template <typename _Result, typename _Signature>
  struct is_bind_expression<_Bind_result<_Result, _Signature>> : public true_type
  {
  };
  template <typename _Result, typename _Signature>
  struct is_bind_expression<const _Bind_result<_Result, _Signature>> : public true_type
  {
  };
  template <typename _Result, typename _Signature>
  struct is_bind_expression<volatile _Bind_result<_Result, _Signature>> : public true_type
  {
  };
  template <typename _Result, typename _Signature>
  struct is_bind_expression<const volatile _Bind_result<_Result, _Signature>> : public true_type
  {
  };
  template <typename _Func, typename... _BoundArgs>
  struct _Bind_check_arity
  {
  };
  template <typename _Ret, typename... _Args, typename... _BoundArgs>
  struct _Bind_check_arity<_Ret (*)(_Args...), _BoundArgs...>
  {
    static_assert(sizeof...(_BoundArgs) == sizeof...(_Args), "Wrong number of arguments for function");
  };
  template <typename _Ret, typename... _Args, typename... _BoundArgs>
  struct _Bind_check_arity<_Ret (*)(_Args......), _BoundArgs...>
  {
    static_assert(sizeof...(_BoundArgs) >= sizeof...(_Args), "Wrong number of arguments for function");
  };
  template <typename _Tp, typename _Class, typename... _BoundArgs>
  struct _Bind_check_arity<_Tp _Class::*, _BoundArgs...>
  {
    using _Arity = typename _Mem_fn<_Tp _Class::*>::_Arity;
    using _Varargs = typename _Mem_fn<_Tp _Class::*>::_Varargs;
    static_assert(_Varargs::value ? sizeof...(_BoundArgs) >= _Arity::value + 1
                                  : sizeof...(_BoundArgs) == _Arity::value + 1,
                  "Wrong number of arguments for pointer-to-member");
  };
  template <typename _Tp, typename _Tp2 = typename decay<_Tp>::type>
  using __is_socketlike = __or_<is_integral<_Tp2>, is_enum<_Tp2>>;
  template <bool _SocketLike, typename _Func, typename... _BoundArgs>
  struct _Bind_helper : _Bind_check_arity<typename decay<_Func>::type, _BoundArgs...>
  {
    typedef typename decay<_Func>::type __func_type;
    typedef _Bind<__func_type(typename decay<_BoundArgs>::type...)> type;
  };
  template <typename _Func, typename... _BoundArgs>
  struct _Bind_helper<true, _Func, _BoundArgs...>
  {
  };
  template <typename _Func, typename... _BoundArgs>
  inline typename _Bind_helper<__is_socketlike<_Func>::value, _Func, _BoundArgs...>::type bind(_Func && __f,
                                                                                               _BoundArgs && ... __args)
  {
    typedef _Bind_helper<false, _Func, _BoundArgs...> __helper_type;
    return typename __helper_type::type(std::forward<_Func>(__f), std::forward<_BoundArgs>(__args)...);
  }
  template <typename _Result, typename _Func, typename... _BoundArgs>
  struct _Bindres_helper : _Bind_check_arity<typename decay<_Func>::type, _BoundArgs...>
  {
    typedef typename decay<_Func>::type __functor_type;
    typedef _Bind_result<_Result, __functor_type(typename decay<_BoundArgs>::type...)> type;
  };
  template <typename _Result, typename _Func, typename... _BoundArgs>
  inline typename _Bindres_helper<_Result, _Func, _BoundArgs...>::type bind(_Func && __f, _BoundArgs && ... __args)
  {
    typedef _Bindres_helper<_Result, _Func, _BoundArgs...> __helper_type;
    return typename __helper_type::type(std::forward<_Func>(__f), std::forward<_BoundArgs>(__args)...);
  }
  template <typename _Fn>
  class _Not_fn
  {
    template <typename _Fn2, typename... _Args>
    using __inv_res_t = typename __invoke_result<_Fn2, _Args...>::type;
    template <typename _Tp>
    static decltype(!std::declval<_Tp>()) _S_not() noexcept(noexcept(!std::declval<_Tp>()));

  public:
    template <typename _Fn2>
    _Not_fn(_Fn2&& __fn, int) : _M_fn(std::forward<_Fn2>(__fn))
    {
    }
    _Not_fn(const _Not_fn& __fn) = default;
    _Not_fn(_Not_fn&& __fn) = default;
    ~_Not_fn() = default;
    template <typename... _Args>
    decltype(_S_not<__inv_res_t<_Fn&, _Args...>>()) operator()(_Args&&... __args) & noexcept(
        __is_nothrow_invocable<_Fn&, _Args...>::value&& noexcept(_S_not<__inv_res_t<_Fn&, _Args...>>()))
    {
      return !std::__invoke(std::forward<_Fn&>(_M_fn), std::forward<_Args>(__args)...);
    }
    template <typename... _Args>
    decltype(_S_not<__inv_res_t<_Fn const&, _Args...>>()) operator()(_Args&&... __args) const& noexcept(
        __is_nothrow_invocable<_Fn const&, _Args...>::value&& noexcept(_S_not<__inv_res_t<_Fn const&, _Args...>>()))
    {
      return !std::__invoke(std::forward<_Fn const&>(_M_fn), std::forward<_Args>(__args)...);
    }
    template <typename... _Args>
    decltype(_S_not<__inv_res_t<_Fn&&, _Args...>>()) operator()(_Args&&... __args) && noexcept(
        __is_nothrow_invocable<_Fn&&, _Args...>::value&& noexcept(_S_not<__inv_res_t<_Fn&&, _Args...>>()))
    {
      return !std::__invoke(std::forward<_Fn&&>(_M_fn), std::forward<_Args>(__args)...);
    }
    template <typename... _Args>
    decltype(_S_not<__inv_res_t<_Fn const&&, _Args...>>()) operator()(_Args&&... __args) const&& noexcept(
        __is_nothrow_invocable<_Fn const&&, _Args...>::value&& noexcept(_S_not<__inv_res_t<_Fn const&&, _Args...>>()))
    {
      return !std::__invoke(std::forward<_Fn const&&>(_M_fn), std::forward<_Args>(__args)...);
    }

  private:
    _Fn _M_fn;
  };
  template <typename _Tp, typename _Pred>
  struct __is_byte_like : false_type
  {
  };
  template <typename _Tp>
  struct __is_byte_like<_Tp, equal_to<_Tp>> : __bool_constant<sizeof(_Tp) == 1 && is_integral<_Tp>::value>
  {
  };
  template <typename _Tp>
  struct __is_byte_like<_Tp, equal_to<void>> : __bool_constant<sizeof(_Tp) == 1 && is_integral<_Tp>::value>
  {
  };
  enum class byte : unsigned char;
  template <>
  struct __is_byte_like<byte, equal_to<byte>> : true_type
  {
  };
  template <>
  struct __is_byte_like<byte, equal_to<void>> : true_type
  {
  };
  template <typename _Fn>
  inline auto not_fn(_Fn && __fn) noexcept(std::is_nothrow_constructible<std::decay_t<_Fn>, _Fn&&>::value)
  {
    return _Not_fn<std::decay_t<_Fn>>{std::forward<_Fn>(__fn), 0};
  }
  template <typename _ForwardIterator1, typename _BinaryPredicate = equal_to<>>
  class default_searcher
  {
  public:
    default_searcher(_ForwardIterator1 __pat_first,
                     _ForwardIterator1 __pat_last,
                     _BinaryPredicate __pred = _BinaryPredicate())
        : _M_m(__pat_first, __pat_last, std::move(__pred))
    {
    }
    template <typename _ForwardIterator2>
    pair<_ForwardIterator2, _ForwardIterator2> operator()(_ForwardIterator2 __first, _ForwardIterator2 __last) const
    {
      _ForwardIterator2 __first_ret =
          std::search(__first, __last, std::get<0>(_M_m), std::get<1>(_M_m), std::get<2>(_M_m));
      auto __ret = std::make_pair(__first_ret, __first_ret);
      if (__ret.first != __last)
        std::advance(__ret.second, std::distance(std::get<0>(_M_m), std::get<1>(_M_m)));
      return __ret;
    }

  private:
    tuple<_ForwardIterator1, _ForwardIterator1, _BinaryPredicate> _M_m;
  };
  template <typename _Key, typename _Tp, typename _Hash, typename _Pred>
  struct __boyer_moore_map_base
  {
    template <typename _RAIter>
    __boyer_moore_map_base(_RAIter __pat, size_t __patlen, _Hash&& __hf, _Pred&& __pred)
        : _M_bad_char{__patlen, std::move(__hf), std::move(__pred)}
    {
      if (__patlen > 0)
        for (__diff_type __i = 0; __i < __patlen - 1; ++__i)
          _M_bad_char[__pat[__i]] = __patlen - 1 - __i;
    }
    using __diff_type = _Tp;
    __diff_type _M_lookup(_Key __key, __diff_type __not_found) const
    {
      auto __iter = _M_bad_char.find(__key);
      if (__iter == _M_bad_char.end())
        return __not_found;
      return __iter->second;
    }
    _Pred _M_pred() const { return _M_bad_char.key_eq(); }
    std::unordered_map<_Key, _Tp, _Hash, _Pred> _M_bad_char;
  };
  template <typename _Tp, size_t _Len, typename _Pred>
  struct __boyer_moore_array_base
  {
    template <typename _RAIter, typename _Unused>
    __boyer_moore_array_base(_RAIter __pat, size_t __patlen, _Unused&&, _Pred&& __pred)
        : _M_bad_char{std::array<_Tp, _Len>{}, std::move(__pred)}
    {
      std::get<0>(_M_bad_char).fill(__patlen);
      if (__patlen > 0)
        for (__diff_type __i = 0; __i < __patlen - 1; ++__i)
        {
          auto __ch = __pat[__i];
          using _UCh = make_unsigned_t<decltype(__ch)>;
          auto __uch = static_cast<_UCh>(__ch);
          std::get<0>(_M_bad_char)[__uch] = __patlen - 1 - __i;
        }
    }
    using __diff_type = _Tp;
    template <typename _Key>
    __diff_type _M_lookup(_Key __key, __diff_type __not_found) const
    {
      auto __ukey = static_cast<make_unsigned_t<_Key>>(__key);
      if (__ukey >= _Len)
        return __not_found;
      return std::get<0>(_M_bad_char)[__ukey];
    }
    const _Pred& _M_pred() const { return std::get<1>(_M_bad_char); }
    tuple<std::array<_Tp, _Len>, _Pred> _M_bad_char;
  };
  template <typename _RAIter,
            typename _Hash,
            typename _Pred,
            typename _Val = typename iterator_traits<_RAIter>::value_type,
            typename _Diff = typename iterator_traits<_RAIter>::difference_type>
  using __boyer_moore_base_t = conditional_t<__is_byte_like<_Val, _Pred>::value,
                                             __boyer_moore_array_base<_Diff, 256, _Pred>,
                                             __boyer_moore_map_base<_Val, _Diff, _Hash, _Pred>>;
  template <typename _RAIter,
            typename _Hash = hash<typename iterator_traits<_RAIter>::value_type>,
            typename _BinaryPredicate = equal_to<>>
  class boyer_moore_searcher : __boyer_moore_base_t<_RAIter, _Hash, _BinaryPredicate>
  {
    using _Base = __boyer_moore_base_t<_RAIter, _Hash, _BinaryPredicate>;
    using typename _Base::__diff_type;

  public:
    boyer_moore_searcher(_RAIter __pat_first,
                         _RAIter __pat_last,
                         _Hash __hf = _Hash(),
                         _BinaryPredicate __pred = _BinaryPredicate());
    template <typename _RandomAccessIterator2>
    pair<_RandomAccessIterator2, _RandomAccessIterator2> operator()(_RandomAccessIterator2 __first,
                                                                    _RandomAccessIterator2 __last) const;

  private:
    bool _M_is_prefix(_RAIter __word, __diff_type __len, __diff_type __pos)
    {
      const auto& __pred = this->_M_pred();
      __diff_type __suffixlen = __len - __pos;
      for (__diff_type __i = 0; __i < __suffixlen; ++__i)
        if (!__pred(__word[__i], __word[__pos + __i]))
          return false;
      return true;
    }
    __diff_type _M_suffix_length(_RAIter __word, __diff_type __len, __diff_type __pos)
    {
      const auto& __pred = this->_M_pred();
      __diff_type __i = 0;
      while (__pred(__word[__pos - __i], __word[__len - 1 - __i]) && __i < __pos)
      {
        ++__i;
      }
      return __i;
    }
    template <typename _Tp>
    __diff_type _M_bad_char_shift(_Tp __c) const
    {
      return this->_M_lookup(__c, _M_pat_end - _M_pat);
    }
    _RAIter _M_pat;
    _RAIter _M_pat_end;
    std::vector<__diff_type> _M_good_suffix;
  };
  template <typename _RAIter,
            typename _Hash = hash<typename iterator_traits<_RAIter>::value_type>,
            typename _BinaryPredicate = equal_to<>>
  class boyer_moore_horspool_searcher : __boyer_moore_base_t<_RAIter, _Hash, _BinaryPredicate>
  {
    using _Base = __boyer_moore_base_t<_RAIter, _Hash, _BinaryPredicate>;
    using typename _Base::__diff_type;

  public:
    boyer_moore_horspool_searcher(_RAIter __pat,
                                  _RAIter __pat_end,
                                  _Hash __hf = _Hash(),
                                  _BinaryPredicate __pred = _BinaryPredicate())
        : _Base(__pat, __pat_end - __pat, std::move(__hf), std::move(__pred)), _M_pat(__pat), _M_pat_end(__pat_end)
    {
    }
    template <typename _RandomAccessIterator2>
    pair<_RandomAccessIterator2, _RandomAccessIterator2> operator()(_RandomAccessIterator2 __first,
                                                                    _RandomAccessIterator2 __last) const
    {
      const auto& __pred = this->_M_pred();
      auto __patlen = _M_pat_end - _M_pat;
      if (__patlen == 0)
        return std::make_pair(__first, __first);
      auto __len = __last - __first;
      while (__len >= __patlen)
      {
        for (auto __scan = __patlen - 1; __pred(__first[__scan], _M_pat[__scan]); --__scan)
          if (__scan == 0)
            return std::make_pair(__first, __first + __patlen);
        auto __shift = _M_bad_char_shift(__first[__patlen - 1]);
        __len -= __shift;
        __first += __shift;
      }
      return std::make_pair(__last, __last);
    }

  private:
    template <typename _Tp>
    __diff_type _M_bad_char_shift(_Tp __c) const
    {
      return this->_M_lookup(__c, _M_pat_end - _M_pat);
    }
    _RAIter _M_pat;
    _RAIter _M_pat_end;
  };
  template <typename _RAIter, typename _Hash, typename _BinaryPredicate>
  boyer_moore_searcher<_RAIter, _Hash, _BinaryPredicate>::boyer_moore_searcher(
      _RAIter __pat, _RAIter __pat_end, _Hash __hf, _BinaryPredicate __pred)
      : _Base(__pat, __pat_end - __pat, std::move(__hf), std::move(__pred)),
        _M_pat(__pat),
        _M_pat_end(__pat_end),
        _M_good_suffix(__pat_end - __pat)
  {
    auto __patlen = __pat_end - __pat;
    if (__patlen == 0)
      return;
    __diff_type __last_prefix = __patlen - 1;
    for (__diff_type __p = __patlen - 1; __p >= 0; --__p)
    {
      if (_M_is_prefix(__pat, __patlen, __p + 1))
        __last_prefix = __p + 1;
      _M_good_suffix[__p] = __last_prefix + (__patlen - 1 - __p);
    }
    for (__diff_type __p = 0; __p < __patlen - 1; ++__p)
    {
      auto __slen = _M_suffix_length(__pat, __patlen, __p);
      auto __pos = __patlen - 1 - __slen;
      if (!__pred(__pat[__p - __slen], __pat[__pos]))
        _M_good_suffix[__pos] = __patlen - 1 - __p + __slen;
    }
  }
  template <typename _RAIter, typename _Hash, typename _BinaryPredicate>
  template <typename _RandomAccessIterator2>
  pair<_RandomAccessIterator2, _RandomAccessIterator2>
  boyer_moore_searcher<_RAIter, _Hash, _BinaryPredicate>::operator()(_RandomAccessIterator2 __first,
                                                                     _RandomAccessIterator2 __last) const
  {
    auto __patlen = _M_pat_end - _M_pat;
    if (__patlen == 0)
      return std::make_pair(__first, __first);
    const auto& __pred = this->_M_pred();
    __diff_type __i = __patlen - 1;
    auto __stringlen = __last - __first;
    while (__i < __stringlen)
    {
      __diff_type __j = __patlen - 1;
      while (__j >= 0 && __pred(__first[__i], _M_pat[__j]))
      {
        --__i;
        --__j;
      }
      if (__j < 0)
      {
        const auto __match = __first + __i + 1;
        return std::make_pair(__match, __match + __patlen);
      }
      __i += std::max(_M_bad_char_shift(__first[__i]), _M_good_suffix[__j]);
    }
    return std::make_pair(__last, __last);
  }
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  namespace __parse_int
  {
  template <unsigned _Base, char _Dig>
  struct _Digit;
  template <unsigned _Base>
  struct _Digit<_Base, '0'> : integral_constant<unsigned, 0>
  {
    using __valid = true_type;
  };
  template <unsigned _Base>
  struct _Digit<_Base, '1'> : integral_constant<unsigned, 1>
  {
    using __valid = true_type;
  };
  template <unsigned _Base, unsigned _Val>
  struct _Digit_impl : integral_constant<unsigned, _Val>
  {
    static_assert(_Base > _Val, "invalid digit");
    using __valid = true_type;
  };
  template <unsigned _Base>
  struct _Digit<_Base, '2'> : _Digit_impl<_Base, 2>
  {
  };
  template <unsigned _Base>
  struct _Digit<_Base, '3'> : _Digit_impl<_Base, 3>
  {
  };
  template <unsigned _Base>
  struct _Digit<_Base, '4'> : _Digit_impl<_Base, 4>
  {
  };
  template <unsigned _Base>
  struct _Digit<_Base, '5'> : _Digit_impl<_Base, 5>
  {
  };
  template <unsigned _Base>
  struct _Digit<_Base, '6'> : _Digit_impl<_Base, 6>
  {
  };
  template <unsigned _Base>
  struct _Digit<_Base, '7'> : _Digit_impl<_Base, 7>
  {
  };
  template <unsigned _Base>
  struct _Digit<_Base, '8'> : _Digit_impl<_Base, 8>
  {
  };
  template <unsigned _Base>
  struct _Digit<_Base, '9'> : _Digit_impl<_Base, 9>
  {
  };
  template <unsigned _Base>
  struct _Digit<_Base, 'a'> : _Digit_impl<_Base, 0xa>
  {
  };
  template <unsigned _Base>
  struct _Digit<_Base, 'A'> : _Digit_impl<_Base, 0xa>
  {
  };
  template <unsigned _Base>
  struct _Digit<_Base, 'b'> : _Digit_impl<_Base, 0xb>
  {
  };
  template <unsigned _Base>
  struct _Digit<_Base, 'B'> : _Digit_impl<_Base, 0xb>
  {
  };
  template <unsigned _Base>
  struct _Digit<_Base, 'c'> : _Digit_impl<_Base, 0xc>
  {
  };
  template <unsigned _Base>
  struct _Digit<_Base, 'C'> : _Digit_impl<_Base, 0xc>
  {
  };
  template <unsigned _Base>
  struct _Digit<_Base, 'd'> : _Digit_impl<_Base, 0xd>
  {
  };
  template <unsigned _Base>
  struct _Digit<_Base, 'D'> : _Digit_impl<_Base, 0xd>
  {
  };
  template <unsigned _Base>
  struct _Digit<_Base, 'e'> : _Digit_impl<_Base, 0xe>
  {
  };
  template <unsigned _Base>
  struct _Digit<_Base, 'E'> : _Digit_impl<_Base, 0xe>
  {
  };
  template <unsigned _Base>
  struct _Digit<_Base, 'f'> : _Digit_impl<_Base, 0xf>
  {
  };
  template <unsigned _Base>
  struct _Digit<_Base, 'F'> : _Digit_impl<_Base, 0xf>
  {
  };
  template <unsigned _Base>
  struct _Digit<_Base, '\''> : integral_constant<unsigned, 0>
  {
    using __valid = false_type;
  };
  template <unsigned long long _Val>
  using __ull_constant = integral_constant<unsigned long long, _Val>;
  template <unsigned _Base, char _Dig, char... _Digs>
  struct _Power_help
  {
    using __next = typename _Power_help<_Base, _Digs...>::type;
    using __valid_digit = typename _Digit<_Base, _Dig>::__valid;
    using type = __ull_constant<__next::value*(__valid_digit{} ? _Base : 1ULL)>;
  };
  template <unsigned _Base, char _Dig>
  struct _Power_help<_Base, _Dig>
  {
    using __valid_digit = typename _Digit<_Base, _Dig>::__valid;
    using type = __ull_constant<__valid_digit::value>;
  };
  template <unsigned _Base, char... _Digs>
  struct _Power : _Power_help<_Base, _Digs...>::type
  {
  };
  template <unsigned _Base>
  struct _Power<_Base> : __ull_constant<0>
  {
  };
  template <unsigned _Base, unsigned long long _Pow, char _Dig, char... _Digs>
  struct _Number_help
  {
    using __digit = _Digit<_Base, _Dig>;
    using __valid_digit = typename __digit::__valid;
    using __next = _Number_help<_Base, __valid_digit::value ? _Pow / _Base : _Pow, _Digs...>;
    using type = __ull_constant<_Pow * __digit::value + __next::type::value>;
    static_assert((type::value / _Pow) == __digit::value, "integer literal does not fit in unsigned long long");
  };
  template <unsigned _Base, unsigned long long _Pow, char _Dig, char... _Digs>
  struct _Number_help<_Base, _Pow, '\'', _Dig, _Digs...> : _Number_help<_Base, _Pow, _Dig, _Digs...>
  {
  };
  template <unsigned _Base, char _Dig>
  struct _Number_help<_Base, 1ULL, _Dig>
  {
    using type = __ull_constant<_Digit<_Base, _Dig>::value>;
  };
  template <unsigned _Base, char... _Digs>
  struct _Number : _Number_help<_Base, _Power<_Base, _Digs...>::value, _Digs...>::type
  {
  };
  template <unsigned _Base>
  struct _Number<_Base> : __ull_constant<0>
  {
  };
  template <char... _Digs>
  struct _Parse_int;
  template <char... _Digs>
  struct _Parse_int<'0', 'b', _Digs...> : _Number<2U, _Digs...>::type
  {
  };
  template <char... _Digs>
  struct _Parse_int<'0', 'B', _Digs...> : _Number<2U, _Digs...>::type
  {
  };
  template <char... _Digs>
  struct _Parse_int<'0', 'x', _Digs...> : _Number<16U, _Digs...>::type
  {
  };
  template <char... _Digs>
  struct _Parse_int<'0', 'X', _Digs...> : _Number<16U, _Digs...>::type
  {
  };
  template <char... _Digs>
  struct _Parse_int<'0', _Digs...> : _Number<8U, _Digs...>::type
  {
  };
  template <char... _Digs>
  struct _Parse_int : _Number<10U, _Digs...>::type
  {
  };
  }  // namespace __parse_int
  namespace __select_int
  {
  template <unsigned long long _Val, typename... _Ints>
  struct _Select_int_base;
  template <unsigned long long _Val, typename _IntType, typename... _Ints>
  struct _Select_int_base<_Val, _IntType, _Ints...> : conditional_t<(_Val <= std::numeric_limits<_IntType>::max()),
                                                                    integral_constant<_IntType, _Val>,
                                                                    _Select_int_base<_Val, _Ints...>>
  {
  };
  template <unsigned long long _Val>
  struct _Select_int_base<_Val>
  {
  };
  template <char... _Digs>
  using _Select_int = typename _Select_int_base<__parse_int::_Parse_int<_Digs...>::value,
                                                unsigned char,
                                                unsigned short,
                                                unsigned int,
                                                unsigned long,
                                                unsigned long long>::type;
  }  // namespace __select_int
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  namespace __detail
  {
  namespace __variant
  {
  template <size_t _Np, typename... _Types>
  struct _Nth_type;
  template <size_t _Np, typename _First, typename... _Rest>
  struct _Nth_type<_Np, _First, _Rest...> : _Nth_type<_Np - 1, _Rest...>
  {
  };
  template <typename _First, typename... _Rest>
  struct _Nth_type<0, _First, _Rest...>
  {
    using type = _First;
  };
  }  // namespace __variant
  }  // namespace __detail
  template <typename... _Types>
  class tuple;
  template <typename... _Types>
  class variant;
  template <typename>
  struct hash;
  template <typename _Variant>
  struct variant_size;
  template <typename _Variant>
  struct variant_size<const _Variant> : variant_size<_Variant>
  {
  };
  template <typename _Variant>
  struct variant_size<volatile _Variant> : variant_size<_Variant>
  {
  };
  template <typename _Variant>
  struct variant_size<const volatile _Variant> : variant_size<_Variant>
  {
  };
  template <typename... _Types>
  struct variant_size<variant<_Types...>> : std::integral_constant<size_t, sizeof...(_Types)>
  {
  };
  template <typename _Variant>
  inline constexpr size_t variant_size_v = variant_size<_Variant>::value;
  template <size_t _Np, typename _Variant>
  struct variant_alternative;
  template <size_t _Np, typename _First, typename... _Rest>
  struct variant_alternative<_Np, variant<_First, _Rest...>> : variant_alternative<_Np - 1, variant<_Rest...>>
  {
  };
  template <typename _First, typename... _Rest>
  struct variant_alternative<0, variant<_First, _Rest...>>
  {
    using type = _First;
  };
  template <size_t _Np, typename _Variant>
  using variant_alternative_t = typename variant_alternative<_Np, _Variant>::type;
  template <size_t _Np, typename _Variant>
  struct variant_alternative<_Np, const _Variant>
  {
    using type = add_const_t<variant_alternative_t<_Np, _Variant>>;
  };
  template <size_t _Np, typename _Variant>
  struct variant_alternative<_Np, volatile _Variant>
  {
    using type = add_volatile_t<variant_alternative_t<_Np, _Variant>>;
  };
  template <size_t _Np, typename _Variant>
  struct variant_alternative<_Np, const volatile _Variant>
  {
    using type = add_cv_t<variant_alternative_t<_Np, _Variant>>;
  };
  inline constexpr size_t variant_npos = -1;
  template <size_t _Np, typename... _Types>
  constexpr variant_alternative_t<_Np, variant<_Types...>>& get(variant<_Types...>&);
  template <size_t _Np, typename... _Types>
  constexpr variant_alternative_t<_Np, variant<_Types...>>&& get(variant<_Types...> &&);
  template <size_t _Np, typename... _Types>
  constexpr variant_alternative_t<_Np, variant<_Types...>> const& get(const variant<_Types...>&);
  template <size_t _Np, typename... _Types>
  constexpr variant_alternative_t<_Np, variant<_Types...>> const&& get(const variant<_Types...>&&);
  template <bool __use_index = false, bool __same_return_types = true, typename _Visitor, typename... _Variants>
  constexpr decltype(auto) __do_visit(_Visitor && __visitor, _Variants && ... __variants);
  template <typename... _Types, typename _Tp>
  decltype(auto) __variant_cast(_Tp && __rhs)
  {
    if constexpr (is_lvalue_reference_v<_Tp>)
    {
      if constexpr (is_const_v<remove_reference_t<_Tp>>)
        return static_cast<const variant<_Types...>&>(__rhs);
      else
        return static_cast<variant<_Types...>&>(__rhs);
    }
    else
      return static_cast<variant<_Types...>&&>(__rhs);
  }
  namespace __detail
  {
  namespace __variant
  {
  template <typename _Tp, typename... _Types>
  struct __index_of : std::integral_constant<size_t, 0>
  {
  };
  template <typename _Tp, typename... _Types>
  inline constexpr size_t __index_of_v = __index_of<_Tp, _Types...>::value;
  template <typename _Tp, typename _First, typename... _Rest>
  struct __index_of<_Tp, _First, _Rest...>
      : std::integral_constant<size_t, is_same_v<_Tp, _First> ? 0 : __index_of_v<_Tp, _Rest...> + 1>
  {
  };
  struct __variant_cookie
  {
  };
  struct __variant_idx_cookie
  {
    using type = __variant_idx_cookie;
  };
  inline constexpr auto __visit_with_index = bool_constant<true>{};
  template <typename _Type, bool = std::is_literal_type_v<_Type>>
  struct _Uninitialized;
  template <typename _Type>
  struct _Uninitialized<_Type, true>
  {
    template <typename... _Args>
    constexpr _Uninitialized(in_place_index_t<0>, _Args&&... __args) : _M_storage(std::forward<_Args>(__args)...)
    {
    }
    constexpr const _Type& _M_get() const& noexcept { return _M_storage; }
    constexpr _Type& _M_get() & noexcept { return _M_storage; }
    constexpr const _Type&& _M_get() const&& noexcept { return std::move(_M_storage); }
    constexpr _Type&& _M_get() && noexcept { return std::move(_M_storage); }
    _Type _M_storage;
  };
  template <typename _Type>
  struct _Uninitialized<_Type, false>
  {
    template <typename... _Args>
    constexpr _Uninitialized(in_place_index_t<0>, _Args&&... __args)
    {
      ::new ((void*)std::addressof(_M_storage)) _Type(std::forward<_Args>(__args)...);
    }
    const _Type& _M_get() const& noexcept { return *_M_storage._M_ptr(); }
    _Type& _M_get() & noexcept { return *_M_storage._M_ptr(); }
    const _Type&& _M_get() const&& noexcept { return std::move(*_M_storage._M_ptr()); }
    _Type&& _M_get() && noexcept { return std::move(*_M_storage._M_ptr()); }
    __gnu_cxx::__aligned_membuf<_Type> _M_storage;
  };
  template <typename _Union>
  constexpr decltype(auto) __get(in_place_index_t<0>, _Union&& __u) noexcept
  {
    return std::forward<_Union>(__u)._M_first._M_get();
  }
  template <size_t _Np, typename _Union>
  constexpr decltype(auto) __get(in_place_index_t<_Np>, _Union&& __u) noexcept
  {
    return __variant::__get(in_place_index<_Np - 1>, std::forward<_Union>(__u)._M_rest);
  }
  template <size_t _Np, typename _Variant>
  constexpr decltype(auto) __get(_Variant&& __v) noexcept
  {
    return __variant::__get(std::in_place_index<_Np>, std::forward<_Variant>(__v)._M_u);
  }
  template <typename... _Types>
  struct _Traits
  {
    static constexpr bool _S_default_ctor = is_default_constructible_v<typename _Nth_type<0, _Types...>::type>;
    static constexpr bool _S_copy_ctor = (is_copy_constructible_v<_Types> && ...);
    static constexpr bool _S_move_ctor = (is_move_constructible_v<_Types> && ...);
    static constexpr bool _S_copy_assign = _S_copy_ctor && (is_copy_assignable_v<_Types> && ...);
    static constexpr bool _S_move_assign = _S_move_ctor && (is_move_assignable_v<_Types> && ...);
    static constexpr bool _S_trivial_dtor = (is_trivially_destructible_v<_Types> && ...);
    static constexpr bool _S_trivial_copy_ctor = (is_trivially_copy_constructible_v<_Types> && ...);
    static constexpr bool _S_trivial_move_ctor = (is_trivially_move_constructible_v<_Types> && ...);
    static constexpr bool _S_trivial_copy_assign =
        _S_trivial_dtor && _S_trivial_copy_ctor && (is_trivially_copy_assignable_v<_Types> && ...);
    static constexpr bool _S_trivial_move_assign =
        _S_trivial_dtor && _S_trivial_move_ctor && (is_trivially_move_assignable_v<_Types> && ...);
    static constexpr bool _S_nothrow_default_ctor =
        is_nothrow_default_constructible_v<typename _Nth_type<0, _Types...>::type>;
    static constexpr bool _S_nothrow_copy_ctor = false;
    static constexpr bool _S_nothrow_move_ctor = (is_nothrow_move_constructible_v<_Types> && ...);
    static constexpr bool _S_nothrow_copy_assign = false;
    static constexpr bool _S_nothrow_move_assign =
        _S_nothrow_move_ctor && (is_nothrow_move_assignable_v<_Types> && ...);
  };
  template <typename... _Types>
  union _Variadic_union
  {
  };
  template <typename _First, typename... _Rest>
  union _Variadic_union<_First, _Rest...>
  {
    constexpr _Variadic_union() : _M_rest() {}
    template <typename... _Args>
    constexpr _Variadic_union(in_place_index_t<0>, _Args&&... __args)
        : _M_first(in_place_index<0>, std::forward<_Args>(__args)...)
    {
    }
    template <size_t _Np, typename... _Args>
    constexpr _Variadic_union(in_place_index_t<_Np>, _Args&&... __args)
        : _M_rest(in_place_index<_Np - 1>, std::forward<_Args>(__args)...)
    {
    }
    _Uninitialized<_First> _M_first;
    _Variadic_union<_Rest...> _M_rest;
  };
  template <typename _Tp>
  struct _Never_valueless_alt : __and_<bool_constant<sizeof(_Tp) <= 256>, is_trivially_copyable<_Tp>>
  {
  };
  template <typename... _Types>
  constexpr bool __never_valueless()
  {
    return _Traits<_Types...>::_S_move_assign && (_Never_valueless_alt<_Types>::value && ...);
  }
  template <bool __trivially_destructible, typename... _Types>
  struct _Variant_storage;
  template <typename... _Types>
  using __select_index =
      typename __select_int::_Select_int_base<sizeof...(_Types), unsigned char, unsigned short>::type::value_type;
  template <typename... _Types>
  struct _Variant_storage<false, _Types...>
  {
    constexpr _Variant_storage() : _M_index(static_cast<__index_type>(variant_npos)) {}
    template <size_t _Np, typename... _Args>
    constexpr _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
        : _M_u(in_place_index<_Np>, std::forward<_Args>(__args)...), _M_index{_Np}
    {
    }
    constexpr void _M_reset_impl()
    {
      __do_visit(
          [](auto&& __this_mem) mutable -> __detail::__variant::__variant_cookie {
            if constexpr (!is_same_v<remove_reference_t<decltype(__this_mem)>, __variant_cookie>)
              std::_Destroy(std::__addressof(__this_mem));
            return {};
          },
          __variant_cast<_Types...>(*this));
    }
    void _M_reset()
    {
      _M_reset_impl();
      _M_index = static_cast<__index_type>(variant_npos);
    }
    ~_Variant_storage() { _M_reset(); }
    void* _M_storage() const { return const_cast<void*>(static_cast<const void*>(std::addressof(_M_u))); }
    constexpr bool _M_valid() const noexcept
    {
      if constexpr (__never_valueless<_Types...>())
        return true;
      return this->_M_index != __index_type(variant_npos);
    }
    _Variadic_union<_Types...> _M_u;
    using __index_type = __select_index<_Types...>;
    __index_type _M_index;
  };
  template <typename... _Types>
  struct _Variant_storage<true, _Types...>
  {
    constexpr _Variant_storage() : _M_index(static_cast<__index_type>(variant_npos)) {}
    template <size_t _Np, typename... _Args>
    constexpr _Variant_storage(in_place_index_t<_Np>, _Args&&... __args)
        : _M_u(in_place_index<_Np>, std::forward<_Args>(__args)...), _M_index{_Np}
    {
    }
    void _M_reset() { _M_index = static_cast<__index_type>(variant_npos); }
    void* _M_storage() const { return const_cast<void*>(static_cast<const void*>(std::addressof(_M_u))); }
    constexpr bool _M_valid() const noexcept
    {
      if constexpr (__never_valueless<_Types...>())
        return true;
      return this->_M_index != static_cast<__index_type>(variant_npos);
    }
    _Variadic_union<_Types...> _M_u;
    using __index_type = __select_index<_Types...>;
    __index_type _M_index;
  };
  template <typename... _Types>
  using _Variant_storage_alias = _Variant_storage<_Traits<_Types...>::_S_trivial_dtor, _Types...>;
  template <typename _Tp, typename _Up>
  void __variant_construct_single(_Tp&& __lhs, _Up&& __rhs_mem)
  {
    void* __storage = std::addressof(__lhs._M_u);
    using _Type = remove_reference_t<decltype(__rhs_mem)>;
    if constexpr (!is_same_v<_Type, __variant_cookie>)
      ::new (__storage) _Type(std::forward<decltype(__rhs_mem)>(__rhs_mem));
  }
  template <typename... _Types, typename _Tp, typename _Up>
  void __variant_construct(_Tp&& __lhs, _Up&& __rhs)
  {
    __lhs._M_index = __rhs._M_index;
    __do_visit(
        [&__lhs](auto&& __rhs_mem) mutable -> __detail::__variant::__variant_cookie {
          __variant_construct_single(std::forward<_Tp>(__lhs), std::forward<decltype(__rhs_mem)>(__rhs_mem));
          return {};
        },
        __variant_cast<_Types...>(std::forward<_Up>(__rhs)));
  }
  template <bool, typename... _Types>
  struct _Copy_ctor_base : _Variant_storage_alias<_Types...>
  {
    using _Base = _Variant_storage_alias<_Types...>;
    using _Base::_Base;
    _Copy_ctor_base(const _Copy_ctor_base& __rhs) noexcept(_Traits<_Types...>::_S_nothrow_copy_ctor)
    {
      __variant_construct<_Types...>(*this, __rhs);
    }
    _Copy_ctor_base(_Copy_ctor_base&&) = default;
    _Copy_ctor_base& operator=(const _Copy_ctor_base&) = default;
    _Copy_ctor_base& operator=(_Copy_ctor_base&&) = default;
  };
  template <typename... _Types>
  struct _Copy_ctor_base<true, _Types...> : _Variant_storage_alias<_Types...>
  {
    using _Base = _Variant_storage_alias<_Types...>;
    using _Base::_Base;
  };
  template <typename... _Types>
  using _Copy_ctor_alias = _Copy_ctor_base<_Traits<_Types...>::_S_trivial_copy_ctor, _Types...>;
  template <bool, typename... _Types>
  struct _Move_ctor_base : _Copy_ctor_alias<_Types...>
  {
    using _Base = _Copy_ctor_alias<_Types...>;
    using _Base::_Base;
    _Move_ctor_base(_Move_ctor_base&& __rhs) noexcept(_Traits<_Types...>::_S_nothrow_move_ctor)
    {
      __variant_construct<_Types...>(*this, std::move(__rhs));
    }
    template <typename _Up>
    void _M_destructive_move(unsigned short __rhs_index, _Up&& __rhs)
    {
      this->_M_reset();
      __variant_construct_single(*this, std::forward<_Up>(__rhs));
      this->_M_index = __rhs_index;
    }
    template <typename _Up>
    void _M_destructive_copy(unsigned short __rhs_index, const _Up& __rhs)
    {
      this->_M_reset();
      __variant_construct_single(*this, __rhs);
      this->_M_index = __rhs_index;
    }
    _Move_ctor_base(const _Move_ctor_base&) = default;
    _Move_ctor_base& operator=(const _Move_ctor_base&) = default;
    _Move_ctor_base& operator=(_Move_ctor_base&&) = default;
  };
  template <typename... _Types>
  struct _Move_ctor_base<true, _Types...> : _Copy_ctor_alias<_Types...>
  {
    using _Base = _Copy_ctor_alias<_Types...>;
    using _Base::_Base;
    template <typename _Up>
    void _M_destructive_move(unsigned short __rhs_index, _Up&& __rhs)
    {
      this->_M_reset();
      __variant_construct_single(*this, std::forward<_Up>(__rhs));
      this->_M_index = __rhs_index;
    }
    template <typename _Up>
    void _M_destructive_copy(unsigned short __rhs_index, const _Up& __rhs)
    {
      this->_M_reset();
      __variant_construct_single(*this, __rhs);
      this->_M_index = __rhs_index;
    }
  };
  template <typename... _Types>
  using _Move_ctor_alias = _Move_ctor_base<_Traits<_Types...>::_S_trivial_move_ctor, _Types...>;
  template <bool, typename... _Types>
  struct _Copy_assign_base : _Move_ctor_alias<_Types...>
  {
    using _Base = _Move_ctor_alias<_Types...>;
    using _Base::_Base;
    _Copy_assign_base& operator=(const _Copy_assign_base& __rhs) noexcept(_Traits<_Types...>::_S_nothrow_copy_assign)
    {
      __do_visit<__visit_with_index>(
          [this](auto&& __rhs_mem, auto __rhs_index) mutable -> __detail::__variant::__variant_idx_cookie {
            if constexpr (__rhs_index != variant_npos)
            {
              if (this->_M_index == __rhs_index)
                __variant::__get<__rhs_index>(*this) = __rhs_mem;
              else
              {
                using __rhs_type = __remove_cvref_t<decltype(__rhs_mem)>;
                if constexpr (is_nothrow_copy_constructible_v<__rhs_type> ||
                              !is_nothrow_move_constructible_v<__rhs_type>)
                  this->_M_destructive_copy(__rhs_index, __rhs_mem);
                else
                  __variant_cast<_Types...>(*this) = variant<_Types...>(std::in_place_index<__rhs_index>, __rhs_mem);
              }
            }
            else
              this->_M_reset();
            return {};
          },
          __variant_cast<_Types...>(__rhs));
      return *this;
    }
    _Copy_assign_base(const _Copy_assign_base&) = default;
    _Copy_assign_base(_Copy_assign_base&&) = default;
    _Copy_assign_base& operator=(_Copy_assign_base&&) = default;
  };
  template <typename... _Types>
  struct _Copy_assign_base<true, _Types...> : _Move_ctor_alias<_Types...>
  {
    using _Base = _Move_ctor_alias<_Types...>;
    using _Base::_Base;
  };
  template <typename... _Types>
  using _Copy_assign_alias = _Copy_assign_base<_Traits<_Types...>::_S_trivial_copy_assign, _Types...>;
  template <bool, typename... _Types>
  struct _Move_assign_base : _Copy_assign_alias<_Types...>
  {
    using _Base = _Copy_assign_alias<_Types...>;
    using _Base::_Base;
    _Move_assign_base& operator=(_Move_assign_base&& __rhs) noexcept(_Traits<_Types...>::_S_nothrow_move_assign)
    {
      __do_visit<__visit_with_index>(
          [this](auto&& __rhs_mem, auto __rhs_index) mutable -> __detail::__variant::__variant_idx_cookie {
            if constexpr (__rhs_index != variant_npos)
            {
              if (this->_M_index == __rhs_index)
                __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
              else
                __variant_cast<_Types...>(*this).template emplace<__rhs_index>(std::move(__rhs_mem));
            }
            else
              this->_M_reset();
            return {};
          },
          __variant_cast<_Types...>(__rhs));
      return *this;
    }
    _Move_assign_base(const _Move_assign_base&) = default;
    _Move_assign_base(_Move_assign_base&&) = default;
    _Move_assign_base& operator=(const _Move_assign_base&) = default;
  };
  template <typename... _Types>
  struct _Move_assign_base<true, _Types...> : _Copy_assign_alias<_Types...>
  {
    using _Base = _Copy_assign_alias<_Types...>;
    using _Base::_Base;
  };
  template <typename... _Types>
  using _Move_assign_alias = _Move_assign_base<_Traits<_Types...>::_S_trivial_move_assign, _Types...>;
  template <typename... _Types>
  struct _Variant_base : _Move_assign_alias<_Types...>
  {
    using _Base = _Move_assign_alias<_Types...>;
    constexpr _Variant_base() noexcept(_Traits<_Types...>::_S_nothrow_default_ctor) : _Variant_base(in_place_index<0>)
    {
    }
    template <size_t _Np, typename... _Args>
    constexpr explicit _Variant_base(in_place_index_t<_Np> __i, _Args&&... __args)
        : _Base(__i, std::forward<_Args>(__args)...)
    {
    }
    _Variant_base(const _Variant_base&) = default;
    _Variant_base(_Variant_base&&) = default;
    _Variant_base& operator=(const _Variant_base&) = default;
    _Variant_base& operator=(_Variant_base&&) = default;
  };
  template <typename _Tp, typename _Tuple>
  struct __tuple_count;
  template <typename _Tp, typename _Tuple>
  inline constexpr size_t __tuple_count_v = __tuple_count<_Tp, _Tuple>::value;
  template <typename _Tp, typename... _Types>
  struct __tuple_count<_Tp, tuple<_Types...>> : integral_constant<size_t, 0>
  {
  };
  template <typename _Tp, typename _First, typename... _Rest>
  struct __tuple_count<_Tp, tuple<_First, _Rest...>>
      : integral_constant<size_t, __tuple_count_v<_Tp, tuple<_Rest...>> + is_same_v<_Tp, _First>>
  {
  };
  template <typename _Tp, typename... _Types>
  inline constexpr bool __exactly_once = __tuple_count_v<_Tp, tuple<_Types...>> == 1;
  template <typename... _Types>
  struct __overload_set
  {
    static void _S_fun();
  };
  template <typename _First, typename... _Rest>
  struct __overload_set<_First, _Rest...> : __overload_set<_Rest...>
  {
    using __overload_set<_Rest...>::_S_fun;
    static integral_constant<size_t, sizeof...(_Rest)> _S_fun(_First);
  };
  template <typename... _Rest>
  struct __overload_set<void, _Rest...> : __overload_set<_Rest...>
  {
    using __overload_set<_Rest...>::_S_fun;
  };
  template <typename _Tp, typename _Variant, typename = void>
  struct __accepted_index
  {
    static constexpr size_t value = variant_npos;
  };
  template <typename _Tp, typename... _Types>
  struct __accepted_index<_Tp,
                          variant<_Types...>,
                          void_t<decltype(__overload_set<_Types...>::_S_fun(std::declval<_Tp>()))>>
  {
    static constexpr size_t value =
        sizeof...(_Types) - 1 - decltype(__overload_set<_Types...>::_S_fun(std::declval<_Tp>()))::value;
  };
  template <typename _Variant>
  void* __get_storage(_Variant&& __v)
  {
    return __v._M_storage();
  }
  template <typename _Maybe_variant_cookie, typename _Variant>
  struct _Extra_visit_slot_needed
  {
    template <typename>
    struct _Variant_never_valueless;
    template <typename... _Types>
    struct _Variant_never_valueless<variant<_Types...>> : bool_constant<__never_valueless<_Types...>()>
    {
    };
    static constexpr bool value =
        (is_same_v<_Maybe_variant_cookie, __variant_cookie> ||
         is_same_v<_Maybe_variant_cookie,
                   __variant_idx_cookie>)&&!_Variant_never_valueless<__remove_cvref_t<_Variant>>::value;
  };
  template <typename _Tp, size_t... _Dimensions>
  struct _Multi_array;
  template <typename _Tp>
  struct _Multi_array<_Tp>
  {
    constexpr const _Tp& _M_access() const { return _M_data; }
    _Tp _M_data;
  };
  template <typename _Ret, typename _Visitor, typename... _Variants, size_t __first, size_t... __rest>
  struct _Multi_array<_Ret (*)(_Visitor, _Variants...), __first, __rest...>
  {
    static constexpr size_t __index = sizeof...(_Variants) - sizeof...(__rest) - 1;
    using _Variant = typename _Nth_type<__index, _Variants...>::type;
    static constexpr int __do_cookie = _Extra_visit_slot_needed<_Ret, _Variant>::value ? 1 : 0;
    using _Tp = _Ret (*)(_Visitor, _Variants...);
    template <typename... _Args>
    constexpr const _Tp& _M_access(size_t __first_index, _Args... __rest_indices) const
    {
      return _M_arr[__first_index + __do_cookie]._M_access(__rest_indices...);
    }
    _Multi_array<_Tp, __rest...> _M_arr[__first + __do_cookie];
  };
  template <bool __same_return_types, typename _Array_type, typename _Variant_tuple, typename _Index_seq>
  struct __gen_vtable_impl;
  template <bool __same_return_types,
            typename _Result_type,
            typename _Visitor,
            size_t... __dimensions,
            typename... _Variants,
            size_t... __indices>
  struct __gen_vtable_impl<__same_return_types,
                           _Multi_array<_Result_type (*)(_Visitor, _Variants...), __dimensions...>,
                           tuple<_Variants...>,
                           std::index_sequence<__indices...>>
  {
    using _Next = remove_reference_t<typename _Nth_type<sizeof...(__indices), _Variants...>::type>;
    using _Array_type = _Multi_array<_Result_type (*)(_Visitor, _Variants...), __dimensions...>;
    static constexpr _Array_type _S_apply()
    {
      _Array_type __vtable{};
      _S_apply_all_alts(__vtable, make_index_sequence<variant_size_v<_Next>>());
      return __vtable;
    }
    template <size_t... __var_indices>
    static constexpr void _S_apply_all_alts(_Array_type& __vtable, std::index_sequence<__var_indices...>)
    {
      if constexpr (_Extra_visit_slot_needed<_Result_type, _Next>::value)
        (_S_apply_single_alt<true, __var_indices>(__vtable._M_arr[__var_indices + 1], &(__vtable._M_arr[0])), ...);
      else
        (_S_apply_single_alt<false, __var_indices>(__vtable._M_arr[__var_indices]), ...);
    }
    template <bool __do_cookie, size_t __index, typename _Tp>
    static constexpr void _S_apply_single_alt(_Tp& __element, _Tp* __cookie_element = nullptr)
    {
      using _Alternative = variant_alternative_t<__index, _Next>;
      if constexpr (__do_cookie)
      {
        __element = __gen_vtable_impl<__same_return_types,
                                      _Tp,
                                      tuple<_Variants...>,
                                      std::index_sequence<__indices..., __index>>::_S_apply();
        *__cookie_element = __gen_vtable_impl<__same_return_types,
                                              _Tp,
                                              tuple<_Variants...>,
                                              std::index_sequence<__indices..., variant_npos>>::_S_apply();
      }
      else
      {
        __element = __gen_vtable_impl<__same_return_types,
                                      remove_reference_t<decltype(__element)>,
                                      tuple<_Variants...>,
                                      std::index_sequence<__indices..., __index>>::_S_apply();
      }
    }
  };
  template <bool __same_return_types,
            typename _Result_type,
            typename _Visitor,
            typename... _Variants,
            size_t... __indices>
  struct __gen_vtable_impl<__same_return_types,
                           _Multi_array<_Result_type (*)(_Visitor, _Variants...)>,
                           tuple<_Variants...>,
                           std::index_sequence<__indices...>>
  {
    using _Array_type = _Multi_array<_Result_type (*)(_Visitor, _Variants...)>;
    template <size_t __index, typename _Variant>
    static constexpr decltype(auto) __element_by_index_or_cookie(_Variant&& __var) noexcept
    {
      if constexpr (__index != variant_npos)
        return __variant::__get<__index>(std::forward<_Variant>(__var));
      else
        return __variant_cookie{};
    }
    static constexpr decltype(auto) __visit_invoke_impl(_Visitor&& __visitor, _Variants... __vars)
    {
      if constexpr (is_same_v<_Result_type, __variant_idx_cookie>)
        return std::__invoke(std::forward<_Visitor>(__visitor),
                             __element_by_index_or_cookie<__indices>(std::forward<_Variants>(__vars))...,
                             integral_constant<size_t, __indices>()...);
      else if constexpr (!__same_return_types && std::is_void_v<_Result_type>)
        return (void)std::__invoke(std::forward<_Visitor>(__visitor),
                                   __element_by_index_or_cookie<__indices>(std::forward<_Variants>(__vars))...);
      else
        return std::__invoke(std::forward<_Visitor>(__visitor),
                             __element_by_index_or_cookie<__indices>(std::forward<_Variants>(__vars))...);
    }
    static constexpr decltype(auto) __do_visit_invoke(_Visitor&& __visitor, _Variants... __vars)
    {
      return __visit_invoke_impl(std::forward<_Visitor>(__visitor), std::forward<_Variants>(__vars)...);
    }
    static constexpr _Result_type __do_visit_invoke_r(_Visitor&& __visitor, _Variants... __vars)
    {
      return __visit_invoke_impl(std::forward<_Visitor>(__visitor), std::forward<_Variants>(__vars)...);
    }
    static constexpr decltype(auto) __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
    {
      if constexpr (__same_return_types)
        return __do_visit_invoke(std::forward<_Visitor>(__visitor), std::forward<_Variants>(__vars)...);
      else
        return __do_visit_invoke_r(std::forward<_Visitor>(__visitor), std::forward<_Variants>(__vars)...);
    }
    static constexpr auto _S_apply() { return _Array_type{&__visit_invoke}; }
  };
  template <bool __same_return_types, typename _Result_type, typename _Visitor, typename... _Variants>
  struct __gen_vtable
  {
    using _Array_type =
        _Multi_array<_Result_type (*)(_Visitor, _Variants...), variant_size_v<remove_reference_t<_Variants>>...>;
    static constexpr _Array_type _S_vtable =
        __gen_vtable_impl<__same_return_types, _Array_type, tuple<_Variants...>, std::index_sequence<>>::_S_apply();
  };
  template <size_t _Np, typename _Tp>
  struct _Base_dedup : public _Tp
  {
  };
  template <typename _Variant, typename __indices>
  struct _Variant_hash_base;
  template <typename... _Types, size_t... __indices>
  struct _Variant_hash_base<variant<_Types...>, std::index_sequence<__indices...>>
      : _Base_dedup<__indices, __poison_hash<remove_const_t<_Types>>>...
  {
  };
  }  // namespace __variant
  }  // namespace __detail
  template <size_t _Np, typename _Variant, typename... _Args>
  void __variant_construct_by_index(_Variant & __v, _Args && ... __args)
  {
    __v._M_index = _Np;
    auto&& __storage = __detail::__variant::__get<_Np>(__v);
    ::new ((void*)std::addressof(__storage)) remove_reference_t<decltype(__storage)>(std::forward<_Args>(__args)...);
  }
  template <typename _Tp, typename... _Types>
  constexpr bool holds_alternative(const variant<_Types...>& __v) noexcept
  {
    static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
                  "T should occur for exactly once in alternatives");
    return __v.index() == __detail::__variant::__index_of_v<_Tp, _Types...>;
  }
  template <typename _Tp, typename... _Types>
  constexpr _Tp& get(variant<_Types...> & __v)
  {
    static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
                  "T should occur for exactly once in alternatives");
    static_assert(!is_void_v<_Tp>, "_Tp should not be void");
    return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
  }
  template <typename _Tp, typename... _Types>
  constexpr _Tp&& get(variant<_Types...> && __v)
  {
    static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
                  "T should occur for exactly once in alternatives");
    static_assert(!is_void_v<_Tp>, "_Tp should not be void");
    return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(std::move(__v));
  }
  template <typename _Tp, typename... _Types>
  constexpr const _Tp& get(const variant<_Types...>& __v)
  {
    static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
                  "T should occur for exactly once in alternatives");
    static_assert(!is_void_v<_Tp>, "_Tp should not be void");
    return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
  }
  template <typename _Tp, typename... _Types>
  constexpr const _Tp&& get(const variant<_Types...>&& __v)
  {
    static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
                  "T should occur for exactly once in alternatives");
    static_assert(!is_void_v<_Tp>, "_Tp should not be void");
    return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(std::move(__v));
  }
  template <size_t _Np, typename... _Types>
  constexpr add_pointer_t<variant_alternative_t<_Np, variant<_Types...>>> get_if(variant<_Types...> * __ptr) noexcept
  {
    using _Alternative_type = variant_alternative_t<_Np, variant<_Types...>>;
    static_assert(_Np < sizeof...(_Types), "The index should be in [0, number of alternatives)");
    static_assert(!is_void_v<_Alternative_type>, "_Tp should not be void");
    if (__ptr && __ptr->index() == _Np)
      return std::addressof(__detail::__variant::__get<_Np>(*__ptr));
    return nullptr;
  }
  template <size_t _Np, typename... _Types>
  constexpr add_pointer_t<const variant_alternative_t<_Np, variant<_Types...>>> get_if(
      const variant<_Types...>* __ptr) noexcept
  {
    using _Alternative_type = variant_alternative_t<_Np, variant<_Types...>>;
    static_assert(_Np < sizeof...(_Types), "The index should be in [0, number of alternatives)");
    static_assert(!is_void_v<_Alternative_type>, "_Tp should not be void");
    if (__ptr && __ptr->index() == _Np)
      return std::addressof(__detail::__variant::__get<_Np>(*__ptr));
    return nullptr;
  }
  template <typename _Tp, typename... _Types>
  constexpr add_pointer_t<_Tp> get_if(variant<_Types...> * __ptr) noexcept
  {
    static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
                  "T should occur for exactly once in alternatives");
    static_assert(!is_void_v<_Tp>, "_Tp should not be void");
    return std::get_if<__detail::__variant::__index_of_v<_Tp, _Types...>>(__ptr);
  }
  template <typename _Tp, typename... _Types>
  constexpr add_pointer_t<const _Tp> get_if(const variant<_Types...>* __ptr) noexcept
  {
    static_assert(__detail::__variant::__exactly_once<_Tp, _Types...>,
                  "T should occur for exactly once in alternatives");
    static_assert(!is_void_v<_Tp>, "_Tp should not be void");
    return std::get_if<__detail::__variant::__index_of_v<_Tp, _Types...>>(__ptr);
  }
  struct monostate
  {
  };
  template <typename... _Types>
  constexpr bool operator<(const variant<_Types...>& __lhs, const variant<_Types...>& __rhs)
  {
    bool __ret = true;
    __do_visit<__detail::__variant::__visit_with_index>(
        [&__ret, &__lhs](auto&& __rhs_mem, auto __rhs_index) mutable -> __detail::__variant::__variant_idx_cookie {
          if constexpr (__rhs_index != variant_npos)
          {
            if (__lhs.index() == __rhs_index)
            {
              auto& __this_mem = std::get<__rhs_index>(__lhs);
              __ret = __this_mem < __rhs_mem;
            }
            else
              __ret = (__lhs.index() + 1) < (__rhs_index + 1);
          }
          else
            __ret = (__lhs.index() + 1) < (__rhs_index + 1);
          return {};
        },
        __rhs);
    return __ret;
  }
  constexpr bool operator<(monostate, monostate) noexcept { return 0 < 0; }
  template <typename... _Types>
  constexpr bool operator<=(const variant<_Types...>& __lhs, const variant<_Types...>& __rhs)
  {
    bool __ret = true;
    __do_visit<__detail::__variant::__visit_with_index>(
        [&__ret, &__lhs](auto&& __rhs_mem, auto __rhs_index) mutable -> __detail::__variant::__variant_idx_cookie {
          if constexpr (__rhs_index != variant_npos)
          {
            if (__lhs.index() == __rhs_index)
            {
              auto& __this_mem = std::get<__rhs_index>(__lhs);
              __ret = __this_mem <= __rhs_mem;
            }
            else
              __ret = (__lhs.index() + 1) <= (__rhs_index + 1);
          }
          else
            __ret = (__lhs.index() + 1) <= (__rhs_index + 1);
          return {};
        },
        __rhs);
    return __ret;
  }
  constexpr bool operator<=(monostate, monostate) noexcept { return 0 <= 0; }
  template <typename... _Types>
  constexpr bool operator==(const variant<_Types...>& __lhs, const variant<_Types...>& __rhs)
  {
    bool __ret = true;
    __do_visit<__detail::__variant::__visit_with_index>(
        [&__ret, &__lhs](auto&& __rhs_mem, auto __rhs_index) mutable -> __detail::__variant::__variant_idx_cookie {
          if constexpr (__rhs_index != variant_npos)
          {
            if (__lhs.index() == __rhs_index)
            {
              auto& __this_mem = std::get<__rhs_index>(__lhs);
              __ret = __this_mem == __rhs_mem;
            }
            else
              __ret = (__lhs.index() + 1) == (__rhs_index + 1);
          }
          else
            __ret = (__lhs.index() + 1) == (__rhs_index + 1);
          return {};
        },
        __rhs);
    return __ret;
  }
  constexpr bool operator==(monostate, monostate) noexcept { return 0 == 0; }
  template <typename... _Types>
  constexpr bool operator!=(const variant<_Types...>& __lhs, const variant<_Types...>& __rhs)
  {
    bool __ret = true;
    __do_visit<__detail::__variant::__visit_with_index>(
        [&__ret, &__lhs](auto&& __rhs_mem, auto __rhs_index) mutable -> __detail::__variant::__variant_idx_cookie {
          if constexpr (__rhs_index != variant_npos)
          {
            if (__lhs.index() == __rhs_index)
            {
              auto& __this_mem = std::get<__rhs_index>(__lhs);
              __ret = __this_mem != __rhs_mem;
            }
            else
              __ret = (__lhs.index() + 1) != (__rhs_index + 1);
          }
          else
            __ret = (__lhs.index() + 1) != (__rhs_index + 1);
          return {};
        },
        __rhs);
    return __ret;
  }
  constexpr bool operator!=(monostate, monostate) noexcept { return 0 != 0; }
  template <typename... _Types>
  constexpr bool operator>=(const variant<_Types...>& __lhs, const variant<_Types...>& __rhs)
  {
    bool __ret = true;
    __do_visit<__detail::__variant::__visit_with_index>(
        [&__ret, &__lhs](auto&& __rhs_mem, auto __rhs_index) mutable -> __detail::__variant::__variant_idx_cookie {
          if constexpr (__rhs_index != variant_npos)
          {
            if (__lhs.index() == __rhs_index)
            {
              auto& __this_mem = std::get<__rhs_index>(__lhs);
              __ret = __this_mem >= __rhs_mem;
            }
            else
              __ret = (__lhs.index() + 1) >= (__rhs_index + 1);
          }
          else
            __ret = (__lhs.index() + 1) >= (__rhs_index + 1);
          return {};
        },
        __rhs);
    return __ret;
  }
  constexpr bool operator>=(monostate, monostate) noexcept { return 0 >= 0; }
  template <typename... _Types>
  constexpr bool operator>(const variant<_Types...>& __lhs, const variant<_Types...>& __rhs)
  {
    bool __ret = true;
    __do_visit<__detail::__variant::__visit_with_index>(
        [&__ret, &__lhs](auto&& __rhs_mem, auto __rhs_index) mutable -> __detail::__variant::__variant_idx_cookie {
          if constexpr (__rhs_index != variant_npos)
          {
            if (__lhs.index() == __rhs_index)
            {
              auto& __this_mem = std::get<__rhs_index>(__lhs);
              __ret = __this_mem > __rhs_mem;
            }
            else
              __ret = (__lhs.index() + 1) > (__rhs_index + 1);
          }
          else
            __ret = (__lhs.index() + 1) > (__rhs_index + 1);
          return {};
        },
        __rhs);
    return __ret;
  }
  constexpr bool operator>(monostate, monostate) noexcept { return 0 > 0; }
  template <typename _Visitor, typename... _Variants>
  constexpr decltype(auto) visit(_Visitor&&, _Variants && ...);
  template <typename... _Types>
  inline enable_if_t<(is_move_constructible_v<_Types> && ...) && (is_swappable_v<_Types> && ...)> swap(
      variant<_Types...> & __lhs, variant<_Types...> & __rhs) noexcept(noexcept(__lhs.swap(__rhs)))
  {
    __lhs.swap(__rhs);
  }
  template <typename... _Types>
  enable_if_t<!((is_move_constructible_v<_Types> && ...) && (is_swappable_v<_Types> && ...))> swap(
      variant<_Types...>&, variant<_Types...>&) = delete;
  class bad_variant_access : public exception
  {
  public:
    bad_variant_access() noexcept : _M_reason("Unknown reason") {}
    const char* what() const noexcept override { return _M_reason; }

  private:
    bad_variant_access(const char* __reason) : _M_reason(__reason) {}
    const char* _M_reason;
    friend void __throw_bad_variant_access(const char* __what);
  };
  inline void __throw_bad_variant_access(const char* __what) { (throw(bad_variant_access(__what))); }
  template <typename... _Types>
  class variant : private __detail::__variant::_Variant_base<_Types...>,
                  private _Enable_default_constructor<__detail::__variant::_Traits<_Types...>::_S_default_ctor,
                                                      variant<_Types...>>,
                  private _Enable_copy_move<__detail::__variant::_Traits<_Types...>::_S_copy_ctor,
                                            __detail::__variant::_Traits<_Types...>::_S_copy_assign,
                                            __detail::__variant::_Traits<_Types...>::_S_move_ctor,
                                            __detail::__variant::_Traits<_Types...>::_S_move_assign,
                                            variant<_Types...>>
  {
  private:
    template <typename... _UTypes, typename _Tp>
    friend decltype(auto) __variant_cast(_Tp&&);
    template <size_t _Np, typename _Variant, typename... _Args>
    friend void __variant_construct_by_index(_Variant& __v, _Args&&... __args);
    static_assert(sizeof...(_Types) > 0, "variant must have at least one alternative");
    static_assert(!(std::is_reference_v<_Types> || ...), "variant must have no reference alternative");
    static_assert(!(std::is_void_v<_Types> || ...), "variant must have no void alternative");
    using _Base = __detail::__variant::_Variant_base<_Types...>;
    using _Default_ctor_enabler =
        _Enable_default_constructor<__detail::__variant::_Traits<_Types...>::_S_default_ctor, variant<_Types...>>;
    template <typename _Tp>
    static constexpr bool __not_self = !is_same_v<__remove_cvref_t<_Tp>, variant>;
    template <typename _Tp>
    static constexpr bool __exactly_once = __detail::__variant::__exactly_once<_Tp, _Types...>;
    template <typename _Tp>
    static constexpr size_t __accepted_index = __detail::__variant::__accepted_index<_Tp&&, variant>::value;
    template <size_t _Np, typename = enable_if_t<(_Np < sizeof...(_Types))>>
    using __to_type = variant_alternative_t<_Np, variant>;
    template <typename _Tp, typename = enable_if_t<__not_self<_Tp>>>
    using __accepted_type = __to_type<__accepted_index<_Tp>>;
    template <typename _Tp>
    static constexpr size_t __index_of = __detail::__variant::__index_of_v<_Tp, _Types...>;
    using _Traits = __detail::__variant::_Traits<_Types...>;
    template <typename _Tp>
    struct __is_in_place_tag : false_type
    {
    };
    template <typename _Tp>
    struct __is_in_place_tag<in_place_type_t<_Tp>> : true_type
    {
    };
    template <size_t _Np>
    struct __is_in_place_tag<in_place_index_t<_Np>> : true_type
    {
    };
    template <typename _Tp>
    static constexpr bool __not_in_place_tag = !__is_in_place_tag<__remove_cvref_t<_Tp>>::value;

  public:
    variant() = default;
    variant(const variant& __rhs) = default;
    variant(variant&&) = default;
    variant& operator=(const variant&) = default;
    variant& operator=(variant&&) = default;
    ~variant() = default;
    template <typename _Tp,
              typename = enable_if_t<sizeof...(_Types) != 0>,
              typename = enable_if_t<__not_in_place_tag<_Tp>>,
              typename _Tj = __accepted_type<_Tp&&>,
              typename = enable_if_t<__exactly_once<_Tj> && is_constructible_v<_Tj, _Tp>>>
    constexpr variant(_Tp&& __t) noexcept(is_nothrow_constructible_v<_Tj, _Tp>)
        : variant(in_place_index<__accepted_index<_Tp&&>>, std::forward<_Tp>(__t))
    {
    }
    template <typename _Tp,
              typename... _Args,
              typename = enable_if_t<__exactly_once<_Tp> && is_constructible_v<_Tp, _Args...>>>
    constexpr explicit variant(in_place_type_t<_Tp>, _Args&&... __args)
        : variant(in_place_index<__index_of<_Tp>>, std::forward<_Args>(__args)...)
    {
    }
    template <typename _Tp,
              typename _Up,
              typename... _Args,
              typename = enable_if_t<__exactly_once<_Tp> && is_constructible_v<_Tp, initializer_list<_Up>&, _Args...>>>
    constexpr explicit variant(in_place_type_t<_Tp>, initializer_list<_Up> __il, _Args&&... __args)
        : variant(in_place_index<__index_of<_Tp>>, __il, std::forward<_Args>(__args)...)
    {
    }
    template <size_t _Np,
              typename... _Args,
              typename _Tp = __to_type<_Np>,
              typename = enable_if_t<is_constructible_v<_Tp, _Args...>>>
    constexpr explicit variant(in_place_index_t<_Np>, _Args&&... __args)
        : _Base(in_place_index<_Np>, std::forward<_Args>(__args)...),
          _Default_ctor_enabler(_Enable_default_constructor_tag{})
    {
    }
    template <size_t _Np,
              typename _Up,
              typename... _Args,
              typename _Tp = __to_type<_Np>,
              typename = enable_if_t<is_constructible_v<_Tp, initializer_list<_Up>&, _Args...>>>
    constexpr explicit variant(in_place_index_t<_Np>, initializer_list<_Up> __il, _Args&&... __args)
        : _Base(in_place_index<_Np>, __il, std::forward<_Args>(__args)...),
          _Default_ctor_enabler(_Enable_default_constructor_tag{})
    {
    }
    template <typename _Tp>
    enable_if_t<__exactly_once<__accepted_type<_Tp&&>> && is_constructible_v<__accepted_type<_Tp&&>, _Tp> &&
                    is_assignable_v<__accepted_type<_Tp&&>&, _Tp>,
                variant&>
    operator=(_Tp&& __rhs) noexcept(
        is_nothrow_assignable_v<__accepted_type<_Tp&&>&, _Tp>&& is_nothrow_constructible_v<__accepted_type<_Tp&&>, _Tp>)
    {
      constexpr auto __index = __accepted_index<_Tp&&>;
      if (index() == __index)
        std::get<__index>(*this) = std::forward<_Tp>(__rhs);
      else
      {
        using _Tj = __accepted_type<_Tp&&>;
        if constexpr (is_nothrow_constructible_v<_Tj, _Tp> || !is_nothrow_move_constructible_v<_Tj>)
          this->emplace<__index>(std::forward<_Tp>(__rhs));
        else
          operator=(variant(std::forward<_Tp>(__rhs)));
      }
      return *this;
    }
    template <typename _Tp, typename... _Args>
    enable_if_t<is_constructible_v<_Tp, _Args...> && __exactly_once<_Tp>, _Tp&> emplace(_Args&&... __args)
    {
      constexpr size_t __index = __index_of<_Tp>;
      return this->emplace<__index>(std::forward<_Args>(__args)...);
    }
    template <typename _Tp, typename _Up, typename... _Args>
    enable_if_t<is_constructible_v<_Tp, initializer_list<_Up>&, _Args...> && __exactly_once<_Tp>, _Tp&> emplace(
        initializer_list<_Up> __il,
        _Args&&... __args)
    {
      constexpr size_t __index = __index_of<_Tp>;
      return this->emplace<__index>(__il, std::forward<_Args>(__args)...);
    }
    template <size_t _Np, typename... _Args>
    enable_if_t<is_constructible_v<variant_alternative_t<_Np, variant>, _Args...>, variant_alternative_t<_Np, variant>&>
    emplace(_Args&&... __args)
    {
      static_assert(_Np < sizeof...(_Types), "The index should be in [0, number of alternatives)");
      using type = variant_alternative_t<_Np, variant>;
      if constexpr (is_nothrow_constructible_v<type, _Args...>)
      {
        this->_M_reset();
        __variant_construct_by_index<_Np>(*this, std::forward<_Args>(__args)...);
      }
      else if constexpr (is_scalar_v<type>)
      {
        const type __tmp(std::forward<_Args>(__args)...);
        this->_M_reset();
        __variant_construct_by_index<_Np>(*this, __tmp);
      }
      else if constexpr (__detail::__variant::_Never_valueless_alt<type>() && _Traits::_S_move_assign)
      {
        variant __tmp(in_place_index<_Np>, std::forward<_Args>(__args)...);
        *this = std::move(__tmp);
      }
      else
      {
        this->_M_reset();
        try
        {
          __variant_construct_by_index<_Np>(*this, std::forward<_Args>(__args)...);
        }
        catch (...)
        {
          this->_M_index = variant_npos;
          throw;
        }
      }
      return std::get<_Np>(*this);
    }
    template <size_t _Np, typename _Up, typename... _Args>
    enable_if_t<is_constructible_v<variant_alternative_t<_Np, variant>, initializer_list<_Up>&, _Args...>,
                variant_alternative_t<_Np, variant>&>
    emplace(initializer_list<_Up> __il, _Args&&... __args)
    {
      static_assert(_Np < sizeof...(_Types), "The index should be in [0, number of alternatives)");
      using type = variant_alternative_t<_Np, variant>;
      if constexpr (is_nothrow_constructible_v<type, initializer_list<_Up>&, _Args...>)
      {
        this->_M_reset();
        __variant_construct_by_index<_Np>(*this, __il, std::forward<_Args>(__args)...);
      }
      else if constexpr (__detail::__variant::_Never_valueless_alt<type>() && _Traits::_S_move_assign)
      {
        variant __tmp(in_place_index<_Np>, __il, std::forward<_Args>(__args)...);
        *this = std::move(__tmp);
      }
      else
      {
        this->_M_reset();
        try
        {
          __variant_construct_by_index<_Np>(*this, __il, std::forward<_Args>(__args)...);
        }
        catch (...)
        {
          this->_M_index = variant_npos;
          throw;
        }
      }
      return std::get<_Np>(*this);
    }
    constexpr bool valueless_by_exception() const noexcept { return !this->_M_valid(); }
    constexpr size_t index() const noexcept
    {
      if (this->_M_index == typename _Base::__index_type(variant_npos))
        return variant_npos;
      return this->_M_index;
    }
    void swap(variant& __rhs) noexcept((__is_nothrow_swappable<_Types>::value && ...) &&
                                       is_nothrow_move_constructible_v<variant>)
    {
      __do_visit<__detail::__variant::__visit_with_index>(
          [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable -> __detail::__variant::__variant_idx_cookie {
            if constexpr (__rhs_index != variant_npos)
            {
              if (this->index() == __rhs_index)
              {
                auto& __this_mem = std::get<__rhs_index>(*this);
                using std::swap;
                swap(__this_mem, __rhs_mem);
              }
              else
              {
                if (this->index() != variant_npos)
                {
                  auto __tmp(std::move(__rhs_mem));
                  __rhs = std::move(*this);
                  this->_M_destructive_move(__rhs_index, std::move(__tmp));
                }
                else
                {
                  this->_M_destructive_move(__rhs_index, std::move(__rhs_mem));
                  __rhs._M_reset();
                }
              }
            }
            else
            {
              if (this->index() != variant_npos)
              {
                __rhs = std::move(*this);
                this->_M_reset();
              }
            }
            return {};
          },
          __rhs);
    }

  private:
    template <size_t _Np, typename _Vp>
    friend constexpr decltype(auto) __detail::__variant::__get(_Vp&& __v) noexcept;
    template <typename _Vp>
    friend void* __detail::__variant::__get_storage(_Vp&& __v);
    template <typename... _Tp>
    friend constexpr bool operator<(const variant<_Tp...>& __lhs, const variant<_Tp...>& __rhs);
    template <typename... _Tp>
    friend constexpr bool operator<=(const variant<_Tp...>& __lhs, const variant<_Tp...>& __rhs);
    template <typename... _Tp>
    friend constexpr bool operator==(const variant<_Tp...>& __lhs, const variant<_Tp...>& __rhs);
    template <typename... _Tp>
    friend constexpr bool operator!=(const variant<_Tp...>& __lhs, const variant<_Tp...>& __rhs);
    template <typename... _Tp>
    friend constexpr bool operator>=(const variant<_Tp...>& __lhs, const variant<_Tp...>& __rhs);
    template <typename... _Tp>
    friend constexpr bool operator>(const variant<_Tp...>& __lhs, const variant<_Tp...>& __rhs);
  };
  template <size_t _Np, typename... _Types>
  constexpr variant_alternative_t<_Np, variant<_Types...>>& get(variant<_Types...> & __v)
  {
    static_assert(_Np < sizeof...(_Types), "The index should be in [0, number of alternatives)");
    if (__v.index() != _Np)
      __throw_bad_variant_access("Unexpected index");
    return __detail::__variant::__get<_Np>(__v);
  }
  template <size_t _Np, typename... _Types>
  constexpr variant_alternative_t<_Np, variant<_Types...>>&& get(variant<_Types...> && __v)
  {
    static_assert(_Np < sizeof...(_Types), "The index should be in [0, number of alternatives)");
    if (__v.index() != _Np)
      __throw_bad_variant_access("Unexpected index");
    return __detail::__variant::__get<_Np>(std::move(__v));
  }
  template <size_t _Np, typename... _Types>
  constexpr const variant_alternative_t<_Np, variant<_Types...>>& get(const variant<_Types...>& __v)
  {
    static_assert(_Np < sizeof...(_Types), "The index should be in [0, number of alternatives)");
    if (__v.index() != _Np)
      __throw_bad_variant_access("Unexpected index");
    return __detail::__variant::__get<_Np>(__v);
  }
  template <size_t _Np, typename... _Types>
  constexpr const variant_alternative_t<_Np, variant<_Types...>>&& get(const variant<_Types...>&& __v)
  {
    static_assert(_Np < sizeof...(_Types), "The index should be in [0, number of alternatives)");
    if (__v.index() != _Np)
      __throw_bad_variant_access("Unexpected index");
    return __detail::__variant::__get<_Np>(std::move(__v));
  }
  template <bool __use_index, bool __same_return_types, typename _Visitor, typename... _Variants>
  constexpr decltype(auto) __do_visit(_Visitor && __visitor, _Variants && ... __variants)
  {
    using _Deduced_type = std::invoke_result<_Visitor, decltype(std::get<0>(std::declval<_Variants>()))...>;
    using _Result_type =
        typename std::conditional_t<__use_index, __detail::__variant::__variant_idx_cookie, _Deduced_type>::type;
    constexpr auto& __vtable =
        __detail::__variant::__gen_vtable<__same_return_types, _Result_type, _Visitor&&, _Variants&&...>::_S_vtable;
    auto __func_ptr = __vtable._M_access(__variants.index()...);
    return (*__func_ptr)(std::forward<_Visitor>(__visitor), std::forward<_Variants>(__variants)...);
  }
  template <typename _Visitor, typename... _Variants>
  constexpr decltype(auto) visit(_Visitor && __visitor, _Variants && ... __variants)
  {
    if ((__variants.valueless_by_exception() || ...))
      __throw_bad_variant_access("Unexpected index");
    return __do_visit(std::forward<_Visitor>(__visitor), std::forward<_Variants>(__variants)...);
  }
  template <bool, typename... _Types>
  struct __variant_hash_call_base_impl
  {
    size_t operator()(const variant<_Types...>& __t) const
        noexcept((is_nothrow_invocable_v<hash<decay_t<_Types>>, _Types> && ...))
    {
      size_t __ret;
      __do_visit(
          [&__t, &__ret](auto&& __t_mem) mutable -> __detail::__variant::__variant_cookie {
            using _Type = __remove_cvref_t<decltype(__t_mem)>;
            if constexpr (!is_same_v<_Type, __detail::__variant::__variant_cookie>)
              __ret = std::hash<size_t>{}(__t.index()) + std::hash<_Type>{}(__t_mem);
            else
              __ret = std::hash<size_t>{}(__t.index());
            return {};
          },
          __t);
      return __ret;
    }
  };
  template <typename... _Types>
  struct __variant_hash_call_base_impl<false, _Types...>
  {
  };
  template <typename... _Types>
  using __variant_hash_call_base =
      __variant_hash_call_base_impl<(__poison_hash<remove_const_t<_Types>>::__enable_hash_call && ...), _Types...>;
  template <typename... _Types>
  struct hash<variant<_Types...>>
      : private __detail::__variant::_Variant_hash_base<variant<_Types...>, std::index_sequence_for<_Types...>>,
        public __variant_hash_call_base<_Types...>
  {
    using result_type [[__deprecated__]] = size_t;
    using argument_type [[__deprecated__]] = variant<_Types...>;
  };
  template <>
  struct hash<monostate>
  {
    using result_type [[__deprecated__]] = size_t;
    using argument_type [[__deprecated__]] = monostate;
    size_t operator()(const monostate& __t) const noexcept
    {
      constexpr size_t __magic_monostate_hash = -7777;
      return __magic_monostate_hash;
    }
  };
  template <typename... _Types>
  struct __is_fast_hash<hash<variant<_Types...>>> : bool_constant<(__is_fast_hash<_Types>::value && ...)>
  {
  };
}  // namespace )
namespace gsl
{
struct fail_fast : public std::logic_error
{
  explicit fail_fast(char const* const message) : std::logic_error(message) {}
};
namespace details
{
[[noreturn]] inline void terminate() noexcept
{
  std::terminate();
}
template <typename Exception>
[[noreturn]] void throw_exception(Exception&&) noexcept
{
  gsl::details::terminate();
}
}  // namespace details
}  // namespace gsl
namespace gsl
{
using std::byte;
using std::to_integer;
template <bool E, typename T>
constexpr byte to_byte_impl(T t) noexcept
{
  static_assert(E,
                "gsl::to_byte(t) must be provided an unsigned char, otherwise data loss may occur. "
                "If you are calling to_byte with an integer contant use: gsl::to_byte<t>() version.");
  return static_cast<byte>(t);
}
template <>
constexpr byte to_byte_impl<true, unsigned char>(unsigned char t) noexcept
{
  return byte(t);
}
template <typename T>
constexpr byte to_byte(T t) noexcept
{
  return to_byte_impl<std::is_same<T, unsigned char>::value, T>(t);
}
template <int I>
constexpr byte to_byte() noexcept
{
  static_assert(I >= 0 && I <= 255, "gsl::byte only has 8 bits of storage, values must be in range 0-255");
  return static_cast<byte>(I);
}
}  // namespace gsl
namespace gsl
{
using index = std::ptrdiff_t;
template <class F>
class final_action
{
public:
  explicit final_action(F f) noexcept : f_(std::move(f)) {}
  final_action(final_action&& other) noexcept : f_(std::move(other.f_)), invoke_(other.invoke_)
  {
    other.invoke_ = false;
  }
  final_action(const final_action&) = delete;
  final_action& operator=(const final_action&) = delete;
  final_action& operator=(final_action&&) = delete;
  ~final_action() noexcept
  {
    if (invoke_)
      f_();
  }

private:
  F f_;
  bool invoke_{true};
};
template <class F>
final_action<F> finally(const F& f) noexcept
{
  return final_action<F>(f);
}
template <class F>
final_action<F> finally(F&& f) noexcept
{
  return final_action<F>(std::forward<F>(f));
}
template <class T, class U>
constexpr T narrow_cast(U&& u) noexcept
{
  return static_cast<T>(std::forward<U>(u));
}
struct narrowing_error : public std::exception
{
};
namespace details
{
template <class T, class U>
struct is_same_signedness : public std::integral_constant<bool, std::is_signed<T>::value == std::is_signed<U>::value>
{
};
}  // namespace details
template <class T, class U>
T narrow(U u) noexcept(false)
{
  T t = narrow_cast<T>(u);
  if (static_cast<U>(t) != u)
    gsl::details::throw_exception(narrowing_error());
  if (!details::is_same_signedness<T, U>::value && ((t < T{}) != (u < U{})))
    gsl::details::throw_exception(narrowing_error());
  return t;
}
template <class T, std::size_t N>
constexpr T& at(T (&arr)[N], const index i)
{
  (__builtin_expect(!!(i >= 0 && i < narrow_cast<index>(N)), 1) ? static_cast<void>(0) : gsl::details::terminate());
  return arr[narrow_cast<std::size_t>(i)];
}
template <class Cont>
constexpr auto at(Cont& cont, const index i) -> decltype(cont[cont.size()])
{
  (__builtin_expect(!!(i >= 0 && i < narrow_cast<index>(cont.size())), 1) ? static_cast<void>(0)
                                                                          : gsl::details::terminate());
  using size_type = decltype(cont.size());
  return cont[narrow_cast<size_type>(i)];
}
template <class T>
constexpr T at(const std::initializer_list<T> cont, const index i)
{
  (__builtin_expect(!!(i >= 0 && i < narrow_cast<index>(cont.size())), 1) ? static_cast<void>(0)
                                                                          : gsl::details::terminate());
  return *(cont.begin() + i);
}
}  // namespace gsl
namespace __pstl
{
namespace execution
{
inline namespace v1
{
class sequenced_policy
{
public:
  static constexpr std::false_type __allow_unsequenced() { return std::false_type{}; }
  static constexpr std::false_type __allow_vector() { return std::false_type{}; }
  static constexpr std::false_type __allow_parallel() { return std::false_type{}; }
};
class parallel_policy
{
public:
  static constexpr std::false_type __allow_unsequenced() { return std::false_type{}; }
  static constexpr std::false_type __allow_vector() { return std::false_type{}; }
  static constexpr std::true_type __allow_parallel() { return std::true_type{}; }
};
class parallel_unsequenced_policy
{
public:
  static constexpr std::true_type __allow_unsequenced() { return std::true_type{}; }
  static constexpr std::true_type __allow_vector() { return std::true_type{}; }
  static constexpr std::true_type __allow_parallel() { return std::true_type{}; }
};
class unsequenced_policy
{
public:
  static constexpr std::true_type __allow_unsequenced() { return std::true_type{}; }
  static constexpr std::true_type __allow_vector() { return std::true_type{}; }
  static constexpr std::false_type __allow_parallel() { return std::false_type{}; }
};
constexpr sequenced_policy seq{};
constexpr parallel_policy par{};
constexpr parallel_unsequenced_policy par_unseq{};
constexpr unsequenced_policy unseq{};
template <class _Tp>
struct is_execution_policy : std::false_type
{
};
template <>
struct is_execution_policy<__pstl::execution::sequenced_policy> : std::true_type
{
};
template <>
struct is_execution_policy<__pstl::execution::parallel_policy> : std::true_type
{
};
template <>
struct is_execution_policy<__pstl::execution::parallel_unsequenced_policy> : std::true_type
{
};
template <>
struct is_execution_policy<__pstl::execution::unsequenced_policy> : std::true_type
{
};
template <class _Tp>
constexpr bool is_execution_policy_v = __pstl::execution::is_execution_policy<_Tp>::value;
}  // namespace v1
}  // namespace execution
namespace __internal
{
template <class _ExecPolicy, class _Tp>
using __enable_if_execution_policy =
    typename std::enable_if<__pstl::execution::is_execution_policy<typename std::decay<_ExecPolicy>::type>::value,
                            _Tp>::type;
}
}  // namespace __pstl
namespace std
{
template <class _ExecutionPolicy, class _ForwardIterator, class _Predicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, bool> any_of(_ExecutionPolicy&& __exec,
                                                                                _ForwardIterator __first,
                                                                                _ForwardIterator __last,
                                                                                _Predicate __pred);
template <class _ExecutionPolicy, class _ForwardIterator, class _Predicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, bool> all_of(_ExecutionPolicy&& __exec,
                                                                                _ForwardIterator __first,
                                                                                _ForwardIterator __last,
                                                                                _Predicate __pred);
template <class _ExecutionPolicy, class _ForwardIterator, class _Predicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, bool> none_of(_ExecutionPolicy&& __exec,
                                                                                 _ForwardIterator __first,
                                                                                 _ForwardIterator __last,
                                                                                 _Predicate __pred);
template <class _ExecutionPolicy, class _ForwardIterator, class _Function>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void> for_each(_ExecutionPolicy&& __exec,
                                                                                  _ForwardIterator __first,
                                                                                  _ForwardIterator __last,
                                                                                  _Function __f);
template <class _ExecutionPolicy, class _ForwardIterator, class _Size, class _Function>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
for_each_n(_ExecutionPolicy&& __exec, _ForwardIterator __first, _Size __n, _Function __f);
template <class _ExecutionPolicy, class _ForwardIterator, class _Predicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator> find_if(_ExecutionPolicy&& __exec,
                                                                                             _ForwardIterator __first,
                                                                                             _ForwardIterator __last,
                                                                                             _Predicate __pred);
template <class _ExecutionPolicy, class _ForwardIterator, class _Predicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
find_if_not(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, _Predicate __pred);
template <class _ExecutionPolicy, class _ForwardIterator, class _Tp>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator> find(_ExecutionPolicy&& __exec,
                                                                                          _ForwardIterator __first,
                                                                                          _ForwardIterator __last,
                                                                                          const _Tp& __value);
template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator1> find_end(
    _ExecutionPolicy&& __exec,
    _ForwardIterator1 __first,
    _ForwardIterator1 __last,
    _ForwardIterator2 __s_first,
    _ForwardIterator2 __s_last,
    _BinaryPredicate __pred);
template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator1> find_end(
    _ExecutionPolicy&& __exec,
    _ForwardIterator1 __first,
    _ForwardIterator1 __last,
    _ForwardIterator2 __s_first,
    _ForwardIterator2 __s_last);
template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator1> find_first_of(
    _ExecutionPolicy&& __exec,
    _ForwardIterator1 __first,
    _ForwardIterator1 __last,
    _ForwardIterator2 __s_first,
    _ForwardIterator2 __s_last,
    _BinaryPredicate __pred);
template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator1> find_first_of(
    _ExecutionPolicy&& __exec,
    _ForwardIterator1 __first,
    _ForwardIterator1 __last,
    _ForwardIterator2 __s_first,
    _ForwardIterator2 __s_last);
template <class _ExecutionPolicy, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
adjacent_find(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last);
template <class _ExecutionPolicy, class _ForwardIterator, class _BinaryPredicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
adjacent_find(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __pred);
template <class _ExecutionPolicy, class _ForwardIterator, class _Tp>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,
                                                 typename iterator_traits<_ForwardIterator>::difference_type>
count(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, const _Tp& __value);
template <class _ExecutionPolicy, class _ForwardIterator, class _Predicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,
                                                 typename iterator_traits<_ForwardIterator>::difference_type>
count_if(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, _Predicate __pred);
template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator1> search(
    _ExecutionPolicy&& __exec,
    _ForwardIterator1 __first,
    _ForwardIterator1 __last,
    _ForwardIterator2 __s_first,
    _ForwardIterator2 __s_last,
    _BinaryPredicate __pred);
template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator1> search(
    _ExecutionPolicy&& __exec,
    _ForwardIterator1 __first,
    _ForwardIterator1 __last,
    _ForwardIterator2 __s_first,
    _ForwardIterator2 __s_last);
template <class _ExecutionPolicy, class _ForwardIterator, class _Size, class _Tp, class _BinaryPredicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator> search_n(_ExecutionPolicy&& __exec,
                                                                                              _ForwardIterator __first,
                                                                                              _ForwardIterator __last,
                                                                                              _Size __count,
                                                                                              const _Tp& __value,
                                                                                              _BinaryPredicate __pred);
template <class _ExecutionPolicy, class _ForwardIterator, class _Size, class _Tp>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator> search_n(_ExecutionPolicy&& __exec,
                                                                                              _ForwardIterator __first,
                                                                                              _ForwardIterator __last,
                                                                                              _Size __count,
                                                                                              const _Tp& __value);
template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator2> copy(_ExecutionPolicy&& __exec,
                                                                                           _ForwardIterator1 __first,
                                                                                           _ForwardIterator1 __last,
                                                                                           _ForwardIterator2 __result);
template <class _ExecutionPolicy, class _ForwardIterator1, class _Size, class _ForwardIterator2>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator2>
copy_n(_ExecutionPolicy&& __exec, _ForwardIterator1 __first, _Size __n, _ForwardIterator2 __result);
template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _Predicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator2> copy_if(_ExecutionPolicy&& __exec,
                                                                                              _ForwardIterator1 __first,
                                                                                              _ForwardIterator1 __last,
                                                                                              _ForwardIterator2 result,
                                                                                              _Predicate __pred);
template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator2> swap_ranges(
    _ExecutionPolicy&& __exec,
    _ForwardIterator1 __first1,
    _ForwardIterator1 __last1,
    _ForwardIterator2 __first2);
template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _UnaryOperation>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator2> transform(
    _ExecutionPolicy&& __exec,
    _ForwardIterator1 __first,
    _ForwardIterator1 __last,
    _ForwardIterator2 __result,
    _UnaryOperation __op);
template <class _ExecutionPolicy,
          class _ForwardIterator1,
          class _ForwardIterator2,
          class _ForwardIterator,
          class _BinaryOperation>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator> transform(
    _ExecutionPolicy&& __exec,
    _ForwardIterator1 __first1,
    _ForwardIterator1 __last1,
    _ForwardIterator2 __first2,
    _ForwardIterator __result,
    _BinaryOperation __op);
template <class _ExecutionPolicy, class _ForwardIterator, class _UnaryPredicate, class _Tp>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void> replace_if(_ExecutionPolicy&& __exec,
                                                                                    _ForwardIterator __first,
                                                                                    _ForwardIterator __last,
                                                                                    _UnaryPredicate __pred,
                                                                                    const _Tp& __new_value);
template <class _ExecutionPolicy, class _ForwardIterator, class _Tp>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void> replace(_ExecutionPolicy&& __exec,
                                                                                 _ForwardIterator __first,
                                                                                 _ForwardIterator __last,
                                                                                 const _Tp& __old_value,
                                                                                 const _Tp& __new_value);
template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _UnaryPredicate, class _Tp>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator2> replace_copy_if(
    _ExecutionPolicy&& __exec,
    _ForwardIterator1 __first,
    _ForwardIterator1 __last,
    _ForwardIterator2 __result,
    _UnaryPredicate __pred,
    const _Tp& __new_value);
template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _Tp>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator2> replace_copy(
    _ExecutionPolicy&& __exec,
    _ForwardIterator1 __first,
    _ForwardIterator1 __last,
    _ForwardIterator2 __result,
    const _Tp& __old_value,
    const _Tp& __new_value);
template <class _ExecutionPolicy, class _ForwardIterator, class _Tp>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void> fill(_ExecutionPolicy&& __exec,
                                                                              _ForwardIterator __first,
                                                                              _ForwardIterator __last,
                                                                              const _Tp& __value);
template <class _ExecutionPolicy, class _ForwardIterator, class _Size, class _Tp>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator> fill_n(_ExecutionPolicy&& __exec,
                                                                                            _ForwardIterator __first,
                                                                                            _Size __count,
                                                                                            const _Tp& __value);
template <class _ExecutionPolicy, class _ForwardIterator, class _Generator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void> generate(_ExecutionPolicy&& __exec,
                                                                                  _ForwardIterator __first,
                                                                                  _ForwardIterator __last,
                                                                                  _Generator __g);
template <class _ExecutionPolicy, class _ForwardIterator, class _Size, class _Generator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
generate_n(_ExecutionPolicy&& __exec, _ForwardIterator __first, _Size count, _Generator __g);
template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _Predicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator2> remove_copy_if(
    _ExecutionPolicy&& __exec,
    _ForwardIterator1 __first,
    _ForwardIterator1 __last,
    _ForwardIterator2 __result,
    _Predicate __pred);
template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _Tp>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator2> remove_copy(
    _ExecutionPolicy&& __exec,
    _ForwardIterator1 __first,
    _ForwardIterator1 __last,
    _ForwardIterator2 __result,
    const _Tp& __value);
template <class _ExecutionPolicy, class _ForwardIterator, class _UnaryPredicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
remove_if(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, _UnaryPredicate __pred);
template <class _ExecutionPolicy, class _ForwardIterator, class _Tp>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator> remove(_ExecutionPolicy&& __exec,
                                                                                            _ForwardIterator __first,
                                                                                            _ForwardIterator __last,
                                                                                            const _Tp& __value);
template <class _ExecutionPolicy, class _ForwardIterator, class _BinaryPredicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator> unique(_ExecutionPolicy&& __exec,
                                                                                            _ForwardIterator __first,
                                                                                            _ForwardIterator __last,
                                                                                            _BinaryPredicate __pred);
template <class _ExecutionPolicy, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator> unique(_ExecutionPolicy&& __exec,
                                                                                            _ForwardIterator __first,
                                                                                            _ForwardIterator __last);
template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator2> unique_copy(
    _ExecutionPolicy&& __exec,
    _ForwardIterator1 __first,
    _ForwardIterator1 __last,
    _ForwardIterator2 __result,
    _BinaryPredicate __pred);
template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator2>
unique_copy(_ExecutionPolicy&& __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result);
template <class _ExecutionPolicy, class _BidirectionalIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void> reverse(_ExecutionPolicy&& __exec,
                                                                                 _BidirectionalIterator __first,
                                                                                 _BidirectionalIterator __last);
template <class _ExecutionPolicy, class _BidirectionalIterator, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator> reverse_copy(
    _ExecutionPolicy&& __exec,
    _BidirectionalIterator __first,
    _BidirectionalIterator __last,
    _ForwardIterator __d_first);
template <class _ExecutionPolicy, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator> rotate(_ExecutionPolicy&& __exec,
                                                                                            _ForwardIterator __first,
                                                                                            _ForwardIterator __middle,
                                                                                            _ForwardIterator __last);
template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator2> rotate_copy(
    _ExecutionPolicy&& __exec,
    _ForwardIterator1 __first,
    _ForwardIterator1 __middle,
    _ForwardIterator1 __last,
    _ForwardIterator2 __result);
template <class _ExecutionPolicy, class _ForwardIterator, class _UnaryPredicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, bool> is_partitioned(_ExecutionPolicy&& __exec,
                                                                                        _ForwardIterator __first,
                                                                                        _ForwardIterator __last,
                                                                                        _UnaryPredicate __pred);
template <class _ExecutionPolicy, class _ForwardIterator, class _UnaryPredicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
partition(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, _UnaryPredicate __pred);
template <class _ExecutionPolicy, class _BidirectionalIterator, class _UnaryPredicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _BidirectionalIterator> stable_partition(
    _ExecutionPolicy&& __exec,
    _BidirectionalIterator __first,
    _BidirectionalIterator __last,
    _UnaryPredicate __pred);
template <class _ExecutionPolicy,
          class _ForwardIterator,
          class _ForwardIterator1,
          class _ForwardIterator2,
          class _UnaryPredicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, std::pair<_ForwardIterator1, _ForwardIterator2>>
partition_copy(_ExecutionPolicy&& __exec,
               _ForwardIterator __first,
               _ForwardIterator __last,
               _ForwardIterator1 __out_true,
               _ForwardIterator2 __out_false,
               _UnaryPredicate __pred);
template <class _ExecutionPolicy, class _RandomAccessIterator, class _Compare>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void> sort(_ExecutionPolicy&& __exec,
                                                                              _RandomAccessIterator __first,
                                                                              _RandomAccessIterator __last,
                                                                              _Compare __comp);
template <class _ExecutionPolicy, class _RandomAccessIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void> sort(_ExecutionPolicy&& __exec,
                                                                              _RandomAccessIterator __first,
                                                                              _RandomAccessIterator __last);
template <class _ExecutionPolicy, class _RandomAccessIterator, class _Compare>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void> stable_sort(_ExecutionPolicy&& __exec,
                                                                                     _RandomAccessIterator __first,
                                                                                     _RandomAccessIterator __last,
                                                                                     _Compare __comp);
template <class _ExecutionPolicy, class _RandomAccessIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void> stable_sort(_ExecutionPolicy&& __exec,
                                                                                     _RandomAccessIterator __first,
                                                                                     _RandomAccessIterator __last);
template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, std::pair<_ForwardIterator1, _ForwardIterator2>>
mismatch(_ExecutionPolicy&& __exec,
         _ForwardIterator1 __first1,
         _ForwardIterator1 __last1,
         _ForwardIterator2 __first2,
         _ForwardIterator2 __last2,
         _BinaryPredicate __pred);
template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, std::pair<_ForwardIterator1, _ForwardIterator2>>
mismatch(_ExecutionPolicy&& __exec,
         _ForwardIterator1 __first1,
         _ForwardIterator1 __last1,
         _ForwardIterator2 __first2,
         _BinaryPredicate __pred);
template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, std::pair<_ForwardIterator1, _ForwardIterator2>>
mismatch(_ExecutionPolicy&& __exec,
         _ForwardIterator1 __first1,
         _ForwardIterator1 __last1,
         _ForwardIterator2 __first2,
         _ForwardIterator2 __last2);
template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, std::pair<_ForwardIterator1, _ForwardIterator2>>
mismatch(_ExecutionPolicy&& __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2);
template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, bool> equal(_ExecutionPolicy&& __exec,
                                                                               _ForwardIterator1 __first1,
                                                                               _ForwardIterator1 __last1,
                                                                               _ForwardIterator2 __first2,
                                                                               _BinaryPredicate __p);
template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, bool> equal(_ExecutionPolicy&& __exec,
                                                                               _ForwardIterator1 __first1,
                                                                               _ForwardIterator1 __last1,
                                                                               _ForwardIterator2 __first2);
template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _BinaryPredicate>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, bool> equal(_ExecutionPolicy&& __exec,
                                                                               _ForwardIterator1 __first1,
                                                                               _ForwardIterator1 __last1,
                                                                               _ForwardIterator2 __first2,
                                                                               _ForwardIterator2 __last2,
                                                                               _BinaryPredicate __p);
template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, bool> equal(_ExecutionPolicy&& __exec,
                                                                               _ForwardIterator1 __first1,
                                                                               _ForwardIterator1 __last1,
                                                                               _ForwardIterator2 __first2,
                                                                               _ForwardIterator2 __last2);
template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator2> move(_ExecutionPolicy&& __exec,
                                                                                           _ForwardIterator1 __first,
                                                                                           _ForwardIterator1 __last,
                                                                                           _ForwardIterator2 __d_first);
template <class _ExecutionPolicy, class _RandomAccessIterator, class _Compare>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void> partial_sort(_ExecutionPolicy&& __exec,
                                                                                      _RandomAccessIterator __first,
                                                                                      _RandomAccessIterator __middle,
                                                                                      _RandomAccessIterator __last,
                                                                                      _Compare __comp);
template <class _ExecutionPolicy, class _RandomAccessIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void> partial_sort(_ExecutionPolicy&& __exec,
                                                                                      _RandomAccessIterator __first,
                                                                                      _RandomAccessIterator __middle,
                                                                                      _RandomAccessIterator __last);
template <class _ExecutionPolicy, class _ForwardIterator, class _RandomAccessIterator, class _Compare>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _RandomAccessIterator> partial_sort_copy(
    _ExecutionPolicy&& __exec,
    _ForwardIterator __first,
    _ForwardIterator __last,
    _RandomAccessIterator __d_first,
    _RandomAccessIterator __d_last,
    _Compare __comp);
template <class _ExecutionPolicy, class _ForwardIterator, class _RandomAccessIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _RandomAccessIterator> partial_sort_copy(
    _ExecutionPolicy&& __exec,
    _ForwardIterator __first,
    _ForwardIterator __last,
    _RandomAccessIterator __d_first,
    _RandomAccessIterator __d_last);
template <class _ExecutionPolicy, class _ForwardIterator, class _Compare>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
is_sorted_until(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, _Compare __comp);
template <class _ExecutionPolicy, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
is_sorted_until(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last);
template <class _ExecutionPolicy, class _ForwardIterator, class _Compare>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, bool> is_sorted(_ExecutionPolicy&& __exec,
                                                                                   _ForwardIterator __first,
                                                                                   _ForwardIterator __last,
                                                                                   _Compare __comp);
template <class _ExecutionPolicy, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, bool> is_sorted(_ExecutionPolicy&& __exec,
                                                                                   _ForwardIterator __first,
                                                                                   _ForwardIterator __last);
template <class _ExecutionPolicy, class _RandomAccessIterator, class _Compare>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void> nth_element(_ExecutionPolicy&& __exec,
                                                                                     _RandomAccessIterator __first,
                                                                                     _RandomAccessIterator __nth,
                                                                                     _RandomAccessIterator __last,
                                                                                     _Compare __comp);
template <class _ExecutionPolicy, class _RandomAccessIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void> nth_element(_ExecutionPolicy&& __exec,
                                                                                     _RandomAccessIterator __first,
                                                                                     _RandomAccessIterator __nth,
                                                                                     _RandomAccessIterator __last);
template <class _ExecutionPolicy,
          class _ForwardIterator1,
          class _ForwardIterator2,
          class _ForwardIterator,
          class _Compare>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator> merge(_ExecutionPolicy&& __exec,
                                                                                           _ForwardIterator1 __first1,
                                                                                           _ForwardIterator1 __last1,
                                                                                           _ForwardIterator2 __first2,
                                                                                           _ForwardIterator2 __last2,
                                                                                           _ForwardIterator __d_first,
                                                                                           _Compare __comp);
template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator> merge(_ExecutionPolicy&& __exec,
                                                                                           _ForwardIterator1 __first1,
                                                                                           _ForwardIterator1 __last1,
                                                                                           _ForwardIterator2 __first2,
                                                                                           _ForwardIterator2 __last2,
                                                                                           _ForwardIterator __d_first);
template <class _ExecutionPolicy, class _BidirectionalIterator, class _Compare>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void> inplace_merge(_ExecutionPolicy&& __exec,
                                                                                       _BidirectionalIterator __first,
                                                                                       _BidirectionalIterator __middle,
                                                                                       _BidirectionalIterator __last,
                                                                                       _Compare __comp);
template <class _ExecutionPolicy, class _BidirectionalIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void> inplace_merge(_ExecutionPolicy&& __exec,
                                                                                       _BidirectionalIterator __first,
                                                                                       _BidirectionalIterator __middle,
                                                                                       _BidirectionalIterator __last);
template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _Compare>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, bool> includes(_ExecutionPolicy&& __exec,
                                                                                  _ForwardIterator1 __first1,
                                                                                  _ForwardIterator1 __last1,
                                                                                  _ForwardIterator2 __first2,
                                                                                  _ForwardIterator2 __last2,
                                                                                  _Compare __comp);
template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, bool> includes(_ExecutionPolicy&& __exec,
                                                                                  _ForwardIterator1 __first1,
                                                                                  _ForwardIterator1 __last1,
                                                                                  _ForwardIterator2 __first2,
                                                                                  _ForwardIterator2 __last2);
template <class _ExecutionPolicy,
          class _ForwardIterator1,
          class _ForwardIterator2,
          class _ForwardIterator,
          class _Compare>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator> set_union(
    _ExecutionPolicy&& __exec,
    _ForwardIterator1 __first1,
    _ForwardIterator1 __last1,
    _ForwardIterator2 __first2,
    _ForwardIterator2 __last2,
    _ForwardIterator __result,
    _Compare __comp);
template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator> set_union(
    _ExecutionPolicy&& __exec,
    _ForwardIterator1 __first1,
    _ForwardIterator1 __last1,
    _ForwardIterator2 __first2,
    _ForwardIterator2 __last2,
    _ForwardIterator __result);
template <class _ExecutionPolicy,
          class _ForwardIterator1,
          class _ForwardIterator2,
          class _ForwardIterator,
          class _Compare>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator> set_intersection(
    _ExecutionPolicy&& __exec,
    _ForwardIterator1 __first1,
    _ForwardIterator1 __last1,
    _ForwardIterator2 __first2,
    _ForwardIterator2 __last2,
    _ForwardIterator __result,
    _Compare __comp);
template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator> set_intersection(
    _ExecutionPolicy&& __exec,
    _ForwardIterator1 __first1,
    _ForwardIterator1 __last1,
    _ForwardIterator2 __first2,
    _ForwardIterator2 __last2,
    _ForwardIterator __result);
template <class _ExecutionPolicy,
          class _ForwardIterator1,
          class _ForwardIterator2,
          class _ForwardIterator,
          class _Compare>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator> set_difference(
    _ExecutionPolicy&& __exec,
    _ForwardIterator1 __first1,
    _ForwardIterator1 __last1,
    _ForwardIterator2 __first2,
    _ForwardIterator2 __last2,
    _ForwardIterator __result,
    _Compare __comp);
template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator> set_difference(
    _ExecutionPolicy&& __exec,
    _ForwardIterator1 __first1,
    _ForwardIterator1 __last1,
    _ForwardIterator2 __first2,
    _ForwardIterator2 __last2,
    _ForwardIterator __result);
template <class _ExecutionPolicy,
          class _ForwardIterator1,
          class _ForwardIterator2,
          class _ForwardIterator,
          class _Compare>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator> set_symmetric_difference(
    _ExecutionPolicy&& __exec,
    _ForwardIterator1 __first1,
    _ForwardIterator1 __last1,
    _ForwardIterator2 __first2,
    _ForwardIterator2 __last2,
    _ForwardIterator result,
    _Compare __comp);
template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator> set_symmetric_difference(
    _ExecutionPolicy&& __exec,
    _ForwardIterator1 __first1,
    _ForwardIterator1 __last1,
    _ForwardIterator2 __first2,
    _ForwardIterator2 __last2,
    _ForwardIterator __result);
template <class _ExecutionPolicy, class _RandomAccessIterator, class _Compare>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _RandomAccessIterator>
is_heap_until(_ExecutionPolicy&& __exec, _RandomAccessIterator __first, _RandomAccessIterator __last, _Compare __comp);
template <class _ExecutionPolicy, class _RandomAccessIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _RandomAccessIterator>
is_heap_until(_ExecutionPolicy&& __exec, _RandomAccessIterator __first, _RandomAccessIterator __last);
template <class _ExecutionPolicy, class _RandomAccessIterator, class _Compare>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, bool> is_heap(_ExecutionPolicy&& __exec,
                                                                                 _RandomAccessIterator __first,
                                                                                 _RandomAccessIterator __last,
                                                                                 _Compare __comp);
template <class _ExecutionPolicy, class _RandomAccessIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, bool> is_heap(_ExecutionPolicy&& __exec,
                                                                                 _RandomAccessIterator __first,
                                                                                 _RandomAccessIterator __last);
template <class _ExecutionPolicy, class _ForwardIterator, class _Compare>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
min_element(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, _Compare __comp);
template <class _ExecutionPolicy, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
min_element(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last);
template <class _ExecutionPolicy, class _ForwardIterator, class _Compare>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
max_element(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, _Compare __comp);
template <class _ExecutionPolicy, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
max_element(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last);
template <class _ExecutionPolicy, class _ForwardIterator, class _Compare>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, std::pair<_ForwardIterator, _ForwardIterator>>
minmax_element(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last, _Compare __comp);
template <class _ExecutionPolicy, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, std::pair<_ForwardIterator, _ForwardIterator>>
minmax_element(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last);
template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _Compare>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, bool> lexicographical_compare(
    _ExecutionPolicy&& __exec,
    _ForwardIterator1 __first1,
    _ForwardIterator1 __last1,
    _ForwardIterator2 __first2,
    _ForwardIterator2 __last2,
    _Compare __comp);
template <class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, bool> lexicographical_compare(
    _ExecutionPolicy&& __exec,
    _ForwardIterator1 __first1,
    _ForwardIterator1 __last1,
    _ForwardIterator2 __first2,
    _ForwardIterator2 __last2);
}  // namespace std
namespace std __attribute__((__visibility__("default")))
{
  class locale
  {
  public:
    typedef int category;
    class facet;
    class id;
    class _Impl;
    friend class facet;
    friend class _Impl;
    template <typename _Facet>
    friend bool has_facet(const locale&) throw();
    template <typename _Facet>
    friend const _Facet& use_facet(const locale&);
    template <typename _Cache>
    friend struct __use_cache;
    static const category none = 0;
    static const category ctype = 1L << 0;
    static const category numeric = 1L << 1;
    static const category collate = 1L << 2;
    static const category time = 1L << 3;
    static const category monetary = 1L << 4;
    static const category messages = 1L << 5;
    static const category all = (ctype | numeric | collate | time | monetary | messages);
    locale() throw();
    locale(const locale& __other) throw();
    explicit locale(const char* __s);
    locale(const locale& __base, const char* __s, category __cat);
    explicit locale(const std::string& __s) : locale(__s.c_str()) {}
    locale(const locale& __base, const std::string& __s, category __cat) : locale(__base, __s.c_str(), __cat) {}
    locale(const locale& __base, const locale& __add, category __cat);
    template <typename _Facet>
    locale(const locale& __other, _Facet* __f);
    ~locale() throw();
    const locale& operator=(const locale& __other) throw();
    template <typename _Facet>
    locale combine(const locale& __other) const;
    __attribute((__abi_tag__("cxx11"))) string name() const;
    bool operator==(const locale& __other) const throw();
    bool operator!=(const locale& __other) const throw() { return !(this->operator==(__other)); }
    template <typename _Char, typename _Traits, typename _Alloc>
    bool operator()(const basic_string<_Char, _Traits, _Alloc>& __s1,
                    const basic_string<_Char, _Traits, _Alloc>& __s2) const;
    static locale global(const locale& __loc);
    static const locale& classic();

  private:
    _Impl* _M_impl;
    static _Impl* _S_classic;
    static _Impl* _S_global;
    static const char* const* const _S_categories;
    enum
    {
      _S_categories_size = 6 + 6
    };
    static __gthread_once_t _S_once;
    explicit locale(_Impl*) throw();
    static void _S_initialize();
    static void _S_initialize_once() throw();
    static category _S_normalize_category(category);
    void _M_coalesce(const locale& __base, const locale& __add, category __cat);
    static const id* const _S_twinned_facets[];
  };
  class locale::facet
  {
  private:
    friend class locale;
    friend class locale::_Impl;
    mutable _Atomic_word _M_refcount;
    static __c_locale _S_c_locale;
    static const char _S_c_name[2];
    static __gthread_once_t _S_once;
    static void _S_initialize_once();

  protected:
    explicit facet(size_t __refs = 0) throw() : _M_refcount(__refs ? 1 : 0) {}
    virtual ~facet();
    static void _S_create_c_locale(__c_locale& __cloc, const char* __s, __c_locale __old = 0);
    static __c_locale _S_clone_c_locale(__c_locale& __cloc) throw();
    static void _S_destroy_c_locale(__c_locale& __cloc);
    static __c_locale _S_lc_ctype_c_locale(__c_locale __cloc, const char* __s);
    static __c_locale _S_get_c_locale();
    __attribute__((__const__)) static const char* _S_get_c_name() throw();
    facet(const facet&) = delete;
    facet& operator=(const facet&) = delete;

  private:
    void _M_add_reference() const throw() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }
    void _M_remove_reference() const throw()
    {
      ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
      {
        ;
        try
        {
          delete this;
        }
        catch (...)
        {
        }
      }
    }
    const facet* _M_sso_shim(const id*) const;
    const facet* _M_cow_shim(const id*) const;

  protected:
    class __shim;
  };
  class locale::id
  {
  private:
    friend class locale;
    friend class locale::_Impl;
    template <typename _Facet>
    friend const _Facet& use_facet(const locale&);
    template <typename _Facet>
    friend bool has_facet(const locale&) throw();
    mutable size_t _M_index;
    static _Atomic_word _S_refcount;
    void operator=(const id&);
    id(const id&);

  public:
    id() {}
    size_t _M_id() const throw();
  };
  class locale::_Impl
  {
  public:
    friend class locale;
    friend class locale::facet;
    template <typename _Facet>
    friend bool has_facet(const locale&) throw();
    template <typename _Facet>
    friend const _Facet& use_facet(const locale&);
    template <typename _Cache>
    friend struct __use_cache;

  private:
    _Atomic_word _M_refcount;
    const facet** _M_facets;
    size_t _M_facets_size;
    const facet** _M_caches;
    char** _M_names;
    static const locale::id* const _S_id_ctype[];
    static const locale::id* const _S_id_numeric[];
    static const locale::id* const _S_id_collate[];
    static const locale::id* const _S_id_time[];
    static const locale::id* const _S_id_monetary[];
    static const locale::id* const _S_id_messages[];
    static const locale::id* const* const _S_facet_categories[];
    void _M_add_reference() throw() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }
    void _M_remove_reference() throw()
    {
      ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
      {
        ;
        try
        {
          delete this;
        }
        catch (...)
        {
        }
      }
    }
    _Impl(const _Impl&, size_t);
    _Impl(const char*, size_t);
    _Impl(size_t) throw();
    ~_Impl() throw();
    _Impl(const _Impl&);
    void operator=(const _Impl&);
    bool _M_check_same_name()
    {
      bool __ret = true;
      if (_M_names[1])
        for (size_t __i = 0; __ret && __i < _S_categories_size - 1; ++__i)
          __ret = __builtin_strcmp(_M_names[__i], _M_names[__i + 1]) == 0;
      return __ret;
    }
    void _M_replace_categories(const _Impl*, category);
    void _M_replace_category(const _Impl*, const locale::id* const*);
    void _M_replace_facet(const _Impl*, const locale::id*);
    void _M_install_facet(const locale::id*, const facet*);
    template <typename _Facet>
    void _M_init_facet(_Facet* __facet)
    {
      _M_install_facet(&_Facet::id, __facet);
    }
    template <typename _Facet>
    void _M_init_facet_unchecked(_Facet* __facet)
    {
      __facet->_M_add_reference();
      _M_facets[_Facet::id._M_id()] = __facet;
    }
    void _M_install_cache(const facet*, size_t);
    void _M_init_extra(facet**);
    void _M_init_extra(void*, void*, const char*, const char*);
  };
  template <typename _CharT>
  class __cxx11::collate : public locale::facet
  {
  public:
    typedef _CharT char_type;
    typedef basic_string<_CharT> string_type;

  protected:
    __c_locale _M_c_locale_collate;

  public:
    static locale::id id;
    explicit collate(size_t __refs = 0) : facet(__refs), _M_c_locale_collate(_S_get_c_locale()) {}
    explicit collate(__c_locale __cloc, size_t __refs = 0)
        : facet(__refs), _M_c_locale_collate(_S_clone_c_locale(__cloc))
    {
    }
    int compare(const _CharT* __lo1, const _CharT* __hi1, const _CharT* __lo2, const _CharT* __hi2) const
    {
      return this->do_compare(__lo1, __hi1, __lo2, __hi2);
    }
    string_type transform(const _CharT* __lo, const _CharT* __hi) const { return this->do_transform(__lo, __hi); }
    long hash(const _CharT* __lo, const _CharT* __hi) const { return this->do_hash(__lo, __hi); }
    int _M_compare(const _CharT*, const _CharT*) const throw();
    size_t _M_transform(_CharT*, const _CharT*, size_t) const throw();

  protected:
    virtual ~collate() { _S_destroy_c_locale(_M_c_locale_collate); }
    virtual int do_compare(const _CharT* __lo1, const _CharT* __hi1, const _CharT* __lo2, const _CharT* __hi2) const;
    virtual string_type do_transform(const _CharT* __lo, const _CharT* __hi) const;
    virtual long do_hash(const _CharT* __lo, const _CharT* __hi) const;
  };
  template <typename _CharT>
  locale::id collate<_CharT>::id;
  template <>
  int collate<char>::_M_compare(const char*, const char*) const throw();
  template <>
  size_t collate<char>::_M_transform(char*, const char*, size_t) const throw();
  template <>
  int collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const throw();
  template <>
  size_t collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const throw();
  template <typename _CharT>
  class __cxx11::collate_byname : public collate<_CharT>
  {
  public:
    typedef _CharT char_type;
    typedef basic_string<_CharT> string_type;
    explicit collate_byname(const char* __s, size_t __refs = 0) : collate<_CharT>(__refs)
    {
      if (__builtin_strcmp(__s, "C") != 0 && __builtin_strcmp(__s, "POSIX") != 0)
      {
        this->_S_destroy_c_locale(this->_M_c_locale_collate);
        this->_S_create_c_locale(this->_M_c_locale_collate, __s);
      }
    }
    explicit collate_byname(const string& __s, size_t __refs = 0) : collate_byname(__s.c_str(), __refs) {}

  protected:
    virtual ~collate_byname() {}
  };
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _Facet>
  locale::locale(const locale& __other, _Facet* __f)
  {
    _M_impl = new _Impl(*__other._M_impl, 1);
    try
    {
      _M_impl->_M_install_facet(&_Facet::id, __f);
    }
    catch (...)
    {
      _M_impl->_M_remove_reference();
      throw;
    }
    delete[] _M_impl->_M_names[0];
    _M_impl->_M_names[0] = 0;
  }
  template <typename _Facet>
  locale locale::combine(const locale& __other) const
  {
    _Impl* __tmp = new _Impl(*_M_impl, 1);
    try
    {
      __tmp->_M_replace_facet(__other._M_impl, &_Facet::id);
    }
    catch (...)
    {
      __tmp->_M_remove_reference();
      throw;
    }
    return locale(__tmp);
  }
  template <typename _CharT, typename _Traits, typename _Alloc>
  bool locale::operator()(const basic_string<_CharT, _Traits, _Alloc>& __s1,
                          const basic_string<_CharT, _Traits, _Alloc>& __s2) const
  {
    typedef std::collate<_CharT> __collate_type;
    const __collate_type& __collate = use_facet<__collate_type>(*this);
    return (__collate.compare(__s1.data(), __s1.data() + __s1.length(), __s2.data(), __s2.data() + __s2.length()) < 0);
  }
  template <typename _Facet>
  bool has_facet(const locale& __loc) throw()
  {
    const size_t __i = _Facet::id._M_id();
    const locale::facet** __facets = __loc._M_impl->_M_facets;
    return (__i < __loc._M_impl->_M_facets_size && dynamic_cast<const _Facet*>(__facets[__i]));
  }
  template <typename _Facet>
  const _Facet& use_facet(const locale& __loc)
  {
    const size_t __i = _Facet::id._M_id();
    const locale::facet** __facets = __loc._M_impl->_M_facets;
    if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])
      __throw_bad_cast();
    return dynamic_cast<const _Facet&>(*__facets[__i]);
  }
  template <typename _CharT>
  int collate<_CharT>::_M_compare(const _CharT*, const _CharT*) const throw()
  {
    return 0;
  }
  template <typename _CharT>
  size_t collate<_CharT>::_M_transform(_CharT*, const _CharT*, size_t) const throw()
  {
    return 0;
  }
  template <typename _CharT>
  int collate<_CharT>::do_compare(const _CharT* __lo1, const _CharT* __hi1, const _CharT* __lo2, const _CharT* __hi2)
      const
  {
    const string_type __one(__lo1, __hi1);
    const string_type __two(__lo2, __hi2);
    const _CharT* __p = __one.c_str();
    const _CharT* __pend = __one.data() + __one.length();
    const _CharT* __q = __two.c_str();
    const _CharT* __qend = __two.data() + __two.length();
    for (;;)
    {
      const int __res = _M_compare(__p, __q);
      if (__res)
        return __res;
      __p += char_traits<_CharT>::length(__p);
      __q += char_traits<_CharT>::length(__q);
      if (__p == __pend && __q == __qend)
        return 0;
      else if (__p == __pend)
        return -1;
      else if (__q == __qend)
        return 1;
      __p++;
      __q++;
    }
  }
  template <typename _CharT>
  typename collate<_CharT>::string_type collate<_CharT>::do_transform(const _CharT* __lo, const _CharT* __hi) const
  {
    string_type __ret;
    const string_type __str(__lo, __hi);
    const _CharT* __p = __str.c_str();
    const _CharT* __pend = __str.data() + __str.length();
    size_t __len = (__hi - __lo) * 2;
    _CharT* __c = new _CharT[__len];
    try
    {
      for (;;)
      {
        size_t __res = _M_transform(__c, __p, __len);
        if (__res >= __len)
        {
          __len = __res + 1;
          delete[] __c, __c = 0;
          __c = new _CharT[__len];
          __res = _M_transform(__c, __p, __len);
        }
        __ret.append(__c, __res);
        __p += char_traits<_CharT>::length(__p);
        if (__p == __pend)
          break;
        __p++;
        __ret.push_back(_CharT());
      }
    }
    catch (...)
    {
      delete[] __c;
      throw;
    }
    delete[] __c;
    return __ret;
  }
  template <typename _CharT>
  long collate<_CharT>::do_hash(const _CharT* __lo, const _CharT* __hi) const
  {
    unsigned long __val = 0;
    for (; __lo < __hi; ++__lo)
      __val = *__lo + ((__val << 7) | (__val >> (__gnu_cxx::__numeric_traits<unsigned long>::__digits - 7)));
    return static_cast<long>(__val);
  }
  extern template class collate<char>;
  extern template class collate_byname<char>;
  extern template const collate<char>& use_facet<collate<char>>(const locale&);
  extern template bool has_facet<collate<char>>(const locale&);
  extern template class collate<wchar_t>;
  extern template class collate_byname<wchar_t>;
  extern template const collate<wchar_t>& use_facet<collate<wchar_t>>(const locale&);
  extern template bool has_facet<collate<wchar_t>>(const locale&);
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  enum class errc
  {
    address_family_not_supported = 97,
    address_in_use = 98,
    address_not_available = 99,
    already_connected = 106,
    argument_list_too_long = 7,
    argument_out_of_domain = 33,
    bad_address = 14,
    bad_file_descriptor = 9,
    bad_message = 74,
    broken_pipe = 32,
    connection_aborted = 103,
    connection_already_in_progress = 114,
    connection_refused = 111,
    connection_reset = 104,
    cross_device_link = 18,
    destination_address_required = 89,
    device_or_resource_busy = 16,
    directory_not_empty = 39,
    executable_format_error = 8,
    file_exists = 17,
    file_too_large = 27,
    filename_too_long = 36,
    function_not_supported = 38,
    host_unreachable = 113,
    identifier_removed = 43,
    illegal_byte_sequence = 84,
    inappropriate_io_control_operation = 25,
    interrupted = 4,
    invalid_argument = 22,
    invalid_seek = 29,
    io_error = 5,
    is_a_directory = 21,
    message_size = 90,
    network_down = 100,
    network_reset = 102,
    network_unreachable = 101,
    no_buffer_space = 105,
    no_child_process = 10,
    no_link = 67,
    no_lock_available = 37,
    no_message_available = 61,
    no_message = 42,
    no_protocol_option = 92,
    no_space_on_device = 28,
    no_stream_resources = 63,
    no_such_device_or_address = 6,
    no_such_device = 19,
    no_such_file_or_directory = 2,
    no_such_process = 3,
    not_a_directory = 20,
    not_a_socket = 88,
    not_a_stream = 60,
    not_connected = 107,
    not_enough_memory = 12,
    not_supported = 95,
    operation_canceled = 125,
    operation_in_progress = 115,
    operation_not_permitted = 1,
    operation_not_supported = 95,
    operation_would_block = 11,
    owner_dead = 130,
    permission_denied = 13,
    protocol_error = 71,
    protocol_not_supported = 93,
    read_only_file_system = 30,
    resource_deadlock_would_occur = 35,
    resource_unavailable_try_again = 11,
    result_out_of_range = 34,
    state_not_recoverable = 131,
    stream_timeout = 62,
    text_file_busy = 26,
    timed_out = 110,
    too_many_files_open_in_system = 23,
    too_many_files_open = 24,
    too_many_links = 31,
    too_many_symbolic_link_levels = 40,
    value_too_large = 75,
    wrong_protocol_type = 91
  };
}
namespace std __attribute__((__visibility__("default")))
{
  class error_code;
  class error_condition;
  class system_error;
  template <typename _Tp>
  struct is_error_code_enum : public false_type
  {
  };
  template <typename _Tp>
  struct is_error_condition_enum : public false_type
  {
  };
  template <>
  struct is_error_condition_enum<errc> : public true_type
  {
  };
  template <typename _Tp>
  inline constexpr bool is_error_code_enum_v = is_error_code_enum<_Tp>::value;
  template <typename _Tp>
  inline constexpr bool is_error_condition_enum_v = is_error_condition_enum<_Tp>::value;
  inline namespace _V2
  {
  class error_category
  {
  public:
    constexpr error_category() noexcept = default;
    virtual ~error_category();
    error_category(const error_category&) = delete;
    error_category& operator=(const error_category&) = delete;
    virtual const char* name() const noexcept = 0;

  private:
    __attribute((__abi_tag__("cxx11"))) virtual __cow_string _M_message(int) const;

  public:
    __attribute((__abi_tag__("cxx11"))) virtual string message(int) const = 0;

  public:
    virtual error_condition default_error_condition(int __i) const noexcept;
    virtual bool equivalent(int __i, const error_condition& __cond) const noexcept;
    virtual bool equivalent(const error_code& __code, int __i) const noexcept;
    bool operator<(const error_category& __other) const noexcept
    {
      return less<const error_category*>()(this, &__other);
    }
    bool operator==(const error_category& __other) const noexcept { return this == &__other; }
    bool operator!=(const error_category& __other) const noexcept { return this != &__other; }
  };
  __attribute__((__const__)) const error_category& system_category() noexcept;
  __attribute__((__const__)) const error_category& generic_category() noexcept;
  }  // namespace _V2
  error_code make_error_code(errc) noexcept;
  template <typename _Tp>
  struct hash;
  struct error_code
  {
    error_code() noexcept : _M_value(0), _M_cat(&system_category()) {}
    error_code(int __v, const error_category& __cat) noexcept : _M_value(__v), _M_cat(&__cat) {}
    template <typename _ErrorCodeEnum, typename = typename enable_if<is_error_code_enum<_ErrorCodeEnum>::value>::type>
    error_code(_ErrorCodeEnum __e) noexcept
    {
      *this = make_error_code(__e);
    }
    void assign(int __v, const error_category& __cat) noexcept
    {
      _M_value = __v;
      _M_cat = &__cat;
    }
    void clear() noexcept { assign(0, system_category()); }
    template <typename _ErrorCodeEnum>
    typename enable_if<is_error_code_enum<_ErrorCodeEnum>::value, error_code&>::type operator=(
        _ErrorCodeEnum __e) noexcept
    {
      return *this = make_error_code(__e);
    }
    int value() const noexcept { return _M_value; }
    const error_category& category() const noexcept { return *_M_cat; }
    error_condition default_error_condition() const noexcept;
    __attribute((__abi_tag__("cxx11"))) string message() const { return category().message(value()); }
    explicit operator bool() const noexcept { return _M_value != 0; }

  private:
    friend class hash<error_code>;
    int _M_value;
    const error_category* _M_cat;
  };
  inline error_code make_error_code(errc __e) noexcept { return error_code(static_cast<int>(__e), generic_category()); }
  inline bool operator<(const error_code& __lhs, const error_code& __rhs) noexcept
  {
    return (__lhs.category() < __rhs.category() ||
            (__lhs.category() == __rhs.category() && __lhs.value() < __rhs.value()));
  }
  template <typename _CharT, typename _Traits>
  basic_ostream<_CharT, _Traits>& operator<<(basic_ostream<_CharT, _Traits>& __os, const error_code& __e)
  {
    return (__os << __e.category().name() << ':' << __e.value());
  }
  error_condition make_error_condition(errc) noexcept;
  struct error_condition
  {
    error_condition() noexcept : _M_value(0), _M_cat(&generic_category()) {}
    error_condition(int __v, const error_category& __cat) noexcept : _M_value(__v), _M_cat(&__cat) {}
    template <typename _ErrorConditionEnum,
              typename = typename enable_if<is_error_condition_enum<_ErrorConditionEnum>::value>::type>
    error_condition(_ErrorConditionEnum __e) noexcept
    {
      *this = make_error_condition(__e);
    }
    void assign(int __v, const error_category& __cat) noexcept
    {
      _M_value = __v;
      _M_cat = &__cat;
    }
    template <typename _ErrorConditionEnum>
    typename enable_if<is_error_condition_enum<_ErrorConditionEnum>::value, error_condition&>::type operator=(
        _ErrorConditionEnum __e) noexcept
    {
      return *this = make_error_condition(__e);
    }
    void clear() noexcept { assign(0, generic_category()); }
    int value() const noexcept { return _M_value; }
    const error_category& category() const noexcept { return *_M_cat; }
    __attribute((__abi_tag__("cxx11"))) string message() const { return category().message(value()); }
    explicit operator bool() const noexcept { return _M_value != 0; }

  private:
    int _M_value;
    const error_category* _M_cat;
  };
  inline error_condition make_error_condition(errc __e) noexcept
  {
    return error_condition(static_cast<int>(__e), generic_category());
  }
  inline bool operator<(const error_condition& __lhs, const error_condition& __rhs) noexcept
  {
    return (__lhs.category() < __rhs.category() ||
            (__lhs.category() == __rhs.category() && __lhs.value() < __rhs.value()));
  }
  inline bool operator==(const error_code& __lhs, const error_code& __rhs) noexcept
  {
    return (__lhs.category() == __rhs.category() && __lhs.value() == __rhs.value());
  }
  inline bool operator==(const error_code& __lhs, const error_condition& __rhs) noexcept
  {
    return (__lhs.category().equivalent(__lhs.value(), __rhs) || __rhs.category().equivalent(__lhs, __rhs.value()));
  }
  inline bool operator==(const error_condition& __lhs, const error_code& __rhs) noexcept
  {
    return (__rhs.category().equivalent(__rhs.value(), __lhs) || __lhs.category().equivalent(__rhs, __lhs.value()));
  }
  inline bool operator==(const error_condition& __lhs, const error_condition& __rhs) noexcept
  {
    return (__lhs.category() == __rhs.category() && __lhs.value() == __rhs.value());
  }
  inline bool operator!=(const error_code& __lhs, const error_code& __rhs) noexcept { return !(__lhs == __rhs); }
  inline bool operator!=(const error_code& __lhs, const error_condition& __rhs) noexcept { return !(__lhs == __rhs); }
  inline bool operator!=(const error_condition& __lhs, const error_code& __rhs) noexcept { return !(__lhs == __rhs); }
  inline bool operator!=(const error_condition& __lhs, const error_condition& __rhs) noexcept
  {
    return !(__lhs == __rhs);
  }
  class system_error : public std::runtime_error
  {
  private:
    error_code _M_code;

  public:
    system_error(error_code __ec = error_code()) : runtime_error(__ec.message()), _M_code(__ec) {}
    system_error(error_code __ec, const string& __what) : runtime_error(__what + ": " + __ec.message()), _M_code(__ec)
    {
    }
    system_error(error_code __ec, const char* __what) : runtime_error(__what + (": " + __ec.message())), _M_code(__ec)
    {
    }
    system_error(int __v, const error_category& __ecat, const char* __what)
        : system_error(error_code(__v, __ecat), __what)
    {
    }
    system_error(int __v, const error_category& __ecat)
        : runtime_error(error_code(__v, __ecat).message()), _M_code(__v, __ecat)
    {
    }
    system_error(int __v, const error_category& __ecat, const string& __what)
        : runtime_error(__what + ": " + error_code(__v, __ecat).message()), _M_code(__v, __ecat)
    {
    }
    system_error(const system_error&) = default;
    system_error& operator=(const system_error&) = default;
    virtual ~system_error() noexcept;
    const error_code& code() const noexcept { return _M_code; }
  };
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <>
  struct hash<error_code> : public __hash_base<size_t, error_code>
  {
    size_t operator()(const error_code& __e) const noexcept
    {
      const size_t __tmp = std::_Hash_impl::hash(__e._M_value);
      return std::_Hash_impl::__hash_combine(__e._M_cat, __tmp);
    }
  };
  template <>
  struct hash<error_condition> : public __hash_base<size_t, error_condition>
  {
    size_t operator()(const error_condition& __e) const noexcept
    {
      const size_t __tmp = std::_Hash_impl::hash(__e.value());
      return std::_Hash_impl::__hash_combine(__e.category(), __tmp);
    }
  };
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  enum _Ios_Fmtflags
  {
    _S_boolalpha = 1L << 0,
    _S_dec = 1L << 1,
    _S_fixed = 1L << 2,
    _S_hex = 1L << 3,
    _S_internal = 1L << 4,
    _S_left = 1L << 5,
    _S_oct = 1L << 6,
    _S_right = 1L << 7,
    _S_scientific = 1L << 8,
    _S_showbase = 1L << 9,
    _S_showpoint = 1L << 10,
    _S_showpos = 1L << 11,
    _S_skipws = 1L << 12,
    _S_unitbuf = 1L << 13,
    _S_uppercase = 1L << 14,
    _S_adjustfield = _S_left | _S_right | _S_internal,
    _S_basefield = _S_dec | _S_oct | _S_hex,
    _S_floatfield = _S_scientific | _S_fixed,
    _S_ios_fmtflags_end = 1L << 16,
    _S_ios_fmtflags_max = 0x7fffffff,
    _S_ios_fmtflags_min = ~0x7fffffff
  };
  inline constexpr _Ios_Fmtflags operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  {
    return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b));
  }
  inline constexpr _Ios_Fmtflags operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  {
    return _Ios_Fmtflags(static_cast<int>(__a) | static_cast<int>(__b));
  }
  inline constexpr _Ios_Fmtflags operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  {
    return _Ios_Fmtflags(static_cast<int>(__a) ^ static_cast<int>(__b));
  }
  inline constexpr _Ios_Fmtflags operator~(_Ios_Fmtflags __a) { return _Ios_Fmtflags(~static_cast<int>(__a)); }
  inline const _Ios_Fmtflags& operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b) { return __a = __a | __b; }
  inline const _Ios_Fmtflags& operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b) { return __a = __a & __b; }
  inline const _Ios_Fmtflags& operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b) { return __a = __a ^ __b; }
  enum _Ios_Openmode
  {
    _S_app = 1L << 0,
    _S_ate = 1L << 1,
    _S_bin = 1L << 2,
    _S_in = 1L << 3,
    _S_out = 1L << 4,
    _S_trunc = 1L << 5,
    _S_ios_openmode_end = 1L << 16,
    _S_ios_openmode_max = 0x7fffffff,
    _S_ios_openmode_min = ~0x7fffffff
  };
  inline constexpr _Ios_Openmode operator&(_Ios_Openmode __a, _Ios_Openmode __b)
  {
    return _Ios_Openmode(static_cast<int>(__a) & static_cast<int>(__b));
  }
  inline constexpr _Ios_Openmode operator|(_Ios_Openmode __a, _Ios_Openmode __b)
  {
    return _Ios_Openmode(static_cast<int>(__a) | static_cast<int>(__b));
  }
  inline constexpr _Ios_Openmode operator^(_Ios_Openmode __a, _Ios_Openmode __b)
  {
    return _Ios_Openmode(static_cast<int>(__a) ^ static_cast<int>(__b));
  }
  inline constexpr _Ios_Openmode operator~(_Ios_Openmode __a) { return _Ios_Openmode(~static_cast<int>(__a)); }
  inline const _Ios_Openmode& operator|=(_Ios_Openmode& __a, _Ios_Openmode __b) { return __a = __a | __b; }
  inline const _Ios_Openmode& operator&=(_Ios_Openmode& __a, _Ios_Openmode __b) { return __a = __a & __b; }
  inline const _Ios_Openmode& operator^=(_Ios_Openmode& __a, _Ios_Openmode __b) { return __a = __a ^ __b; }
  enum _Ios_Iostate
  {
    _S_goodbit = 0,
    _S_badbit = 1L << 0,
    _S_eofbit = 1L << 1,
    _S_failbit = 1L << 2,
    _S_ios_iostate_end = 1L << 16,
    _S_ios_iostate_max = 0x7fffffff,
    _S_ios_iostate_min = ~0x7fffffff
  };
  inline constexpr _Ios_Iostate operator&(_Ios_Iostate __a, _Ios_Iostate __b)
  {
    return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b));
  }
  inline constexpr _Ios_Iostate operator|(_Ios_Iostate __a, _Ios_Iostate __b)
  {
    return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b));
  }
  inline constexpr _Ios_Iostate operator^(_Ios_Iostate __a, _Ios_Iostate __b)
  {
    return _Ios_Iostate(static_cast<int>(__a) ^ static_cast<int>(__b));
  }
  inline constexpr _Ios_Iostate operator~(_Ios_Iostate __a) { return _Ios_Iostate(~static_cast<int>(__a)); }
  inline const _Ios_Iostate& operator|=(_Ios_Iostate& __a, _Ios_Iostate __b) { return __a = __a | __b; }
  inline const _Ios_Iostate& operator&=(_Ios_Iostate& __a, _Ios_Iostate __b) { return __a = __a & __b; }
  inline const _Ios_Iostate& operator^=(_Ios_Iostate& __a, _Ios_Iostate __b) { return __a = __a ^ __b; }
  enum _Ios_Seekdir
  {
    _S_beg = 0,
    _S_cur = 1,
    _S_end = 2,
    _S_ios_seekdir_end = 1L << 16
  };
  enum class io_errc
  {
    stream = 1
  };
  template <>
  struct is_error_code_enum<io_errc> : public true_type
  {
  };
  const error_category& iostream_category() noexcept;
  inline error_code make_error_code(io_errc __e) noexcept
  {
    return error_code(static_cast<int>(__e), iostream_category());
  }
  inline error_condition make_error_condition(io_errc __e) noexcept
  {
    return error_condition(static_cast<int>(__e), iostream_category());
  }
  class ios_base
  {
  public:
    class __attribute((__abi_tag__("cxx11"))) failure : public system_error
    {
    public:
      explicit failure(const string& __str);
      explicit failure(const string&, const error_code&);
      explicit failure(const char*, const error_code& = io_errc::stream);
      virtual ~failure() throw();
      virtual const char* what() const throw();
    };
    typedef _Ios_Fmtflags fmtflags;
    static const fmtflags boolalpha = _S_boolalpha;
    static const fmtflags dec = _S_dec;
    static const fmtflags fixed = _S_fixed;
    static const fmtflags hex = _S_hex;
    static const fmtflags internal = _S_internal;
    static const fmtflags left = _S_left;
    static const fmtflags oct = _S_oct;
    static const fmtflags right = _S_right;
    static const fmtflags scientific = _S_scientific;
    static const fmtflags showbase = _S_showbase;
    static const fmtflags showpoint = _S_showpoint;
    static const fmtflags showpos = _S_showpos;
    static const fmtflags skipws = _S_skipws;
    static const fmtflags unitbuf = _S_unitbuf;
    static const fmtflags uppercase = _S_uppercase;
    static const fmtflags adjustfield = _S_adjustfield;
    static const fmtflags basefield = _S_basefield;
    static const fmtflags floatfield = _S_floatfield;
    typedef _Ios_Iostate iostate;
    static const iostate badbit = _S_badbit;
    static const iostate eofbit = _S_eofbit;
    static const iostate failbit = _S_failbit;
    static const iostate goodbit = _S_goodbit;
    typedef _Ios_Openmode openmode;
    static const openmode app = _S_app;
    static const openmode ate = _S_ate;
    static const openmode binary = _S_bin;
    static const openmode in = _S_in;
    static const openmode out = _S_out;
    static const openmode trunc = _S_trunc;
    typedef _Ios_Seekdir seekdir;
    static const seekdir beg = _S_beg;
    static const seekdir cur = _S_cur;
    static const seekdir end = _S_end;
    enum event
    {
      erase_event,
      imbue_event,
      copyfmt_event
    };
    typedef void (*event_callback)(event __e, ios_base& __b, int __i);
    void register_callback(event_callback __fn, int __index);

  protected:
    streamsize _M_precision;
    streamsize _M_width;
    fmtflags _M_flags;
    iostate _M_exception;
    iostate _M_streambuf_state;
    struct _Callback_list
    {
      _Callback_list* _M_next;
      ios_base::event_callback _M_fn;
      int _M_index;
      _Atomic_word _M_refcount;
      _Callback_list(ios_base::event_callback __fn, int __index, _Callback_list* __cb)
          : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0)
      {
      }
      void _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }
      int _M_remove_reference()
      {
        ;
        int __res = __gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1);
        if (__res == 0)
        {
          ;
        }
        return __res;
      }
    };
    _Callback_list* _M_callbacks;
    void _M_call_callbacks(event __ev) throw();
    void _M_dispose_callbacks(void) throw();
    struct _Words
    {
      void* _M_pword;
      long _M_iword;
      _Words() : _M_pword(0), _M_iword(0) {}
    };
    _Words _M_word_zero;
    enum
    {
      _S_local_word_size = 8
    };
    _Words _M_local_word[_S_local_word_size];
    int _M_word_size;
    _Words* _M_word;
    _Words& _M_grow_words(int __index, bool __iword);
    locale _M_ios_locale;
    void _M_init() throw();

  public:
    class Init
    {
      friend class ios_base;

    public:
      Init();
      ~Init();
      Init(const Init&) = default;
      Init& operator=(const Init&) = default;

    private:
      static _Atomic_word _S_refcount;
      static bool _S_synced_with_stdio;
    };
    fmtflags flags() const { return _M_flags; }
    fmtflags flags(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags = __fmtfl;
      return __old;
    }
    fmtflags setf(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags |= __fmtfl;
      return __old;
    }
    fmtflags setf(fmtflags __fmtfl, fmtflags __mask)
    {
      fmtflags __old = _M_flags;
      _M_flags &= ~__mask;
      _M_flags |= (__fmtfl & __mask);
      return __old;
    }
    void unsetf(fmtflags __mask) { _M_flags &= ~__mask; }
    streamsize precision() const { return _M_precision; }
    streamsize precision(streamsize __prec)
    {
      streamsize __old = _M_precision;
      _M_precision = __prec;
      return __old;
    }
    streamsize width() const { return _M_width; }
    streamsize width(streamsize __wide)
    {
      streamsize __old = _M_width;
      _M_width = __wide;
      return __old;
    }
    static bool sync_with_stdio(bool __sync = true);
    locale imbue(const locale& __loc) throw();
    locale getloc() const { return _M_ios_locale; }
    const locale& _M_getloc() const { return _M_ios_locale; }
    static int xalloc() throw();
    long& iword(int __ix)
    {
      _Words& __word = ((unsigned)__ix < (unsigned)_M_word_size) ? _M_word[__ix] : _M_grow_words(__ix, true);
      return __word._M_iword;
    }
    void*& pword(int __ix)
    {
      _Words& __word = ((unsigned)__ix < (unsigned)_M_word_size) ? _M_word[__ix] : _M_grow_words(__ix, false);
      return __word._M_pword;
    }
    virtual ~ios_base();

  protected:
    ios_base() throw();

  public:
    ios_base(const ios_base&) = delete;
    ios_base& operator=(const ios_base&) = delete;

  protected:
    void _M_move(ios_base&) noexcept;
    void _M_swap(ios_base& __rhs) noexcept;
  };
  inline ios_base& boolalpha(ios_base & __base)
  {
    __base.setf(ios_base::boolalpha);
    return __base;
  }
  inline ios_base& noboolalpha(ios_base & __base)
  {
    __base.unsetf(ios_base::boolalpha);
    return __base;
  }
  inline ios_base& showbase(ios_base & __base)
  {
    __base.setf(ios_base::showbase);
    return __base;
  }
  inline ios_base& noshowbase(ios_base & __base)
  {
    __base.unsetf(ios_base::showbase);
    return __base;
  }
  inline ios_base& showpoint(ios_base & __base)
  {
    __base.setf(ios_base::showpoint);
    return __base;
  }
  inline ios_base& noshowpoint(ios_base & __base)
  {
    __base.unsetf(ios_base::showpoint);
    return __base;
  }
  inline ios_base& showpos(ios_base & __base)
  {
    __base.setf(ios_base::showpos);
    return __base;
  }
  inline ios_base& noshowpos(ios_base & __base)
  {
    __base.unsetf(ios_base::showpos);
    return __base;
  }
  inline ios_base& skipws(ios_base & __base)
  {
    __base.setf(ios_base::skipws);
    return __base;
  }
  inline ios_base& noskipws(ios_base & __base)
  {
    __base.unsetf(ios_base::skipws);
    return __base;
  }
  inline ios_base& uppercase(ios_base & __base)
  {
    __base.setf(ios_base::uppercase);
    return __base;
  }
  inline ios_base& nouppercase(ios_base & __base)
  {
    __base.unsetf(ios_base::uppercase);
    return __base;
  }
  inline ios_base& unitbuf(ios_base & __base)
  {
    __base.setf(ios_base::unitbuf);
    return __base;
  }
  inline ios_base& nounitbuf(ios_base & __base)
  {
    __base.unsetf(ios_base::unitbuf);
    return __base;
  }
  inline ios_base& internal(ios_base & __base)
  {
    __base.setf(ios_base::internal, ios_base::adjustfield);
    return __base;
  }
  inline ios_base& left(ios_base & __base)
  {
    __base.setf(ios_base::left, ios_base::adjustfield);
    return __base;
  }
  inline ios_base& right(ios_base & __base)
  {
    __base.setf(ios_base::right, ios_base::adjustfield);
    return __base;
  }
  inline ios_base& dec(ios_base & __base)
  {
    __base.setf(ios_base::dec, ios_base::basefield);
    return __base;
  }
  inline ios_base& hex(ios_base & __base)
  {
    __base.setf(ios_base::hex, ios_base::basefield);
    return __base;
  }
  inline ios_base& oct(ios_base & __base)
  {
    __base.setf(ios_base::oct, ios_base::basefield);
    return __base;
  }
  inline ios_base& fixed(ios_base & __base)
  {
    __base.setf(ios_base::fixed, ios_base::floatfield);
    return __base;
  }
  inline ios_base& scientific(ios_base & __base)
  {
    __base.setf(ios_base::scientific, ios_base::floatfield);
    return __base;
  }
  inline ios_base& hexfloat(ios_base & __base)
  {
    __base.setf(ios_base::fixed | ios_base::scientific, ios_base::floatfield);
    return __base;
  }
  inline ios_base& defaultfloat(ios_base & __base)
  {
    __base.unsetf(ios_base::floatfield);
    return __base;
  }
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _CharT, typename _Traits>
  streamsize __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>*, basic_streambuf<_CharT, _Traits>*, bool&);
  template <typename _CharT, typename _Traits>
  class basic_streambuf
  {
  public:
    typedef _CharT char_type;
    typedef _Traits traits_type;
    typedef typename traits_type::int_type int_type;
    typedef typename traits_type::pos_type pos_type;
    typedef typename traits_type::off_type off_type;
    typedef basic_streambuf<char_type, traits_type> __streambuf_type;
    friend class basic_ios<char_type, traits_type>;
    friend class basic_istream<char_type, traits_type>;
    friend class basic_ostream<char_type, traits_type>;
    friend class istreambuf_iterator<char_type, traits_type>;
    friend class ostreambuf_iterator<char_type, traits_type>;
    friend streamsize __copy_streambufs_eof<>(basic_streambuf*, basic_streambuf*, bool&);
    template <bool _IsMove, typename _CharT2>
    friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, _CharT2*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>, _CharT2*);
    template <typename _CharT2>
    friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, istreambuf_iterator<_CharT2>>::__type
    find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>, const _CharT2&);
    template <typename _CharT2, typename _Distance>
    friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, void>::__type advance(
        istreambuf_iterator<_CharT2>&,
        _Distance);
    template <typename _CharT2, typename _Traits2>
    friend basic_istream<_CharT2, _Traits2>& operator>>(basic_istream<_CharT2, _Traits2>&, _CharT2*);
    template <typename _CharT2, typename _Traits2, typename _Alloc>
    friend basic_istream<_CharT2, _Traits2>& operator>>(basic_istream<_CharT2, _Traits2>&,
                                                        basic_string<_CharT2, _Traits2, _Alloc>&);
    template <typename _CharT2, typename _Traits2, typename _Alloc>
    friend basic_istream<_CharT2, _Traits2>& getline(basic_istream<_CharT2, _Traits2>&,
                                                     basic_string<_CharT2, _Traits2, _Alloc>&,
                                                     _CharT2);

  protected:
    char_type* _M_in_beg;
    char_type* _M_in_cur;
    char_type* _M_in_end;
    char_type* _M_out_beg;
    char_type* _M_out_cur;
    char_type* _M_out_end;
    locale _M_buf_locale;

  public:
    virtual ~basic_streambuf() {}
    locale pubimbue(const locale& __loc)
    {
      locale __tmp(this->getloc());
      this->imbue(__loc);
      _M_buf_locale = __loc;
      return __tmp;
    }
    locale getloc() const { return _M_buf_locale; }
    basic_streambuf* pubsetbuf(char_type* __s, streamsize __n) { return this->setbuf(__s, __n); }
    pos_type pubseekoff(off_type __off,
                        ios_base::seekdir __way,
                        ios_base::openmode __mode = ios_base::in | ios_base::out)
    {
      return this->seekoff(__off, __way, __mode);
    }
    pos_type pubseekpos(pos_type __sp, ios_base::openmode __mode = ios_base::in | ios_base::out)
    {
      return this->seekpos(__sp, __mode);
    }
    int pubsync() { return this->sync(); }
    streamsize in_avail()
    {
      const streamsize __ret = this->egptr() - this->gptr();
      return __ret ? __ret : this->showmanyc();
    }
    int_type snextc()
    {
      int_type __ret = traits_type::eof();
      if (__builtin_expect(!traits_type::eq_int_type(this->sbumpc(), __ret), true))
        __ret = this->sgetc();
      return __ret;
    }
    int_type sbumpc()
    {
      int_type __ret;
      if (__builtin_expect(this->gptr() < this->egptr(), true))
      {
        __ret = traits_type::to_int_type(*this->gptr());
        this->gbump(1);
      }
      else
        __ret = this->uflow();
      return __ret;
    }
    int_type sgetc()
    {
      int_type __ret;
      if (__builtin_expect(this->gptr() < this->egptr(), true))
        __ret = traits_type::to_int_type(*this->gptr());
      else
        __ret = this->underflow();
      return __ret;
    }
    streamsize sgetn(char_type* __s, streamsize __n) { return this->xsgetn(__s, __n); }
    int_type sputbackc(char_type __c)
    {
      int_type __ret;
      const bool __testpos = this->eback() < this->gptr();
      if (__builtin_expect(!__testpos || !traits_type::eq(__c, this->gptr()[-1]), false))
        __ret = this->pbackfail(traits_type::to_int_type(__c));
      else
      {
        this->gbump(-1);
        __ret = traits_type::to_int_type(*this->gptr());
      }
      return __ret;
    }
    int_type sungetc()
    {
      int_type __ret;
      if (__builtin_expect(this->eback() < this->gptr(), true))
      {
        this->gbump(-1);
        __ret = traits_type::to_int_type(*this->gptr());
      }
      else
        __ret = this->pbackfail();
      return __ret;
    }
    int_type sputc(char_type __c)
    {
      int_type __ret;
      if (__builtin_expect(this->pptr() < this->epptr(), true))
      {
        *this->pptr() = __c;
        this->pbump(1);
        __ret = traits_type::to_int_type(__c);
      }
      else
        __ret = this->overflow(traits_type::to_int_type(__c));
      return __ret;
    }
    streamsize sputn(const char_type* __s, streamsize __n) { return this->xsputn(__s, __n); }

  protected:
    basic_streambuf()
        : _M_in_beg(0), _M_in_cur(0), _M_in_end(0), _M_out_beg(0), _M_out_cur(0), _M_out_end(0), _M_buf_locale(locale())
    {
    }
    char_type* eback() const { return _M_in_beg; }
    char_type* gptr() const { return _M_in_cur; }
    char_type* egptr() const { return _M_in_end; }
    void gbump(int __n) { _M_in_cur += __n; }
    void setg(char_type* __gbeg, char_type* __gnext, char_type* __gend)
    {
      _M_in_beg = __gbeg;
      _M_in_cur = __gnext;
      _M_in_end = __gend;
    }
    char_type* pbase() const { return _M_out_beg; }
    char_type* pptr() const { return _M_out_cur; }
    char_type* epptr() const { return _M_out_end; }
    void pbump(int __n) { _M_out_cur += __n; }
    void setp(char_type* __pbeg, char_type* __pend)
    {
      _M_out_beg = _M_out_cur = __pbeg;
      _M_out_end = __pend;
    }
    virtual void imbue(const locale& __loc __attribute__((__unused__))) {}
    virtual basic_streambuf<char_type, _Traits>* setbuf(char_type*, streamsize) { return this; }
    virtual pos_type seekoff(off_type, ios_base::seekdir, ios_base::openmode = ios_base::in | ios_base::out)
    {
      return pos_type(off_type(-1));
    }
    virtual pos_type seekpos(pos_type, ios_base::openmode = ios_base::in | ios_base::out)
    {
      return pos_type(off_type(-1));
    }
    virtual int sync() { return 0; }
    virtual streamsize showmanyc() { return 0; }
    virtual streamsize xsgetn(char_type* __s, streamsize __n);
    virtual int_type underflow() { return traits_type::eof(); }
    virtual int_type uflow()
    {
      int_type __ret = traits_type::eof();
      const bool __testeof = traits_type::eq_int_type(this->underflow(), __ret);
      if (!__testeof)
      {
        __ret = traits_type::to_int_type(*this->gptr());
        this->gbump(1);
      }
      return __ret;
    }
    virtual int_type pbackfail(int_type __c __attribute__((__unused__)) = traits_type::eof())
    {
      return traits_type::eof();
    }
    virtual streamsize xsputn(const char_type* __s, streamsize __n);
    virtual int_type overflow(int_type __c __attribute__((__unused__)) = traits_type::eof())
    {
      return traits_type::eof();
    }
    void __safe_gbump(streamsize __n) { _M_in_cur += __n; }
    void __safe_pbump(streamsize __n) { _M_out_cur += __n; }

  protected:
    basic_streambuf(const basic_streambuf&);
    basic_streambuf& operator=(const basic_streambuf&);
    void swap(basic_streambuf& __sb)
    {
      std::swap(_M_in_beg, __sb._M_in_beg);
      std::swap(_M_in_cur, __sb._M_in_cur);
      std::swap(_M_in_end, __sb._M_in_end);
      std::swap(_M_out_beg, __sb._M_out_beg);
      std::swap(_M_out_cur, __sb._M_out_cur);
      std::swap(_M_out_end, __sb._M_out_end);
      std::swap(_M_buf_locale, __sb._M_buf_locale);
    }
  };
  template <typename _CharT, typename _Traits>
  std::basic_streambuf<_CharT, _Traits>::basic_streambuf(const basic_streambuf&) = default;
  template <typename _CharT, typename _Traits>
  std::basic_streambuf<_CharT, _Traits>& std::basic_streambuf<_CharT, _Traits>::operator=(const basic_streambuf&) =
      default;
  template <>
  streamsize __copy_streambufs_eof(basic_streambuf<char> * __sbin, basic_streambuf<char> * __sbout, bool& __ineof);
  template <>
  streamsize __copy_streambufs_eof(
      basic_streambuf<wchar_t> * __sbin, basic_streambuf<wchar_t> * __sbout, bool& __ineof);
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _CharT, typename _Traits>
  streamsize basic_streambuf<_CharT, _Traits>::xsgetn(char_type * __s, streamsize __n)
  {
    streamsize __ret = 0;
    while (__ret < __n)
    {
      const streamsize __buf_len = this->egptr() - this->gptr();
      if (__buf_len)
      {
        const streamsize __remaining = __n - __ret;
        const streamsize __len = std::min(__buf_len, __remaining);
        traits_type::copy(__s, this->gptr(), __len);
        __ret += __len;
        __s += __len;
        this->__safe_gbump(__len);
      }
      if (__ret < __n)
      {
        const int_type __c = this->uflow();
        if (!traits_type::eq_int_type(__c, traits_type::eof()))
        {
          traits_type::assign(*__s++, traits_type::to_char_type(__c));
          ++__ret;
        }
        else
          break;
      }
    }
    return __ret;
  }
  template <typename _CharT, typename _Traits>
  streamsize basic_streambuf<_CharT, _Traits>::xsputn(const char_type* __s, streamsize __n)
  {
    streamsize __ret = 0;
    while (__ret < __n)
    {
      const streamsize __buf_len = this->epptr() - this->pptr();
      if (__buf_len)
      {
        const streamsize __remaining = __n - __ret;
        const streamsize __len = std::min(__buf_len, __remaining);
        traits_type::copy(this->pptr(), __s, __len);
        __ret += __len;
        __s += __len;
        this->__safe_pbump(__len);
      }
      if (__ret < __n)
      {
        int_type __c = this->overflow(traits_type::to_int_type(*__s));
        if (!traits_type::eq_int_type(__c, traits_type::eof()))
        {
          ++__ret;
          ++__s;
        }
        else
          break;
      }
    }
    return __ret;
  }
  template <typename _CharT, typename _Traits>
  streamsize __copy_streambufs_eof(
      basic_streambuf<_CharT, _Traits> * __sbin, basic_streambuf<_CharT, _Traits> * __sbout, bool& __ineof)
  {
    streamsize __ret = 0;
    __ineof = true;
    typename _Traits::int_type __c = __sbin->sgetc();
    while (!_Traits::eq_int_type(__c, _Traits::eof()))
    {
      __c = __sbout->sputc(_Traits::to_char_type(__c));
      if (_Traits::eq_int_type(__c, _Traits::eof()))
      {
        __ineof = false;
        break;
      }
      ++__ret;
      __c = __sbin->snextc();
    }
    return __ret;
  }
  template <typename _CharT, typename _Traits>
  inline streamsize __copy_streambufs(basic_streambuf<_CharT, _Traits> * __sbin,
                                      basic_streambuf<_CharT, _Traits> * __sbout)
  {
    bool __ineof;
    return __copy_streambufs_eof(__sbin, __sbout, __ineof);
  }
  extern template class basic_streambuf<char>;
  extern template streamsize __copy_streambufs(basic_streambuf<char>*, basic_streambuf<char>*);
  extern template streamsize __copy_streambufs_eof(basic_streambuf<char>*, basic_streambuf<char>*, bool&);
  extern template class basic_streambuf<wchar_t>;
  extern template streamsize __copy_streambufs(basic_streambuf<wchar_t>*, basic_streambuf<wchar_t>*);
  extern template streamsize __copy_streambufs_eof(basic_streambuf<wchar_t>*, basic_streambuf<wchar_t>*, bool&);
}  // namespace )
typedef unsigned long int wctype_t;
enum
{
  __ISwupper = 0,
  __ISwlower = 1,
  __ISwalpha = 2,
  __ISwdigit = 3,
  __ISwxdigit = 4,
  __ISwspace = 5,
  __ISwprint = 6,
  __ISwgraph = 7,
  __ISwblank = 8,
  __ISwcntrl = 9,
  __ISwpunct = 10,
  __ISwalnum = 11,
  _ISwupper = ((__ISwupper) < 8 ? (int)((1UL << (__ISwupper)) << 24)
                                : ((__ISwupper) < 16 ? (int)((1UL << (__ISwupper)) << 8)
                                                     : ((__ISwupper) < 24 ? (int)((1UL << (__ISwupper)) >> 8)
                                                                          : (int)((1UL << (__ISwupper)) >> 24)))),
  _ISwlower = ((__ISwlower) < 8 ? (int)((1UL << (__ISwlower)) << 24)
                                : ((__ISwlower) < 16 ? (int)((1UL << (__ISwlower)) << 8)
                                                     : ((__ISwlower) < 24 ? (int)((1UL << (__ISwlower)) >> 8)
                                                                          : (int)((1UL << (__ISwlower)) >> 24)))),
  _ISwalpha = ((__ISwalpha) < 8 ? (int)((1UL << (__ISwalpha)) << 24)
                                : ((__ISwalpha) < 16 ? (int)((1UL << (__ISwalpha)) << 8)
                                                     : ((__ISwalpha) < 24 ? (int)((1UL << (__ISwalpha)) >> 8)
                                                                          : (int)((1UL << (__ISwalpha)) >> 24)))),
  _ISwdigit = ((__ISwdigit) < 8 ? (int)((1UL << (__ISwdigit)) << 24)
                                : ((__ISwdigit) < 16 ? (int)((1UL << (__ISwdigit)) << 8)
                                                     : ((__ISwdigit) < 24 ? (int)((1UL << (__ISwdigit)) >> 8)
                                                                          : (int)((1UL << (__ISwdigit)) >> 24)))),
  _ISwxdigit = ((__ISwxdigit) < 8 ? (int)((1UL << (__ISwxdigit)) << 24)
                                  : ((__ISwxdigit) < 16 ? (int)((1UL << (__ISwxdigit)) << 8)
                                                        : ((__ISwxdigit) < 24 ? (int)((1UL << (__ISwxdigit)) >> 8)
                                                                              : (int)((1UL << (__ISwxdigit)) >> 24)))),
  _ISwspace = ((__ISwspace) < 8 ? (int)((1UL << (__ISwspace)) << 24)
                                : ((__ISwspace) < 16 ? (int)((1UL << (__ISwspace)) << 8)
                                                     : ((__ISwspace) < 24 ? (int)((1UL << (__ISwspace)) >> 8)
                                                                          : (int)((1UL << (__ISwspace)) >> 24)))),
  _ISwprint = ((__ISwprint) < 8 ? (int)((1UL << (__ISwprint)) << 24)
                                : ((__ISwprint) < 16 ? (int)((1UL << (__ISwprint)) << 8)
                                                     : ((__ISwprint) < 24 ? (int)((1UL << (__ISwprint)) >> 8)
                                                                          : (int)((1UL << (__ISwprint)) >> 24)))),
  _ISwgraph = ((__ISwgraph) < 8 ? (int)((1UL << (__ISwgraph)) << 24)
                                : ((__ISwgraph) < 16 ? (int)((1UL << (__ISwgraph)) << 8)
                                                     : ((__ISwgraph) < 24 ? (int)((1UL << (__ISwgraph)) >> 8)
                                                                          : (int)((1UL << (__ISwgraph)) >> 24)))),
  _ISwblank = ((__ISwblank) < 8 ? (int)((1UL << (__ISwblank)) << 24)
                                : ((__ISwblank) < 16 ? (int)((1UL << (__ISwblank)) << 8)
                                                     : ((__ISwblank) < 24 ? (int)((1UL << (__ISwblank)) >> 8)
                                                                          : (int)((1UL << (__ISwblank)) >> 24)))),
  _ISwcntrl = ((__ISwcntrl) < 8 ? (int)((1UL << (__ISwcntrl)) << 24)
                                : ((__ISwcntrl) < 16 ? (int)((1UL << (__ISwcntrl)) << 8)
                                                     : ((__ISwcntrl) < 24 ? (int)((1UL << (__ISwcntrl)) >> 8)
                                                                          : (int)((1UL << (__ISwcntrl)) >> 24)))),
  _ISwpunct = ((__ISwpunct) < 8 ? (int)((1UL << (__ISwpunct)) << 24)
                                : ((__ISwpunct) < 16 ? (int)((1UL << (__ISwpunct)) << 8)
                                                     : ((__ISwpunct) < 24 ? (int)((1UL << (__ISwpunct)) >> 8)
                                                                          : (int)((1UL << (__ISwpunct)) >> 24)))),
  _ISwalnum = ((__ISwalnum) < 8 ? (int)((1UL << (__ISwalnum)) << 24)
                                : ((__ISwalnum) < 16 ? (int)((1UL << (__ISwalnum)) << 8)
                                                     : ((__ISwalnum) < 24 ? (int)((1UL << (__ISwalnum)) >> 8)
                                                                          : (int)((1UL << (__ISwalnum)) >> 24))))
};
extern "C" {
extern int iswalnum(wint_t __wc) throw();
extern int iswalpha(wint_t __wc) throw();
extern int iswcntrl(wint_t __wc) throw();
extern int iswdigit(wint_t __wc) throw();
extern int iswgraph(wint_t __wc) throw();
extern int iswlower(wint_t __wc) throw();
extern int iswprint(wint_t __wc) throw();
extern int iswpunct(wint_t __wc) throw();
extern int iswspace(wint_t __wc) throw();
extern int iswupper(wint_t __wc) throw();
extern int iswxdigit(wint_t __wc) throw();
extern int iswblank(wint_t __wc) throw();
extern wctype_t wctype(const char* __property) throw();
extern int iswctype(wint_t __wc, wctype_t __desc) throw();
extern wint_t towlower(wint_t __wc) throw();
extern wint_t towupper(wint_t __wc) throw();
}
extern "C" {
typedef const __int32_t* wctrans_t;
extern wctrans_t wctrans(const char* __property) throw();
extern wint_t towctrans(wint_t __wc, wctrans_t __desc) throw();
extern int iswalnum_l(wint_t __wc, locale_t __locale) throw();
extern int iswalpha_l(wint_t __wc, locale_t __locale) throw();
extern int iswcntrl_l(wint_t __wc, locale_t __locale) throw();
extern int iswdigit_l(wint_t __wc, locale_t __locale) throw();
extern int iswgraph_l(wint_t __wc, locale_t __locale) throw();
extern int iswlower_l(wint_t __wc, locale_t __locale) throw();
extern int iswprint_l(wint_t __wc, locale_t __locale) throw();
extern int iswpunct_l(wint_t __wc, locale_t __locale) throw();
extern int iswspace_l(wint_t __wc, locale_t __locale) throw();
extern int iswupper_l(wint_t __wc, locale_t __locale) throw();
extern int iswxdigit_l(wint_t __wc, locale_t __locale) throw();
extern int iswblank_l(wint_t __wc, locale_t __locale) throw();
extern wctype_t wctype_l(const char* __property, locale_t __locale) throw();
extern int iswctype_l(wint_t __wc, wctype_t __desc, locale_t __locale) throw();
extern wint_t towlower_l(wint_t __wc, locale_t __locale) throw();
extern wint_t towupper_l(wint_t __wc, locale_t __locale) throw();
extern wctrans_t wctrans_l(const char* __property, locale_t __locale) throw();
extern wint_t towctrans_l(wint_t __wc, wctrans_t __desc, locale_t __locale) throw();
}
namespace std
{
using ::iswalnum;
using ::iswalpha;
using ::iswblank;
using ::iswcntrl;
using ::iswctype;
using ::iswdigit;
using ::iswgraph;
using ::iswlower;
using ::iswprint;
using ::iswpunct;
using ::iswspace;
using ::iswupper;
using ::iswxdigit;
using ::towctrans;
using ::towlower;
using ::towupper;
using ::wctrans;
using ::wctrans_t;
using ::wctype;
using ::wctype_t;
using ::wint_t;
}  // namespace std
namespace std __attribute__((__visibility__("default")))
{
  struct ctype_base
  {
    typedef const int* __to_type;
    typedef unsigned short mask;
    static const mask upper = _ISupper;
    static const mask lower = _ISlower;
    static const mask alpha = _ISalpha;
    static const mask digit = _ISdigit;
    static const mask xdigit = _ISxdigit;
    static const mask space = _ISspace;
    static const mask print = _ISprint;
    static const mask graph = _ISalpha | _ISdigit | _ISpunct;
    static const mask cntrl = _IScntrl;
    static const mask punct = _ISpunct;
    static const mask alnum = _ISalpha | _ISdigit;
    static const mask blank = _ISblank;
  };
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _CharT, typename _Traits>
  class istreambuf_iterator : public iterator<input_iterator_tag, _CharT, typename _Traits::off_type, _CharT*, _CharT>
  {
  public:
    typedef _CharT char_type;
    typedef _Traits traits_type;
    typedef typename _Traits::int_type int_type;
    typedef basic_streambuf<_CharT, _Traits> streambuf_type;
    typedef basic_istream<_CharT, _Traits> istream_type;
    template <typename _CharT2>
    friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, ostreambuf_iterator<_CharT2>>::__type
        copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>, ostreambuf_iterator<_CharT2>);
    template <bool _IsMove, typename _CharT2>
    friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, _CharT2*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>, _CharT2*);
    template <typename _CharT2>
    friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, istreambuf_iterator<_CharT2>>::__type
    find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>, const _CharT2&);
    template <typename _CharT2, typename _Distance>
    friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, void>::__type advance(
        istreambuf_iterator<_CharT2>&,
        _Distance);

  private:
    mutable streambuf_type* _M_sbuf;
    int_type _M_c;

  public:
    constexpr istreambuf_iterator() noexcept : _M_sbuf(0), _M_c(traits_type::eof()) {}
    istreambuf_iterator(const istreambuf_iterator&) noexcept = default;
    ~istreambuf_iterator() = default;
    istreambuf_iterator(istream_type& __s) noexcept : _M_sbuf(__s.rdbuf()), _M_c(traits_type::eof()) {}
    istreambuf_iterator(streambuf_type* __s) noexcept : _M_sbuf(__s), _M_c(traits_type::eof()) {}
    istreambuf_iterator& operator=(const istreambuf_iterator&) noexcept = default;
    char_type operator*() const
    {
      int_type __c = _M_get();
      return traits_type::to_char_type(__c);
    }
    istreambuf_iterator& operator++()
    {
      ;
      _M_sbuf->sbumpc();
      _M_c = traits_type::eof();
      return *this;
    }
    istreambuf_iterator operator++(int)
    {
      ;
      istreambuf_iterator __old = *this;
      __old._M_c = _M_sbuf->sbumpc();
      _M_c = traits_type::eof();
      return __old;
    }
    bool equal(const istreambuf_iterator& __b) const { return _M_at_eof() == __b._M_at_eof(); }

  private:
    int_type _M_get() const
    {
      int_type __ret = _M_c;
      if (_M_sbuf && _S_is_eof(__ret) && _S_is_eof(__ret = _M_sbuf->sgetc()))
        _M_sbuf = 0;
      return __ret;
    }
    bool _M_at_eof() const { return _S_is_eof(_M_get()); }
    static bool _S_is_eof(int_type __c)
    {
      const int_type __eof = traits_type::eof();
      return traits_type::eq_int_type(__c, __eof);
    }
  };
  template <typename _CharT, typename _Traits>
  inline bool operator==(const istreambuf_iterator<_CharT, _Traits>& __a,
                         const istreambuf_iterator<_CharT, _Traits>& __b)
  {
    return __a.equal(__b);
  }
  template <typename _CharT, typename _Traits>
  inline bool operator!=(const istreambuf_iterator<_CharT, _Traits>& __a,
                         const istreambuf_iterator<_CharT, _Traits>& __b)
  {
    return !__a.equal(__b);
  }
  template <typename _CharT, typename _Traits>
  class ostreambuf_iterator : public iterator<output_iterator_tag, void, void, void, void>
  {
  public:
    typedef _CharT char_type;
    typedef _Traits traits_type;
    typedef basic_streambuf<_CharT, _Traits> streambuf_type;
    typedef basic_ostream<_CharT, _Traits> ostream_type;
    template <typename _CharT2>
    friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, ostreambuf_iterator<_CharT2>>::__type
        copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>, ostreambuf_iterator<_CharT2>);

  private:
    streambuf_type* _M_sbuf;
    bool _M_failed;

  public:
    ostreambuf_iterator(ostream_type& __s) noexcept : _M_sbuf(__s.rdbuf()), _M_failed(!_M_sbuf) {}
    ostreambuf_iterator(streambuf_type* __s) noexcept : _M_sbuf(__s), _M_failed(!_M_sbuf) {}
    ostreambuf_iterator& operator=(_CharT __c)
    {
      if (!_M_failed && _Traits::eq_int_type(_M_sbuf->sputc(__c), _Traits::eof()))
        _M_failed = true;
      return *this;
    }
    ostreambuf_iterator& operator*() { return *this; }
    ostreambuf_iterator& operator++(int) { return *this; }
    ostreambuf_iterator& operator++() { return *this; }
    bool failed() const noexcept { return _M_failed; }
    ostreambuf_iterator& _M_put(const _CharT* __ws, streamsize __len)
    {
      if (__builtin_expect(!_M_failed, true) && __builtin_expect(this->_M_sbuf->sputn(__ws, __len) != __len, false))
        _M_failed = true;
      return *this;
    }
  };
  template <typename _CharT>
  typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, ostreambuf_iterator<_CharT>>::__type copy(
      istreambuf_iterator<_CharT> __first, istreambuf_iterator<_CharT> __last, ostreambuf_iterator<_CharT> __result)
  {
    if (__first._M_sbuf && !__last._M_sbuf && !__result._M_failed)
    {
      bool __ineof;
      __copy_streambufs_eof(__first._M_sbuf, __result._M_sbuf, __ineof);
      if (!__ineof)
        __result._M_failed = true;
    }
    return __result;
  }
  template <bool _IsMove, typename _CharT>
  typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, ostreambuf_iterator<_CharT>>::__type __copy_move_a2(
      _CharT * __first, _CharT * __last, ostreambuf_iterator<_CharT> __result)
  {
    const streamsize __num = __last - __first;
    if (__num > 0)
      __result._M_put(__first, __num);
    return __result;
  }
  template <bool _IsMove, typename _CharT>
  typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, ostreambuf_iterator<_CharT>>::__type __copy_move_a2(
      const _CharT* __first, const _CharT* __last, ostreambuf_iterator<_CharT> __result)
  {
    const streamsize __num = __last - __first;
    if (__num > 0)
      __result._M_put(__first, __num);
    return __result;
  }
  template <bool _IsMove, typename _CharT>
  typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, _CharT*>::__type __copy_move_a2(
      istreambuf_iterator<_CharT> __first, istreambuf_iterator<_CharT> __last, _CharT * __result)
  {
    typedef istreambuf_iterator<_CharT> __is_iterator_type;
    typedef typename __is_iterator_type::traits_type traits_type;
    typedef typename __is_iterator_type::streambuf_type streambuf_type;
    typedef typename traits_type::int_type int_type;
    if (__first._M_sbuf && !__last._M_sbuf)
    {
      streambuf_type* __sb = __first._M_sbuf;
      int_type __c = __sb->sgetc();
      while (!traits_type::eq_int_type(__c, traits_type::eof()))
      {
        const streamsize __n = __sb->egptr() - __sb->gptr();
        if (__n > 1)
        {
          traits_type::copy(__result, __sb->gptr(), __n);
          __sb->__safe_gbump(__n);
          __result += __n;
          __c = __sb->underflow();
        }
        else
        {
          *__result++ = traits_type::to_char_type(__c);
          __c = __sb->snextc();
        }
      }
    }
    return __result;
  }
  template <typename _CharT>
  typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, istreambuf_iterator<_CharT>>::__type find(
      istreambuf_iterator<_CharT> __first, istreambuf_iterator<_CharT> __last, const _CharT& __val)
  {
    typedef istreambuf_iterator<_CharT> __is_iterator_type;
    typedef typename __is_iterator_type::traits_type traits_type;
    typedef typename __is_iterator_type::streambuf_type streambuf_type;
    typedef typename traits_type::int_type int_type;
    const int_type __eof = traits_type::eof();
    if (__first._M_sbuf && !__last._M_sbuf)
    {
      const int_type __ival = traits_type::to_int_type(__val);
      streambuf_type* __sb = __first._M_sbuf;
      int_type __c = __sb->sgetc();
      while (!traits_type::eq_int_type(__c, __eof) && !traits_type::eq_int_type(__c, __ival))
      {
        streamsize __n = __sb->egptr() - __sb->gptr();
        if (__n > 1)
        {
          const _CharT* __p = traits_type::find(__sb->gptr(), __n, __val);
          if (__p)
            __n = __p - __sb->gptr();
          __sb->__safe_gbump(__n);
          __c = __sb->sgetc();
        }
        else
          __c = __sb->snextc();
      }
      __first._M_c = __eof;
    }
    return __first;
  }
  template <typename _CharT, typename _Distance>
  typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, void>::__type advance(istreambuf_iterator<_CharT> & __i,
                                                                                    _Distance __n)
  {
    if (__n == 0)
      return;
    ;
    ;
    typedef istreambuf_iterator<_CharT> __is_iterator_type;
    typedef typename __is_iterator_type::traits_type traits_type;
    typedef typename __is_iterator_type::streambuf_type streambuf_type;
    typedef typename traits_type::int_type int_type;
    const int_type __eof = traits_type::eof();
    streambuf_type* __sb = __i._M_sbuf;
    while (__n > 0)
    {
      streamsize __size = __sb->egptr() - __sb->gptr();
      if (__size > __n)
      {
        __sb->__safe_gbump(__n);
        break;
      }
      __sb->__safe_gbump(__size);
      __n -= __size;
      if (traits_type::eq_int_type(__sb->underflow(), __eof))
      {
        ;
        break;
      }
    }
    __i._M_c = __eof;
  }
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _Tp>
  void __convert_to_v(const char*, _Tp&, ios_base::iostate&, const __c_locale&) throw();
  template <>
  void __convert_to_v(const char*, float&, ios_base::iostate&, const __c_locale&) throw();
  template <>
  void __convert_to_v(const char*, double&, ios_base::iostate&, const __c_locale&) throw();
  template <>
  void __convert_to_v(const char*, long double&, ios_base::iostate&, const __c_locale&) throw();
  template <typename _CharT, typename _Traits>
  struct __pad
  {
    static void _S_pad(ios_base& __io,
                       _CharT __fill,
                       _CharT* __news,
                       const _CharT* __olds,
                       streamsize __newlen,
                       streamsize __oldlen);
  };
  template <typename _CharT>
  _CharT* __add_grouping(
      _CharT * __s, _CharT __sep, const char* __gbeg, size_t __gsize, const _CharT* __first, const _CharT* __last);
  template <typename _CharT>
  inline ostreambuf_iterator<_CharT> __write(ostreambuf_iterator<_CharT> __s, const _CharT* __ws, int __len)
  {
    __s._M_put(__ws, __len);
    return __s;
  }
  template <typename _CharT, typename _OutIter>
  inline _OutIter __write(_OutIter __s, const _CharT* __ws, int __len)
  {
    for (int __j = 0; __j < __len; __j++, ++__s)
      *__s = __ws[__j];
    return __s;
  }
  template <typename _CharT>
  class __ctype_abstract_base : public locale::facet, public ctype_base
  {
  public:
    typedef _CharT char_type;
    bool is(mask __m, char_type __c) const { return this->do_is(__m, __c); }
    const char_type* is(const char_type* __lo, const char_type* __hi, mask* __vec) const
    {
      return this->do_is(__lo, __hi, __vec);
    }
    const char_type* scan_is(mask __m, const char_type* __lo, const char_type* __hi) const
    {
      return this->do_scan_is(__m, __lo, __hi);
    }
    const char_type* scan_not(mask __m, const char_type* __lo, const char_type* __hi) const
    {
      return this->do_scan_not(__m, __lo, __hi);
    }
    char_type toupper(char_type __c) const { return this->do_toupper(__c); }
    const char_type* toupper(char_type* __lo, const char_type* __hi) const { return this->do_toupper(__lo, __hi); }
    char_type tolower(char_type __c) const { return this->do_tolower(__c); }
    const char_type* tolower(char_type* __lo, const char_type* __hi) const { return this->do_tolower(__lo, __hi); }
    char_type widen(char __c) const { return this->do_widen(__c); }
    const char* widen(const char* __lo, const char* __hi, char_type* __to) const
    {
      return this->do_widen(__lo, __hi, __to);
    }
    char narrow(char_type __c, char __dfault) const { return this->do_narrow(__c, __dfault); }
    const char_type* narrow(const char_type* __lo, const char_type* __hi, char __dfault, char* __to) const
    {
      return this->do_narrow(__lo, __hi, __dfault, __to);
    }

  protected:
    explicit __ctype_abstract_base(size_t __refs = 0) : facet(__refs) {}
    virtual ~__ctype_abstract_base() {}
    virtual bool do_is(mask __m, char_type __c) const = 0;
    virtual const char_type* do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const = 0;
    virtual const char_type* do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const = 0;
    virtual const char_type* do_scan_not(mask __m, const char_type* __lo, const char_type* __hi) const = 0;
    virtual char_type do_toupper(char_type __c) const = 0;
    virtual const char_type* do_toupper(char_type* __lo, const char_type* __hi) const = 0;
    virtual char_type do_tolower(char_type __c) const = 0;
    virtual const char_type* do_tolower(char_type* __lo, const char_type* __hi) const = 0;
    virtual char_type do_widen(char __c) const = 0;
    virtual const char* do_widen(const char* __lo, const char* __hi, char_type* __to) const = 0;
    virtual char do_narrow(char_type __c, char __dfault) const = 0;
    virtual const char_type* do_narrow(const char_type* __lo,
                                       const char_type* __hi,
                                       char __dfault,
                                       char* __to) const = 0;
  };
  template <typename _CharT>
  class ctype : public __ctype_abstract_base<_CharT>
  {
  public:
    typedef _CharT char_type;
    typedef typename __ctype_abstract_base<_CharT>::mask mask;
    static locale::id id;
    explicit ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) {}

  protected:
    virtual ~ctype();
    virtual bool do_is(mask __m, char_type __c) const;
    virtual const char_type* do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;
    virtual const char_type* do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;
    virtual const char_type* do_scan_not(mask __m, const char_type* __lo, const char_type* __hi) const;
    virtual char_type do_toupper(char_type __c) const;
    virtual const char_type* do_toupper(char_type* __lo, const char_type* __hi) const;
    virtual char_type do_tolower(char_type __c) const;
    virtual const char_type* do_tolower(char_type* __lo, const char_type* __hi) const;
    virtual char_type do_widen(char __c) const;
    virtual const char* do_widen(const char* __lo, const char* __hi, char_type* __dest) const;
    virtual char do_narrow(char_type, char __dfault) const;
    virtual const char_type* do_narrow(const char_type* __lo, const char_type* __hi, char __dfault, char* __to) const;
  };
  template <typename _CharT>
  locale::id ctype<_CharT>::id;
  template <>
  class ctype<char> : public locale::facet, public ctype_base
  {
  public:
    typedef char char_type;

  protected:
    __c_locale _M_c_locale_ctype;
    bool _M_del;
    __to_type _M_toupper;
    __to_type _M_tolower;
    const mask* _M_table;
    mutable char _M_widen_ok;
    mutable char _M_widen[1 + static_cast<unsigned char>(-1)];
    mutable char _M_narrow[1 + static_cast<unsigned char>(-1)];
    mutable char _M_narrow_ok;

  public:
    static locale::id id;
    static const size_t table_size = 1 + static_cast<unsigned char>(-1);
    explicit ctype(const mask* __table = 0, bool __del = false, size_t __refs = 0);
    explicit ctype(__c_locale __cloc, const mask* __table = 0, bool __del = false, size_t __refs = 0);
    inline bool is(mask __m, char __c) const;
    inline const char* is(const char* __lo, const char* __hi, mask* __vec) const;
    inline const char* scan_is(mask __m, const char* __lo, const char* __hi) const;
    inline const char* scan_not(mask __m, const char* __lo, const char* __hi) const;
    char_type toupper(char_type __c) const { return this->do_toupper(__c); }
    const char_type* toupper(char_type* __lo, const char_type* __hi) const { return this->do_toupper(__lo, __hi); }
    char_type tolower(char_type __c) const { return this->do_tolower(__c); }
    const char_type* tolower(char_type* __lo, const char_type* __hi) const { return this->do_tolower(__lo, __hi); }
    char_type widen(char __c) const
    {
      if (_M_widen_ok)
        return _M_widen[static_cast<unsigned char>(__c)];
      this->_M_widen_init();
      return this->do_widen(__c);
    }
    const char* widen(const char* __lo, const char* __hi, char_type* __to) const
    {
      if (_M_widen_ok == 1)
      {
        if (__builtin_expect(__hi != __lo, true))
          __builtin_memcpy(__to, __lo, __hi - __lo);
        return __hi;
      }
      if (!_M_widen_ok)
        _M_widen_init();
      return this->do_widen(__lo, __hi, __to);
    }
    char narrow(char_type __c, char __dfault) const
    {
      if (_M_narrow[static_cast<unsigned char>(__c)])
        return _M_narrow[static_cast<unsigned char>(__c)];
      const char __t = do_narrow(__c, __dfault);
      if (__t != __dfault)
        _M_narrow[static_cast<unsigned char>(__c)] = __t;
      return __t;
    }
    const char_type* narrow(const char_type* __lo, const char_type* __hi, char __dfault, char* __to) const
    {
      if (__builtin_expect(_M_narrow_ok == 1, true))
      {
        if (__builtin_expect(__hi != __lo, true))
          __builtin_memcpy(__to, __lo, __hi - __lo);
        return __hi;
      }
      if (!_M_narrow_ok)
        _M_narrow_init();
      return this->do_narrow(__lo, __hi, __dfault, __to);
    }
    const mask* table() const throw() { return _M_table; }
    static const mask* classic_table() throw();

  protected:
    virtual ~ctype();
    virtual char_type do_toupper(char_type __c) const;
    virtual const char_type* do_toupper(char_type* __lo, const char_type* __hi) const;
    virtual char_type do_tolower(char_type __c) const;
    virtual const char_type* do_tolower(char_type* __lo, const char_type* __hi) const;
    virtual char_type do_widen(char __c) const { return __c; }
    virtual const char* do_widen(const char* __lo, const char* __hi, char_type* __to) const
    {
      if (__builtin_expect(__hi != __lo, true))
        __builtin_memcpy(__to, __lo, __hi - __lo);
      return __hi;
    }
    virtual char do_narrow(char_type __c, char __dfault __attribute__((__unused__))) const { return __c; }
    virtual const char_type* do_narrow(const char_type* __lo,
                                       const char_type* __hi,
                                       char __dfault __attribute__((__unused__)),
                                       char* __to) const
    {
      if (__builtin_expect(__hi != __lo, true))
        __builtin_memcpy(__to, __lo, __hi - __lo);
      return __hi;
    }

  private:
    void _M_narrow_init() const;
    void _M_widen_init() const;
  };
  template <>
  class ctype<wchar_t> : public __ctype_abstract_base<wchar_t>
  {
  public:
    typedef wchar_t char_type;
    typedef wctype_t __wmask_type;

  protected:
    __c_locale _M_c_locale_ctype;
    bool _M_narrow_ok;
    char _M_narrow[128];
    wint_t _M_widen[1 + static_cast<unsigned char>(-1)];
    mask _M_bit[16];
    __wmask_type _M_wmask[16];

  public:
    static locale::id id;
    explicit ctype(size_t __refs = 0);
    explicit ctype(__c_locale __cloc, size_t __refs = 0);

  protected:
    __wmask_type _M_convert_to_wmask(const mask __m) const throw();
    virtual ~ctype();
    virtual bool do_is(mask __m, char_type __c) const;
    virtual const char_type* do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;
    virtual const char_type* do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;
    virtual const char_type* do_scan_not(mask __m, const char_type* __lo, const char_type* __hi) const;
    virtual char_type do_toupper(char_type __c) const;
    virtual const char_type* do_toupper(char_type* __lo, const char_type* __hi) const;
    virtual char_type do_tolower(char_type __c) const;
    virtual const char_type* do_tolower(char_type* __lo, const char_type* __hi) const;
    virtual char_type do_widen(char __c) const;
    virtual const char* do_widen(const char* __lo, const char* __hi, char_type* __to) const;
    virtual char do_narrow(char_type __c, char __dfault) const;
    virtual const char_type* do_narrow(const char_type* __lo, const char_type* __hi, char __dfault, char* __to) const;
    void _M_initialize_ctype() throw();
  };
  template <typename _CharT>
  class ctype_byname : public ctype<_CharT>
  {
  public:
    typedef typename ctype<_CharT>::mask mask;
    explicit ctype_byname(const char* __s, size_t __refs = 0);
    explicit ctype_byname(const string& __s, size_t __refs = 0) : ctype_byname(__s.c_str(), __refs) {}

  protected:
    virtual ~ctype_byname() {}
  };
  template <>
  class ctype_byname<char> : public ctype<char>
  {
  public:
    explicit ctype_byname(const char* __s, size_t __refs = 0);
    explicit ctype_byname(const string& __s, size_t __refs = 0);

  protected:
    virtual ~ctype_byname();
  };
  template <>
  class ctype_byname<wchar_t> : public ctype<wchar_t>
  {
  public:
    explicit ctype_byname(const char* __s, size_t __refs = 0);
    explicit ctype_byname(const string& __s, size_t __refs = 0);

  protected:
    virtual ~ctype_byname();
  };
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  bool ctype<char>::is(mask __m, char __c) const { return _M_table[static_cast<unsigned char>(__c)] & __m; }
  const char* ctype<char>::is(const char* __low, const char* __high, mask* __vec) const
  {
    while (__low < __high)
      *__vec++ = _M_table[static_cast<unsigned char>(*__low++)];
    return __high;
  }
  const char* ctype<char>::scan_is(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high && !(_M_table[static_cast<unsigned char>(*__low)] & __m))
      ++__low;
    return __low;
  }
  const char* ctype<char>::scan_not(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high && (_M_table[static_cast<unsigned char>(*__low)] & __m) != 0)
      ++__low;
    return __low;
  }
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  class __num_base
  {
  public:
    enum
    {
      _S_ominus,
      _S_oplus,
      _S_ox,
      _S_oX,
      _S_odigits,
      _S_odigits_end = _S_odigits + 16,
      _S_oudigits = _S_odigits_end,
      _S_oudigits_end = _S_oudigits + 16,
      _S_oe = _S_odigits + 14,
      _S_oE = _S_oudigits + 14,
      _S_oend = _S_oudigits_end
    };
    static const char* _S_atoms_out;
    static const char* _S_atoms_in;
    enum
    {
      _S_iminus,
      _S_iplus,
      _S_ix,
      _S_iX,
      _S_izero,
      _S_ie = _S_izero + 14,
      _S_iE = _S_izero + 20,
      _S_iend = 26
    };
    static void _S_format_float(const ios_base& __io, char* __fptr, char __mod) throw();
  };
  template <typename _CharT>
  struct __numpunct_cache : public locale::facet
  {
    const char* _M_grouping;
    size_t _M_grouping_size;
    bool _M_use_grouping;
    const _CharT* _M_truename;
    size_t _M_truename_size;
    const _CharT* _M_falsename;
    size_t _M_falsename_size;
    _CharT _M_decimal_point;
    _CharT _M_thousands_sep;
    _CharT _M_atoms_out[__num_base::_S_oend];
    _CharT _M_atoms_in[__num_base::_S_iend];
    bool _M_allocated;
    __numpunct_cache(size_t __refs = 0)
        : facet(__refs),
          _M_grouping(0),
          _M_grouping_size(0),
          _M_use_grouping(false),
          _M_truename(0),
          _M_truename_size(0),
          _M_falsename(0),
          _M_falsename_size(0),
          _M_decimal_point(_CharT()),
          _M_thousands_sep(_CharT()),
          _M_allocated(false)
    {
    }
    ~__numpunct_cache();
    void _M_cache(const locale& __loc);

  private:
    __numpunct_cache& operator=(const __numpunct_cache&);
    explicit __numpunct_cache(const __numpunct_cache&);
  };
  template <typename _CharT>
  __numpunct_cache<_CharT>::~__numpunct_cache()
  {
    if (_M_allocated)
    {
      delete[] _M_grouping;
      delete[] _M_truename;
      delete[] _M_falsename;
    }
  }
  namespace __cxx11
  {
  template <typename _CharT>
  class numpunct : public locale::facet
  {
  public:
    typedef _CharT char_type;
    typedef basic_string<_CharT> string_type;
    typedef __numpunct_cache<_CharT> __cache_type;

  protected:
    __cache_type* _M_data;

  public:
    static locale::id id;
    explicit numpunct(size_t __refs = 0) : facet(__refs), _M_data(0) { _M_initialize_numpunct(); }
    explicit numpunct(__cache_type* __cache, size_t __refs = 0) : facet(__refs), _M_data(__cache)
    {
      _M_initialize_numpunct();
    }
    explicit numpunct(__c_locale __cloc, size_t __refs = 0) : facet(__refs), _M_data(0)
    {
      _M_initialize_numpunct(__cloc);
    }
    char_type decimal_point() const { return this->do_decimal_point(); }
    char_type thousands_sep() const { return this->do_thousands_sep(); }
    string grouping() const { return this->do_grouping(); }
    string_type truename() const { return this->do_truename(); }
    string_type falsename() const { return this->do_falsename(); }

  protected:
    virtual ~numpunct();
    virtual char_type do_decimal_point() const { return _M_data->_M_decimal_point; }
    virtual char_type do_thousands_sep() const { return _M_data->_M_thousands_sep; }
    virtual string do_grouping() const { return _M_data->_M_grouping; }
    virtual string_type do_truename() const { return _M_data->_M_truename; }
    virtual string_type do_falsename() const { return _M_data->_M_falsename; }
    void _M_initialize_numpunct(__c_locale __cloc = 0);
  };
  template <typename _CharT>
  locale::id numpunct<_CharT>::id;
  template <>
  numpunct<char>::~numpunct();
  template <>
  void numpunct<char>::_M_initialize_numpunct(__c_locale __cloc);
  template <>
  numpunct<wchar_t>::~numpunct();
  template <>
  void numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc);
  template <typename _CharT>
  class numpunct_byname : public numpunct<_CharT>
  {
  public:
    typedef _CharT char_type;
    typedef basic_string<_CharT> string_type;
    explicit numpunct_byname(const char* __s, size_t __refs = 0) : numpunct<_CharT>(__refs)
    {
      if (__builtin_strcmp(__s, "C") != 0 && __builtin_strcmp(__s, "POSIX") != 0)
      {
        __c_locale __tmp;
        this->_S_create_c_locale(__tmp, __s);
        this->_M_initialize_numpunct(__tmp);
        this->_S_destroy_c_locale(__tmp);
      }
    }
    explicit numpunct_byname(const string& __s, size_t __refs = 0) : numpunct_byname(__s.c_str(), __refs) {}

  protected:
    virtual ~numpunct_byname() {}
  };
  }  // namespace __cxx11
  template <typename _CharT, typename _InIter>
  class num_get : public locale::facet
  {
  public:
    typedef _CharT char_type;
    typedef _InIter iter_type;
    static locale::id id;
    explicit num_get(size_t __refs = 0) : facet(__refs) {}
    iter_type get(iter_type __in, iter_type __end, ios_base& __io, ios_base::iostate& __err, bool& __v) const
    {
      return this->do_get(__in, __end, __io, __err, __v);
    }
    iter_type get(iter_type __in, iter_type __end, ios_base& __io, ios_base::iostate& __err, long& __v) const
    {
      return this->do_get(__in, __end, __io, __err, __v);
    }
    iter_type get(iter_type __in, iter_type __end, ios_base& __io, ios_base::iostate& __err, unsigned short& __v) const
    {
      return this->do_get(__in, __end, __io, __err, __v);
    }
    iter_type get(iter_type __in, iter_type __end, ios_base& __io, ios_base::iostate& __err, unsigned int& __v) const
    {
      return this->do_get(__in, __end, __io, __err, __v);
    }
    iter_type get(iter_type __in, iter_type __end, ios_base& __io, ios_base::iostate& __err, unsigned long& __v) const
    {
      return this->do_get(__in, __end, __io, __err, __v);
    }
    iter_type get(iter_type __in, iter_type __end, ios_base& __io, ios_base::iostate& __err, long long& __v) const
    {
      return this->do_get(__in, __end, __io, __err, __v);
    }
    iter_type get(iter_type __in,
                  iter_type __end,
                  ios_base& __io,
                  ios_base::iostate& __err,
                  unsigned long long& __v) const
    {
      return this->do_get(__in, __end, __io, __err, __v);
    }
    iter_type get(iter_type __in, iter_type __end, ios_base& __io, ios_base::iostate& __err, float& __v) const
    {
      return this->do_get(__in, __end, __io, __err, __v);
    }
    iter_type get(iter_type __in, iter_type __end, ios_base& __io, ios_base::iostate& __err, double& __v) const
    {
      return this->do_get(__in, __end, __io, __err, __v);
    }
    iter_type get(iter_type __in, iter_type __end, ios_base& __io, ios_base::iostate& __err, long double& __v) const
    {
      return this->do_get(__in, __end, __io, __err, __v);
    }
    iter_type get(iter_type __in, iter_type __end, ios_base& __io, ios_base::iostate& __err, void*& __v) const
    {
      return this->do_get(__in, __end, __io, __err, __v);
    }

  protected:
    virtual ~num_get() {}
    __attribute((__abi_tag__("cxx11"))) iter_type _M_extract_float(iter_type,
                                                                   iter_type,
                                                                   ios_base&,
                                                                   ios_base::iostate&,
                                                                   string&) const;
    template <typename _ValueT>
    __attribute((__abi_tag__("cxx11"))) iter_type _M_extract_int(iter_type,
                                                                 iter_type,
                                                                 ios_base&,
                                                                 ios_base::iostate&,
                                                                 _ValueT&) const;
    template <typename _CharT2>
    typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, int>::__type _M_find(const _CharT2*,
                                                                                      size_t __len,
                                                                                      _CharT2 __c) const
    {
      int __ret = -1;
      if (__len <= 10)
      {
        if (__c >= _CharT2('0') && __c < _CharT2(_CharT2('0') + __len))
          __ret = __c - _CharT2('0');
      }
      else
      {
        if (__c >= _CharT2('0') && __c <= _CharT2('9'))
          __ret = __c - _CharT2('0');
        else if (__c >= _CharT2('a') && __c <= _CharT2('f'))
          __ret = 10 + (__c - _CharT2('a'));
        else if (__c >= _CharT2('A') && __c <= _CharT2('F'))
          __ret = 10 + (__c - _CharT2('A'));
      }
      return __ret;
    }
    template <typename _CharT2>
    typename __gnu_cxx::__enable_if<!__is_char<_CharT2>::__value, int>::__type _M_find(const _CharT2* __zero,
                                                                                       size_t __len,
                                                                                       _CharT2 __c) const
    {
      int __ret = -1;
      const char_type* __q = char_traits<_CharT2>::find(__zero, __len, __c);
      if (__q)
      {
        __ret = __q - __zero;
        if (__ret > 15)
          __ret -= 6;
      }
      return __ret;
    }
    virtual iter_type do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const;
    virtual iter_type do_get(iter_type __beg,
                             iter_type __end,
                             ios_base& __io,
                             ios_base::iostate& __err,
                             long& __v) const
    {
      return _M_extract_int(__beg, __end, __io, __err, __v);
    }
    virtual iter_type do_get(iter_type __beg,
                             iter_type __end,
                             ios_base& __io,
                             ios_base::iostate& __err,
                             unsigned short& __v) const
    {
      return _M_extract_int(__beg, __end, __io, __err, __v);
    }
    virtual iter_type do_get(iter_type __beg,
                             iter_type __end,
                             ios_base& __io,
                             ios_base::iostate& __err,
                             unsigned int& __v) const
    {
      return _M_extract_int(__beg, __end, __io, __err, __v);
    }
    virtual iter_type do_get(iter_type __beg,
                             iter_type __end,
                             ios_base& __io,
                             ios_base::iostate& __err,
                             unsigned long& __v) const
    {
      return _M_extract_int(__beg, __end, __io, __err, __v);
    }
    virtual iter_type do_get(iter_type __beg,
                             iter_type __end,
                             ios_base& __io,
                             ios_base::iostate& __err,
                             long long& __v) const
    {
      return _M_extract_int(__beg, __end, __io, __err, __v);
    }
    virtual iter_type do_get(iter_type __beg,
                             iter_type __end,
                             ios_base& __io,
                             ios_base::iostate& __err,
                             unsigned long long& __v) const
    {
      return _M_extract_int(__beg, __end, __io, __err, __v);
    }
    virtual iter_type do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, float&) const;
    virtual iter_type do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, double&) const;
    virtual iter_type do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, long double&) const;
    virtual iter_type do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, void*&) const;
  };
  template <typename _CharT, typename _InIter>
  locale::id num_get<_CharT, _InIter>::id;
  template <typename _CharT, typename _OutIter>
  class num_put : public locale::facet
  {
  public:
    typedef _CharT char_type;
    typedef _OutIter iter_type;
    static locale::id id;
    explicit num_put(size_t __refs = 0) : facet(__refs) {}
    iter_type put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
    {
      return this->do_put(__s, __io, __fill, __v);
    }
    iter_type put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
    {
      return this->do_put(__s, __io, __fill, __v);
    }
    iter_type put(iter_type __s, ios_base& __io, char_type __fill, unsigned long __v) const
    {
      return this->do_put(__s, __io, __fill, __v);
    }
    iter_type put(iter_type __s, ios_base& __io, char_type __fill, long long __v) const
    {
      return this->do_put(__s, __io, __fill, __v);
    }
    iter_type put(iter_type __s, ios_base& __io, char_type __fill, unsigned long long __v) const
    {
      return this->do_put(__s, __io, __fill, __v);
    }
    iter_type put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
    {
      return this->do_put(__s, __io, __fill, __v);
    }
    iter_type put(iter_type __s, ios_base& __io, char_type __fill, long double __v) const
    {
      return this->do_put(__s, __io, __fill, __v);
    }
    iter_type put(iter_type __s, ios_base& __io, char_type __fill, const void* __v) const
    {
      return this->do_put(__s, __io, __fill, __v);
    }

  protected:
    template <typename _ValueT>
    iter_type _M_insert_float(iter_type, ios_base& __io, char_type __fill, char __mod, _ValueT __v) const;
    void _M_group_float(const char* __grouping,
                        size_t __grouping_size,
                        char_type __sep,
                        const char_type* __p,
                        char_type* __new,
                        char_type* __cs,
                        int& __len) const;
    template <typename _ValueT>
    iter_type _M_insert_int(iter_type, ios_base& __io, char_type __fill, _ValueT __v) const;
    void _M_group_int(const char* __grouping,
                      size_t __grouping_size,
                      char_type __sep,
                      ios_base& __io,
                      char_type* __new,
                      char_type* __cs,
                      int& __len) const;
    void _M_pad(char_type __fill, streamsize __w, ios_base& __io, char_type* __new, const char_type* __cs, int& __len)
        const;
    virtual ~num_put() {}
    virtual iter_type do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const;
    virtual iter_type do_put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
    {
      return _M_insert_int(__s, __io, __fill, __v);
    }
    virtual iter_type do_put(iter_type __s, ios_base& __io, char_type __fill, unsigned long __v) const
    {
      return _M_insert_int(__s, __io, __fill, __v);
    }
    virtual iter_type do_put(iter_type __s, ios_base& __io, char_type __fill, long long __v) const
    {
      return _M_insert_int(__s, __io, __fill, __v);
    }
    virtual iter_type do_put(iter_type __s, ios_base& __io, char_type __fill, unsigned long long __v) const
    {
      return _M_insert_int(__s, __io, __fill, __v);
    }
    virtual iter_type do_put(iter_type, ios_base&, char_type, double) const;
    virtual iter_type do_put(iter_type, ios_base&, char_type, long double) const;
    virtual iter_type do_put(iter_type, ios_base&, char_type, const void*) const;
  };
  template <typename _CharT, typename _OutIter>
  locale::id num_put<_CharT, _OutIter>::id;
  template <typename _CharT>
  inline bool isspace(_CharT __c, const locale& __loc)
  {
    return use_facet<ctype<_CharT>>(__loc).is(ctype_base::space, __c);
  }
  template <typename _CharT>
  inline bool isprint(_CharT __c, const locale& __loc)
  {
    return use_facet<ctype<_CharT>>(__loc).is(ctype_base::print, __c);
  }
  template <typename _CharT>
  inline bool iscntrl(_CharT __c, const locale& __loc)
  {
    return use_facet<ctype<_CharT>>(__loc).is(ctype_base::cntrl, __c);
  }
  template <typename _CharT>
  inline bool isupper(_CharT __c, const locale& __loc)
  {
    return use_facet<ctype<_CharT>>(__loc).is(ctype_base::upper, __c);
  }
  template <typename _CharT>
  inline bool islower(_CharT __c, const locale& __loc)
  {
    return use_facet<ctype<_CharT>>(__loc).is(ctype_base::lower, __c);
  }
  template <typename _CharT>
  inline bool isalpha(_CharT __c, const locale& __loc)
  {
    return use_facet<ctype<_CharT>>(__loc).is(ctype_base::alpha, __c);
  }
  template <typename _CharT>
  inline bool isdigit(_CharT __c, const locale& __loc)
  {
    return use_facet<ctype<_CharT>>(__loc).is(ctype_base::digit, __c);
  }
  template <typename _CharT>
  inline bool ispunct(_CharT __c, const locale& __loc)
  {
    return use_facet<ctype<_CharT>>(__loc).is(ctype_base::punct, __c);
  }
  template <typename _CharT>
  inline bool isxdigit(_CharT __c, const locale& __loc)
  {
    return use_facet<ctype<_CharT>>(__loc).is(ctype_base::xdigit, __c);
  }
  template <typename _CharT>
  inline bool isalnum(_CharT __c, const locale& __loc)
  {
    return use_facet<ctype<_CharT>>(__loc).is(ctype_base::alnum, __c);
  }
  template <typename _CharT>
  inline bool isgraph(_CharT __c, const locale& __loc)
  {
    return use_facet<ctype<_CharT>>(__loc).is(ctype_base::graph, __c);
  }
  template <typename _CharT>
  inline bool isblank(_CharT __c, const locale& __loc)
  {
    return use_facet<ctype<_CharT>>(__loc).is(ctype_base::blank, __c);
  }
  template <typename _CharT>
  inline _CharT toupper(_CharT __c, const locale& __loc)
  {
    return use_facet<ctype<_CharT>>(__loc).toupper(__c);
  }
  template <typename _CharT>
  inline _CharT tolower(_CharT __c, const locale& __loc)
  {
    return use_facet<ctype<_CharT>>(__loc).tolower(__c);
  }
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _Facet>
  struct __use_cache
  {
    const _Facet* operator()(const locale& __loc) const;
  };
  template <typename _CharT>
  struct __use_cache<__numpunct_cache<_CharT>>
  {
    const __numpunct_cache<_CharT>* operator()(const locale& __loc) const
    {
      const size_t __i = numpunct<_CharT>::id._M_id();
      const locale::facet** __caches = __loc._M_impl->_M_caches;
      if (!__caches[__i])
      {
        __numpunct_cache<_CharT>* __tmp = 0;
        try
        {
          __tmp = new __numpunct_cache<_CharT>;
          __tmp->_M_cache(__loc);
        }
        catch (...)
        {
          delete __tmp;
          throw;
        }
        __loc._M_impl->_M_install_cache(__tmp, __i);
      }
      return static_cast<const __numpunct_cache<_CharT>*>(__caches[__i]);
    }
  };
  template <typename _CharT>
  void __numpunct_cache<_CharT>::_M_cache(const locale& __loc)
  {
    const numpunct<_CharT>& __np = use_facet<numpunct<_CharT>>(__loc);
    char* __grouping = 0;
    _CharT* __truename = 0;
    _CharT* __falsename = 0;
    try
    {
      const string& __g = __np.grouping();
      _M_grouping_size = __g.size();
      __grouping = new char[_M_grouping_size];
      __g.copy(__grouping, _M_grouping_size);
      _M_use_grouping = (_M_grouping_size && static_cast<signed char>(__grouping[0]) > 0 &&
                         (__grouping[0] != __gnu_cxx::__numeric_traits<char>::__max));
      const basic_string<_CharT>& __tn = __np.truename();
      _M_truename_size = __tn.size();
      __truename = new _CharT[_M_truename_size];
      __tn.copy(__truename, _M_truename_size);
      const basic_string<_CharT>& __fn = __np.falsename();
      _M_falsename_size = __fn.size();
      __falsename = new _CharT[_M_falsename_size];
      __fn.copy(__falsename, _M_falsename_size);
      _M_decimal_point = __np.decimal_point();
      _M_thousands_sep = __np.thousands_sep();
      const ctype<_CharT>& __ct = use_facet<ctype<_CharT>>(__loc);
      __ct.widen(__num_base::_S_atoms_out, __num_base::_S_atoms_out + __num_base::_S_oend, _M_atoms_out);
      __ct.widen(__num_base::_S_atoms_in, __num_base::_S_atoms_in + __num_base::_S_iend, _M_atoms_in);
      _M_grouping = __grouping;
      _M_truename = __truename;
      _M_falsename = __falsename;
      _M_allocated = true;
    }
    catch (...)
    {
      delete[] __grouping;
      delete[] __truename;
      delete[] __falsename;
      throw;
    }
  }
  __attribute__((__pure__)) bool __verify_grouping(
      const char* __grouping, size_t __grouping_size, const string& __grouping_tmp) throw();
  template <typename _CharT, typename _InIter>
  __attribute((__abi_tag__("cxx11"))) _InIter num_get<_CharT, _InIter>::_M_extract_float(
      _InIter __beg, _InIter __end, ios_base & __io, ios_base::iostate & __err, string & __xtrc) const
  {
    typedef char_traits<_CharT> __traits_type;
    typedef __numpunct_cache<_CharT> __cache_type;
    __use_cache<__cache_type> __uc;
    const locale& __loc = __io._M_getloc();
    const __cache_type* __lc = __uc(__loc);
    const _CharT* __lit = __lc->_M_atoms_in;
    char_type __c = char_type();
    bool __testeof = __beg == __end;
    if (!__testeof)
    {
      __c = *__beg;
      const bool __plus = __c == __lit[__num_base::_S_iplus];
      if ((__plus || __c == __lit[__num_base::_S_iminus]) &&
          !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep) && !(__c == __lc->_M_decimal_point))
      {
        __xtrc += __plus ? '+' : '-';
        if (++__beg != __end)
          __c = *__beg;
        else
          __testeof = true;
      }
    }
    bool __found_mantissa = false;
    int __sep_pos = 0;
    while (!__testeof)
    {
      if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep) || __c == __lc->_M_decimal_point)
        break;
      else if (__c == __lit[__num_base::_S_izero])
      {
        if (!__found_mantissa)
        {
          __xtrc += '0';
          __found_mantissa = true;
        }
        ++__sep_pos;
        if (++__beg != __end)
          __c = *__beg;
        else
          __testeof = true;
      }
      else
        break;
    }
    bool __found_dec = false;
    bool __found_sci = false;
    string __found_grouping;
    if (__lc->_M_use_grouping)
      __found_grouping.reserve(32);
    const char_type* __lit_zero = __lit + __num_base::_S_izero;
    if (!__lc->_M_allocated)
      while (!__testeof)
      {
        const int __digit = _M_find(__lit_zero, 10, __c);
        if (__digit != -1)
        {
          __xtrc += '0' + __digit;
          __found_mantissa = true;
        }
        else if (__c == __lc->_M_decimal_point && !__found_dec && !__found_sci)
        {
          __xtrc += '.';
          __found_dec = true;
        }
        else if ((__c == __lit[__num_base::_S_ie] || __c == __lit[__num_base::_S_iE]) && !__found_sci &&
                 __found_mantissa)
        {
          __xtrc += 'e';
          __found_sci = true;
          if (++__beg != __end)
          {
            __c = *__beg;
            const bool __plus = __c == __lit[__num_base::_S_iplus];
            if (__plus || __c == __lit[__num_base::_S_iminus])
              __xtrc += __plus ? '+' : '-';
            else
              continue;
          }
          else
          {
            __testeof = true;
            break;
          }
        }
        else
          break;
        if (++__beg != __end)
          __c = *__beg;
        else
          __testeof = true;
      }
    else
      while (!__testeof)
      {
        if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
        {
          if (!__found_dec && !__found_sci)
          {
            if (__sep_pos)
            {
              __found_grouping += static_cast<char>(__sep_pos);
              __sep_pos = 0;
            }
            else
            {
              __xtrc.clear();
              break;
            }
          }
          else
            break;
        }
        else if (__c == __lc->_M_decimal_point)
        {
          if (!__found_dec && !__found_sci)
          {
            if (__found_grouping.size())
              __found_grouping += static_cast<char>(__sep_pos);
            __xtrc += '.';
            __found_dec = true;
          }
          else
            break;
        }
        else
        {
          const char_type* __q = __traits_type::find(__lit_zero, 10, __c);
          if (__q)
          {
            __xtrc += '0' + (__q - __lit_zero);
            __found_mantissa = true;
            ++__sep_pos;
          }
          else if ((__c == __lit[__num_base::_S_ie] || __c == __lit[__num_base::_S_iE]) && !__found_sci &&
                   __found_mantissa)
          {
            if (__found_grouping.size() && !__found_dec)
              __found_grouping += static_cast<char>(__sep_pos);
            __xtrc += 'e';
            __found_sci = true;
            if (++__beg != __end)
            {
              __c = *__beg;
              const bool __plus = __c == __lit[__num_base::_S_iplus];
              if ((__plus || __c == __lit[__num_base::_S_iminus]) &&
                  !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep) && !(__c == __lc->_M_decimal_point))
                __xtrc += __plus ? '+' : '-';
              else
                continue;
            }
            else
            {
              __testeof = true;
              break;
            }
          }
          else
            break;
        }
        if (++__beg != __end)
          __c = *__beg;
        else
          __testeof = true;
      }
    if (__found_grouping.size())
    {
      if (!__found_dec && !__found_sci)
        __found_grouping += static_cast<char>(__sep_pos);
      if (!std::__verify_grouping(__lc->_M_grouping, __lc->_M_grouping_size, __found_grouping))
        __err = ios_base::failbit;
    }
    return __beg;
  }
  template <typename _CharT, typename _InIter>
  template <typename _ValueT>
  __attribute((__abi_tag__("cxx11"))) _InIter num_get<_CharT, _InIter>::_M_extract_int(
      _InIter __beg, _InIter __end, ios_base & __io, ios_base::iostate & __err, _ValueT & __v) const
  {
    typedef char_traits<_CharT> __traits_type;
    using __gnu_cxx::__add_unsigned;
    typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
    typedef __numpunct_cache<_CharT> __cache_type;
    __use_cache<__cache_type> __uc;
    const locale& __loc = __io._M_getloc();
    const __cache_type* __lc = __uc(__loc);
    const _CharT* __lit = __lc->_M_atoms_in;
    char_type __c = char_type();
    const ios_base::fmtflags __basefield = __io.flags() & ios_base::basefield;
    const bool __oct = __basefield == ios_base::oct;
    int __base = __oct ? 8 : (__basefield == ios_base::hex ? 16 : 10);
    bool __testeof = __beg == __end;
    bool __negative = false;
    if (!__testeof)
    {
      __c = *__beg;
      __negative = __c == __lit[__num_base::_S_iminus];
      if ((__negative || __c == __lit[__num_base::_S_iplus]) &&
          !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep) && !(__c == __lc->_M_decimal_point))
      {
        if (++__beg != __end)
          __c = *__beg;
        else
          __testeof = true;
      }
    }
    bool __found_zero = false;
    int __sep_pos = 0;
    while (!__testeof)
    {
      if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep) || __c == __lc->_M_decimal_point)
        break;
      else if (__c == __lit[__num_base::_S_izero] && (!__found_zero || __base == 10))
      {
        __found_zero = true;
        ++__sep_pos;
        if (__basefield == 0)
          __base = 8;
        if (__base == 8)
          __sep_pos = 0;
      }
      else if (__found_zero && (__c == __lit[__num_base::_S_ix] || __c == __lit[__num_base::_S_iX]))
      {
        if (__basefield == 0)
          __base = 16;
        if (__base == 16)
        {
          __found_zero = false;
          __sep_pos = 0;
        }
        else
          break;
      }
      else
        break;
      if (++__beg != __end)
      {
        __c = *__beg;
        if (!__found_zero)
          break;
      }
      else
        __testeof = true;
    }
    const size_t __len = (__base == 16 ? __num_base::_S_iend - __num_base::_S_izero : __base);
    typedef __gnu_cxx::__numeric_traits<_ValueT> __num_traits;
    string __found_grouping;
    if (__lc->_M_use_grouping)
      __found_grouping.reserve(32);
    bool __testfail = false;
    bool __testoverflow = false;
    const __unsigned_type __max = (__negative && __num_traits::__is_signed)
                                      ? -static_cast<__unsigned_type>(__num_traits::__min)
                                      : __num_traits::__max;
    const __unsigned_type __smax = __max / __base;
    __unsigned_type __result = 0;
    int __digit = 0;
    const char_type* __lit_zero = __lit + __num_base::_S_izero;
    if (!__lc->_M_allocated)
      while (!__testeof)
      {
        __digit = _M_find(__lit_zero, __len, __c);
        if (__digit == -1)
          break;
        if (__result > __smax)
          __testoverflow = true;
        else
        {
          __result *= __base;
          __testoverflow |= __result > __max - __digit;
          __result += __digit;
          ++__sep_pos;
        }
        if (++__beg != __end)
          __c = *__beg;
        else
          __testeof = true;
      }
    else
      while (!__testeof)
      {
        if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
        {
          if (__sep_pos)
          {
            __found_grouping += static_cast<char>(__sep_pos);
            __sep_pos = 0;
          }
          else
          {
            __testfail = true;
            break;
          }
        }
        else if (__c == __lc->_M_decimal_point)
          break;
        else
        {
          const char_type* __q = __traits_type::find(__lit_zero, __len, __c);
          if (!__q)
            break;
          __digit = __q - __lit_zero;
          if (__digit > 15)
            __digit -= 6;
          if (__result > __smax)
            __testoverflow = true;
          else
          {
            __result *= __base;
            __testoverflow |= __result > __max - __digit;
            __result += __digit;
            ++__sep_pos;
          }
        }
        if (++__beg != __end)
          __c = *__beg;
        else
          __testeof = true;
      }
    if (__found_grouping.size())
    {
      __found_grouping += static_cast<char>(__sep_pos);
      if (!std::__verify_grouping(__lc->_M_grouping, __lc->_M_grouping_size, __found_grouping))
        __err = ios_base::failbit;
    }
    if ((!__sep_pos && !__found_zero && !__found_grouping.size()) || __testfail)
    {
      __v = 0;
      __err = ios_base::failbit;
    }
    else if (__testoverflow)
    {
      if (__negative && __num_traits::__is_signed)
        __v = __num_traits::__min;
      else
        __v = __num_traits::__max;
      __err = ios_base::failbit;
    }
    else
      __v = __negative ? -__result : __result;
    if (__testeof)
      __err |= ios_base::eofbit;
    return __beg;
  }
  template <typename _CharT, typename _InIter>
  _InIter num_get<_CharT, _InIter>::do_get(
      iter_type __beg, iter_type __end, ios_base & __io, ios_base::iostate & __err, bool& __v) const
  {
    if (!(__io.flags() & ios_base::boolalpha))
    {
      long __l = -1;
      __beg = _M_extract_int(__beg, __end, __io, __err, __l);
      if (__l == 0 || __l == 1)
        __v = bool(__l);
      else
      {
        __v = true;
        __err = ios_base::failbit;
        if (__beg == __end)
          __err |= ios_base::eofbit;
      }
    }
    else
    {
      typedef __numpunct_cache<_CharT> __cache_type;
      __use_cache<__cache_type> __uc;
      const locale& __loc = __io._M_getloc();
      const __cache_type* __lc = __uc(__loc);
      bool __testf = true;
      bool __testt = true;
      bool __donef = __lc->_M_falsename_size == 0;
      bool __donet = __lc->_M_truename_size == 0;
      bool __testeof = false;
      size_t __n = 0;
      while (!__donef || !__donet)
      {
        if (__beg == __end)
        {
          __testeof = true;
          break;
        }
        const char_type __c = *__beg;
        if (!__donef)
          __testf = __c == __lc->_M_falsename[__n];
        if (!__testf && __donet)
          break;
        if (!__donet)
          __testt = __c == __lc->_M_truename[__n];
        if (!__testt && __donef)
          break;
        if (!__testt && !__testf)
          break;
        ++__n;
        ++__beg;
        __donef = !__testf || __n >= __lc->_M_falsename_size;
        __donet = !__testt || __n >= __lc->_M_truename_size;
      }
      if (__testf && __n == __lc->_M_falsename_size && __n)
      {
        __v = false;
        if (__testt && __n == __lc->_M_truename_size)
          __err = ios_base::failbit;
        else
          __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
      }
      else if (__testt && __n == __lc->_M_truename_size && __n)
      {
        __v = true;
        __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
      }
      else
      {
        __v = false;
        __err = ios_base::failbit;
        if (__testeof)
          __err |= ios_base::eofbit;
      }
    }
    return __beg;
  }
  template <typename _CharT, typename _InIter>
  _InIter num_get<_CharT, _InIter>::do_get(
      iter_type __beg, iter_type __end, ios_base & __io, ios_base::iostate & __err, float& __v) const
  {
    string __xtrc;
    __xtrc.reserve(32);
    __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
    std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
    if (__beg == __end)
      __err |= ios_base::eofbit;
    return __beg;
  }
  template <typename _CharT, typename _InIter>
  _InIter num_get<_CharT, _InIter>::do_get(
      iter_type __beg, iter_type __end, ios_base & __io, ios_base::iostate & __err, double& __v) const
  {
    string __xtrc;
    __xtrc.reserve(32);
    __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
    std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
    if (__beg == __end)
      __err |= ios_base::eofbit;
    return __beg;
  }
  template <typename _CharT, typename _InIter>
  _InIter num_get<_CharT, _InIter>::do_get(
      iter_type __beg, iter_type __end, ios_base & __io, ios_base::iostate & __err, long double& __v) const
  {
    string __xtrc;
    __xtrc.reserve(32);
    __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
    std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
    if (__beg == __end)
      __err |= ios_base::eofbit;
    return __beg;
  }
  template <typename _CharT, typename _InIter>
  _InIter num_get<_CharT, _InIter>::do_get(
      iter_type __beg, iter_type __end, ios_base & __io, ios_base::iostate & __err, void*& __v) const
  {
    typedef ios_base::fmtflags fmtflags;
    const fmtflags __fmt = __io.flags();
    __io.flags((__fmt & ~ios_base::basefield) | ios_base::hex);
    typedef __gnu_cxx::__conditional_type<(sizeof(void*) <= sizeof(unsigned long)), unsigned long, unsigned long long>::
        __type _UIntPtrType;
    _UIntPtrType __ul;
    __beg = _M_extract_int(__beg, __end, __io, __err, __ul);
    __io.flags(__fmt);
    __v = reinterpret_cast<void*>(__ul);
    return __beg;
  }
  template <typename _CharT, typename _OutIter>
  void num_put<_CharT, _OutIter>::_M_pad(
      _CharT __fill, streamsize __w, ios_base & __io, _CharT * __new, const _CharT* __cs, int& __len) const
  {
    __pad<_CharT, char_traits<_CharT>>::_S_pad(__io, __fill, __new, __cs, __w, __len);
    __len = static_cast<int>(__w);
  }
  template <typename _CharT, typename _ValueT>
  int __int_to_char(_CharT * __bufend, _ValueT __v, const _CharT* __lit, ios_base::fmtflags __flags, bool __dec)
  {
    _CharT* __buf = __bufend;
    if (__builtin_expect(__dec, true))
    {
      do
      {
        *--__buf = __lit[(__v % 10) + __num_base::_S_odigits];
        __v /= 10;
      } while (__v != 0);
    }
    else if ((__flags & ios_base::basefield) == ios_base::oct)
    {
      do
      {
        *--__buf = __lit[(__v & 0x7) + __num_base::_S_odigits];
        __v >>= 3;
      } while (__v != 0);
    }
    else
    {
      const bool __uppercase = __flags & ios_base::uppercase;
      const int __case_offset = __uppercase ? __num_base::_S_oudigits : __num_base::_S_odigits;
      do
      {
        *--__buf = __lit[(__v & 0xf) + __case_offset];
        __v >>= 4;
      } while (__v != 0);
    }
    return __bufend - __buf;
  }
  template <typename _CharT, typename _OutIter>
  void num_put<_CharT, _OutIter>::_M_group_int(
      const char* __grouping, size_t __grouping_size, _CharT __sep, ios_base&, _CharT* __new, _CharT* __cs, int& __len)
      const
  {
    _CharT* __p = std::__add_grouping(__new, __sep, __grouping, __grouping_size, __cs, __cs + __len);
    __len = __p - __new;
  }
  template <typename _CharT, typename _OutIter>
  template <typename _ValueT>
  _OutIter num_put<_CharT, _OutIter>::_M_insert_int(_OutIter __s, ios_base & __io, _CharT __fill, _ValueT __v) const
  {
    using __gnu_cxx::__add_unsigned;
    typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
    typedef __numpunct_cache<_CharT> __cache_type;
    __use_cache<__cache_type> __uc;
    const locale& __loc = __io._M_getloc();
    const __cache_type* __lc = __uc(__loc);
    const _CharT* __lit = __lc->_M_atoms_out;
    const ios_base::fmtflags __flags = __io.flags();
    const int __ilen = 5 * sizeof(_ValueT);
    _CharT* __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) * __ilen));
    const ios_base::fmtflags __basefield = __flags & ios_base::basefield;
    const bool __dec = (__basefield != ios_base::oct && __basefield != ios_base::hex);
    const __unsigned_type __u = ((__v > 0 || !__dec) ? __unsigned_type(__v) : -__unsigned_type(__v));
    int __len = __int_to_char(__cs + __ilen, __u, __lit, __flags, __dec);
    __cs += __ilen - __len;
    if (__lc->_M_use_grouping)
    {
      _CharT* __cs2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) * (__len + 1) * 2));
      _M_group_int(__lc->_M_grouping, __lc->_M_grouping_size, __lc->_M_thousands_sep, __io, __cs2 + 2, __cs, __len);
      __cs = __cs2 + 2;
    }
    if (__builtin_expect(__dec, true))
    {
      if (__v >= 0)
      {
        if (bool(__flags & ios_base::showpos) && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
          *--__cs = __lit[__num_base::_S_oplus], ++__len;
      }
      else
        *--__cs = __lit[__num_base::_S_ominus], ++__len;
    }
    else if (bool(__flags & ios_base::showbase) && __v)
    {
      if (__basefield == ios_base::oct)
        *--__cs = __lit[__num_base::_S_odigits], ++__len;
      else
      {
        const bool __uppercase = __flags & ios_base::uppercase;
        *--__cs = __lit[__num_base::_S_ox + __uppercase];
        *--__cs = __lit[__num_base::_S_odigits];
        __len += 2;
      }
    }
    const streamsize __w = __io.width();
    if (__w > static_cast<streamsize>(__len))
    {
      _CharT* __cs3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) * __w));
      _M_pad(__fill, __w, __io, __cs3, __cs, __len);
      __cs = __cs3;
    }
    __io.width(0);
    return std::__write(__s, __cs, __len);
  }
  template <typename _CharT, typename _OutIter>
  void num_put<_CharT, _OutIter>::_M_group_float(const char* __grouping,
                                                 size_t __grouping_size,
                                                 _CharT __sep,
                                                 const _CharT* __p,
                                                 _CharT* __new,
                                                 _CharT* __cs,
                                                 int& __len) const
  {
    const int __declen = __p ? __p - __cs : __len;
    _CharT* __p2 = std::__add_grouping(__new, __sep, __grouping, __grouping_size, __cs, __cs + __declen);
    int __newlen = __p2 - __new;
    if (__p)
    {
      char_traits<_CharT>::copy(__p2, __p, __len - __declen);
      __newlen += __len - __declen;
    }
    __len = __newlen;
  }
  template <typename _CharT, typename _OutIter>
  template <typename _ValueT>
  _OutIter num_put<_CharT, _OutIter>::_M_insert_float(
      _OutIter __s, ios_base & __io, _CharT __fill, char __mod, _ValueT __v) const
  {
    typedef __numpunct_cache<_CharT> __cache_type;
    __use_cache<__cache_type> __uc;
    const locale& __loc = __io._M_getloc();
    const __cache_type* __lc = __uc(__loc);
    const streamsize __prec = __io.precision() < 0 ? 6 : __io.precision();
    const int __max_digits = __gnu_cxx::__numeric_traits<_ValueT>::__digits10;
    int __len;
    char __fbuf[16];
    __num_base::_S_format_float(__io, __fbuf, __mod);
    const bool __use_prec = (__io.flags() & ios_base::floatfield) != ios_base::floatfield;
    int __cs_size = __max_digits * 3;
    char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));
    if (__use_prec)
      __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size, __fbuf, __prec, __v);
    else
      __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size, __fbuf, __v);
    if (__len >= __cs_size)
    {
      __cs_size = __len + 1;
      __cs = static_cast<char*>(__builtin_alloca(__cs_size));
      if (__use_prec)
        __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size, __fbuf, __prec, __v);
      else
        __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size, __fbuf, __v);
    }
    const ctype<_CharT>& __ctype = use_facet<ctype<_CharT>>(__loc);
    _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) * __len));
    __ctype.widen(__cs, __cs + __len, __ws);
    _CharT* __wp = 0;
    const char* __p = char_traits<char>::find(__cs, __len, '.');
    if (__p)
    {
      __wp = __ws + (__p - __cs);
      *__wp = __lc->_M_decimal_point;
    }
    if (__lc->_M_use_grouping &&
        (__wp || __len < 3 || (__cs[1] <= '9' && __cs[2] <= '9' && __cs[1] >= '0' && __cs[2] >= '0')))
    {
      _CharT* __ws2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) * __len * 2));
      streamsize __off = 0;
      if (__cs[0] == '-' || __cs[0] == '+')
      {
        __off = 1;
        __ws2[0] = __ws[0];
        __len -= 1;
      }
      _M_group_float(
          __lc->_M_grouping, __lc->_M_grouping_size, __lc->_M_thousands_sep, __wp, __ws2 + __off, __ws + __off, __len);
      __len += __off;
      __ws = __ws2;
    }
    const streamsize __w = __io.width();
    if (__w > static_cast<streamsize>(__len))
    {
      _CharT* __ws3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) * __w));
      _M_pad(__fill, __w, __io, __ws3, __ws, __len);
      __ws = __ws3;
    }
    __io.width(0);
    return std::__write(__s, __ws, __len);
  }
  template <typename _CharT, typename _OutIter>
  _OutIter num_put<_CharT, _OutIter>::do_put(iter_type __s, ios_base & __io, char_type __fill, bool __v) const
  {
    const ios_base::fmtflags __flags = __io.flags();
    if ((__flags & ios_base::boolalpha) == 0)
    {
      const long __l = __v;
      __s = _M_insert_int(__s, __io, __fill, __l);
    }
    else
    {
      typedef __numpunct_cache<_CharT> __cache_type;
      __use_cache<__cache_type> __uc;
      const locale& __loc = __io._M_getloc();
      const __cache_type* __lc = __uc(__loc);
      const _CharT* __name = __v ? __lc->_M_truename : __lc->_M_falsename;
      int __len = __v ? __lc->_M_truename_size : __lc->_M_falsename_size;
      const streamsize __w = __io.width();
      if (__w > static_cast<streamsize>(__len))
      {
        const streamsize __plen = __w - __len;
        _CharT* __ps = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) * __plen));
        char_traits<_CharT>::assign(__ps, __plen, __fill);
        __io.width(0);
        if ((__flags & ios_base::adjustfield) == ios_base::left)
        {
          __s = std::__write(__s, __name, __len);
          __s = std::__write(__s, __ps, __plen);
        }
        else
        {
          __s = std::__write(__s, __ps, __plen);
          __s = std::__write(__s, __name, __len);
        }
        return __s;
      }
      __io.width(0);
      __s = std::__write(__s, __name, __len);
    }
    return __s;
  }
  template <typename _CharT, typename _OutIter>
  _OutIter num_put<_CharT, _OutIter>::do_put(iter_type __s, ios_base & __io, char_type __fill, double __v) const
  {
    return _M_insert_float(__s, __io, __fill, char(), __v);
  }
  template <typename _CharT, typename _OutIter>
  _OutIter num_put<_CharT, _OutIter>::do_put(iter_type __s, ios_base & __io, char_type __fill, long double __v) const
  {
    return _M_insert_float(__s, __io, __fill, 'L', __v);
  }
  template <typename _CharT, typename _OutIter>
  _OutIter num_put<_CharT, _OutIter>::do_put(iter_type __s, ios_base & __io, char_type __fill, const void* __v) const
  {
    const ios_base::fmtflags __flags = __io.flags();
    const ios_base::fmtflags __fmt = ~(ios_base::basefield | ios_base::uppercase);
    __io.flags((__flags & __fmt) | (ios_base::hex | ios_base::showbase));
    typedef __gnu_cxx::__conditional_type<(sizeof(const void*) <= sizeof(unsigned long)),
                                          unsigned long,
                                          unsigned long long>::__type _UIntPtrType;
    __s = _M_insert_int(__s, __io, __fill, reinterpret_cast<_UIntPtrType>(__v));
    __io.flags(__flags);
    return __s;
  }
  template <typename _CharT, typename _Traits>
  void __pad<_CharT, _Traits>::_S_pad(
      ios_base & __io, _CharT __fill, _CharT * __news, const _CharT* __olds, streamsize __newlen, streamsize __oldlen)
  {
    const size_t __plen = static_cast<size_t>(__newlen - __oldlen);
    const ios_base::fmtflags __adjust = __io.flags() & ios_base::adjustfield;
    if (__adjust == ios_base::left)
    {
      _Traits::copy(__news, __olds, __oldlen);
      _Traits::assign(__news + __oldlen, __plen, __fill);
      return;
    }
    size_t __mod = 0;
    if (__adjust == ios_base::internal)
    {
      const locale& __loc = __io._M_getloc();
      const ctype<_CharT>& __ctype = use_facet<ctype<_CharT>>(__loc);
      if (__ctype.widen('-') == __olds[0] || __ctype.widen('+') == __olds[0])
      {
        __news[0] = __olds[0];
        __mod = 1;
        ++__news;
      }
      else if (__ctype.widen('0') == __olds[0] && __oldlen > 1 &&
               (__ctype.widen('x') == __olds[1] || __ctype.widen('X') == __olds[1]))
      {
        __news[0] = __olds[0];
        __news[1] = __olds[1];
        __mod = 2;
        __news += 2;
      }
    }
    _Traits::assign(__news, __plen, __fill);
    _Traits::copy(__news + __plen, __olds + __mod, __oldlen - __mod);
  }
  template <typename _CharT>
  _CharT* __add_grouping(
      _CharT * __s, _CharT __sep, const char* __gbeg, size_t __gsize, const _CharT* __first, const _CharT* __last)
  {
    size_t __idx = 0;
    size_t __ctr = 0;
    while (__last - __first > __gbeg[__idx] && static_cast<signed char>(__gbeg[__idx]) > 0 &&
           __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
    {
      __last -= __gbeg[__idx];
      __idx < __gsize - 1 ? ++__idx : ++__ctr;
    }
    while (__first != __last)
      *__s++ = *__first++;
    while (__ctr--)
    {
      *__s++ = __sep;
      for (char __i = __gbeg[__idx]; __i > 0; --__i)
        *__s++ = *__first++;
    }
    while (__idx--)
    {
      *__s++ = __sep;
      for (char __i = __gbeg[__idx]; __i > 0; --__i)
        *__s++ = *__first++;
    }
    return __s;
  }
  extern template class __cxx11::numpunct<char>;
  extern template class __cxx11::numpunct_byname<char>;
  extern template class num_get<char>;
  extern template class num_put<char>;
  extern template class ctype_byname<char>;
  extern template const ctype<char>& use_facet<ctype<char>>(const locale&);
  extern template const numpunct<char>& use_facet<numpunct<char>>(const locale&);
  extern template const num_put<char>& use_facet<num_put<char>>(const locale&);
  extern template const num_get<char>& use_facet<num_get<char>>(const locale&);
  extern template bool has_facet<ctype<char>>(const locale&);
  extern template bool has_facet<numpunct<char>>(const locale&);
  extern template bool has_facet<num_put<char>>(const locale&);
  extern template bool has_facet<num_get<char>>(const locale&);
  extern template class __cxx11::numpunct<wchar_t>;
  extern template class __cxx11::numpunct_byname<wchar_t>;
  extern template class num_get<wchar_t>;
  extern template class num_put<wchar_t>;
  extern template class ctype_byname<wchar_t>;
  extern template const ctype<wchar_t>& use_facet<ctype<wchar_t>>(const locale&);
  extern template const numpunct<wchar_t>& use_facet<numpunct<wchar_t>>(const locale&);
  extern template const num_put<wchar_t>& use_facet<num_put<wchar_t>>(const locale&);
  extern template const num_get<wchar_t>& use_facet<num_get<wchar_t>>(const locale&);
  extern template bool has_facet<ctype<wchar_t>>(const locale&);
  extern template bool has_facet<numpunct<wchar_t>>(const locale&);
  extern template bool has_facet<num_put<wchar_t>>(const locale&);
  extern template bool has_facet<num_get<wchar_t>>(const locale&);
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _Facet>
  inline const _Facet& __check_facet(const _Facet* __f)
  {
    if (!__f)
      __throw_bad_cast();
    return *__f;
  }
  template <typename _CharT, typename _Traits>
  class basic_ios : public ios_base
  {
  public:
    typedef _CharT char_type;
    typedef typename _Traits::int_type int_type;
    typedef typename _Traits::pos_type pos_type;
    typedef typename _Traits::off_type off_type;
    typedef _Traits traits_type;
    typedef ctype<_CharT> __ctype_type;
    typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits>> __num_put_type;
    typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits>> __num_get_type;

  protected:
    basic_ostream<_CharT, _Traits>* _M_tie;
    mutable char_type _M_fill;
    mutable bool _M_fill_init;
    basic_streambuf<_CharT, _Traits>* _M_streambuf;
    const __ctype_type* _M_ctype;
    const __num_put_type* _M_num_put;
    const __num_get_type* _M_num_get;

  public:
    explicit operator bool() const { return !this->fail(); }
    bool operator!() const { return this->fail(); }
    iostate rdstate() const { return _M_streambuf_state; }
    void clear(iostate __state = goodbit);
    void setstate(iostate __state) { this->clear(this->rdstate() | __state); }
    void _M_setstate(iostate __state)
    {
      _M_streambuf_state |= __state;
      if (this->exceptions() & __state)
        throw;
    }
    bool good() const { return this->rdstate() == 0; }
    bool eof() const { return (this->rdstate() & eofbit) != 0; }
    bool fail() const { return (this->rdstate() & (badbit | failbit)) != 0; }
    bool bad() const { return (this->rdstate() & badbit) != 0; }
    iostate exceptions() const { return _M_exception; }
    void exceptions(iostate __except)
    {
      _M_exception = __except;
      this->clear(_M_streambuf_state);
    }
    explicit basic_ios(basic_streambuf<_CharT, _Traits>* __sb)
        : ios_base(),
          _M_tie(0),
          _M_fill(),
          _M_fill_init(false),
          _M_streambuf(0),
          _M_ctype(0),
          _M_num_put(0),
          _M_num_get(0)
    {
      this->init(__sb);
    }
    virtual ~basic_ios() {}
    basic_ostream<_CharT, _Traits>* tie() const { return _M_tie; }
    basic_ostream<_CharT, _Traits>* tie(basic_ostream<_CharT, _Traits>* __tiestr)
    {
      basic_ostream<_CharT, _Traits>* __old = _M_tie;
      _M_tie = __tiestr;
      return __old;
    }
    basic_streambuf<_CharT, _Traits>* rdbuf() const { return _M_streambuf; }
    basic_streambuf<_CharT, _Traits>* rdbuf(basic_streambuf<_CharT, _Traits>* __sb);
    basic_ios& copyfmt(const basic_ios& __rhs);
    char_type fill() const
    {
      if (!_M_fill_init)
      {
        _M_fill = this->widen(' ');
        _M_fill_init = true;
      }
      return _M_fill;
    }
    char_type fill(char_type __ch)
    {
      char_type __old = this->fill();
      _M_fill = __ch;
      return __old;
    }
    locale imbue(const locale& __loc);
    char narrow(char_type __c, char __dfault) const { return __check_facet(_M_ctype).narrow(__c, __dfault); }
    char_type widen(char __c) const { return __check_facet(_M_ctype).widen(__c); }

  protected:
    basic_ios()
        : ios_base(),
          _M_tie(0),
          _M_fill(char_type()),
          _M_fill_init(false),
          _M_streambuf(0),
          _M_ctype(0),
          _M_num_put(0),
          _M_num_get(0)
    {
    }
    void init(basic_streambuf<_CharT, _Traits>* __sb);
    basic_ios(const basic_ios&) = delete;
    basic_ios& operator=(const basic_ios&) = delete;
    void move(basic_ios& __rhs)
    {
      ios_base::_M_move(__rhs);
      _M_cache_locale(_M_ios_locale);
      this->tie(__rhs.tie(nullptr));
      _M_fill = __rhs._M_fill;
      _M_fill_init = __rhs._M_fill_init;
      _M_streambuf = nullptr;
    }
    void move(basic_ios&& __rhs) { this->move(__rhs); }
    void swap(basic_ios& __rhs) noexcept
    {
      ios_base::_M_swap(__rhs);
      _M_cache_locale(_M_ios_locale);
      __rhs._M_cache_locale(__rhs._M_ios_locale);
      std::swap(_M_tie, __rhs._M_tie);
      std::swap(_M_fill, __rhs._M_fill);
      std::swap(_M_fill_init, __rhs._M_fill_init);
    }
    void set_rdbuf(basic_streambuf<_CharT, _Traits>* __sb) { _M_streambuf = __sb; }
    void _M_cache_locale(const locale& __loc);
  };
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _CharT, typename _Traits>
  void basic_ios<_CharT, _Traits>::clear(iostate __state)
  {
    if (this->rdbuf())
      _M_streambuf_state = __state;
    else
      _M_streambuf_state = __state | badbit;
    if (this->exceptions() & this->rdstate())
      __throw_ios_failure(("basic_ios::clear"));
  }
  template <typename _CharT, typename _Traits>
  basic_streambuf<_CharT, _Traits>* basic_ios<_CharT, _Traits>::rdbuf(basic_streambuf<_CharT, _Traits> * __sb)
  {
    basic_streambuf<_CharT, _Traits>* __old = _M_streambuf;
    _M_streambuf = __sb;
    this->clear();
    return __old;
  }
  template <typename _CharT, typename _Traits>
  basic_ios<_CharT, _Traits>& basic_ios<_CharT, _Traits>::copyfmt(const basic_ios& __rhs)
  {
    if (this != &__rhs)
    {
      _Words* __words = (__rhs._M_word_size <= _S_local_word_size) ? _M_local_word : new _Words[__rhs._M_word_size];
      _Callback_list* __cb = __rhs._M_callbacks;
      if (__cb)
        __cb->_M_add_reference();
      _M_call_callbacks(erase_event);
      if (_M_word != _M_local_word)
      {
        delete[] _M_word;
        _M_word = 0;
      }
      _M_dispose_callbacks();
      _M_callbacks = __cb;
      for (int __i = 0; __i < __rhs._M_word_size; ++__i)
        __words[__i] = __rhs._M_word[__i];
      _M_word = __words;
      _M_word_size = __rhs._M_word_size;
      this->flags(__rhs.flags());
      this->width(__rhs.width());
      this->precision(__rhs.precision());
      this->tie(__rhs.tie());
      this->fill(__rhs.fill());
      _M_ios_locale = __rhs.getloc();
      _M_cache_locale(_M_ios_locale);
      _M_call_callbacks(copyfmt_event);
      this->exceptions(__rhs.exceptions());
    }
    return *this;
  }
  template <typename _CharT, typename _Traits>
  locale basic_ios<_CharT, _Traits>::imbue(const locale& __loc)
  {
    locale __old(this->getloc());
    ios_base::imbue(__loc);
    _M_cache_locale(__loc);
    if (this->rdbuf() != 0)
      this->rdbuf()->pubimbue(__loc);
    return __old;
  }
  template <typename _CharT, typename _Traits>
  void basic_ios<_CharT, _Traits>::init(basic_streambuf<_CharT, _Traits> * __sb)
  {
    ios_base::_M_init();
    _M_cache_locale(_M_ios_locale);
    _M_fill = _CharT();
    _M_fill_init = false;
    _M_tie = 0;
    _M_exception = goodbit;
    _M_streambuf = __sb;
    _M_streambuf_state = __sb ? goodbit : badbit;
  }
  template <typename _CharT, typename _Traits>
  void basic_ios<_CharT, _Traits>::_M_cache_locale(const locale& __loc)
  {
    if (__builtin_expect(has_facet<__ctype_type>(__loc), true))
      _M_ctype = std::__addressof(use_facet<__ctype_type>(__loc));
    else
      _M_ctype = 0;
    if (__builtin_expect(has_facet<__num_put_type>(__loc), true))
      _M_num_put = std::__addressof(use_facet<__num_put_type>(__loc));
    else
      _M_num_put = 0;
    if (__builtin_expect(has_facet<__num_get_type>(__loc), true))
      _M_num_get = std::__addressof(use_facet<__num_get_type>(__loc));
    else
      _M_num_get = 0;
  }
  extern template class basic_ios<char>;
  extern template class basic_ios<wchar_t>;
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _CharT, typename _Traits>
  class basic_ostream : virtual public basic_ios<_CharT, _Traits>
  {
  public:
    typedef _CharT char_type;
    typedef typename _Traits::int_type int_type;
    typedef typename _Traits::pos_type pos_type;
    typedef typename _Traits::off_type off_type;
    typedef _Traits traits_type;
    typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
    typedef basic_ios<_CharT, _Traits> __ios_type;
    typedef basic_ostream<_CharT, _Traits> __ostream_type;
    typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits>> __num_put_type;
    typedef ctype<_CharT> __ctype_type;
    explicit basic_ostream(__streambuf_type* __sb) { this->init(__sb); }
    virtual ~basic_ostream() {}
    class sentry;
    friend class sentry;
    __ostream_type& operator<<(__ostream_type& (*__pf)(__ostream_type&)) { return __pf(*this); }
    __ostream_type& operator<<(__ios_type& (*__pf)(__ios_type&))
    {
      __pf(*this);
      return *this;
    }
    __ostream_type& operator<<(ios_base& (*__pf)(ios_base&))
    {
      __pf(*this);
      return *this;
    }
    __ostream_type& operator<<(long __n) { return _M_insert(__n); }
    __ostream_type& operator<<(unsigned long __n) { return _M_insert(__n); }
    __ostream_type& operator<<(bool __n) { return _M_insert(__n); }
    __ostream_type& operator<<(short __n);
    __ostream_type& operator<<(unsigned short __n) { return _M_insert(static_cast<unsigned long>(__n)); }
    __ostream_type& operator<<(int __n);
    __ostream_type& operator<<(unsigned int __n) { return _M_insert(static_cast<unsigned long>(__n)); }
    __ostream_type& operator<<(long long __n) { return _M_insert(__n); }
    __ostream_type& operator<<(unsigned long long __n) { return _M_insert(__n); }
    __ostream_type& operator<<(double __f) { return _M_insert(__f); }
    __ostream_type& operator<<(float __f) { return _M_insert(static_cast<double>(__f)); }
    __ostream_type& operator<<(long double __f) { return _M_insert(__f); }
    __ostream_type& operator<<(const void* __p) { return _M_insert(__p); }
    __ostream_type& operator<<(nullptr_t) { return *this << "nullptr"; }
    __ostream_type& operator<<(__streambuf_type* __sb);
    __ostream_type& put(char_type __c);
    void _M_write(const char_type* __s, streamsize __n)
    {
      const streamsize __put = this->rdbuf()->sputn(__s, __n);
      if (__put != __n)
        this->setstate(ios_base::badbit);
    }
    __ostream_type& write(const char_type* __s, streamsize __n);
    __ostream_type& flush();
    pos_type tellp();
    __ostream_type& seekp(pos_type);
    __ostream_type& seekp(off_type, ios_base::seekdir);

  protected:
    basic_ostream() { this->init(0); }
    basic_ostream(basic_iostream<_CharT, _Traits>&) {}
    basic_ostream(const basic_ostream&) = delete;
    basic_ostream(basic_ostream&& __rhs) : __ios_type() { __ios_type::move(__rhs); }
    basic_ostream& operator=(const basic_ostream&) = delete;
    basic_ostream& operator=(basic_ostream&& __rhs)
    {
      swap(__rhs);
      return *this;
    }
    void swap(basic_ostream& __rhs) { __ios_type::swap(__rhs); }
    template <typename _ValueT>
    __ostream_type& _M_insert(_ValueT __v);
  };
  template <typename _CharT, typename _Traits>
  class basic_ostream<_CharT, _Traits>::sentry
  {
    bool _M_ok;
    basic_ostream<_CharT, _Traits>& _M_os;

  public:
    explicit sentry(basic_ostream<_CharT, _Traits>& __os);
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    ~sentry()
    {
      if (bool(_M_os.flags() & ios_base::unitbuf) && !uncaught_exception())
      {
        if (_M_os.rdbuf() && _M_os.rdbuf()->pubsync() == -1)
          _M_os.setstate(ios_base::badbit);
      }
    }
#pragma GCC diagnostic pop
    explicit operator bool() const { return _M_ok; }
  };
  template <typename _CharT, typename _Traits>
  inline basic_ostream<_CharT, _Traits>& operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
  {
    return __ostream_insert(__out, &__c, 1);
  }
  template <typename _CharT, typename _Traits>
  inline basic_ostream<_CharT, _Traits>& operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
  {
    return (__out << __out.widen(__c));
  }
  template <class _Traits>
  inline basic_ostream<char, _Traits>& operator<<(basic_ostream<char, _Traits>& __out, char __c)
  {
    return __ostream_insert(__out, &__c, 1);
  }
  template <class _Traits>
  inline basic_ostream<char, _Traits>& operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
  {
    return (__out << static_cast<char>(__c));
  }
  template <class _Traits>
  inline basic_ostream<char, _Traits>& operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
  {
    return (__out << static_cast<char>(__c));
  }
  template <typename _CharT, typename _Traits>
  inline basic_ostream<_CharT, _Traits>& operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
  {
    if (!__s)
      __out.setstate(ios_base::badbit);
    else
      __ostream_insert(__out, __s, static_cast<streamsize>(_Traits::length(__s)));
    return __out;
  }
  template <typename _CharT, typename _Traits>
  basic_ostream<_CharT, _Traits>& operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s);
  template <class _Traits>
  inline basic_ostream<char, _Traits>& operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
  {
    if (!__s)
      __out.setstate(ios_base::badbit);
    else
      __ostream_insert(__out, __s, static_cast<streamsize>(_Traits::length(__s)));
    return __out;
  }
  template <class _Traits>
  inline basic_ostream<char, _Traits>& operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
  {
    return (__out << reinterpret_cast<const char*>(__s));
  }
  template <class _Traits>
  inline basic_ostream<char, _Traits>& operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
  {
    return (__out << reinterpret_cast<const char*>(__s));
  }
  template <typename _CharT, typename _Traits>
  inline basic_ostream<_CharT, _Traits>& endl(basic_ostream<_CharT, _Traits> & __os)
  {
    return flush(__os.put(__os.widen('\n')));
  }
  template <typename _CharT, typename _Traits>
  inline basic_ostream<_CharT, _Traits>& ends(basic_ostream<_CharT, _Traits> & __os)
  {
    return __os.put(_CharT());
  }
  template <typename _CharT, typename _Traits>
  inline basic_ostream<_CharT, _Traits>& flush(basic_ostream<_CharT, _Traits> & __os)
  {
    return __os.flush();
  }
  template <typename _Ch, typename _Up>
  basic_ostream<_Ch, _Up>& __is_convertible_to_basic_ostream_test(basic_ostream<_Ch, _Up>*);
  template <typename _Tp, typename = void>
  struct __is_convertible_to_basic_ostream_impl
  {
    using __ostream_type = void;
  };
  template <typename _Tp>
  using __do_is_convertible_to_basic_ostream_impl =
      decltype(__is_convertible_to_basic_ostream_test(declval<typename remove_reference<_Tp>::type*>()));
  template <typename _Tp>
  struct __is_convertible_to_basic_ostream_impl<_Tp, __void_t<__do_is_convertible_to_basic_ostream_impl<_Tp>>>
  {
    using __ostream_type = __do_is_convertible_to_basic_ostream_impl<_Tp>;
  };
  template <typename _Tp>
  struct __is_convertible_to_basic_ostream : __is_convertible_to_basic_ostream_impl<_Tp>
  {
  public:
    using type = __not_<is_void<typename __is_convertible_to_basic_ostream_impl<_Tp>::__ostream_type>>;
    constexpr static bool value = type::value;
  };
  template <typename _Ostream, typename _Tp, typename = void>
  struct __is_insertable : false_type
  {
  };
  template <typename _Ostream, typename _Tp>
  struct __is_insertable<_Ostream, _Tp, __void_t<decltype(declval<_Ostream&>() << declval<const _Tp&>())>> : true_type
  {
  };
  template <typename _Ostream>
  using __rvalue_ostream_type = typename __is_convertible_to_basic_ostream<_Ostream>::__ostream_type;
  template <typename _Ostream, typename _Tp>
  inline typename enable_if<__and_<__not_<is_lvalue_reference<_Ostream>>,
                                   __is_convertible_to_basic_ostream<_Ostream>,
                                   __is_insertable<__rvalue_ostream_type<_Ostream>, const _Tp&>>::value,
                            __rvalue_ostream_type<_Ostream>>::type
  operator<<(_Ostream&& __os, const _Tp& __x)
  {
    __rvalue_ostream_type<_Ostream> __ret_os = __os;
    __ret_os << __x;
    return __ret_os;
  }
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _CharT, typename _Traits>
  basic_ostream<_CharT, _Traits>::sentry::sentry(basic_ostream<_CharT, _Traits> & __os) : _M_ok(false), _M_os(__os)
  {
    if (__os.tie() && __os.good())
      __os.tie()->flush();
    if (__os.good())
      _M_ok = true;
    else
      __os.setstate(ios_base::failbit);
  }
  template <typename _CharT, typename _Traits>
  template <typename _ValueT>
  basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::_M_insert(_ValueT __v)
  {
    sentry __cerb(*this);
    if (__cerb)
    {
      ios_base::iostate __err = ios_base::goodbit;
      try
      {
        const __num_put_type& __np = __check_facet(this->_M_num_put);
        if (__np.put(*this, *this, this->fill(), __v).failed())
          __err |= ios_base::badbit;
      }
      catch (__cxxabiv1::__forced_unwind&)
      {
        this->_M_setstate(ios_base::badbit);
        throw;
      }
      catch (...)
      {
        this->_M_setstate(ios_base::badbit);
      }
      if (__err)
        this->setstate(__err);
    }
    return *this;
  }
  template <typename _CharT, typename _Traits>
  basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(short __n)
  {
    const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
    if (__fmt == ios_base::oct || __fmt == ios_base::hex)
      return _M_insert(static_cast<long>(static_cast<unsigned short>(__n)));
    else
      return _M_insert(static_cast<long>(__n));
  }
  template <typename _CharT, typename _Traits>
  basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(int __n)
  {
    const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
    if (__fmt == ios_base::oct || __fmt == ios_base::hex)
      return _M_insert(static_cast<long>(static_cast<unsigned int>(__n)));
    else
      return _M_insert(static_cast<long>(__n));
  }
  template <typename _CharT, typename _Traits>
  basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(__streambuf_type* __sbin)
  {
    ios_base::iostate __err = ios_base::goodbit;
    sentry __cerb(*this);
    if (__cerb && __sbin)
    {
      try
      {
        if (!__copy_streambufs(__sbin, this->rdbuf()))
          __err |= ios_base::failbit;
      }
      catch (__cxxabiv1::__forced_unwind&)
      {
        this->_M_setstate(ios_base::badbit);
        throw;
      }
      catch (...)
      {
        this->_M_setstate(ios_base::failbit);
      }
    }
    else if (!__sbin)
      __err |= ios_base::badbit;
    if (__err)
      this->setstate(__err);
    return *this;
  }
  template <typename _CharT, typename _Traits>
  basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::put(char_type __c)
  {
    sentry __cerb(*this);
    if (__cerb)
    {
      ios_base::iostate __err = ios_base::goodbit;
      try
      {
        const int_type __put = this->rdbuf()->sputc(__c);
        if (traits_type::eq_int_type(__put, traits_type::eof()))
          __err |= ios_base::badbit;
      }
      catch (__cxxabiv1::__forced_unwind&)
      {
        this->_M_setstate(ios_base::badbit);
        throw;
      }
      catch (...)
      {
        this->_M_setstate(ios_base::badbit);
      }
      if (__err)
        this->setstate(__err);
    }
    return *this;
  }
  template <typename _CharT, typename _Traits>
  basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::write(const _CharT* __s, streamsize __n)
  {
    sentry __cerb(*this);
    if (__cerb)
    {
      try
      {
        _M_write(__s, __n);
      }
      catch (__cxxabiv1::__forced_unwind&)
      {
        this->_M_setstate(ios_base::badbit);
        throw;
      }
      catch (...)
      {
        this->_M_setstate(ios_base::badbit);
      }
    }
    return *this;
  }
  template <typename _CharT, typename _Traits>
  basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::flush()
  {
    ios_base::iostate __err = ios_base::goodbit;
    try
    {
      if (this->rdbuf() && this->rdbuf()->pubsync() == -1)
        __err |= ios_base::badbit;
    }
    catch (__cxxabiv1::__forced_unwind&)
    {
      this->_M_setstate(ios_base::badbit);
      throw;
    }
    catch (...)
    {
      this->_M_setstate(ios_base::badbit);
    }
    if (__err)
      this->setstate(__err);
    return *this;
  }
  template <typename _CharT, typename _Traits>
  typename basic_ostream<_CharT, _Traits>::pos_type basic_ostream<_CharT, _Traits>::tellp()
  {
    pos_type __ret = pos_type(-1);
    try
    {
      if (!this->fail())
        __ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out);
    }
    catch (__cxxabiv1::__forced_unwind&)
    {
      this->_M_setstate(ios_base::badbit);
      throw;
    }
    catch (...)
    {
      this->_M_setstate(ios_base::badbit);
    }
    return __ret;
  }
  template <typename _CharT, typename _Traits>
  basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::seekp(pos_type __pos)
  {
    ios_base::iostate __err = ios_base::goodbit;
    try
    {
      if (!this->fail())
      {
        const pos_type __p = this->rdbuf()->pubseekpos(__pos, ios_base::out);
        if (__p == pos_type(off_type(-1)))
          __err |= ios_base::failbit;
      }
    }
    catch (__cxxabiv1::__forced_unwind&)
    {
      this->_M_setstate(ios_base::badbit);
      throw;
    }
    catch (...)
    {
      this->_M_setstate(ios_base::badbit);
    }
    if (__err)
      this->setstate(__err);
    return *this;
  }
  template <typename _CharT, typename _Traits>
  basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::seekp(off_type __off, ios_base::seekdir __dir)
  {
    ios_base::iostate __err = ios_base::goodbit;
    try
    {
      if (!this->fail())
      {
        const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir, ios_base::out);
        if (__p == pos_type(off_type(-1)))
          __err |= ios_base::failbit;
      }
    }
    catch (__cxxabiv1::__forced_unwind&)
    {
      this->_M_setstate(ios_base::badbit);
      throw;
    }
    catch (...)
    {
      this->_M_setstate(ios_base::badbit);
    }
    if (__err)
      this->setstate(__err);
    return *this;
  }
  template <typename _CharT, typename _Traits>
  basic_ostream<_CharT, _Traits>& operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)
  {
    if (!__s)
      __out.setstate(ios_base::badbit);
    else
    {
      const size_t __clen = char_traits<char>::length(__s);
      try
      {
        struct __ptr_guard
        {
          _CharT* __p;
          __ptr_guard(_CharT* __ip) : __p(__ip) {}
          ~__ptr_guard() { delete[] __p; }
          _CharT* __get() { return __p; }
        } __pg(new _CharT[__clen]);
        _CharT* __ws = __pg.__get();
        for (size_t __i = 0; __i < __clen; ++__i)
          __ws[__i] = __out.widen(__s[__i]);
        __ostream_insert(__out, __ws, __clen);
      }
      catch (__cxxabiv1::__forced_unwind&)
      {
        __out._M_setstate(ios_base::badbit);
        throw;
      }
      catch (...)
      {
        __out._M_setstate(ios_base::badbit);
      }
    }
    return __out;
  }
  extern template class basic_ostream<char>;
  extern template ostream& endl(ostream&);
  extern template ostream& ends(ostream&);
  extern template ostream& flush(ostream&);
  extern template ostream& operator<<(ostream&, char);
  extern template ostream& operator<<(ostream&, unsigned char);
  extern template ostream& operator<<(ostream&, signed char);
  extern template ostream& operator<<(ostream&, const char*);
  extern template ostream& operator<<(ostream&, const unsigned char*);
  extern template ostream& operator<<(ostream&, const signed char*);
  extern template ostream& ostream::_M_insert(long);
  extern template ostream& ostream::_M_insert(unsigned long);
  extern template ostream& ostream::_M_insert(bool);
  extern template ostream& ostream::_M_insert(long long);
  extern template ostream& ostream::_M_insert(unsigned long long);
  extern template ostream& ostream::_M_insert(double);
  extern template ostream& ostream::_M_insert(long double);
  extern template ostream& ostream::_M_insert(const void*);
  extern template class basic_ostream<wchar_t>;
  extern template wostream& endl(wostream&);
  extern template wostream& ends(wostream&);
  extern template wostream& flush(wostream&);
  extern template wostream& operator<<(wostream&, wchar_t);
  extern template wostream& operator<<(wostream&, char);
  extern template wostream& operator<<(wostream&, const wchar_t*);
  extern template wostream& operator<<(wostream&, const char*);
  extern template wostream& wostream::_M_insert(long);
  extern template wostream& wostream::_M_insert(unsigned long);
  extern template wostream& wostream::_M_insert(bool);
  extern template wostream& wostream::_M_insert(long long);
  extern template wostream& wostream::_M_insert(unsigned long long);
  extern template wostream& wostream::_M_insert(double);
  extern template wostream& wostream::_M_insert(long double);
  extern template wostream& wostream::_M_insert(const void*);
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _CharT, typename _Traits>
  class basic_istream : virtual public basic_ios<_CharT, _Traits>
  {
  public:
    typedef _CharT char_type;
    typedef typename _Traits::int_type int_type;
    typedef typename _Traits::pos_type pos_type;
    typedef typename _Traits::off_type off_type;
    typedef _Traits traits_type;
    typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
    typedef basic_ios<_CharT, _Traits> __ios_type;
    typedef basic_istream<_CharT, _Traits> __istream_type;
    typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits>> __num_get_type;
    typedef ctype<_CharT> __ctype_type;

  protected:
    streamsize _M_gcount;

  public:
    explicit basic_istream(__streambuf_type* __sb) : _M_gcount(streamsize(0)) { this->init(__sb); }
    virtual ~basic_istream() { _M_gcount = streamsize(0); }
    class sentry;
    friend class sentry;
    __istream_type& operator>>(__istream_type& (*__pf)(__istream_type&)) { return __pf(*this); }
    __istream_type& operator>>(__ios_type& (*__pf)(__ios_type&))
    {
      __pf(*this);
      return *this;
    }
    __istream_type& operator>>(ios_base& (*__pf)(ios_base&))
    {
      __pf(*this);
      return *this;
    }
    __istream_type& operator>>(bool& __n) { return _M_extract(__n); }
    __istream_type& operator>>(short& __n);
    __istream_type& operator>>(unsigned short& __n) { return _M_extract(__n); }
    __istream_type& operator>>(int& __n);
    __istream_type& operator>>(unsigned int& __n) { return _M_extract(__n); }
    __istream_type& operator>>(long& __n) { return _M_extract(__n); }
    __istream_type& operator>>(unsigned long& __n) { return _M_extract(__n); }
    __istream_type& operator>>(long long& __n) { return _M_extract(__n); }
    __istream_type& operator>>(unsigned long long& __n) { return _M_extract(__n); }
    __istream_type& operator>>(float& __f) { return _M_extract(__f); }
    __istream_type& operator>>(double& __f) { return _M_extract(__f); }
    __istream_type& operator>>(long double& __f) { return _M_extract(__f); }
    __istream_type& operator>>(void*& __p) { return _M_extract(__p); }
    __istream_type& operator>>(__streambuf_type* __sb);
    streamsize gcount() const { return _M_gcount; }
    int_type get();
    __istream_type& get(char_type& __c);
    __istream_type& get(char_type* __s, streamsize __n, char_type __delim);
    __istream_type& get(char_type* __s, streamsize __n) { return this->get(__s, __n, this->widen('\n')); }
    __istream_type& get(__streambuf_type& __sb, char_type __delim);
    __istream_type& get(__streambuf_type& __sb) { return this->get(__sb, this->widen('\n')); }
    __istream_type& getline(char_type* __s, streamsize __n, char_type __delim);
    __istream_type& getline(char_type* __s, streamsize __n) { return this->getline(__s, __n, this->widen('\n')); }
    __istream_type& ignore(streamsize __n, int_type __delim);
    __istream_type& ignore(streamsize __n);
    __istream_type& ignore();
    int_type peek();
    __istream_type& read(char_type* __s, streamsize __n);
    streamsize readsome(char_type* __s, streamsize __n);
    __istream_type& putback(char_type __c);
    __istream_type& unget();
    int sync();
    pos_type tellg();
    __istream_type& seekg(pos_type);
    __istream_type& seekg(off_type, ios_base::seekdir);

  protected:
    basic_istream() : _M_gcount(streamsize(0)) { this->init(0); }
    basic_istream(const basic_istream&) = delete;
    basic_istream(basic_istream&& __rhs) : __ios_type(), _M_gcount(__rhs._M_gcount)
    {
      __ios_type::move(__rhs);
      __rhs._M_gcount = 0;
    }
    basic_istream& operator=(const basic_istream&) = delete;
    basic_istream& operator=(basic_istream&& __rhs)
    {
      swap(__rhs);
      return *this;
    }
    void swap(basic_istream& __rhs)
    {
      __ios_type::swap(__rhs);
      std::swap(_M_gcount, __rhs._M_gcount);
    }
    template <typename _ValueT>
    __istream_type& _M_extract(_ValueT& __v);
  };
  template <>
  basic_istream<char>& basic_istream<char>::getline(char_type * __s, streamsize __n, char_type __delim);
  template <>
  basic_istream<char>& basic_istream<char>::ignore(streamsize __n);
  template <>
  basic_istream<char>& basic_istream<char>::ignore(streamsize __n, int_type __delim);
  template <>
  basic_istream<wchar_t>& basic_istream<wchar_t>::getline(char_type * __s, streamsize __n, char_type __delim);
  template <>
  basic_istream<wchar_t>& basic_istream<wchar_t>::ignore(streamsize __n);
  template <>
  basic_istream<wchar_t>& basic_istream<wchar_t>::ignore(streamsize __n, int_type __delim);
  template <typename _CharT, typename _Traits>
  class basic_istream<_CharT, _Traits>::sentry
  {
    bool _M_ok;

  public:
    typedef _Traits traits_type;
    typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
    typedef basic_istream<_CharT, _Traits> __istream_type;
    typedef typename __istream_type::__ctype_type __ctype_type;
    typedef typename _Traits::int_type __int_type;
    explicit sentry(basic_istream<_CharT, _Traits>& __is, bool __noskipws = false);
    explicit operator bool() const { return _M_ok; }
  };
  template <typename _CharT, typename _Traits>
  basic_istream<_CharT, _Traits>& operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c);
  template <class _Traits>
  inline basic_istream<char, _Traits>& operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)
  {
    return (__in >> reinterpret_cast<char&>(__c));
  }
  template <class _Traits>
  inline basic_istream<char, _Traits>& operator>>(basic_istream<char, _Traits>& __in, signed char& __c)
  {
    return (__in >> reinterpret_cast<char&>(__c));
  }
  template <typename _CharT, typename _Traits>
  basic_istream<_CharT, _Traits>& operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s);
  template <>
  basic_istream<char>& operator>>(basic_istream<char>& __in, char* __s);
  template <class _Traits>
  inline basic_istream<char, _Traits>& operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)
  {
    return (__in >> reinterpret_cast<char*>(__s));
  }
  template <class _Traits>
  inline basic_istream<char, _Traits>& operator>>(basic_istream<char, _Traits>& __in, signed char* __s)
  {
    return (__in >> reinterpret_cast<char*>(__s));
  }
  template <typename _CharT, typename _Traits>
  class basic_iostream : public basic_istream<_CharT, _Traits>, public basic_ostream<_CharT, _Traits>
  {
  public:
    typedef _CharT char_type;
    typedef typename _Traits::int_type int_type;
    typedef typename _Traits::pos_type pos_type;
    typedef typename _Traits::off_type off_type;
    typedef _Traits traits_type;
    typedef basic_istream<_CharT, _Traits> __istream_type;
    typedef basic_ostream<_CharT, _Traits> __ostream_type;
    explicit basic_iostream(basic_streambuf<_CharT, _Traits>* __sb) : __istream_type(__sb), __ostream_type(__sb) {}
    virtual ~basic_iostream() {}

  protected:
    basic_iostream() : __istream_type(), __ostream_type() {}
    basic_iostream(const basic_iostream&) = delete;
    basic_iostream(basic_iostream&& __rhs) : __istream_type(std::move(__rhs)), __ostream_type(*this) {}
    basic_iostream& operator=(const basic_iostream&) = delete;
    basic_iostream& operator=(basic_iostream&& __rhs)
    {
      swap(__rhs);
      return *this;
    }
    void swap(basic_iostream& __rhs) { __istream_type::swap(__rhs); }
  };
  template <typename _CharT, typename _Traits>
  basic_istream<_CharT, _Traits>& ws(basic_istream<_CharT, _Traits> & __is);
  template <typename _Ch, typename _Up>
  basic_istream<_Ch, _Up>& __is_convertible_to_basic_istream_test(basic_istream<_Ch, _Up>*);
  template <typename _Tp, typename = void>
  struct __is_convertible_to_basic_istream_impl
  {
    using __istream_type = void;
  };
  template <typename _Tp>
  using __do_is_convertible_to_basic_istream_impl =
      decltype(__is_convertible_to_basic_istream_test(declval<typename remove_reference<_Tp>::type*>()));
  template <typename _Tp>
  struct __is_convertible_to_basic_istream_impl<_Tp, __void_t<__do_is_convertible_to_basic_istream_impl<_Tp>>>
  {
    using __istream_type = __do_is_convertible_to_basic_istream_impl<_Tp>;
  };
  template <typename _Tp>
  struct __is_convertible_to_basic_istream : __is_convertible_to_basic_istream_impl<_Tp>
  {
  public:
    using type = __not_<is_void<typename __is_convertible_to_basic_istream_impl<_Tp>::__istream_type>>;
    constexpr static bool value = type::value;
  };
  template <typename _Istream, typename _Tp, typename = void>
  struct __is_extractable : false_type
  {
  };
  template <typename _Istream, typename _Tp>
  struct __is_extractable<_Istream, _Tp, __void_t<decltype(declval<_Istream&>() >> declval<_Tp>())>> : true_type
  {
  };
  template <typename _Istream>
  using __rvalue_istream_type = typename __is_convertible_to_basic_istream<_Istream>::__istream_type;
  template <typename _Istream, typename _Tp>
  inline typename enable_if<__and_<__not_<is_lvalue_reference<_Istream>>,
                                   __is_convertible_to_basic_istream<_Istream>,
                                   __is_extractable<__rvalue_istream_type<_Istream>, _Tp&&>>::value,
                            __rvalue_istream_type<_Istream>>::type
  operator>>(_Istream&& __is, _Tp&& __x)
  {
    __rvalue_istream_type<_Istream> __ret_is = __is;
    __ret_is >> std::forward<_Tp>(__x);
    return __ret_is;
  }
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _CharT, typename _Traits>
  basic_istream<_CharT, _Traits>::sentry::sentry(basic_istream<_CharT, _Traits> & __in, bool __noskip) : _M_ok(false)
  {
    ios_base::iostate __err = ios_base::goodbit;
    if (__in.good())
      try
      {
        if (__in.tie())
          __in.tie()->flush();
        if (!__noskip && bool(__in.flags() & ios_base::skipws))
        {
          const __int_type __eof = traits_type::eof();
          __streambuf_type* __sb = __in.rdbuf();
          __int_type __c = __sb->sgetc();
          const __ctype_type& __ct = __check_facet(__in._M_ctype);
          while (!traits_type::eq_int_type(__c, __eof) && __ct.is(ctype_base::space, traits_type::to_char_type(__c)))
            __c = __sb->snextc();
          if (traits_type::eq_int_type(__c, __eof))
            __err |= ios_base::eofbit;
        }
      }
      catch (__cxxabiv1::__forced_unwind&)
      {
        __in._M_setstate(ios_base::badbit);
        throw;
      }
      catch (...)
      {
        __in._M_setstate(ios_base::badbit);
      }
    if (__in.good() && __err == ios_base::goodbit)
      _M_ok = true;
    else
    {
      __err |= ios_base::failbit;
      __in.setstate(__err);
    }
  }
  template <typename _CharT, typename _Traits>
  template <typename _ValueT>
  basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::_M_extract(_ValueT & __v)
  {
    sentry __cerb(*this, false);
    if (__cerb)
    {
      ios_base::iostate __err = ios_base::goodbit;
      try
      {
        const __num_get_type& __ng = __check_facet(this->_M_num_get);
        __ng.get(*this, 0, *this, __err, __v);
      }
      catch (__cxxabiv1::__forced_unwind&)
      {
        this->_M_setstate(ios_base::badbit);
        throw;
      }
      catch (...)
      {
        this->_M_setstate(ios_base::badbit);
      }
      if (__err)
        this->setstate(__err);
    }
    return *this;
  }
  template <typename _CharT, typename _Traits>
  basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::operator>>(short& __n)
  {
    sentry __cerb(*this, false);
    if (__cerb)
    {
      ios_base::iostate __err = ios_base::goodbit;
      try
      {
        long __l;
        const __num_get_type& __ng = __check_facet(this->_M_num_get);
        __ng.get(*this, 0, *this, __err, __l);
        if (__l < __gnu_cxx::__numeric_traits<short>::__min)
        {
          __err |= ios_base::failbit;
          __n = __gnu_cxx::__numeric_traits<short>::__min;
        }
        else if (__l > __gnu_cxx::__numeric_traits<short>::__max)
        {
          __err |= ios_base::failbit;
          __n = __gnu_cxx::__numeric_traits<short>::__max;
        }
        else
          __n = short(__l);
      }
      catch (__cxxabiv1::__forced_unwind&)
      {
        this->_M_setstate(ios_base::badbit);
        throw;
      }
      catch (...)
      {
        this->_M_setstate(ios_base::badbit);
      }
      if (__err)
        this->setstate(__err);
    }
    return *this;
  }
  template <typename _CharT, typename _Traits>
  basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::operator>>(int& __n)
  {
    sentry __cerb(*this, false);
    if (__cerb)
    {
      ios_base::iostate __err = ios_base::goodbit;
      try
      {
        long __l;
        const __num_get_type& __ng = __check_facet(this->_M_num_get);
        __ng.get(*this, 0, *this, __err, __l);
        if (__l < __gnu_cxx::__numeric_traits<int>::__min)
        {
          __err |= ios_base::failbit;
          __n = __gnu_cxx::__numeric_traits<int>::__min;
        }
        else if (__l > __gnu_cxx::__numeric_traits<int>::__max)
        {
          __err |= ios_base::failbit;
          __n = __gnu_cxx::__numeric_traits<int>::__max;
        }
        else
          __n = int(__l);
      }
      catch (__cxxabiv1::__forced_unwind&)
      {
        this->_M_setstate(ios_base::badbit);
        throw;
      }
      catch (...)
      {
        this->_M_setstate(ios_base::badbit);
      }
      if (__err)
        this->setstate(__err);
    }
    return *this;
  }
  template <typename _CharT, typename _Traits>
  basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::operator>>(__streambuf_type* __sbout)
  {
    ios_base::iostate __err = ios_base::goodbit;
    sentry __cerb(*this, false);
    if (__cerb && __sbout)
    {
      try
      {
        bool __ineof;
        if (!__copy_streambufs_eof(this->rdbuf(), __sbout, __ineof))
          __err |= ios_base::failbit;
        if (__ineof)
          __err |= ios_base::eofbit;
      }
      catch (__cxxabiv1::__forced_unwind&)
      {
        this->_M_setstate(ios_base::failbit);
        throw;
      }
      catch (...)
      {
        this->_M_setstate(ios_base::failbit);
      }
    }
    else if (!__sbout)
      __err |= ios_base::failbit;
    if (__err)
      this->setstate(__err);
    return *this;
  }
  template <typename _CharT, typename _Traits>
  typename basic_istream<_CharT, _Traits>::int_type basic_istream<_CharT, _Traits>::get(void)
  {
    const int_type __eof = traits_type::eof();
    int_type __c = __eof;
    _M_gcount = 0;
    ios_base::iostate __err = ios_base::goodbit;
    sentry __cerb(*this, true);
    if (__cerb)
    {
      try
      {
        __c = this->rdbuf()->sbumpc();
        if (!traits_type::eq_int_type(__c, __eof))
          _M_gcount = 1;
        else
          __err |= ios_base::eofbit;
      }
      catch (__cxxabiv1::__forced_unwind&)
      {
        this->_M_setstate(ios_base::badbit);
        throw;
      }
      catch (...)
      {
        this->_M_setstate(ios_base::badbit);
      }
    }
    if (!_M_gcount)
      __err |= ios_base::failbit;
    if (__err)
      this->setstate(__err);
    return __c;
  }
  template <typename _CharT, typename _Traits>
  basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::get(char_type & __c)
  {
    _M_gcount = 0;
    ios_base::iostate __err = ios_base::goodbit;
    sentry __cerb(*this, true);
    if (__cerb)
    {
      try
      {
        const int_type __cb = this->rdbuf()->sbumpc();
        if (!traits_type::eq_int_type(__cb, traits_type::eof()))
        {
          _M_gcount = 1;
          __c = traits_type::to_char_type(__cb);
        }
        else
          __err |= ios_base::eofbit;
      }
      catch (__cxxabiv1::__forced_unwind&)
      {
        this->_M_setstate(ios_base::badbit);
        throw;
      }
      catch (...)
      {
        this->_M_setstate(ios_base::badbit);
      }
    }
    if (!_M_gcount)
      __err |= ios_base::failbit;
    if (__err)
      this->setstate(__err);
    return *this;
  }
  template <typename _CharT, typename _Traits>
  basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::get(
      char_type * __s, streamsize __n, char_type __delim)
  {
    _M_gcount = 0;
    ios_base::iostate __err = ios_base::goodbit;
    sentry __cerb(*this, true);
    if (__cerb)
    {
      try
      {
        const int_type __idelim = traits_type::to_int_type(__delim);
        const int_type __eof = traits_type::eof();
        __streambuf_type* __sb = this->rdbuf();
        int_type __c = __sb->sgetc();
        while (_M_gcount + 1 < __n && !traits_type::eq_int_type(__c, __eof) && !traits_type::eq_int_type(__c, __idelim))
        {
          *__s++ = traits_type::to_char_type(__c);
          ++_M_gcount;
          __c = __sb->snextc();
        }
        if (traits_type::eq_int_type(__c, __eof))
          __err |= ios_base::eofbit;
      }
      catch (__cxxabiv1::__forced_unwind&)
      {
        this->_M_setstate(ios_base::badbit);
        throw;
      }
      catch (...)
      {
        this->_M_setstate(ios_base::badbit);
      }
    }
    if (__n > 0)
      *__s = char_type();
    if (!_M_gcount)
      __err |= ios_base::failbit;
    if (__err)
      this->setstate(__err);
    return *this;
  }
  template <typename _CharT, typename _Traits>
  basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::get(__streambuf_type & __sb, char_type __delim)
  {
    _M_gcount = 0;
    ios_base::iostate __err = ios_base::goodbit;
    sentry __cerb(*this, true);
    if (__cerb)
    {
      try
      {
        const int_type __idelim = traits_type::to_int_type(__delim);
        const int_type __eof = traits_type::eof();
        __streambuf_type* __this_sb = this->rdbuf();
        int_type __c = __this_sb->sgetc();
        char_type __c2 = traits_type::to_char_type(__c);
        while (!traits_type::eq_int_type(__c, __eof) && !traits_type::eq_int_type(__c, __idelim) &&
               !traits_type::eq_int_type(__sb.sputc(__c2), __eof))
        {
          ++_M_gcount;
          __c = __this_sb->snextc();
          __c2 = traits_type::to_char_type(__c);
        }
        if (traits_type::eq_int_type(__c, __eof))
          __err |= ios_base::eofbit;
      }
      catch (__cxxabiv1::__forced_unwind&)
      {
        this->_M_setstate(ios_base::badbit);
        throw;
      }
      catch (...)
      {
        this->_M_setstate(ios_base::badbit);
      }
    }
    if (!_M_gcount)
      __err |= ios_base::failbit;
    if (__err)
      this->setstate(__err);
    return *this;
  }
  template <typename _CharT, typename _Traits>
  basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::getline(
      char_type * __s, streamsize __n, char_type __delim)
  {
    _M_gcount = 0;
    ios_base::iostate __err = ios_base::goodbit;
    sentry __cerb(*this, true);
    if (__cerb)
    {
      try
      {
        const int_type __idelim = traits_type::to_int_type(__delim);
        const int_type __eof = traits_type::eof();
        __streambuf_type* __sb = this->rdbuf();
        int_type __c = __sb->sgetc();
        while (_M_gcount + 1 < __n && !traits_type::eq_int_type(__c, __eof) && !traits_type::eq_int_type(__c, __idelim))
        {
          *__s++ = traits_type::to_char_type(__c);
          __c = __sb->snextc();
          ++_M_gcount;
        }
        if (traits_type::eq_int_type(__c, __eof))
          __err |= ios_base::eofbit;
        else
        {
          if (traits_type::eq_int_type(__c, __idelim))
          {
            __sb->sbumpc();
            ++_M_gcount;
          }
          else
            __err |= ios_base::failbit;
        }
      }
      catch (__cxxabiv1::__forced_unwind&)
      {
        this->_M_setstate(ios_base::badbit);
        throw;
      }
      catch (...)
      {
        this->_M_setstate(ios_base::badbit);
      }
    }
    if (__n > 0)
      *__s = char_type();
    if (!_M_gcount)
      __err |= ios_base::failbit;
    if (__err)
      this->setstate(__err);
    return *this;
  }
  template <typename _CharT, typename _Traits>
  basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::ignore(void)
  {
    _M_gcount = 0;
    sentry __cerb(*this, true);
    if (__cerb)
    {
      ios_base::iostate __err = ios_base::goodbit;
      try
      {
        const int_type __eof = traits_type::eof();
        __streambuf_type* __sb = this->rdbuf();
        if (traits_type::eq_int_type(__sb->sbumpc(), __eof))
          __err |= ios_base::eofbit;
        else
          _M_gcount = 1;
      }
      catch (__cxxabiv1::__forced_unwind&)
      {
        this->_M_setstate(ios_base::badbit);
        throw;
      }
      catch (...)
      {
        this->_M_setstate(ios_base::badbit);
      }
      if (__err)
        this->setstate(__err);
    }
    return *this;
  }
  template <typename _CharT, typename _Traits>
  basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::ignore(streamsize __n)
  {
    _M_gcount = 0;
    sentry __cerb(*this, true);
    if (__cerb && __n > 0)
    {
      ios_base::iostate __err = ios_base::goodbit;
      try
      {
        const int_type __eof = traits_type::eof();
        __streambuf_type* __sb = this->rdbuf();
        int_type __c = __sb->sgetc();
        bool __large_ignore = false;
        while (true)
        {
          while (_M_gcount < __n && !traits_type::eq_int_type(__c, __eof))
          {
            ++_M_gcount;
            __c = __sb->snextc();
          }
          if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max && !traits_type::eq_int_type(__c, __eof))
          {
            _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__min;
            __large_ignore = true;
          }
          else
            break;
        }
        if (__large_ignore)
          _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;
        if (traits_type::eq_int_type(__c, __eof))
          __err |= ios_base::eofbit;
      }
      catch (__cxxabiv1::__forced_unwind&)
      {
        this->_M_setstate(ios_base::badbit);
        throw;
      }
      catch (...)
      {
        this->_M_setstate(ios_base::badbit);
      }
      if (__err)
        this->setstate(__err);
    }
    return *this;
  }
  template <typename _CharT, typename _Traits>
  basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::ignore(streamsize __n, int_type __delim)
  {
    _M_gcount = 0;
    sentry __cerb(*this, true);
    if (__cerb && __n > 0)
    {
      ios_base::iostate __err = ios_base::goodbit;
      try
      {
        const int_type __eof = traits_type::eof();
        __streambuf_type* __sb = this->rdbuf();
        int_type __c = __sb->sgetc();
        bool __large_ignore = false;
        while (true)
        {
          while (_M_gcount < __n && !traits_type::eq_int_type(__c, __eof) && !traits_type::eq_int_type(__c, __delim))
          {
            ++_M_gcount;
            __c = __sb->snextc();
          }
          if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max && !traits_type::eq_int_type(__c, __eof) &&
              !traits_type::eq_int_type(__c, __delim))
          {
            _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__min;
            __large_ignore = true;
          }
          else
            break;
        }
        if (__large_ignore)
          _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;
        if (traits_type::eq_int_type(__c, __eof))
          __err |= ios_base::eofbit;
        else if (traits_type::eq_int_type(__c, __delim))
        {
          if (_M_gcount < __gnu_cxx::__numeric_traits<streamsize>::__max)
            ++_M_gcount;
          __sb->sbumpc();
        }
      }
      catch (__cxxabiv1::__forced_unwind&)
      {
        this->_M_setstate(ios_base::badbit);
        throw;
      }
      catch (...)
      {
        this->_M_setstate(ios_base::badbit);
      }
      if (__err)
        this->setstate(__err);
    }
    return *this;
  }
  template <typename _CharT, typename _Traits>
  typename basic_istream<_CharT, _Traits>::int_type basic_istream<_CharT, _Traits>::peek(void)
  {
    int_type __c = traits_type::eof();
    _M_gcount = 0;
    sentry __cerb(*this, true);
    if (__cerb)
    {
      ios_base::iostate __err = ios_base::goodbit;
      try
      {
        __c = this->rdbuf()->sgetc();
        if (traits_type::eq_int_type(__c, traits_type::eof()))
          __err |= ios_base::eofbit;
      }
      catch (__cxxabiv1::__forced_unwind&)
      {
        this->_M_setstate(ios_base::badbit);
        throw;
      }
      catch (...)
      {
        this->_M_setstate(ios_base::badbit);
      }
      if (__err)
        this->setstate(__err);
    }
    return __c;
  }
  template <typename _CharT, typename _Traits>
  basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::read(char_type * __s, streamsize __n)
  {
    _M_gcount = 0;
    sentry __cerb(*this, true);
    if (__cerb)
    {
      ios_base::iostate __err = ios_base::goodbit;
      try
      {
        _M_gcount = this->rdbuf()->sgetn(__s, __n);
        if (_M_gcount != __n)
          __err |= (ios_base::eofbit | ios_base::failbit);
      }
      catch (__cxxabiv1::__forced_unwind&)
      {
        this->_M_setstate(ios_base::badbit);
        throw;
      }
      catch (...)
      {
        this->_M_setstate(ios_base::badbit);
      }
      if (__err)
        this->setstate(__err);
    }
    return *this;
  }
  template <typename _CharT, typename _Traits>
  streamsize basic_istream<_CharT, _Traits>::readsome(char_type * __s, streamsize __n)
  {
    _M_gcount = 0;
    sentry __cerb(*this, true);
    if (__cerb)
    {
      ios_base::iostate __err = ios_base::goodbit;
      try
      {
        const streamsize __num = this->rdbuf()->in_avail();
        if (__num > 0)
          _M_gcount = this->rdbuf()->sgetn(__s, std::min(__num, __n));
        else if (__num == -1)
          __err |= ios_base::eofbit;
      }
      catch (__cxxabiv1::__forced_unwind&)
      {
        this->_M_setstate(ios_base::badbit);
        throw;
      }
      catch (...)
      {
        this->_M_setstate(ios_base::badbit);
      }
      if (__err)
        this->setstate(__err);
    }
    return _M_gcount;
  }
  template <typename _CharT, typename _Traits>
  basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::putback(char_type __c)
  {
    _M_gcount = 0;
    this->clear(this->rdstate() & ~ios_base::eofbit);
    sentry __cerb(*this, true);
    if (__cerb)
    {
      ios_base::iostate __err = ios_base::goodbit;
      try
      {
        const int_type __eof = traits_type::eof();
        __streambuf_type* __sb = this->rdbuf();
        if (!__sb || traits_type::eq_int_type(__sb->sputbackc(__c), __eof))
          __err |= ios_base::badbit;
      }
      catch (__cxxabiv1::__forced_unwind&)
      {
        this->_M_setstate(ios_base::badbit);
        throw;
      }
      catch (...)
      {
        this->_M_setstate(ios_base::badbit);
      }
      if (__err)
        this->setstate(__err);
    }
    return *this;
  }
  template <typename _CharT, typename _Traits>
  basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::unget(void)
  {
    _M_gcount = 0;
    this->clear(this->rdstate() & ~ios_base::eofbit);
    sentry __cerb(*this, true);
    if (__cerb)
    {
      ios_base::iostate __err = ios_base::goodbit;
      try
      {
        const int_type __eof = traits_type::eof();
        __streambuf_type* __sb = this->rdbuf();
        if (!__sb || traits_type::eq_int_type(__sb->sungetc(), __eof))
          __err |= ios_base::badbit;
      }
      catch (__cxxabiv1::__forced_unwind&)
      {
        this->_M_setstate(ios_base::badbit);
        throw;
      }
      catch (...)
      {
        this->_M_setstate(ios_base::badbit);
      }
      if (__err)
        this->setstate(__err);
    }
    return *this;
  }
  template <typename _CharT, typename _Traits>
  int basic_istream<_CharT, _Traits>::sync(void)
  {
    int __ret = -1;
    sentry __cerb(*this, true);
    if (__cerb)
    {
      ios_base::iostate __err = ios_base::goodbit;
      try
      {
        __streambuf_type* __sb = this->rdbuf();
        if (__sb)
        {
          if (__sb->pubsync() == -1)
            __err |= ios_base::badbit;
          else
            __ret = 0;
        }
      }
      catch (__cxxabiv1::__forced_unwind&)
      {
        this->_M_setstate(ios_base::badbit);
        throw;
      }
      catch (...)
      {
        this->_M_setstate(ios_base::badbit);
      }
      if (__err)
        this->setstate(__err);
    }
    return __ret;
  }
  template <typename _CharT, typename _Traits>
  typename basic_istream<_CharT, _Traits>::pos_type basic_istream<_CharT, _Traits>::tellg(void)
  {
    pos_type __ret = pos_type(-1);
    sentry __cerb(*this, true);
    if (__cerb)
    {
      try
      {
        if (!this->fail())
          __ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::in);
      }
      catch (__cxxabiv1::__forced_unwind&)
      {
        this->_M_setstate(ios_base::badbit);
        throw;
      }
      catch (...)
      {
        this->_M_setstate(ios_base::badbit);
      }
    }
    return __ret;
  }
  template <typename _CharT, typename _Traits>
  basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::seekg(pos_type __pos)
  {
    this->clear(this->rdstate() & ~ios_base::eofbit);
    sentry __cerb(*this, true);
    if (__cerb)
    {
      ios_base::iostate __err = ios_base::goodbit;
      try
      {
        if (!this->fail())
        {
          const pos_type __p = this->rdbuf()->pubseekpos(__pos, ios_base::in);
          if (__p == pos_type(off_type(-1)))
            __err |= ios_base::failbit;
        }
      }
      catch (__cxxabiv1::__forced_unwind&)
      {
        this->_M_setstate(ios_base::badbit);
        throw;
      }
      catch (...)
      {
        this->_M_setstate(ios_base::badbit);
      }
      if (__err)
        this->setstate(__err);
    }
    return *this;
  }
  template <typename _CharT, typename _Traits>
  basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::seekg(off_type __off, ios_base::seekdir __dir)
  {
    this->clear(this->rdstate() & ~ios_base::eofbit);
    sentry __cerb(*this, true);
    if (__cerb)
    {
      ios_base::iostate __err = ios_base::goodbit;
      try
      {
        if (!this->fail())
        {
          const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir, ios_base::in);
          if (__p == pos_type(off_type(-1)))
            __err |= ios_base::failbit;
        }
      }
      catch (__cxxabiv1::__forced_unwind&)
      {
        this->_M_setstate(ios_base::badbit);
        throw;
      }
      catch (...)
      {
        this->_M_setstate(ios_base::badbit);
      }
      if (__err)
        this->setstate(__err);
    }
    return *this;
  }
  template <typename _CharT, typename _Traits>
  basic_istream<_CharT, _Traits>& operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)
  {
    typedef basic_istream<_CharT, _Traits> __istream_type;
    typedef typename __istream_type::int_type __int_type;
    typename __istream_type::sentry __cerb(__in, false);
    if (__cerb)
    {
      ios_base::iostate __err = ios_base::goodbit;
      try
      {
        const __int_type __cb = __in.rdbuf()->sbumpc();
        if (!_Traits::eq_int_type(__cb, _Traits::eof()))
          __c = _Traits::to_char_type(__cb);
        else
          __err |= (ios_base::eofbit | ios_base::failbit);
      }
      catch (__cxxabiv1::__forced_unwind&)
      {
        __in._M_setstate(ios_base::badbit);
        throw;
      }
      catch (...)
      {
        __in._M_setstate(ios_base::badbit);
      }
      if (__err)
        __in.setstate(__err);
    }
    return __in;
  }
  template <typename _CharT, typename _Traits>
  basic_istream<_CharT, _Traits>& operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)
  {
    typedef basic_istream<_CharT, _Traits> __istream_type;
    typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
    typedef typename _Traits::int_type int_type;
    typedef _CharT char_type;
    typedef ctype<_CharT> __ctype_type;
    streamsize __extracted = 0;
    ios_base::iostate __err = ios_base::goodbit;
    typename __istream_type::sentry __cerb(__in, false);
    if (__cerb)
    {
      try
      {
        streamsize __num = __in.width();
        if (__num <= 0)
          __num = __gnu_cxx::__numeric_traits<streamsize>::__max;
        const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
        const int_type __eof = _Traits::eof();
        __streambuf_type* __sb = __in.rdbuf();
        int_type __c = __sb->sgetc();
        while (__extracted < __num - 1 && !_Traits::eq_int_type(__c, __eof) &&
               !__ct.is(ctype_base::space, _Traits::to_char_type(__c)))
        {
          *__s++ = _Traits::to_char_type(__c);
          ++__extracted;
          __c = __sb->snextc();
        }
        if (_Traits::eq_int_type(__c, __eof))
          __err |= ios_base::eofbit;
        *__s = char_type();
        __in.width(0);
      }
      catch (__cxxabiv1::__forced_unwind&)
      {
        __in._M_setstate(ios_base::badbit);
        throw;
      }
      catch (...)
      {
        __in._M_setstate(ios_base::badbit);
      }
    }
    if (!__extracted)
      __err |= ios_base::failbit;
    if (__err)
      __in.setstate(__err);
    return __in;
  }
  template <typename _CharT, typename _Traits>
  basic_istream<_CharT, _Traits>& ws(basic_istream<_CharT, _Traits> & __in)
  {
    typedef basic_istream<_CharT, _Traits> __istream_type;
    typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
    typedef typename __istream_type::int_type __int_type;
    typedef ctype<_CharT> __ctype_type;
    const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
    const __int_type __eof = _Traits::eof();
    __streambuf_type* __sb = __in.rdbuf();
    __int_type __c = __sb->sgetc();
    while (!_Traits::eq_int_type(__c, __eof) && __ct.is(ctype_base::space, _Traits::to_char_type(__c)))
      __c = __sb->snextc();
    if (_Traits::eq_int_type(__c, __eof))
      __in.setstate(ios_base::eofbit);
    return __in;
  }
  extern template class basic_istream<char>;
  extern template istream& ws(istream&);
  extern template istream& operator>>(istream&, char&);
  extern template istream& operator>>(istream&, char*);
  extern template istream& operator>>(istream&, unsigned char&);
  extern template istream& operator>>(istream&, signed char&);
  extern template istream& operator>>(istream&, unsigned char*);
  extern template istream& operator>>(istream&, signed char*);
  extern template istream& istream::_M_extract(unsigned short&);
  extern template istream& istream::_M_extract(unsigned int&);
  extern template istream& istream::_M_extract(long&);
  extern template istream& istream::_M_extract(unsigned long&);
  extern template istream& istream::_M_extract(bool&);
  extern template istream& istream::_M_extract(long long&);
  extern template istream& istream::_M_extract(unsigned long long&);
  extern template istream& istream::_M_extract(float&);
  extern template istream& istream::_M_extract(double&);
  extern template istream& istream::_M_extract(long double&);
  extern template istream& istream::_M_extract(void*&);
  extern template class basic_iostream<char>;
  extern template class basic_istream<wchar_t>;
  extern template wistream& ws(wistream&);
  extern template wistream& operator>>(wistream&, wchar_t&);
  extern template wistream& operator>>(wistream&, wchar_t*);
  extern template wistream& wistream::_M_extract(unsigned short&);
  extern template wistream& wistream::_M_extract(unsigned int&);
  extern template wistream& wistream::_M_extract(long&);
  extern template wistream& wistream::_M_extract(unsigned long&);
  extern template wistream& wistream::_M_extract(bool&);
  extern template wistream& wistream::_M_extract(long long&);
  extern template wistream& wistream::_M_extract(unsigned long long&);
  extern template wistream& wistream::_M_extract(float&);
  extern template wistream& wistream::_M_extract(double&);
  extern template wistream& wistream::_M_extract(long double&);
  extern template wistream& wistream::_M_extract(void*&);
  extern template class basic_iostream<wchar_t>;
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _Tp, typename _CharT = char, typename _Traits = char_traits<_CharT>, typename _Dist = ptrdiff_t>
  class istream_iterator : public iterator<input_iterator_tag, _Tp, _Dist, const _Tp*, const _Tp&>
  {
  public:
    typedef _CharT char_type;
    typedef _Traits traits_type;
    typedef basic_istream<_CharT, _Traits> istream_type;

  private:
    istream_type* _M_stream;
    _Tp _M_value;
    bool _M_ok;

  public:
    constexpr istream_iterator() : _M_stream(0), _M_value(), _M_ok(false) {}
    istream_iterator(istream_type& __s) : _M_stream(std::__addressof(__s)) { _M_read(); }
    istream_iterator(const istream_iterator& __obj)
        : _M_stream(__obj._M_stream), _M_value(__obj._M_value), _M_ok(__obj._M_ok)
    {
    }
    istream_iterator& operator=(const istream_iterator&) = default;
    const _Tp& operator*() const
    {
      ;
      return _M_value;
    }
    const _Tp* operator->() const { return std::__addressof((operator*())); }
    istream_iterator& operator++()
    {
      ;
      _M_read();
      return *this;
    }
    istream_iterator operator++(int)
    {
      ;
      istream_iterator __tmp = *this;
      _M_read();
      return __tmp;
    }
    bool _M_equal(const istream_iterator& __x) const
    {
      return (_M_ok == __x._M_ok) && (!_M_ok || _M_stream == __x._M_stream);
    }

  private:
    void _M_read()
    {
      _M_ok = (_M_stream && *_M_stream) ? true : false;
      if (_M_ok)
      {
        *_M_stream >> _M_value;
        _M_ok = *_M_stream ? true : false;
      }
    }
  };
  template <typename _Tp, typename _CharT, typename _Traits, typename _Dist>
  inline bool operator==(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,
                         const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __y)
  {
    return __x._M_equal(__y);
  }
  template <class _Tp, class _CharT, class _Traits, class _Dist>
  inline bool operator!=(const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __x,
                         const istream_iterator<_Tp, _CharT, _Traits, _Dist>& __y)
  {
    return !__x._M_equal(__y);
  }
  template <typename _Tp, typename _CharT = char, typename _Traits = char_traits<_CharT>>
  class ostream_iterator : public iterator<output_iterator_tag, void, void, void, void>
  {
  public:
    typedef _CharT char_type;
    typedef _Traits traits_type;
    typedef basic_ostream<_CharT, _Traits> ostream_type;

  private:
    ostream_type* _M_stream;
    const _CharT* _M_string;

  public:
    ostream_iterator(ostream_type& __s) : _M_stream(std::__addressof(__s)), _M_string(0) {}
    ostream_iterator(ostream_type& __s, const _CharT* __c) : _M_stream(&__s), _M_string(__c) {}
    ostream_iterator(const ostream_iterator& __obj) : _M_stream(__obj._M_stream), _M_string(__obj._M_string) {}
    ostream_iterator& operator=(const ostream_iterator&) = default;
    ostream_iterator& operator=(const _Tp& __value)
    {
      ;
      *_M_stream << __value;
      if (_M_string)
        *_M_stream << _M_string;
      return *this;
    }
    ostream_iterator& operator*() { return *this; }
    ostream_iterator& operator++() { return *this; }
    ostream_iterator& operator++(int) { return *this; }
  };
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <class _OutputIterator, class _Tp>
  class raw_storage_iterator : public iterator<output_iterator_tag, void, void, void, void>
  {
  protected:
    _OutputIterator _M_iter;

  public:
    explicit raw_storage_iterator(_OutputIterator __x) : _M_iter(__x) {}
    raw_storage_iterator& operator*() { return *this; }
    raw_storage_iterator& operator=(const _Tp& __element)
    {
      std::_Construct(std::__addressof(*_M_iter), __element);
      return *this;
    }
    raw_storage_iterator& operator=(_Tp&& __element)
    {
      std::_Construct(std::__addressof(*_M_iter), std::move(__element));
      return *this;
    }
    raw_storage_iterator& operator++()
    {
      ++_M_iter;
      return *this;
    }
    raw_storage_iterator operator++(int)
    {
      raw_storage_iterator __tmp = *this;
      ++_M_iter;
      return __tmp;
    }
    _OutputIterator base() const { return _M_iter; }
  };
}  // namespace )
namespace __gnu_cxx __attribute__((__visibility__("default")))
{
  enum _Lock_policy
  {
    _S_single,
    _S_mutex,
    _S_atomic
  };
  static const _Lock_policy __default_lock_policy = _S_atomic;
  class __concurrence_lock_error : public std::exception
  {
  public:
    virtual char const* what() const throw() { return "__gnu_cxx::__concurrence_lock_error"; }
  };
  class __concurrence_unlock_error : public std::exception
  {
  public:
    virtual char const* what() const throw() { return "__gnu_cxx::__concurrence_unlock_error"; }
  };
  class __concurrence_broadcast_error : public std::exception
  {
  public:
    virtual char const* what() const throw() { return "__gnu_cxx::__concurrence_broadcast_error"; }
  };
  class __concurrence_wait_error : public std::exception
  {
  public:
    virtual char const* what() const throw() { return "__gnu_cxx::__concurrence_wait_error"; }
  };
  inline void __throw_concurrence_lock_error() { (throw(__concurrence_lock_error())); }
  inline void __throw_concurrence_unlock_error() { (throw(__concurrence_unlock_error())); }
  inline void __throw_concurrence_broadcast_error() { (throw(__concurrence_broadcast_error())); }
  inline void __throw_concurrence_wait_error() { (throw(__concurrence_wait_error())); }
  class __mutex
  {
  private:
    __gthread_mutex_t _M_mutex = {{0, 0, 0, 0, PTHREAD_MUTEX_TIMED_NP, 0, 0, {0, 0}}};
    __mutex(const __mutex&);
    __mutex& operator=(const __mutex&);

  public:
    __mutex() {}
    void lock()
    {
      if (__gthread_active_p())
      {
        if (__gthread_mutex_lock(&_M_mutex) != 0)
          __throw_concurrence_lock_error();
      }
    }
    void unlock()
    {
      if (__gthread_active_p())
      {
        if (__gthread_mutex_unlock(&_M_mutex) != 0)
          __throw_concurrence_unlock_error();
      }
    }
    __gthread_mutex_t* gthread_mutex(void) { return &_M_mutex; }
  };
  class __recursive_mutex
  {
  private:
    __gthread_recursive_mutex_t _M_mutex = {{0, 0, 0, 0, PTHREAD_MUTEX_RECURSIVE_NP, 0, 0, {0, 0}}};
    __recursive_mutex(const __recursive_mutex&);
    __recursive_mutex& operator=(const __recursive_mutex&);

  public:
    __recursive_mutex() {}
    void lock()
    {
      if (__gthread_active_p())
      {
        if (__gthread_recursive_mutex_lock(&_M_mutex) != 0)
          __throw_concurrence_lock_error();
      }
    }
    void unlock()
    {
      if (__gthread_active_p())
      {
        if (__gthread_recursive_mutex_unlock(&_M_mutex) != 0)
          __throw_concurrence_unlock_error();
      }
    }
    __gthread_recursive_mutex_t* gthread_recursive_mutex(void) { return &_M_mutex; }
  };
  class __scoped_lock
  {
  public:
    typedef __mutex __mutex_type;

  private:
    __mutex_type& _M_device;
    __scoped_lock(const __scoped_lock&);
    __scoped_lock& operator=(const __scoped_lock&);

  public:
    explicit __scoped_lock(__mutex_type& __name) : _M_device(__name) { _M_device.lock(); }
    ~__scoped_lock() throw() { _M_device.unlock(); }
  };
  class __cond
  {
  private:
    __gthread_cond_t _M_cond = {{{0}, {0}, {0, 0}, {0, 0}, 0, 0, {0, 0}}};
    __cond(const __cond&);
    __cond& operator=(const __cond&);

  public:
    __cond() {}
    void broadcast()
    {
      if (__gthread_active_p())
      {
        if (__gthread_cond_broadcast(&_M_cond) != 0)
          __throw_concurrence_broadcast_error();
      }
    }
    void wait(__mutex* mutex)
    {
      {
        if (__gthread_cond_wait(&_M_cond, mutex->gthread_mutex()) != 0)
          __throw_concurrence_wait_error();
      }
    }
    void wait_recursive(__recursive_mutex* mutex)
    {
      {
        if (__gthread_cond_wait_recursive(&_M_cond, mutex->gthread_recursive_mutex()) != 0)
          __throw_concurrence_wait_error();
      }
    }
  };
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  template <typename>
  class auto_ptr;
#pragma GCC diagnostic pop
  template <typename _Tp>
  struct default_delete
  {
    constexpr default_delete() noexcept = default;
    template <typename _Up, typename = typename enable_if<is_convertible<_Up*, _Tp*>::value>::type>
    default_delete(const default_delete<_Up>&) noexcept
    {
    }
    void operator()(_Tp* __ptr) const
    {
      static_assert(!is_void<_Tp>::value, "can't delete pointer to incomplete type");
      static_assert(sizeof(_Tp) > 0, "can't delete pointer to incomplete type");
      delete __ptr;
    }
  };
  template <typename _Tp>
  struct default_delete<_Tp[]>
  {
  public:
    constexpr default_delete() noexcept = default;
    template <typename _Up, typename = typename enable_if<is_convertible<_Up (*)[], _Tp (*)[]>::value>::type>
    default_delete(const default_delete<_Up[]>&) noexcept
    {
    }
    template <typename _Up>
    typename enable_if<is_convertible<_Up (*)[], _Tp (*)[]>::value>::type operator()(_Up* __ptr) const
    {
      static_assert(sizeof(_Tp) > 0, "can't delete pointer to incomplete type");
      delete[] __ptr;
    }
  };
  template <typename _Tp, typename _Dp>
  class __uniq_ptr_impl
  {
    template <typename _Up, typename _Ep, typename = void>
    struct _Ptr
    {
      using type = _Up*;
    };
    template <typename _Up, typename _Ep>
    struct _Ptr<_Up, _Ep, __void_t<typename remove_reference<_Ep>::type::pointer>>
    {
      using type = typename remove_reference<_Ep>::type::pointer;
    };

  public:
    using _DeleterConstraint = enable_if<__and_<__not_<is_pointer<_Dp>>, is_default_constructible<_Dp>>::value>;
    using pointer = typename _Ptr<_Tp, _Dp>::type;
    static_assert(!is_rvalue_reference<_Dp>::value,
                  "unique_ptr's deleter type must be a function object type"
                  " or an lvalue reference type");
    __uniq_ptr_impl() = default;
    __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
    template <typename _Del>
    __uniq_ptr_impl(pointer __p, _Del&& __d) : _M_t(__p, std::forward<_Del>(__d))
    {
    }
    pointer& _M_ptr() { return std::get<0>(_M_t); }
    pointer _M_ptr() const { return std::get<0>(_M_t); }
    _Dp& _M_deleter() { return std::get<1>(_M_t); }
    const _Dp& _M_deleter() const { return std::get<1>(_M_t); }
    void swap(__uniq_ptr_impl& __rhs) noexcept
    {
      using std::swap;
      swap(this->_M_ptr(), __rhs._M_ptr());
      swap(this->_M_deleter(), __rhs._M_deleter());
    }

  private:
    tuple<pointer, _Dp> _M_t;
  };
  template <typename _Tp, typename _Dp = default_delete<_Tp>>
  class unique_ptr
  {
    template <typename _Up>
    using _DeleterConstraint = typename __uniq_ptr_impl<_Tp, _Up>::_DeleterConstraint::type;
    __uniq_ptr_impl<_Tp, _Dp> _M_t;

  public:
    using pointer = typename __uniq_ptr_impl<_Tp, _Dp>::pointer;
    using element_type = _Tp;
    using deleter_type = _Dp;

  private:
    template <typename _Up, typename _Ep>
    using __safe_conversion_up =
        __and_<is_convertible<typename unique_ptr<_Up, _Ep>::pointer, pointer>, __not_<is_array<_Up>>>;

  public:
    template <typename _Del = _Dp, typename = _DeleterConstraint<_Del>>
    constexpr unique_ptr() noexcept : _M_t()
    {
    }
    template <typename _Del = _Dp, typename = _DeleterConstraint<_Del>>
    explicit unique_ptr(pointer __p) noexcept : _M_t(__p)
    {
    }
    template <typename _Del = deleter_type, typename = _Require<is_copy_constructible<_Del>>>
    unique_ptr(pointer __p, const deleter_type& __d) noexcept : _M_t(__p, __d)
    {
    }
    template <typename _Del = deleter_type, typename = _Require<is_move_constructible<_Del>>>
    unique_ptr(pointer __p, __enable_if_t<!is_lvalue_reference<_Del>::value, _Del&&> __d) noexcept
        : _M_t(__p, std::move(__d))
    {
    }
    template <typename _Del = deleter_type, typename _DelUnref = typename remove_reference<_Del>::type>
    unique_ptr(pointer, __enable_if_t<is_lvalue_reference<_Del>::value, _DelUnref&&>) = delete;
    template <typename _Del = _Dp, typename = _DeleterConstraint<_Del>>
    constexpr unique_ptr(nullptr_t) noexcept : _M_t()
    {
    }
    unique_ptr(unique_ptr&& __u) noexcept : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter())) {}
    template <typename _Up,
              typename _Ep,
              typename = _Require<
                  __safe_conversion_up<_Up, _Ep>,
                  typename conditional<is_reference<_Dp>::value, is_same<_Ep, _Dp>, is_convertible<_Ep, _Dp>>::type>>
    unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept : _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
    {
    }
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    template <typename _Up, typename = _Require<is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
    unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#pragma GCC diagnostic pop
    ~unique_ptr() noexcept
    {
      static_assert(__is_invocable<deleter_type&, pointer>::value,
                    "unique_ptr's deleter must be invocable with a pointer");
      auto& __ptr = _M_t._M_ptr();
      if (__ptr != nullptr)
        get_deleter()(std::move(__ptr));
      __ptr = pointer();
    }
    unique_ptr& operator=(unique_ptr&& __u) noexcept
    {
      reset(__u.release());
      get_deleter() = std::forward<deleter_type>(__u.get_deleter());
      return *this;
    }
    template <typename _Up, typename _Ep>
    typename enable_if<__and_<__safe_conversion_up<_Up, _Ep>, is_assignable<deleter_type&, _Ep&&>>::value,
                       unique_ptr&>::type
    operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
    {
      reset(__u.release());
      get_deleter() = std::forward<_Ep>(__u.get_deleter());
      return *this;
    }
    unique_ptr& operator=(nullptr_t) noexcept
    {
      reset();
      return *this;
    }
    typename add_lvalue_reference<element_type>::type operator*() const
    {
      ;
      return *get();
    }
    pointer operator->() const noexcept
    {
      ;
      return get();
    }
    pointer get() const noexcept { return _M_t._M_ptr(); }
    deleter_type& get_deleter() noexcept { return _M_t._M_deleter(); }
    const deleter_type& get_deleter() const noexcept { return _M_t._M_deleter(); }
    explicit operator bool() const noexcept { return get() == pointer() ? false : true; }
    pointer release() noexcept
    {
      pointer __p = get();
      _M_t._M_ptr() = pointer();
      return __p;
    }
    void reset(pointer __p = pointer()) noexcept
    {
      static_assert(__is_invocable<deleter_type&, pointer>::value,
                    "unique_ptr's deleter must be invocable with a pointer");
      using std::swap;
      swap(_M_t._M_ptr(), __p);
      if (__p != pointer())
        get_deleter()(std::move(__p));
    }
    void swap(unique_ptr& __u) noexcept
    {
      static_assert(__is_swappable<_Dp>::value, "deleter must be swappable");
      _M_t.swap(__u._M_t);
    }
    unique_ptr(const unique_ptr&) = delete;
    unique_ptr& operator=(const unique_ptr&) = delete;
  };
  template <typename _Tp, typename _Dp>
  class unique_ptr<_Tp[], _Dp>
  {
    template <typename _Up>
    using _DeleterConstraint = typename __uniq_ptr_impl<_Tp, _Up>::_DeleterConstraint::type;
    __uniq_ptr_impl<_Tp, _Dp> _M_t;
    template <typename _Up>
    using __remove_cv = typename remove_cv<_Up>::type;
    template <typename _Up>
    using __is_derived_Tp = __and_<is_base_of<_Tp, _Up>, __not_<is_same<__remove_cv<_Tp>, __remove_cv<_Up>>>>;

  public:
    using pointer = typename __uniq_ptr_impl<_Tp, _Dp>::pointer;
    using element_type = _Tp;
    using deleter_type = _Dp;
    template <typename _Up,
              typename _Ep,
              typename _UPtr = unique_ptr<_Up, _Ep>,
              typename _UP_pointer = typename _UPtr::pointer,
              typename _UP_element_type = typename _UPtr::element_type>
    using __safe_conversion_up = __and_<is_array<_Up>,
                                        is_same<pointer, element_type*>,
                                        is_same<_UP_pointer, _UP_element_type*>,
                                        is_convertible<_UP_element_type (*)[], element_type (*)[]>>;
    template <typename _Up>
    using __safe_conversion_raw =
        __and_<__or_<__or_<is_same<_Up, pointer>, is_same<_Up, nullptr_t>>,
                     __and_<is_pointer<_Up>,
                            is_same<pointer, element_type*>,
                            is_convertible<typename remove_pointer<_Up>::type (*)[], element_type (*)[]>>>>;
    template <typename _Del = _Dp, typename = _DeleterConstraint<_Del>>
    constexpr unique_ptr() noexcept : _M_t()
    {
    }
    template <typename _Up,
              typename _Vp = _Dp,
              typename = _DeleterConstraint<_Vp>,
              typename = typename enable_if<__safe_conversion_raw<_Up>::value, bool>::type>
    explicit unique_ptr(_Up __p) noexcept : _M_t(__p)
    {
    }
    template <typename _Up,
              typename _Del = deleter_type,
              typename = _Require<__safe_conversion_raw<_Up>, is_copy_constructible<_Del>>>
    unique_ptr(_Up __p, const deleter_type& __d) noexcept : _M_t(__p, __d)
    {
    }
    template <typename _Up,
              typename _Del = deleter_type,
              typename = _Require<__safe_conversion_raw<_Up>, is_move_constructible<_Del>>>
    unique_ptr(_Up __p, __enable_if_t<!is_lvalue_reference<_Del>::value, _Del&&> __d) noexcept
        : _M_t(std::move(__p), std::move(__d))
    {
    }
    template <typename _Up,
              typename _Del = deleter_type,
              typename _DelUnref = typename remove_reference<_Del>::type,
              typename = _Require<__safe_conversion_raw<_Up>>>
    unique_ptr(_Up, __enable_if_t<is_lvalue_reference<_Del>::value, _DelUnref&&>) = delete;
    unique_ptr(unique_ptr&& __u) noexcept : _M_t(__u.release(), std::forward<deleter_type>(__u.get_deleter())) {}
    template <typename _Del = _Dp, typename = _DeleterConstraint<_Del>>
    constexpr unique_ptr(nullptr_t) noexcept : _M_t()
    {
    }
    template <typename _Up,
              typename _Ep,
              typename = _Require<
                  __safe_conversion_up<_Up, _Ep>,
                  typename conditional<is_reference<_Dp>::value, is_same<_Ep, _Dp>, is_convertible<_Ep, _Dp>>::type>>
    unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept : _M_t(__u.release(), std::forward<_Ep>(__u.get_deleter()))
    {
    }
    ~unique_ptr()
    {
      auto& __ptr = _M_t._M_ptr();
      if (__ptr != nullptr)
        get_deleter()(__ptr);
      __ptr = pointer();
    }
    unique_ptr& operator=(unique_ptr&& __u) noexcept
    {
      reset(__u.release());
      get_deleter() = std::forward<deleter_type>(__u.get_deleter());
      return *this;
    }
    template <typename _Up, typename _Ep>
    typename enable_if<__and_<__safe_conversion_up<_Up, _Ep>, is_assignable<deleter_type&, _Ep&&>>::value,
                       unique_ptr&>::type
    operator=(unique_ptr<_Up, _Ep>&& __u) noexcept
    {
      reset(__u.release());
      get_deleter() = std::forward<_Ep>(__u.get_deleter());
      return *this;
    }
    unique_ptr& operator=(nullptr_t) noexcept
    {
      reset();
      return *this;
    }
    typename std::add_lvalue_reference<element_type>::type operator[](size_t __i) const
    {
      ;
      return get()[__i];
    }
    pointer get() const noexcept { return _M_t._M_ptr(); }
    deleter_type& get_deleter() noexcept { return _M_t._M_deleter(); }
    const deleter_type& get_deleter() const noexcept { return _M_t._M_deleter(); }
    explicit operator bool() const noexcept { return get() == pointer() ? false : true; }
    pointer release() noexcept
    {
      pointer __p = get();
      _M_t._M_ptr() = pointer();
      return __p;
    }
    template <typename _Up,
              typename =
                  _Require<__or_<is_same<_Up, pointer>,
                                 __and_<is_same<pointer, element_type*>,
                                        is_pointer<_Up>,
                                        is_convertible<typename remove_pointer<_Up>::type (*)[], element_type (*)[]>>>>>
    void reset(_Up __p) noexcept
    {
      pointer __ptr = __p;
      using std::swap;
      swap(_M_t._M_ptr(), __ptr);
      if (__ptr != nullptr)
        get_deleter()(__ptr);
    }
    void reset(nullptr_t = nullptr) noexcept { reset(pointer()); }
    void swap(unique_ptr& __u) noexcept
    {
      static_assert(__is_swappable<_Dp>::value, "deleter must be swappable");
      _M_t.swap(__u._M_t);
    }
    unique_ptr(const unique_ptr&) = delete;
    unique_ptr& operator=(const unique_ptr&) = delete;
  };
  template <typename _Tp, typename _Dp>
  inline typename enable_if<__is_swappable<_Dp>::value>::type swap(unique_ptr<_Tp, _Dp> & __x,
                                                                   unique_ptr<_Tp, _Dp> & __y) noexcept
  {
    __x.swap(__y);
  }
  template <typename _Tp, typename _Dp>
  typename enable_if<!__is_swappable<_Dp>::value>::type swap(unique_ptr<_Tp, _Dp>&, unique_ptr<_Tp, _Dp>&) = delete;
  template <typename _Tp, typename _Dp, typename _Up, typename _Ep>
  [[__nodiscard__]] inline bool operator==(const unique_ptr<_Tp, _Dp>& __x, const unique_ptr<_Up, _Ep>& __y)
  {
    return __x.get() == __y.get();
  }
  template <typename _Tp, typename _Dp>
  [[__nodiscard__]] inline bool operator==(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
  {
    return !__x;
  }
  template <typename _Tp, typename _Dp>
  [[__nodiscard__]] inline bool operator==(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept
  {
    return !__x;
  }
  template <typename _Tp, typename _Dp, typename _Up, typename _Ep>
  [[__nodiscard__]] inline bool operator!=(const unique_ptr<_Tp, _Dp>& __x, const unique_ptr<_Up, _Ep>& __y)
  {
    return __x.get() != __y.get();
  }
  template <typename _Tp, typename _Dp>
  [[__nodiscard__]] inline bool operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
  {
    return (bool)__x;
  }
  template <typename _Tp, typename _Dp>
  [[__nodiscard__]] inline bool operator!=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept
  {
    return (bool)__x;
  }
  template <typename _Tp, typename _Dp, typename _Up, typename _Ep>
  [[__nodiscard__]] inline bool operator<(const unique_ptr<_Tp, _Dp>& __x, const unique_ptr<_Up, _Ep>& __y)
  {
    typedef
        typename std::common_type<typename unique_ptr<_Tp, _Dp>::pointer, typename unique_ptr<_Up, _Ep>::pointer>::type
            _CT;
    return std::less<_CT>()(__x.get(), __y.get());
  }
  template <typename _Tp, typename _Dp>
  [[__nodiscard__]] inline bool operator<(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
  {
    return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(__x.get(), nullptr);
  }
  template <typename _Tp, typename _Dp>
  [[__nodiscard__]] inline bool operator<(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
  {
    return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(nullptr, __x.get());
  }
  template <typename _Tp, typename _Dp, typename _Up, typename _Ep>
  [[__nodiscard__]] inline bool operator<=(const unique_ptr<_Tp, _Dp>& __x, const unique_ptr<_Up, _Ep>& __y)
  {
    return !(__y < __x);
  }
  template <typename _Tp, typename _Dp>
  [[__nodiscard__]] inline bool operator<=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
  {
    return !(nullptr < __x);
  }
  template <typename _Tp, typename _Dp>
  [[__nodiscard__]] inline bool operator<=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
  {
    return !(__x < nullptr);
  }
  template <typename _Tp, typename _Dp, typename _Up, typename _Ep>
  [[__nodiscard__]] inline bool operator>(const unique_ptr<_Tp, _Dp>& __x, const unique_ptr<_Up, _Ep>& __y)
  {
    return (__y < __x);
  }
  template <typename _Tp, typename _Dp>
  [[__nodiscard__]] inline bool operator>(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
  {
    return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(nullptr, __x.get());
  }
  template <typename _Tp, typename _Dp>
  [[__nodiscard__]] inline bool operator>(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
  {
    return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(__x.get(), nullptr);
  }
  template <typename _Tp, typename _Dp, typename _Up, typename _Ep>
  [[__nodiscard__]] inline bool operator>=(const unique_ptr<_Tp, _Dp>& __x, const unique_ptr<_Up, _Ep>& __y)
  {
    return !(__x < __y);
  }
  template <typename _Tp, typename _Dp>
  [[__nodiscard__]] inline bool operator>=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)
  {
    return !(__x < nullptr);
  }
  template <typename _Tp, typename _Dp>
  [[__nodiscard__]] inline bool operator>=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)
  {
    return !(nullptr < __x);
  }
  template <typename _Tp, typename _Dp>
  struct hash<unique_ptr<_Tp, _Dp>> : public __hash_base<size_t, unique_ptr<_Tp, _Dp>>,
                                      private __poison_hash<typename unique_ptr<_Tp, _Dp>::pointer>
  {
    size_t operator()(const unique_ptr<_Tp, _Dp>& __u) const noexcept
    {
      typedef unique_ptr<_Tp, _Dp> _UP;
      return std::hash<typename _UP::pointer>()(__u.get());
    }
  };
  template <typename _Tp>
  struct _MakeUniq
  {
    typedef unique_ptr<_Tp> __single_object;
  };
  template <typename _Tp>
  struct _MakeUniq<_Tp[]>
  {
    typedef unique_ptr<_Tp[]> __array;
  };
  template <typename _Tp, size_t _Bound>
  struct _MakeUniq<_Tp[_Bound]>
  {
    struct __invalid_type
    {
    };
  };
  template <typename _Tp, typename... _Args>
  inline typename _MakeUniq<_Tp>::__single_object make_unique(_Args && ... __args)
  {
    return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...));
  }
  template <typename _Tp>
  inline typename _MakeUniq<_Tp>::__array make_unique(size_t __num)
  {
    return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]());
  }
  template <typename _Tp, typename... _Args>
  inline typename _MakeUniq<_Tp>::__invalid_type make_unique(_Args && ...) = delete;
  namespace __detail::__variant
  {
  template <typename>
  struct _Never_valueless_alt;
  template <typename _Tp, typename _Del>
  struct _Never_valueless_alt<std::unique_ptr<_Tp, _Del>> : std::true_type
  {
  };
  }  // namespace __detail::__variant
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _Alloc>
  struct __allocated_ptr
  {
    using pointer = typename allocator_traits<_Alloc>::pointer;
    using value_type = typename allocator_traits<_Alloc>::value_type;
    __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept : _M_alloc(std::__addressof(__a)), _M_ptr(__ptr) {}
    template <typename _Ptr, typename _Req = _Require<is_same<_Ptr, value_type*>>>
    __allocated_ptr(_Alloc& __a, _Ptr __ptr)
        : _M_alloc(std::__addressof(__a)), _M_ptr(pointer_traits<pointer>::pointer_to(*__ptr))
    {
    }
    __allocated_ptr(__allocated_ptr&& __gd) noexcept : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
    {
      __gd._M_ptr = nullptr;
    }
    ~__allocated_ptr()
    {
      if (_M_ptr != nullptr)
        std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
    }
    __allocated_ptr& operator=(std::nullptr_t) noexcept
    {
      _M_ptr = nullptr;
      return *this;
    }
    value_type* get() { return std::__to_address(_M_ptr); }

  private:
    _Alloc* _M_alloc;
    pointer _M_ptr;
  };
  template <typename _Alloc>
  __allocated_ptr<_Alloc> __allocate_guarded(_Alloc & __a)
  {
    return {__a, std::allocator_traits<_Alloc>::allocate(__a, 1)};
  }
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  template <typename>
  class auto_ptr;
#pragma GCC diagnostic pop
  class bad_weak_ptr : public std::exception
  {
  public:
    virtual char const* what() const noexcept;
    virtual ~bad_weak_ptr() noexcept;
  };
  inline void __throw_bad_weak_ptr() { (throw(bad_weak_ptr())); }
  using __gnu_cxx::__default_lock_policy;
  using __gnu_cxx::_Lock_policy;
  using __gnu_cxx::_S_atomic;
  using __gnu_cxx::_S_mutex;
  using __gnu_cxx::_S_single;
  template <_Lock_policy _Lp>
  class _Mutex_base
  {
  protected:
    enum
    {
      _S_need_barriers = 0
    };
  };
  template <>
  class _Mutex_base<_S_mutex> : public __gnu_cxx::__mutex
  {
  protected:
    enum
    {
      _S_need_barriers = 1
    };
  };
  template <_Lock_policy _Lp = __default_lock_policy>
  class _Sp_counted_base : public _Mutex_base<_Lp>
  {
  public:
    _Sp_counted_base() noexcept : _M_use_count(1), _M_weak_count(1) {}
    virtual ~_Sp_counted_base() noexcept {}
    virtual void _M_dispose() noexcept = 0;
    virtual void _M_destroy() noexcept { delete this; }
    virtual void* _M_get_deleter(const std::type_info&) noexcept = 0;
    void _M_add_ref_copy() { __gnu_cxx::__atomic_add_dispatch(&_M_use_count, 1); }
    void _M_add_ref_lock();
    bool _M_add_ref_lock_nothrow();
    void _M_release() noexcept
    {
      ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
      {
        ;
        _M_dispose();
        if (_Mutex_base<_Lp>::_S_need_barriers)
        {
          __atomic_thread_fence(4);
        };
        if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count, -1) == 1)
        {
          ;
          _M_destroy();
        }
      }
    }
    void _M_weak_add_ref() noexcept { __gnu_cxx::__atomic_add_dispatch(&_M_weak_count, 1); }
    void _M_weak_release() noexcept
    {
      ;
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count, -1) == 1)
      {
        ;
        if (_Mutex_base<_Lp>::_S_need_barriers)
        {
          __atomic_thread_fence(4);
        }
        _M_destroy();
      }
    }
    long _M_get_use_count() const noexcept { return __atomic_load_n(&_M_use_count, 0); }

  private:
    _Sp_counted_base(_Sp_counted_base const&) = delete;
    _Sp_counted_base& operator=(_Sp_counted_base const&) = delete;
    _Atomic_word _M_use_count;
    _Atomic_word _M_weak_count;
  };
  template <>
  inline void _Sp_counted_base<_S_single>::_M_add_ref_lock()
  {
    if (_M_use_count == 0)
      __throw_bad_weak_ptr();
    ++_M_use_count;
  }
  template <>
  inline void _Sp_counted_base<_S_mutex>::_M_add_ref_lock()
  {
    __gnu_cxx::__scoped_lock sentry(*this);
    if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, 1) == 0)
    {
      _M_use_count = 0;
      __throw_bad_weak_ptr();
    }
  }
  template <>
  inline void _Sp_counted_base<_S_atomic>::_M_add_ref_lock()
  {
    _Atomic_word __count = _M_get_use_count();
    do
    {
      if (__count == 0)
        __throw_bad_weak_ptr();
    } while (!__atomic_compare_exchange_n(&_M_use_count, &__count, __count + 1, true, 4, 0));
  }
  template <>
  inline bool _Sp_counted_base<_S_single>::_M_add_ref_lock_nothrow()
  {
    if (_M_use_count == 0)
      return false;
    ++_M_use_count;
    return true;
  }
  template <>
  inline bool _Sp_counted_base<_S_mutex>::_M_add_ref_lock_nothrow()
  {
    __gnu_cxx::__scoped_lock sentry(*this);
    if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, 1) == 0)
    {
      _M_use_count = 0;
      return false;
    }
    return true;
  }
  template <>
  inline bool _Sp_counted_base<_S_atomic>::_M_add_ref_lock_nothrow()
  {
    _Atomic_word __count = _M_get_use_count();
    do
    {
      if (__count == 0)
        return false;
    } while (!__atomic_compare_exchange_n(&_M_use_count, &__count, __count + 1, true, 4, 0));
    return true;
  }
  template <>
  inline void _Sp_counted_base<_S_single>::_M_add_ref_copy()
  {
    ++_M_use_count;
  }
  template <>
  inline void _Sp_counted_base<_S_single>::_M_release() noexcept
  {
    if (--_M_use_count == 0)
    {
      _M_dispose();
      if (--_M_weak_count == 0)
        _M_destroy();
    }
  }
  template <>
  inline void _Sp_counted_base<_S_single>::_M_weak_add_ref() noexcept
  {
    ++_M_weak_count;
  }
  template <>
  inline void _Sp_counted_base<_S_single>::_M_weak_release() noexcept
  {
    if (--_M_weak_count == 0)
      _M_destroy();
  }
  template <>
  inline long _Sp_counted_base<_S_single>::_M_get_use_count() const noexcept
  {
    return _M_use_count;
  }
  template <typename _Tp, _Lock_policy _Lp = __default_lock_policy>
  class __shared_ptr;
  template <typename _Tp, _Lock_policy _Lp = __default_lock_policy>
  class __weak_ptr;
  template <typename _Tp, _Lock_policy _Lp = __default_lock_policy>
  class __enable_shared_from_this;
  template <typename _Tp>
  class shared_ptr;
  template <typename _Tp>
  class weak_ptr;
  template <typename _Tp>
  struct owner_less;
  template <typename _Tp>
  class enable_shared_from_this;
  template <_Lock_policy _Lp = __default_lock_policy>
  class __weak_count;
  template <_Lock_policy _Lp = __default_lock_policy>
  class __shared_count;
  template <typename _Ptr, _Lock_policy _Lp>
  class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
  {
  public:
    explicit _Sp_counted_ptr(_Ptr __p) noexcept : _M_ptr(__p) {}
    virtual void _M_dispose() noexcept { delete _M_ptr; }
    virtual void _M_destroy() noexcept { delete this; }
    virtual void* _M_get_deleter(const std::type_info&) noexcept { return nullptr; }
    _Sp_counted_ptr(const _Sp_counted_ptr&) = delete;
    _Sp_counted_ptr& operator=(const _Sp_counted_ptr&) = delete;

  private:
    _Ptr _M_ptr;
  };
  template <>
  inline void _Sp_counted_ptr<nullptr_t, _S_single>::_M_dispose() noexcept
  {
  }
  template <>
  inline void _Sp_counted_ptr<nullptr_t, _S_mutex>::_M_dispose() noexcept
  {
  }
  template <>
  inline void _Sp_counted_ptr<nullptr_t, _S_atomic>::_M_dispose() noexcept
  {
  }
  template <int _Nm, typename _Tp, bool __use_ebo = !__is_final(_Tp) && __is_empty(_Tp)>
  struct _Sp_ebo_helper;
  template <int _Nm, typename _Tp>
  struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp
  {
    explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) {}
    explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) {}
    static _Tp& _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }
  };
  template <int _Nm, typename _Tp>
  struct _Sp_ebo_helper<_Nm, _Tp, false>
  {
    explicit _Sp_ebo_helper(const _Tp& __tp) : _M_tp(__tp) {}
    explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) {}
    static _Tp& _S_get(_Sp_ebo_helper& __eboh) { return __eboh._M_tp; }

  private:
    _Tp _M_tp;
  };
  template <typename _Ptr, typename _Deleter, typename _Alloc, _Lock_policy _Lp>
  class _Sp_counted_deleter final : public _Sp_counted_base<_Lp>
  {
    class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>
    {
      typedef _Sp_ebo_helper<0, _Deleter> _Del_base;
      typedef _Sp_ebo_helper<1, _Alloc> _Alloc_base;

    public:
      _Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
          : _M_ptr(__p), _Del_base(std::move(__d)), _Alloc_base(__a)
      {
      }
      _Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }
      _Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }
      _Ptr _M_ptr;
    };

  public:
    using __allocator_type = __alloc_rebind<_Alloc, _Sp_counted_deleter>;
    _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept : _M_impl(__p, std::move(__d), _Alloc()) {}
    _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept : _M_impl(__p, std::move(__d), __a) {}
    ~_Sp_counted_deleter() noexcept {}
    virtual void _M_dispose() noexcept { _M_impl._M_del()(_M_impl._M_ptr); }
    virtual void _M_destroy() noexcept
    {
      __allocator_type __a(_M_impl._M_alloc());
      __allocated_ptr<__allocator_type> __guard_ptr{__a, this};
      this->~_Sp_counted_deleter();
    }
    virtual void* _M_get_deleter(const std::type_info& __ti) noexcept
    {
      return __ti == typeid(_Deleter) ? std::__addressof(_M_impl._M_del()) : nullptr;
    }

  private:
    _Impl _M_impl;
  };
  struct _Sp_make_shared_tag
  {
  private:
    template <typename _Tp, typename _Alloc, _Lock_policy _Lp>
    friend class _Sp_counted_ptr_inplace;
    static const type_info& _S_ti() noexcept __attribute__((__visibility__("default")))
    {
      alignas(type_info) static constexpr char __tag[sizeof(type_info)] = {};
      return reinterpret_cast<const type_info&>(__tag);
    }
    static bool _S_eq(const type_info&) noexcept;
  };
  template <typename _Alloc>
  struct _Sp_alloc_shared_tag
  {
    const _Alloc& _M_a;
  };
  template <typename _Tp, typename _Alloc, _Lock_policy _Lp>
  class _Sp_counted_ptr_inplace final : public _Sp_counted_base<_Lp>
  {
    class _Impl : _Sp_ebo_helper<0, _Alloc>
    {
      typedef _Sp_ebo_helper<0, _Alloc> _A_base;

    public:
      explicit _Impl(_Alloc __a) noexcept : _A_base(__a) {}
      _Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }
      __gnu_cxx::__aligned_buffer<_Tp> _M_storage;
    };

  public:
    using __allocator_type = __alloc_rebind<_Alloc, _Sp_counted_ptr_inplace>;
    template <typename... _Args>
    _Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args) : _M_impl(__a)
    {
      allocator_traits<_Alloc>::construct(__a, _M_ptr(), std::forward<_Args>(__args)...);
    }
    ~_Sp_counted_ptr_inplace() noexcept {}
    virtual void _M_dispose() noexcept { allocator_traits<_Alloc>::destroy(_M_impl._M_alloc(), _M_ptr()); }
    virtual void _M_destroy() noexcept
    {
      __allocator_type __a(_M_impl._M_alloc());
      __allocated_ptr<__allocator_type> __guard_ptr{__a, this};
      this->~_Sp_counted_ptr_inplace();
    }

  private:
    friend class __shared_count<_Lp>;
    virtual void* _M_get_deleter(const std::type_info& __ti) noexcept override
    {
      auto __ptr = const_cast<typename remove_cv<_Tp>::type*>(_M_ptr());
      if (&__ti == &_Sp_make_shared_tag::_S_ti() || __ti == typeid(_Sp_make_shared_tag))
        return __ptr;
      return nullptr;
    }
    _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }
    _Impl _M_impl;
  };
  struct __sp_array_delete
  {
    template <typename _Yp>
    void operator()(_Yp* __p) const
    {
      delete[] __p;
    }
  };
  template <_Lock_policy _Lp>
  class __shared_count
  {
    template <typename _Tp>
    struct __not_alloc_shared_tag
    {
      using type = void;
    };
    template <typename _Tp>
    struct __not_alloc_shared_tag<_Sp_alloc_shared_tag<_Tp>>
    {
    };

  public:
    constexpr __shared_count() noexcept : _M_pi(0) {}
    template <typename _Ptr>
    explicit __shared_count(_Ptr __p) : _M_pi(0)
    {
      try
      {
        _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
      }
      catch (...)
      {
        delete __p;
        throw;
      }
    }
    template <typename _Ptr>
    __shared_count(_Ptr __p, false_type) : __shared_count(__p)
    {
    }
    template <typename _Ptr>
    __shared_count(_Ptr __p, true_type) : __shared_count(__p, __sp_array_delete{}, allocator<void>())
    {
    }
    template <typename _Ptr, typename _Deleter, typename = typename __not_alloc_shared_tag<_Deleter>::type>
    __shared_count(_Ptr __p, _Deleter __d) : __shared_count(__p, std::move(__d), allocator<void>())
    {
    }
    template <typename _Ptr,
              typename _Deleter,
              typename _Alloc,
              typename = typename __not_alloc_shared_tag<_Deleter>::type>
    __shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
    {
      typedef _Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp> _Sp_cd_type;
      try
      {
        typename _Sp_cd_type::__allocator_type __a2(__a);
        auto __guard = std::__allocate_guarded(__a2);
        _Sp_cd_type* __mem = __guard.get();
        ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
        _M_pi = __mem;
        __guard = nullptr;
      }
      catch (...)
      {
        __d(__p);
        throw;
      }
    }
    template <typename _Tp, typename _Alloc, typename... _Args>
    __shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a, _Args&&... __args)
    {
      typedef _Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp> _Sp_cp_type;
      typename _Sp_cp_type::__allocator_type __a2(__a._M_a);
      auto __guard = std::__allocate_guarded(__a2);
      _Sp_cp_type* __mem = __guard.get();
      auto __pi = ::new (__mem) _Sp_cp_type(__a._M_a, std::forward<_Args>(__args)...);
      __guard = nullptr;
      _M_pi = __pi;
      __p = __pi->_M_ptr();
    }
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    template <typename _Tp>
    explicit __shared_count(std::auto_ptr<_Tp>&& __r);
#pragma GCC diagnostic pop
    template <typename _Tp, typename _Del>
    explicit __shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)
    {
      if (__r.get() == nullptr)
        return;
      using _Ptr = typename unique_ptr<_Tp, _Del>::pointer;
      using _Del2 = typename conditional<is_reference<_Del>::value,
                                         reference_wrapper<typename remove_reference<_Del>::type>,
                                         _Del>::type;
      using _Sp_cd_type = _Sp_counted_deleter<_Ptr, _Del2, allocator<void>, _Lp>;
      using _Alloc = allocator<_Sp_cd_type>;
      using _Alloc_traits = allocator_traits<_Alloc>;
      _Alloc __a;
      _Sp_cd_type* __mem = _Alloc_traits::allocate(__a, 1);
      _Alloc_traits::construct(__a, __mem, __r.release(), __r.get_deleter());
      _M_pi = __mem;
    }
    explicit __shared_count(const __weak_count<_Lp>& __r);
    explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);
    ~__shared_count() noexcept
    {
      if (_M_pi != nullptr)
        _M_pi->_M_release();
    }
    __shared_count(const __shared_count& __r) noexcept : _M_pi(__r._M_pi)
    {
      if (_M_pi != 0)
        _M_pi->_M_add_ref_copy();
    }
    __shared_count& operator=(const __shared_count& __r) noexcept
    {
      _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
      if (__tmp != _M_pi)
      {
        if (__tmp != 0)
          __tmp->_M_add_ref_copy();
        if (_M_pi != 0)
          _M_pi->_M_release();
        _M_pi = __tmp;
      }
      return *this;
    }
    void _M_swap(__shared_count& __r) noexcept
    {
      _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
      __r._M_pi = _M_pi;
      _M_pi = __tmp;
    }
    long _M_get_use_count() const noexcept { return _M_pi != 0 ? _M_pi->_M_get_use_count() : 0; }
    bool _M_unique() const noexcept { return this->_M_get_use_count() == 1; }
    void* _M_get_deleter(const std::type_info& __ti) const noexcept
    {
      return _M_pi ? _M_pi->_M_get_deleter(__ti) : nullptr;
    }
    bool _M_less(const __shared_count& __rhs) const noexcept
    {
      return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi);
    }
    bool _M_less(const __weak_count<_Lp>& __rhs) const noexcept
    {
      return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi);
    }
    friend inline bool operator==(const __shared_count& __a, const __shared_count& __b) noexcept
    {
      return __a._M_pi == __b._M_pi;
    }

  private:
    friend class __weak_count<_Lp>;
    _Sp_counted_base<_Lp>* _M_pi;
  };
  template <_Lock_policy _Lp>
  class __weak_count
  {
  public:
    constexpr __weak_count() noexcept : _M_pi(nullptr) {}
    __weak_count(const __shared_count<_Lp>& __r) noexcept : _M_pi(__r._M_pi)
    {
      if (_M_pi != nullptr)
        _M_pi->_M_weak_add_ref();
    }
    __weak_count(const __weak_count& __r) noexcept : _M_pi(__r._M_pi)
    {
      if (_M_pi != nullptr)
        _M_pi->_M_weak_add_ref();
    }
    __weak_count(__weak_count&& __r) noexcept : _M_pi(__r._M_pi) { __r._M_pi = nullptr; }
    ~__weak_count() noexcept
    {
      if (_M_pi != nullptr)
        _M_pi->_M_weak_release();
    }
    __weak_count& operator=(const __shared_count<_Lp>& __r) noexcept
    {
      _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
      if (__tmp != nullptr)
        __tmp->_M_weak_add_ref();
      if (_M_pi != nullptr)
        _M_pi->_M_weak_release();
      _M_pi = __tmp;
      return *this;
    }
    __weak_count& operator=(const __weak_count& __r) noexcept
    {
      _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
      if (__tmp != nullptr)
        __tmp->_M_weak_add_ref();
      if (_M_pi != nullptr)
        _M_pi->_M_weak_release();
      _M_pi = __tmp;
      return *this;
    }
    __weak_count& operator=(__weak_count&& __r) noexcept
    {
      if (_M_pi != nullptr)
        _M_pi->_M_weak_release();
      _M_pi = __r._M_pi;
      __r._M_pi = nullptr;
      return *this;
    }
    void _M_swap(__weak_count& __r) noexcept
    {
      _Sp_counted_base<_Lp>* __tmp = __r._M_pi;
      __r._M_pi = _M_pi;
      _M_pi = __tmp;
    }
    long _M_get_use_count() const noexcept { return _M_pi != nullptr ? _M_pi->_M_get_use_count() : 0; }
    bool _M_less(const __weak_count& __rhs) const noexcept
    {
      return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi);
    }
    bool _M_less(const __shared_count<_Lp>& __rhs) const noexcept
    {
      return std::less<_Sp_counted_base<_Lp>*>()(this->_M_pi, __rhs._M_pi);
    }
    friend inline bool operator==(const __weak_count& __a, const __weak_count& __b) noexcept
    {
      return __a._M_pi == __b._M_pi;
    }

  private:
    friend class __shared_count<_Lp>;
    _Sp_counted_base<_Lp>* _M_pi;
  };
  template <_Lock_policy _Lp>
  inline __shared_count<_Lp>::__shared_count(const __weak_count<_Lp>& __r) : _M_pi(__r._M_pi)
  {
    if (_M_pi != nullptr)
      _M_pi->_M_add_ref_lock();
    else
      __throw_bad_weak_ptr();
  }
  template <_Lock_policy _Lp>
  inline __shared_count<_Lp>::__shared_count(const __weak_count<_Lp>& __r, std::nothrow_t) : _M_pi(__r._M_pi)
  {
    if (_M_pi != nullptr)
      if (!_M_pi->_M_add_ref_lock_nothrow())
        _M_pi = nullptr;
  }
  template <typename _Yp_ptr, typename _Tp_ptr>
  struct __sp_compatible_with : false_type
  {
  };
  template <typename _Yp, typename _Tp>
  struct __sp_compatible_with<_Yp*, _Tp*> : is_convertible<_Yp*, _Tp*>::type
  {
  };
  template <typename _Up, size_t _Nm>
  struct __sp_compatible_with<_Up(*)[_Nm], _Up(*)[]> : true_type
  {
  };
  template <typename _Up, size_t _Nm>
  struct __sp_compatible_with<_Up(*)[_Nm], const _Up(*)[]> : true_type
  {
  };
  template <typename _Up, size_t _Nm>
  struct __sp_compatible_with<_Up(*)[_Nm], volatile _Up(*)[]> : true_type
  {
  };
  template <typename _Up, size_t _Nm>
  struct __sp_compatible_with<_Up(*)[_Nm], const volatile _Up(*)[]> : true_type
  {
  };
  template <typename _Up, size_t _Nm, typename _Yp, typename = void>
  struct __sp_is_constructible_arrN : false_type
  {
  };
  template <typename _Up, size_t _Nm, typename _Yp>
  struct __sp_is_constructible_arrN<_Up, _Nm, _Yp, __void_t<_Yp[_Nm]>> : is_convertible<_Yp(*)[_Nm], _Up(*)[_Nm]>::type
  {
  };
  template <typename _Up, typename _Yp, typename = void>
  struct __sp_is_constructible_arr : false_type
  {
  };
  template <typename _Up, typename _Yp>
  struct __sp_is_constructible_arr<_Up, _Yp, __void_t<_Yp[]>> : is_convertible<_Yp(*)[], _Up(*)[]>::type
  {
  };
  template <typename _Tp, typename _Yp>
  struct __sp_is_constructible;
  template <typename _Up, size_t _Nm, typename _Yp>
  struct __sp_is_constructible<_Up[_Nm], _Yp> : __sp_is_constructible_arrN<_Up, _Nm, _Yp>::type
  {
  };
  template <typename _Up, typename _Yp>
  struct __sp_is_constructible<_Up[], _Yp> : __sp_is_constructible_arr<_Up, _Yp>::type
  {
  };
  template <typename _Tp, typename _Yp>
  struct __sp_is_constructible : is_convertible<_Yp*, _Tp*>::type
  {
  };
  template <typename _Tp, _Lock_policy _Lp, bool = is_array<_Tp>::value, bool = is_void<_Tp>::value>
  class __shared_ptr_access
  {
  public:
    using element_type = _Tp;
    element_type& operator*() const noexcept
    {
      ;
      return *_M_get();
    }
    element_type* operator->() const noexcept
    {
      ;
      return _M_get();
    }

  private:
    element_type* _M_get() const noexcept { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
  };
  template <typename _Tp, _Lock_policy _Lp>
  class __shared_ptr_access<_Tp, _Lp, false, true>
  {
  public:
    using element_type = _Tp;
    element_type* operator->() const noexcept
    {
      auto __ptr = static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get();
      ;
      return __ptr;
    }
  };
  template <typename _Tp, _Lock_policy _Lp>
  class __shared_ptr_access<_Tp, _Lp, true, false>
  {
  public:
    using element_type = typename remove_extent<_Tp>::type;
    element_type& operator[](ptrdiff_t __i) const
    {
      ;
      ;
      return _M_get()[__i];
    }

  private:
    element_type* _M_get() const noexcept { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
  };
  template <typename _Tp, _Lock_policy _Lp>
  class __shared_ptr : public __shared_ptr_access<_Tp, _Lp>
  {
  public:
    using element_type = typename remove_extent<_Tp>::type;

  private:
    template <typename _Yp>
    using _SafeConv = typename enable_if<__sp_is_constructible<_Tp, _Yp>::value>::type;
    template <typename _Yp, typename _Res = void>
    using _Compatible = typename enable_if<__sp_compatible_with<_Yp*, _Tp*>::value, _Res>::type;
    template <typename _Yp>
    using _Assignable = _Compatible<_Yp, __shared_ptr&>;
    template <typename _Yp,
              typename _Del,
              typename _Res = void,
              typename _Ptr = typename unique_ptr<_Yp, _Del>::pointer>
    using _UniqCompatible =
        typename enable_if<__and_<__sp_compatible_with<_Yp*, _Tp*>, is_convertible<_Ptr, element_type*>>::value,
                           _Res>::type;
    template <typename _Yp, typename _Del>
    using _UniqAssignable = _UniqCompatible<_Yp, _Del, __shared_ptr&>;

  public:
    using weak_type = __weak_ptr<_Tp, _Lp>;
    constexpr __shared_ptr() noexcept : _M_ptr(0), _M_refcount() {}
    template <typename _Yp, typename = _SafeConv<_Yp>>
    explicit __shared_ptr(_Yp* __p) : _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
    {
      static_assert(!is_void<_Yp>::value, "incomplete type");
      static_assert(sizeof(_Yp) > 0, "incomplete type");
      _M_enable_shared_from_this_with(__p);
    }
    template <typename _Yp, typename _Deleter, typename = _SafeConv<_Yp>>
    __shared_ptr(_Yp* __p, _Deleter __d) : _M_ptr(__p), _M_refcount(__p, std::move(__d))
    {
      static_assert(__is_invocable<_Deleter&, _Yp*&>::value, "deleter expression d(p) is well-formed");
      _M_enable_shared_from_this_with(__p);
    }
    template <typename _Yp, typename _Deleter, typename _Alloc, typename = _SafeConv<_Yp>>
    __shared_ptr(_Yp* __p, _Deleter __d, _Alloc __a) : _M_ptr(__p), _M_refcount(__p, std::move(__d), std::move(__a))
    {
      static_assert(__is_invocable<_Deleter&, _Yp*&>::value, "deleter expression d(p) is well-formed");
      _M_enable_shared_from_this_with(__p);
    }
    template <typename _Deleter>
    __shared_ptr(nullptr_t __p, _Deleter __d) : _M_ptr(0), _M_refcount(__p, std::move(__d))
    {
    }
    template <typename _Deleter, typename _Alloc>
    __shared_ptr(nullptr_t __p, _Deleter __d, _Alloc __a) : _M_ptr(0), _M_refcount(__p, std::move(__d), std::move(__a))
    {
    }
    template <typename _Yp>
    __shared_ptr(const __shared_ptr<_Yp, _Lp>& __r, element_type* __p) noexcept
        : _M_ptr(__p), _M_refcount(__r._M_refcount)
    {
    }
    __shared_ptr(const __shared_ptr&) noexcept = default;
    __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
    ~__shared_ptr() = default;
    template <typename _Yp, typename = _Compatible<_Yp>>
    __shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept : _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
    {
    }
    __shared_ptr(__shared_ptr&& __r) noexcept : _M_ptr(__r._M_ptr), _M_refcount()
    {
      _M_refcount._M_swap(__r._M_refcount);
      __r._M_ptr = 0;
    }
    template <typename _Yp, typename = _Compatible<_Yp>>
    __shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept : _M_ptr(__r._M_ptr), _M_refcount()
    {
      _M_refcount._M_swap(__r._M_refcount);
      __r._M_ptr = 0;
    }
    template <typename _Yp, typename = _Compatible<_Yp>>
    explicit __shared_ptr(const __weak_ptr<_Yp, _Lp>& __r) : _M_refcount(__r._M_refcount)
    {
      _M_ptr = __r._M_ptr;
    }
    template <typename _Yp, typename _Del, typename = _UniqCompatible<_Yp, _Del>>
    __shared_ptr(unique_ptr<_Yp, _Del>&& __r) : _M_ptr(__r.get()), _M_refcount()
    {
      auto __raw = __to_address(__r.get());
      _M_refcount = __shared_count<_Lp>(std::move(__r));
      _M_enable_shared_from_this_with(__raw);
    }
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    template <typename _Yp, typename = _Compatible<_Yp>>
    __shared_ptr(auto_ptr<_Yp>&& __r);
#pragma GCC diagnostic pop
    constexpr __shared_ptr(nullptr_t) noexcept : __shared_ptr() {}
    template <typename _Yp>
    _Assignable<_Yp> operator=(const __shared_ptr<_Yp, _Lp>& __r) noexcept
    {
      _M_ptr = __r._M_ptr;
      _M_refcount = __r._M_refcount;
      return *this;
    }
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    template <typename _Yp>
    _Assignable<_Yp> operator=(auto_ptr<_Yp>&& __r)
    {
      __shared_ptr(std::move(__r)).swap(*this);
      return *this;
    }
#pragma GCC diagnostic pop
    __shared_ptr& operator=(__shared_ptr&& __r) noexcept
    {
      __shared_ptr(std::move(__r)).swap(*this);
      return *this;
    }
    template <class _Yp>
    _Assignable<_Yp> operator=(__shared_ptr<_Yp, _Lp>&& __r) noexcept
    {
      __shared_ptr(std::move(__r)).swap(*this);
      return *this;
    }
    template <typename _Yp, typename _Del>
    _UniqAssignable<_Yp, _Del> operator=(unique_ptr<_Yp, _Del>&& __r)
    {
      __shared_ptr(std::move(__r)).swap(*this);
      return *this;
    }
    void reset() noexcept { __shared_ptr().swap(*this); }
    template <typename _Yp>
    _SafeConv<_Yp> reset(_Yp* __p)
    {
      ;
      __shared_ptr(__p).swap(*this);
    }
    template <typename _Yp, typename _Deleter>
    _SafeConv<_Yp> reset(_Yp* __p, _Deleter __d)
    {
      __shared_ptr(__p, std::move(__d)).swap(*this);
    }
    template <typename _Yp, typename _Deleter, typename _Alloc>
    _SafeConv<_Yp> reset(_Yp* __p, _Deleter __d, _Alloc __a)
    {
      __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this);
    }
    element_type* get() const noexcept { return _M_ptr; }
    explicit operator bool() const { return _M_ptr == 0 ? false : true; }
    bool unique() const noexcept { return _M_refcount._M_unique(); }
    long use_count() const noexcept { return _M_refcount._M_get_use_count(); }
    void swap(__shared_ptr<_Tp, _Lp>& __other) noexcept
    {
      std::swap(_M_ptr, __other._M_ptr);
      _M_refcount._M_swap(__other._M_refcount);
    }
    template <typename _Tp1>
    bool owner_before(__shared_ptr<_Tp1, _Lp> const& __rhs) const noexcept
    {
      return _M_refcount._M_less(__rhs._M_refcount);
    }
    template <typename _Tp1>
    bool owner_before(__weak_ptr<_Tp1, _Lp> const& __rhs) const noexcept
    {
      return _M_refcount._M_less(__rhs._M_refcount);
    }

  protected:
    template <typename _Alloc, typename... _Args>
    __shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
        : _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
    {
      _M_enable_shared_from_this_with(_M_ptr);
    }
    template <typename _Tp1, _Lock_policy _Lp1, typename _Alloc, typename... _Args>
    friend __shared_ptr<_Tp1, _Lp1> __allocate_shared(const _Alloc& __a, _Args&&... __args);
    __shared_ptr(const __weak_ptr<_Tp, _Lp>& __r, std::nothrow_t) : _M_refcount(__r._M_refcount, std::nothrow)
    {
      _M_ptr = _M_refcount._M_get_use_count() ? __r._M_ptr : nullptr;
    }
    friend class __weak_ptr<_Tp, _Lp>;

  private:
    template <typename _Yp>
    using __esft_base_t =
        decltype(__enable_shared_from_this_base(std::declval<const __shared_count<_Lp>&>(), std::declval<_Yp*>()));
    template <typename _Yp, typename = void>
    struct __has_esft_base : false_type
    {
    };
    template <typename _Yp>
    struct __has_esft_base<_Yp, __void_t<__esft_base_t<_Yp>>> : __not_<is_array<_Tp>>
    {
    };
    template <typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
    typename enable_if<__has_esft_base<_Yp2>::value>::type _M_enable_shared_from_this_with(_Yp* __p) noexcept
    {
      if (auto __base = __enable_shared_from_this_base(_M_refcount, __p))
        __base->_M_weak_assign(const_cast<_Yp2*>(__p), _M_refcount);
    }
    template <typename _Yp, typename _Yp2 = typename remove_cv<_Yp>::type>
    typename enable_if<!__has_esft_base<_Yp2>::value>::type _M_enable_shared_from_this_with(_Yp*) noexcept
    {
    }
    void* _M_get_deleter(const std::type_info& __ti) const noexcept { return _M_refcount._M_get_deleter(__ti); }
    template <typename _Tp1, _Lock_policy _Lp1>
    friend class __shared_ptr;
    template <typename _Tp1, _Lock_policy _Lp1>
    friend class __weak_ptr;
    template <typename _Del, typename _Tp1, _Lock_policy _Lp1>
    friend _Del* get_deleter(const __shared_ptr<_Tp1, _Lp1>&) noexcept;
    template <typename _Del, typename _Tp1>
    friend _Del* get_deleter(const shared_ptr<_Tp1>&) noexcept;
    element_type* _M_ptr;
    __shared_count<_Lp> _M_refcount;
  };
  template <typename _Tp1, typename _Tp2, _Lock_policy _Lp>
  inline bool operator==(const __shared_ptr<_Tp1, _Lp>& __a, const __shared_ptr<_Tp2, _Lp>& __b) noexcept
  {
    return __a.get() == __b.get();
  }
  template <typename _Tp, _Lock_policy _Lp>
  inline bool operator==(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
  {
    return !__a;
  }
  template <typename _Tp, _Lock_policy _Lp>
  inline bool operator==(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
  {
    return !__a;
  }
  template <typename _Tp1, typename _Tp2, _Lock_policy _Lp>
  inline bool operator!=(const __shared_ptr<_Tp1, _Lp>& __a, const __shared_ptr<_Tp2, _Lp>& __b) noexcept
  {
    return __a.get() != __b.get();
  }
  template <typename _Tp, _Lock_policy _Lp>
  inline bool operator!=(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
  {
    return (bool)__a;
  }
  template <typename _Tp, _Lock_policy _Lp>
  inline bool operator!=(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
  {
    return (bool)__a;
  }
  template <typename _Tp, typename _Up, _Lock_policy _Lp>
  inline bool operator<(const __shared_ptr<_Tp, _Lp>& __a, const __shared_ptr<_Up, _Lp>& __b) noexcept
  {
    using _Tp_elt = typename __shared_ptr<_Tp, _Lp>::element_type;
    using _Up_elt = typename __shared_ptr<_Up, _Lp>::element_type;
    using _Vp = typename common_type<_Tp_elt*, _Up_elt*>::type;
    return less<_Vp>()(__a.get(), __b.get());
  }
  template <typename _Tp, _Lock_policy _Lp>
  inline bool operator<(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
  {
    using _Tp_elt = typename __shared_ptr<_Tp, _Lp>::element_type;
    return less<_Tp_elt*>()(__a.get(), nullptr);
  }
  template <typename _Tp, _Lock_policy _Lp>
  inline bool operator<(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
  {
    using _Tp_elt = typename __shared_ptr<_Tp, _Lp>::element_type;
    return less<_Tp_elt*>()(nullptr, __a.get());
  }
  template <typename _Tp1, typename _Tp2, _Lock_policy _Lp>
  inline bool operator<=(const __shared_ptr<_Tp1, _Lp>& __a, const __shared_ptr<_Tp2, _Lp>& __b) noexcept
  {
    return !(__b < __a);
  }
  template <typename _Tp, _Lock_policy _Lp>
  inline bool operator<=(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
  {
    return !(nullptr < __a);
  }
  template <typename _Tp, _Lock_policy _Lp>
  inline bool operator<=(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
  {
    return !(__a < nullptr);
  }
  template <typename _Tp1, typename _Tp2, _Lock_policy _Lp>
  inline bool operator>(const __shared_ptr<_Tp1, _Lp>& __a, const __shared_ptr<_Tp2, _Lp>& __b) noexcept
  {
    return (__b < __a);
  }
  template <typename _Tp, _Lock_policy _Lp>
  inline bool operator>(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
  {
    return nullptr < __a;
  }
  template <typename _Tp, _Lock_policy _Lp>
  inline bool operator>(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
  {
    return __a < nullptr;
  }
  template <typename _Tp1, typename _Tp2, _Lock_policy _Lp>
  inline bool operator>=(const __shared_ptr<_Tp1, _Lp>& __a, const __shared_ptr<_Tp2, _Lp>& __b) noexcept
  {
    return !(__a < __b);
  }
  template <typename _Tp, _Lock_policy _Lp>
  inline bool operator>=(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept
  {
    return !(__a < nullptr);
  }
  template <typename _Tp, _Lock_policy _Lp>
  inline bool operator>=(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept
  {
    return !(nullptr < __a);
  }
  template <typename _Tp, _Lock_policy _Lp>
  inline void swap(__shared_ptr<_Tp, _Lp> & __a, __shared_ptr<_Tp, _Lp> & __b) noexcept
  {
    __a.swap(__b);
  }
  template <typename _Tp, typename _Tp1, _Lock_policy _Lp>
  inline __shared_ptr<_Tp, _Lp> static_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
  {
    using _Sp = __shared_ptr<_Tp, _Lp>;
    return _Sp(__r, static_cast<typename _Sp::element_type*>(__r.get()));
  }
  template <typename _Tp, typename _Tp1, _Lock_policy _Lp>
  inline __shared_ptr<_Tp, _Lp> const_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
  {
    using _Sp = __shared_ptr<_Tp, _Lp>;
    return _Sp(__r, const_cast<typename _Sp::element_type*>(__r.get()));
  }
  template <typename _Tp, typename _Tp1, _Lock_policy _Lp>
  inline __shared_ptr<_Tp, _Lp> dynamic_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
  {
    using _Sp = __shared_ptr<_Tp, _Lp>;
    if (auto* __p = dynamic_cast<typename _Sp::element_type*>(__r.get()))
      return _Sp(__r, __p);
    return _Sp();
  }
  template <typename _Tp, typename _Tp1, _Lock_policy _Lp>
  inline __shared_ptr<_Tp, _Lp> reinterpret_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
  {
    using _Sp = __shared_ptr<_Tp, _Lp>;
    return _Sp(__r, reinterpret_cast<typename _Sp::element_type*>(__r.get()));
  }
  template <typename _Tp, _Lock_policy _Lp>
  class __weak_ptr
  {
    template <typename _Yp, typename _Res = void>
    using _Compatible = typename enable_if<__sp_compatible_with<_Yp*, _Tp*>::value, _Res>::type;
    template <typename _Yp>
    using _Assignable = _Compatible<_Yp, __weak_ptr&>;

  public:
    using element_type = typename remove_extent<_Tp>::type;
    constexpr __weak_ptr() noexcept : _M_ptr(nullptr), _M_refcount() {}
    __weak_ptr(const __weak_ptr&) noexcept = default;
    ~__weak_ptr() = default;
    template <typename _Yp, typename = _Compatible<_Yp>>
    __weak_ptr(const __weak_ptr<_Yp, _Lp>& __r) noexcept : _M_refcount(__r._M_refcount)
    {
      _M_ptr = __r.lock().get();
    }
    template <typename _Yp, typename = _Compatible<_Yp>>
    __weak_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept : _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
    {
    }
    __weak_ptr(__weak_ptr&& __r) noexcept : _M_ptr(__r._M_ptr), _M_refcount(std::move(__r._M_refcount))
    {
      __r._M_ptr = nullptr;
    }
    template <typename _Yp, typename = _Compatible<_Yp>>
    __weak_ptr(__weak_ptr<_Yp, _Lp>&& __r) noexcept : _M_ptr(__r.lock().get()), _M_refcount(std::move(__r._M_refcount))
    {
      __r._M_ptr = nullptr;
    }
    __weak_ptr& operator=(const __weak_ptr& __r) noexcept = default;
    template <typename _Yp>
    _Assignable<_Yp> operator=(const __weak_ptr<_Yp, _Lp>& __r) noexcept
    {
      _M_ptr = __r.lock().get();
      _M_refcount = __r._M_refcount;
      return *this;
    }
    template <typename _Yp>
    _Assignable<_Yp> operator=(const __shared_ptr<_Yp, _Lp>& __r) noexcept
    {
      _M_ptr = __r._M_ptr;
      _M_refcount = __r._M_refcount;
      return *this;
    }
    __weak_ptr& operator=(__weak_ptr&& __r) noexcept
    {
      _M_ptr = __r._M_ptr;
      _M_refcount = std::move(__r._M_refcount);
      __r._M_ptr = nullptr;
      return *this;
    }
    template <typename _Yp>
    _Assignable<_Yp> operator=(__weak_ptr<_Yp, _Lp>&& __r) noexcept
    {
      _M_ptr = __r.lock().get();
      _M_refcount = std::move(__r._M_refcount);
      __r._M_ptr = nullptr;
      return *this;
    }
    __shared_ptr<_Tp, _Lp> lock() const noexcept { return __shared_ptr<element_type, _Lp>(*this, std::nothrow); }
    long use_count() const noexcept { return _M_refcount._M_get_use_count(); }
    bool expired() const noexcept { return _M_refcount._M_get_use_count() == 0; }
    template <typename _Tp1>
    bool owner_before(const __shared_ptr<_Tp1, _Lp>& __rhs) const noexcept
    {
      return _M_refcount._M_less(__rhs._M_refcount);
    }
    template <typename _Tp1>
    bool owner_before(const __weak_ptr<_Tp1, _Lp>& __rhs) const noexcept
    {
      return _M_refcount._M_less(__rhs._M_refcount);
    }
    void reset() noexcept { __weak_ptr().swap(*this); }
    void swap(__weak_ptr& __s) noexcept
    {
      std::swap(_M_ptr, __s._M_ptr);
      _M_refcount._M_swap(__s._M_refcount);
    }

  private:
    void _M_assign(_Tp* __ptr, const __shared_count<_Lp>& __refcount) noexcept
    {
      if (use_count() == 0)
      {
        _M_ptr = __ptr;
        _M_refcount = __refcount;
      }
    }
    template <typename _Tp1, _Lock_policy _Lp1>
    friend class __shared_ptr;
    template <typename _Tp1, _Lock_policy _Lp1>
    friend class __weak_ptr;
    friend class __enable_shared_from_this<_Tp, _Lp>;
    friend class enable_shared_from_this<_Tp>;
    element_type* _M_ptr;
    __weak_count<_Lp> _M_refcount;
  };
  template <typename _Tp, _Lock_policy _Lp>
  inline void swap(__weak_ptr<_Tp, _Lp> & __a, __weak_ptr<_Tp, _Lp> & __b) noexcept
  {
    __a.swap(__b);
  }
  template <typename _Tp, typename _Tp1>
  struct _Sp_owner_less : public binary_function<_Tp, _Tp, bool>
  {
    bool operator()(const _Tp& __lhs, const _Tp& __rhs) const noexcept { return __lhs.owner_before(__rhs); }
    bool operator()(const _Tp& __lhs, const _Tp1& __rhs) const noexcept { return __lhs.owner_before(__rhs); }
    bool operator()(const _Tp1& __lhs, const _Tp& __rhs) const noexcept { return __lhs.owner_before(__rhs); }
  };
  template <>
  struct _Sp_owner_less<void, void>
  {
    template <typename _Tp, typename _Up>
    auto operator()(const _Tp& __lhs, const _Up& __rhs) const noexcept -> decltype(__lhs.owner_before(__rhs))
    {
      return __lhs.owner_before(__rhs);
    }
    using is_transparent = void;
  };
  template <typename _Tp, _Lock_policy _Lp>
  struct owner_less<__shared_ptr<_Tp, _Lp>> : public _Sp_owner_less<__shared_ptr<_Tp, _Lp>, __weak_ptr<_Tp, _Lp>>
  {
  };
  template <typename _Tp, _Lock_policy _Lp>
  struct owner_less<__weak_ptr<_Tp, _Lp>> : public _Sp_owner_less<__weak_ptr<_Tp, _Lp>, __shared_ptr<_Tp, _Lp>>
  {
  };
  template <typename _Tp, _Lock_policy _Lp>
  class __enable_shared_from_this
  {
  protected:
    constexpr __enable_shared_from_this() noexcept {}
    __enable_shared_from_this(const __enable_shared_from_this&) noexcept {}
    __enable_shared_from_this& operator=(const __enable_shared_from_this&) noexcept { return *this; }
    ~__enable_shared_from_this() {}

  public:
    __shared_ptr<_Tp, _Lp> shared_from_this() { return __shared_ptr<_Tp, _Lp>(this->_M_weak_this); }
    __shared_ptr<const _Tp, _Lp> shared_from_this() const { return __shared_ptr<const _Tp, _Lp>(this->_M_weak_this); }
    __weak_ptr<_Tp, _Lp> weak_from_this() noexcept { return this->_M_weak_this; }
    __weak_ptr<const _Tp, _Lp> weak_from_this() const noexcept { return this->_M_weak_this; }

  private:
    template <typename _Tp1>
    void _M_weak_assign(_Tp1* __p, const __shared_count<_Lp>& __n) const noexcept
    {
      _M_weak_this._M_assign(__p, __n);
    }
    friend const __enable_shared_from_this* __enable_shared_from_this_base(const __shared_count<_Lp>&,
                                                                           const __enable_shared_from_this* __p)
    {
      return __p;
    }
    template <typename, _Lock_policy>
    friend class __shared_ptr;
    mutable __weak_ptr<_Tp, _Lp> _M_weak_this;
  };
  template <typename _Tp, _Lock_policy _Lp = __default_lock_policy, typename _Alloc, typename... _Args>
  inline __shared_ptr<_Tp, _Lp> __allocate_shared(const _Alloc& __a, _Args&&... __args)
  {
    return __shared_ptr<_Tp, _Lp>(_Sp_alloc_shared_tag<_Alloc>{__a}, std::forward<_Args>(__args)...);
  }
  template <typename _Tp, _Lock_policy _Lp = __default_lock_policy, typename... _Args>
  inline __shared_ptr<_Tp, _Lp> __make_shared(_Args && ... __args)
  {
    typedef typename std::remove_const<_Tp>::type _Tp_nc;
    return std::__allocate_shared<_Tp, _Lp>(std::allocator<_Tp_nc>(), std::forward<_Args>(__args)...);
  }
  template <typename _Tp, _Lock_policy _Lp>
  struct hash<__shared_ptr<_Tp, _Lp>> : public __hash_base<size_t, __shared_ptr<_Tp, _Lp>>
  {
    size_t operator()(const __shared_ptr<_Tp, _Lp>& __s) const noexcept
    {
      return hash<typename __shared_ptr<_Tp, _Lp>::element_type*>()(__s.get());
    }
  };
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _Ch, typename _Tr, typename _Tp, _Lock_policy _Lp>
  inline std::basic_ostream<_Ch, _Tr>& operator<<(std::basic_ostream<_Ch, _Tr>& __os, const __shared_ptr<_Tp, _Lp>& __p)
  {
    __os << __p.get();
    return __os;
  }
  template <typename _Del, typename _Tp, _Lock_policy _Lp>
  inline _Del* get_deleter(const __shared_ptr<_Tp, _Lp>& __p) noexcept
  {
    return static_cast<_Del*>(__p._M_get_deleter(typeid(_Del)));
  }
  template <typename _Del, typename _Tp>
  inline _Del* get_deleter(const shared_ptr<_Tp>& __p) noexcept
  {
    return static_cast<_Del*>(__p._M_get_deleter(typeid(_Del)));
  }
  template <typename _Tp>
  class shared_ptr : public __shared_ptr<_Tp>
  {
    template <typename... _Args>
    using _Constructible = typename enable_if<is_constructible<__shared_ptr<_Tp>, _Args...>::value>::type;
    template <typename _Arg>
    using _Assignable = typename enable_if<is_assignable<__shared_ptr<_Tp>&, _Arg>::value, shared_ptr&>::type;

  public:
    using element_type = typename __shared_ptr<_Tp>::element_type;
    using weak_type = weak_ptr<_Tp>;
    constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() {}
    shared_ptr(const shared_ptr&) noexcept = default;
    template <typename _Yp, typename = _Constructible<_Yp*>>
    explicit shared_ptr(_Yp* __p) : __shared_ptr<_Tp>(__p)
    {
    }
    template <typename _Yp, typename _Deleter, typename = _Constructible<_Yp*, _Deleter>>
    shared_ptr(_Yp* __p, _Deleter __d) : __shared_ptr<_Tp>(__p, std::move(__d))
    {
    }
    template <typename _Deleter>
    shared_ptr(nullptr_t __p, _Deleter __d) : __shared_ptr<_Tp>(__p, std::move(__d))
    {
    }
    template <typename _Yp, typename _Deleter, typename _Alloc, typename = _Constructible<_Yp*, _Deleter, _Alloc>>
    shared_ptr(_Yp* __p, _Deleter __d, _Alloc __a) : __shared_ptr<_Tp>(__p, std::move(__d), std::move(__a))
    {
    }
    template <typename _Deleter, typename _Alloc>
    shared_ptr(nullptr_t __p, _Deleter __d, _Alloc __a) : __shared_ptr<_Tp>(__p, std::move(__d), std::move(__a))
    {
    }
    template <typename _Yp>
    shared_ptr(const shared_ptr<_Yp>& __r, element_type* __p) noexcept : __shared_ptr<_Tp>(__r, __p)
    {
    }
    template <typename _Yp, typename = _Constructible<const shared_ptr<_Yp>&>>
    shared_ptr(const shared_ptr<_Yp>& __r) noexcept : __shared_ptr<_Tp>(__r)
    {
    }
    shared_ptr(shared_ptr&& __r) noexcept : __shared_ptr<_Tp>(std::move(__r)) {}
    template <typename _Yp, typename = _Constructible<shared_ptr<_Yp>>>
    shared_ptr(shared_ptr<_Yp>&& __r) noexcept : __shared_ptr<_Tp>(std::move(__r))
    {
    }
    template <typename _Yp, typename = _Constructible<const weak_ptr<_Yp>&>>
    explicit shared_ptr(const weak_ptr<_Yp>& __r) : __shared_ptr<_Tp>(__r)
    {
    }
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    template <typename _Yp, typename = _Constructible<auto_ptr<_Yp>>>
    shared_ptr(auto_ptr<_Yp>&& __r);
#pragma GCC diagnostic pop
    template <typename _Yp, typename _Del, typename = _Constructible<unique_ptr<_Yp, _Del>>>
    shared_ptr(unique_ptr<_Yp, _Del>&& __r) : __shared_ptr<_Tp>(std::move(__r))
    {
    }
    constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() {}
    shared_ptr& operator=(const shared_ptr&) noexcept = default;
    template <typename _Yp>
    _Assignable<const shared_ptr<_Yp>&> operator=(const shared_ptr<_Yp>& __r) noexcept
    {
      this->__shared_ptr<_Tp>::operator=(__r);
      return *this;
    }
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
    template <typename _Yp>
    _Assignable<auto_ptr<_Yp>> operator=(auto_ptr<_Yp>&& __r)
    {
      this->__shared_ptr<_Tp>::operator=(std::move(__r));
      return *this;
    }
#pragma GCC diagnostic pop
    shared_ptr& operator=(shared_ptr&& __r) noexcept
    {
      this->__shared_ptr<_Tp>::operator=(std::move(__r));
      return *this;
    }
    template <class _Yp>
    _Assignable<shared_ptr<_Yp>> operator=(shared_ptr<_Yp>&& __r) noexcept
    {
      this->__shared_ptr<_Tp>::operator=(std::move(__r));
      return *this;
    }
    template <typename _Yp, typename _Del>
    _Assignable<unique_ptr<_Yp, _Del>> operator=(unique_ptr<_Yp, _Del>&& __r)
    {
      this->__shared_ptr<_Tp>::operator=(std::move(__r));
      return *this;
    }

  private:
    template <typename _Alloc, typename... _Args>
    shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
        : __shared_ptr<_Tp>(__tag, std::forward<_Args>(__args)...)
    {
    }
    template <typename _Yp, typename _Alloc, typename... _Args>
    friend shared_ptr<_Yp> allocate_shared(const _Alloc& __a, _Args&&... __args);
    shared_ptr(const weak_ptr<_Tp>& __r, std::nothrow_t) : __shared_ptr<_Tp>(__r, std::nothrow) {}
    friend class weak_ptr<_Tp>;
  };
  template <typename _Tp>
  shared_ptr(weak_ptr<_Tp>) -> shared_ptr<_Tp>;
  template <typename _Tp, typename _Del>
  shared_ptr(unique_ptr<_Tp, _Del>) -> shared_ptr<_Tp>;
  template <typename _Tp, typename _Up>
  [[__nodiscard__]] inline bool operator==(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
  {
    return __a.get() == __b.get();
  }
  template <typename _Tp>
  [[__nodiscard__]] inline bool operator==(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
  {
    return !__a;
  }
  template <typename _Tp>
  [[__nodiscard__]] inline bool operator==(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
  {
    return !__a;
  }
  template <typename _Tp, typename _Up>
  [[__nodiscard__]] inline bool operator!=(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
  {
    return __a.get() != __b.get();
  }
  template <typename _Tp>
  [[__nodiscard__]] inline bool operator!=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
  {
    return (bool)__a;
  }
  template <typename _Tp>
  [[__nodiscard__]] inline bool operator!=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
  {
    return (bool)__a;
  }
  template <typename _Tp, typename _Up>
  [[__nodiscard__]] inline bool operator<(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
  {
    using _Tp_elt = typename shared_ptr<_Tp>::element_type;
    using _Up_elt = typename shared_ptr<_Up>::element_type;
    using _Vp = typename common_type<_Tp_elt*, _Up_elt*>::type;
    return less<_Vp>()(__a.get(), __b.get());
  }
  template <typename _Tp>
  [[__nodiscard__]] inline bool operator<(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
  {
    using _Tp_elt = typename shared_ptr<_Tp>::element_type;
    return less<_Tp_elt*>()(__a.get(), nullptr);
  }
  template <typename _Tp>
  [[__nodiscard__]] inline bool operator<(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
  {
    using _Tp_elt = typename shared_ptr<_Tp>::element_type;
    return less<_Tp_elt*>()(nullptr, __a.get());
  }
  template <typename _Tp, typename _Up>
  [[__nodiscard__]] inline bool operator<=(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
  {
    return !(__b < __a);
  }
  template <typename _Tp>
  [[__nodiscard__]] inline bool operator<=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
  {
    return !(nullptr < __a);
  }
  template <typename _Tp>
  [[__nodiscard__]] inline bool operator<=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
  {
    return !(__a < nullptr);
  }
  template <typename _Tp, typename _Up>
  [[__nodiscard__]] inline bool operator>(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
  {
    return (__b < __a);
  }
  template <typename _Tp>
  [[__nodiscard__]] inline bool operator>(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
  {
    return nullptr < __a;
  }
  template <typename _Tp>
  [[__nodiscard__]] inline bool operator>(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
  {
    return __a < nullptr;
  }
  template <typename _Tp, typename _Up>
  [[__nodiscard__]] inline bool operator>=(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept
  {
    return !(__a < __b);
  }
  template <typename _Tp>
  [[__nodiscard__]] inline bool operator>=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept
  {
    return !(__a < nullptr);
  }
  template <typename _Tp>
  [[__nodiscard__]] inline bool operator>=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept
  {
    return !(nullptr < __a);
  }
  template <typename _Tp>
  inline void swap(shared_ptr<_Tp> & __a, shared_ptr<_Tp> & __b) noexcept
  {
    __a.swap(__b);
  }
  template <typename _Tp, typename _Up>
  inline shared_ptr<_Tp> static_pointer_cast(const shared_ptr<_Up>& __r) noexcept
  {
    using _Sp = shared_ptr<_Tp>;
    return _Sp(__r, static_cast<typename _Sp::element_type*>(__r.get()));
  }
  template <typename _Tp, typename _Up>
  inline shared_ptr<_Tp> const_pointer_cast(const shared_ptr<_Up>& __r) noexcept
  {
    using _Sp = shared_ptr<_Tp>;
    return _Sp(__r, const_cast<typename _Sp::element_type*>(__r.get()));
  }
  template <typename _Tp, typename _Up>
  inline shared_ptr<_Tp> dynamic_pointer_cast(const shared_ptr<_Up>& __r) noexcept
  {
    using _Sp = shared_ptr<_Tp>;
    if (auto* __p = dynamic_cast<typename _Sp::element_type*>(__r.get()))
      return _Sp(__r, __p);
    return _Sp();
  }
  template <typename _Tp, typename _Up>
  inline shared_ptr<_Tp> reinterpret_pointer_cast(const shared_ptr<_Up>& __r) noexcept
  {
    using _Sp = shared_ptr<_Tp>;
    return _Sp(__r, reinterpret_cast<typename _Sp::element_type*>(__r.get()));
  }
  template <typename _Tp>
  class weak_ptr : public __weak_ptr<_Tp>
  {
    template <typename _Arg>
    using _Constructible = typename enable_if<is_constructible<__weak_ptr<_Tp>, _Arg>::value>::type;
    template <typename _Arg>
    using _Assignable = typename enable_if<is_assignable<__weak_ptr<_Tp>&, _Arg>::value, weak_ptr&>::type;

  public:
    constexpr weak_ptr() noexcept = default;
    template <typename _Yp, typename = _Constructible<const shared_ptr<_Yp>&>>
    weak_ptr(const shared_ptr<_Yp>& __r) noexcept : __weak_ptr<_Tp>(__r)
    {
    }
    weak_ptr(const weak_ptr&) noexcept = default;
    template <typename _Yp, typename = _Constructible<const weak_ptr<_Yp>&>>
    weak_ptr(const weak_ptr<_Yp>& __r) noexcept : __weak_ptr<_Tp>(__r)
    {
    }
    weak_ptr(weak_ptr&&) noexcept = default;
    template <typename _Yp, typename = _Constructible<weak_ptr<_Yp>>>
    weak_ptr(weak_ptr<_Yp>&& __r) noexcept : __weak_ptr<_Tp>(std::move(__r))
    {
    }
    weak_ptr& operator=(const weak_ptr& __r) noexcept = default;
    template <typename _Yp>
    _Assignable<const weak_ptr<_Yp>&> operator=(const weak_ptr<_Yp>& __r) noexcept
    {
      this->__weak_ptr<_Tp>::operator=(__r);
      return *this;
    }
    template <typename _Yp>
    _Assignable<const shared_ptr<_Yp>&> operator=(const shared_ptr<_Yp>& __r) noexcept
    {
      this->__weak_ptr<_Tp>::operator=(__r);
      return *this;
    }
    weak_ptr& operator=(weak_ptr&& __r) noexcept = default;
    template <typename _Yp>
    _Assignable<weak_ptr<_Yp>> operator=(weak_ptr<_Yp>&& __r) noexcept
    {
      this->__weak_ptr<_Tp>::operator=(std::move(__r));
      return *this;
    }
    shared_ptr<_Tp> lock() const noexcept { return shared_ptr<_Tp>(*this, std::nothrow); }
  };
  template <typename _Tp>
  weak_ptr(shared_ptr<_Tp>) -> weak_ptr<_Tp>;
  template <typename _Tp>
  inline void swap(weak_ptr<_Tp> & __a, weak_ptr<_Tp> & __b) noexcept
  {
    __a.swap(__b);
  }
  template <typename _Tp = void>
  struct owner_less;
  template <>
  struct owner_less<void> : _Sp_owner_less<void, void>
  {
  };
  template <typename _Tp>
  struct owner_less<shared_ptr<_Tp>> : public _Sp_owner_less<shared_ptr<_Tp>, weak_ptr<_Tp>>
  {
  };
  template <typename _Tp>
  struct owner_less<weak_ptr<_Tp>> : public _Sp_owner_less<weak_ptr<_Tp>, shared_ptr<_Tp>>
  {
  };
  template <typename _Tp>
  class enable_shared_from_this
  {
  protected:
    constexpr enable_shared_from_this() noexcept {}
    enable_shared_from_this(const enable_shared_from_this&) noexcept {}
    enable_shared_from_this& operator=(const enable_shared_from_this&) noexcept { return *this; }
    ~enable_shared_from_this() {}

  public:
    shared_ptr<_Tp> shared_from_this() { return shared_ptr<_Tp>(this->_M_weak_this); }
    shared_ptr<const _Tp> shared_from_this() const { return shared_ptr<const _Tp>(this->_M_weak_this); }
    weak_ptr<_Tp> weak_from_this() noexcept { return this->_M_weak_this; }
    weak_ptr<const _Tp> weak_from_this() const noexcept { return this->_M_weak_this; }

  private:
    template <typename _Tp1>
    void _M_weak_assign(_Tp1* __p, const __shared_count<>& __n) const noexcept
    {
      _M_weak_this._M_assign(__p, __n);
    }
    friend const enable_shared_from_this* __enable_shared_from_this_base(const __shared_count<>&,
                                                                         const enable_shared_from_this* __p)
    {
      return __p;
    }
    template <typename, _Lock_policy>
    friend class __shared_ptr;
    mutable weak_ptr<_Tp> _M_weak_this;
  };
  template <typename _Tp, typename _Alloc, typename... _Args>
  inline shared_ptr<_Tp> allocate_shared(const _Alloc& __a, _Args&&... __args)
  {
    return shared_ptr<_Tp>(_Sp_alloc_shared_tag<_Alloc>{__a}, std::forward<_Args>(__args)...);
  }
  template <typename _Tp, typename... _Args>
  inline shared_ptr<_Tp> make_shared(_Args && ... __args)
  {
    typedef typename std::remove_cv<_Tp>::type _Tp_nc;
    return std::allocate_shared<_Tp>(std::allocator<_Tp_nc>(), std::forward<_Args>(__args)...);
  }
  template <typename _Tp>
  struct hash<shared_ptr<_Tp>> : public __hash_base<size_t, shared_ptr<_Tp>>
  {
    size_t operator()(const shared_ptr<_Tp>& __s) const noexcept
    {
      return std::hash<typename shared_ptr<_Tp>::element_type*>()(__s.get());
    }
  };
  namespace __detail::__variant
  {
  template <typename>
  struct _Never_valueless_alt;
  template <typename _Tp>
  struct _Never_valueless_alt<std::shared_ptr<_Tp>> : std::true_type
  {
  };
  template <typename _Tp>
  struct _Never_valueless_alt<std::weak_ptr<_Tp>> : std::true_type
  {
  };
  }  // namespace __detail::__variant
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  typedef enum memory_order
  {
    memory_order_relaxed,
    memory_order_consume,
    memory_order_acquire,
    memory_order_release,
    memory_order_acq_rel,
    memory_order_seq_cst
  } memory_order;
  enum __memory_order_modifier
  {
    __memory_order_mask = 0x0ffff,
    __memory_order_modifier_mask = 0xffff0000,
    __memory_order_hle_acquire = 0x10000,
    __memory_order_hle_release = 0x20000
  };
  constexpr memory_order operator|(memory_order __m, __memory_order_modifier __mod)
  {
    return memory_order(int(__m) | int(__mod));
  }
  constexpr memory_order operator&(memory_order __m, __memory_order_modifier __mod)
  {
    return memory_order(int(__m) & int(__mod));
  }
  constexpr memory_order __cmpexch_failure_order2(memory_order __m) noexcept
  {
    return __m == memory_order_acq_rel ? memory_order_acquire
                                       : __m == memory_order_release ? memory_order_relaxed : __m;
  }
  constexpr memory_order __cmpexch_failure_order(memory_order __m) noexcept
  {
    return memory_order(__cmpexch_failure_order2(__m & __memory_order_mask) |
                        __memory_order_modifier(__m & __memory_order_modifier_mask));
  }
  inline __attribute__((__always_inline__)) void atomic_thread_fence(memory_order __m) noexcept
  {
    __atomic_thread_fence(int(__m));
  }
  inline __attribute__((__always_inline__)) void atomic_signal_fence(memory_order __m) noexcept
  {
    __atomic_signal_fence(int(__m));
  }
  template <typename _Tp>
  inline _Tp kill_dependency(_Tp __y) noexcept
  {
    _Tp __ret(__y);
    return __ret;
  }
  template <typename _IntTp>
  struct __atomic_base;
  template <typename _Tp>
  struct atomic;
  template <typename _Tp>
  struct atomic<_Tp*>;
  typedef bool __atomic_flag_data_type;
  extern "C" {
  struct __atomic_flag_base
  {
    __atomic_flag_data_type _M_i;
  };
  }
  struct atomic_flag : public __atomic_flag_base
  {
    atomic_flag() noexcept = default;
    ~atomic_flag() noexcept = default;
    atomic_flag(const atomic_flag&) = delete;
    atomic_flag& operator=(const atomic_flag&) = delete;
    atomic_flag& operator=(const atomic_flag&) volatile = delete;
    constexpr atomic_flag(bool __i) noexcept : __atomic_flag_base{_S_init(__i)} {}
    inline __attribute__((__always_inline__)) bool test_and_set(memory_order __m = memory_order_seq_cst) noexcept
    {
      return __atomic_test_and_set(&_M_i, int(__m));
    }
    inline __attribute__((__always_inline__)) bool test_and_set(
        memory_order __m = memory_order_seq_cst) volatile noexcept
    {
      return __atomic_test_and_set(&_M_i, int(__m));
    }
    inline __attribute__((__always_inline__)) void clear(memory_order __m = memory_order_seq_cst) noexcept
    {
      memory_order __b = __m & __memory_order_mask;
      ;
      ;
      ;
      __atomic_clear(&_M_i, int(__m));
    }
    inline __attribute__((__always_inline__)) void clear(memory_order __m = memory_order_seq_cst) volatile noexcept
    {
      memory_order __b = __m & __memory_order_mask;
      ;
      ;
      ;
      __atomic_clear(&_M_i, int(__m));
    }

  private:
    static constexpr __atomic_flag_data_type _S_init(bool __i) { return __i ? 1 : 0; }
  };
  template <typename _ITp>
  struct __atomic_base
  {
    using value_type = _ITp;
    using difference_type = value_type;

  private:
    typedef _ITp __int_type;
    static constexpr int _S_alignment = sizeof(_ITp) > alignof(_ITp) ? sizeof(_ITp) : alignof(_ITp);
    alignas(_S_alignment) __int_type _M_i;

  public:
    __atomic_base() noexcept = default;
    ~__atomic_base() noexcept = default;
    __atomic_base(const __atomic_base&) = delete;
    __atomic_base& operator=(const __atomic_base&) = delete;
    __atomic_base& operator=(const __atomic_base&) volatile = delete;
    constexpr __atomic_base(__int_type __i) noexcept : _M_i(__i) {}
    operator __int_type() const noexcept { return load(); }
    operator __int_type() const volatile noexcept { return load(); }
    __int_type operator=(__int_type __i) noexcept
    {
      store(__i);
      return __i;
    }
    __int_type operator=(__int_type __i) volatile noexcept
    {
      store(__i);
      return __i;
    }
    __int_type operator++(int) noexcept { return fetch_add(1); }
    __int_type operator++(int) volatile noexcept { return fetch_add(1); }
    __int_type operator--(int) noexcept { return fetch_sub(1); }
    __int_type operator--(int) volatile noexcept { return fetch_sub(1); }
    __int_type operator++() noexcept { return __atomic_add_fetch(&_M_i, 1, int(memory_order_seq_cst)); }
    __int_type operator++() volatile noexcept { return __atomic_add_fetch(&_M_i, 1, int(memory_order_seq_cst)); }
    __int_type operator--() noexcept { return __atomic_sub_fetch(&_M_i, 1, int(memory_order_seq_cst)); }
    __int_type operator--() volatile noexcept { return __atomic_sub_fetch(&_M_i, 1, int(memory_order_seq_cst)); }
    __int_type operator+=(__int_type __i) noexcept { return __atomic_add_fetch(&_M_i, __i, int(memory_order_seq_cst)); }
    __int_type operator+=(__int_type __i) volatile noexcept
    {
      return __atomic_add_fetch(&_M_i, __i, int(memory_order_seq_cst));
    }
    __int_type operator-=(__int_type __i) noexcept { return __atomic_sub_fetch(&_M_i, __i, int(memory_order_seq_cst)); }
    __int_type operator-=(__int_type __i) volatile noexcept
    {
      return __atomic_sub_fetch(&_M_i, __i, int(memory_order_seq_cst));
    }
    __int_type operator&=(__int_type __i) noexcept { return __atomic_and_fetch(&_M_i, __i, int(memory_order_seq_cst)); }
    __int_type operator&=(__int_type __i) volatile noexcept
    {
      return __atomic_and_fetch(&_M_i, __i, int(memory_order_seq_cst));
    }
    __int_type operator|=(__int_type __i) noexcept { return __atomic_or_fetch(&_M_i, __i, int(memory_order_seq_cst)); }
    __int_type operator|=(__int_type __i) volatile noexcept
    {
      return __atomic_or_fetch(&_M_i, __i, int(memory_order_seq_cst));
    }
    __int_type operator^=(__int_type __i) noexcept { return __atomic_xor_fetch(&_M_i, __i, int(memory_order_seq_cst)); }
    __int_type operator^=(__int_type __i) volatile noexcept
    {
      return __atomic_xor_fetch(&_M_i, __i, int(memory_order_seq_cst));
    }
    bool is_lock_free() const noexcept
    {
      return __atomic_is_lock_free(sizeof(_M_i), reinterpret_cast<void*>(-_S_alignment));
    }
    bool is_lock_free() const volatile noexcept
    {
      return __atomic_is_lock_free(sizeof(_M_i), reinterpret_cast<void*>(-_S_alignment));
    }
    inline __attribute__((__always_inline__)) void store(__int_type __i,
                                                         memory_order __m = memory_order_seq_cst) noexcept
    {
      memory_order __b = __m & __memory_order_mask;
      ;
      ;
      ;
      __atomic_store_n(&_M_i, __i, int(__m));
    }
    inline __attribute__((__always_inline__)) void store(__int_type __i,
                                                         memory_order __m = memory_order_seq_cst) volatile noexcept
    {
      memory_order __b = __m & __memory_order_mask;
      ;
      ;
      ;
      __atomic_store_n(&_M_i, __i, int(__m));
    }
    inline __attribute__((__always_inline__)) __int_type load(memory_order __m = memory_order_seq_cst) const noexcept
    {
      memory_order __b = __m & __memory_order_mask;
      ;
      ;
      return __atomic_load_n(&_M_i, int(__m));
    }
    inline __attribute__((__always_inline__)) __int_type load(memory_order __m = memory_order_seq_cst) const
        volatile noexcept
    {
      memory_order __b = __m & __memory_order_mask;
      ;
      ;
      return __atomic_load_n(&_M_i, int(__m));
    }
    inline __attribute__((__always_inline__)) __int_type exchange(__int_type __i,
                                                                  memory_order __m = memory_order_seq_cst) noexcept
    {
      return __atomic_exchange_n(&_M_i, __i, int(__m));
    }
    inline __attribute__((__always_inline__)) __int_type exchange(
        __int_type __i,
        memory_order __m = memory_order_seq_cst) volatile noexcept
    {
      return __atomic_exchange_n(&_M_i, __i, int(__m));
    }
    inline __attribute__((__always_inline__)) bool compare_exchange_weak(__int_type& __i1,
                                                                         __int_type __i2,
                                                                         memory_order __m1,
                                                                         memory_order __m2) noexcept
    {
      memory_order __b2 = __m2 & __memory_order_mask;
      memory_order __b1 = __m1 & __memory_order_mask;
      ;
      ;
      ;
      return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 1, int(__m1), int(__m2));
    }
    inline __attribute__((__always_inline__)) bool compare_exchange_weak(__int_type& __i1,
                                                                         __int_type __i2,
                                                                         memory_order __m1,
                                                                         memory_order __m2) volatile noexcept
    {
      memory_order __b2 = __m2 & __memory_order_mask;
      memory_order __b1 = __m1 & __memory_order_mask;
      ;
      ;
      ;
      return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 1, int(__m1), int(__m2));
    }
    inline __attribute__((__always_inline__)) bool
    compare_exchange_weak(__int_type& __i1, __int_type __i2, memory_order __m = memory_order_seq_cst) noexcept
    {
      return compare_exchange_weak(__i1, __i2, __m, __cmpexch_failure_order(__m));
    }
    inline __attribute__((__always_inline__)) bool
    compare_exchange_weak(__int_type& __i1, __int_type __i2, memory_order __m = memory_order_seq_cst) volatile noexcept
    {
      return compare_exchange_weak(__i1, __i2, __m, __cmpexch_failure_order(__m));
    }
    inline __attribute__((__always_inline__)) bool compare_exchange_strong(__int_type& __i1,
                                                                           __int_type __i2,
                                                                           memory_order __m1,
                                                                           memory_order __m2) noexcept
    {
      memory_order __b2 = __m2 & __memory_order_mask;
      memory_order __b1 = __m1 & __memory_order_mask;
      ;
      ;
      ;
      return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 0, int(__m1), int(__m2));
    }
    inline __attribute__((__always_inline__)) bool compare_exchange_strong(__int_type& __i1,
                                                                           __int_type __i2,
                                                                           memory_order __m1,
                                                                           memory_order __m2) volatile noexcept
    {
      memory_order __b2 = __m2 & __memory_order_mask;
      memory_order __b1 = __m1 & __memory_order_mask;
      ;
      ;
      ;
      return __atomic_compare_exchange_n(&_M_i, &__i1, __i2, 0, int(__m1), int(__m2));
    }
    inline __attribute__((__always_inline__)) bool
    compare_exchange_strong(__int_type& __i1, __int_type __i2, memory_order __m = memory_order_seq_cst) noexcept
    {
      return compare_exchange_strong(__i1, __i2, __m, __cmpexch_failure_order(__m));
    }
    inline __attribute__((__always_inline__)) bool compare_exchange_strong(
        __int_type& __i1,
        __int_type __i2,
        memory_order __m = memory_order_seq_cst) volatile noexcept
    {
      return compare_exchange_strong(__i1, __i2, __m, __cmpexch_failure_order(__m));
    }
    inline __attribute__((__always_inline__)) __int_type fetch_add(__int_type __i,
                                                                   memory_order __m = memory_order_seq_cst) noexcept
    {
      return __atomic_fetch_add(&_M_i, __i, int(__m));
    }
    inline __attribute__((__always_inline__)) __int_type fetch_add(
        __int_type __i,
        memory_order __m = memory_order_seq_cst) volatile noexcept
    {
      return __atomic_fetch_add(&_M_i, __i, int(__m));
    }
    inline __attribute__((__always_inline__)) __int_type fetch_sub(__int_type __i,
                                                                   memory_order __m = memory_order_seq_cst) noexcept
    {
      return __atomic_fetch_sub(&_M_i, __i, int(__m));
    }
    inline __attribute__((__always_inline__)) __int_type fetch_sub(
        __int_type __i,
        memory_order __m = memory_order_seq_cst) volatile noexcept
    {
      return __atomic_fetch_sub(&_M_i, __i, int(__m));
    }
    inline __attribute__((__always_inline__)) __int_type fetch_and(__int_type __i,
                                                                   memory_order __m = memory_order_seq_cst) noexcept
    {
      return __atomic_fetch_and(&_M_i, __i, int(__m));
    }
    inline __attribute__((__always_inline__)) __int_type fetch_and(
        __int_type __i,
        memory_order __m = memory_order_seq_cst) volatile noexcept
    {
      return __atomic_fetch_and(&_M_i, __i, int(__m));
    }
    inline __attribute__((__always_inline__)) __int_type fetch_or(__int_type __i,
                                                                  memory_order __m = memory_order_seq_cst) noexcept
    {
      return __atomic_fetch_or(&_M_i, __i, int(__m));
    }
    inline __attribute__((__always_inline__)) __int_type fetch_or(
        __int_type __i,
        memory_order __m = memory_order_seq_cst) volatile noexcept
    {
      return __atomic_fetch_or(&_M_i, __i, int(__m));
    }
    inline __attribute__((__always_inline__)) __int_type fetch_xor(__int_type __i,
                                                                   memory_order __m = memory_order_seq_cst) noexcept
    {
      return __atomic_fetch_xor(&_M_i, __i, int(__m));
    }
    inline __attribute__((__always_inline__)) __int_type fetch_xor(
        __int_type __i,
        memory_order __m = memory_order_seq_cst) volatile noexcept
    {
      return __atomic_fetch_xor(&_M_i, __i, int(__m));
    }
  };
  template <typename _PTp>
  struct __atomic_base<_PTp*>
  {
  private:
    typedef _PTp* __pointer_type;
    __pointer_type _M_p;
    constexpr ptrdiff_t _M_type_size(ptrdiff_t __d) const { return __d * sizeof(_PTp); }
    constexpr ptrdiff_t _M_type_size(ptrdiff_t __d) const volatile { return __d * sizeof(_PTp); }

  public:
    __atomic_base() noexcept = default;
    ~__atomic_base() noexcept = default;
    __atomic_base(const __atomic_base&) = delete;
    __atomic_base& operator=(const __atomic_base&) = delete;
    __atomic_base& operator=(const __atomic_base&) volatile = delete;
    constexpr __atomic_base(__pointer_type __p) noexcept : _M_p(__p) {}
    operator __pointer_type() const noexcept { return load(); }
    operator __pointer_type() const volatile noexcept { return load(); }
    __pointer_type operator=(__pointer_type __p) noexcept
    {
      store(__p);
      return __p;
    }
    __pointer_type operator=(__pointer_type __p) volatile noexcept
    {
      store(__p);
      return __p;
    }
    __pointer_type operator++(int) noexcept { return fetch_add(1); }
    __pointer_type operator++(int) volatile noexcept { return fetch_add(1); }
    __pointer_type operator--(int) noexcept { return fetch_sub(1); }
    __pointer_type operator--(int) volatile noexcept { return fetch_sub(1); }
    __pointer_type operator++() noexcept
    {
      return __atomic_add_fetch(&_M_p, _M_type_size(1), int(memory_order_seq_cst));
    }
    __pointer_type operator++() volatile noexcept
    {
      return __atomic_add_fetch(&_M_p, _M_type_size(1), int(memory_order_seq_cst));
    }
    __pointer_type operator--() noexcept
    {
      return __atomic_sub_fetch(&_M_p, _M_type_size(1), int(memory_order_seq_cst));
    }
    __pointer_type operator--() volatile noexcept
    {
      return __atomic_sub_fetch(&_M_p, _M_type_size(1), int(memory_order_seq_cst));
    }
    __pointer_type operator+=(ptrdiff_t __d) noexcept
    {
      return __atomic_add_fetch(&_M_p, _M_type_size(__d), int(memory_order_seq_cst));
    }
    __pointer_type operator+=(ptrdiff_t __d) volatile noexcept
    {
      return __atomic_add_fetch(&_M_p, _M_type_size(__d), int(memory_order_seq_cst));
    }
    __pointer_type operator-=(ptrdiff_t __d) noexcept
    {
      return __atomic_sub_fetch(&_M_p, _M_type_size(__d), int(memory_order_seq_cst));
    }
    __pointer_type operator-=(ptrdiff_t __d) volatile noexcept
    {
      return __atomic_sub_fetch(&_M_p, _M_type_size(__d), int(memory_order_seq_cst));
    }
    bool is_lock_free() const noexcept
    {
      return __atomic_is_lock_free(sizeof(_M_p), reinterpret_cast<void*>(-__alignof(_M_p)));
    }
    bool is_lock_free() const volatile noexcept
    {
      return __atomic_is_lock_free(sizeof(_M_p), reinterpret_cast<void*>(-__alignof(_M_p)));
    }
    inline __attribute__((__always_inline__)) void store(__pointer_type __p,
                                                         memory_order __m = memory_order_seq_cst) noexcept
    {
      memory_order __b = __m & __memory_order_mask;
      ;
      ;
      ;
      __atomic_store_n(&_M_p, __p, int(__m));
    }
    inline __attribute__((__always_inline__)) void store(__pointer_type __p,
                                                         memory_order __m = memory_order_seq_cst) volatile noexcept
    {
      memory_order __b = __m & __memory_order_mask;
      ;
      ;
      ;
      __atomic_store_n(&_M_p, __p, int(__m));
    }
    inline __attribute__((__always_inline__)) __pointer_type load(
        memory_order __m = memory_order_seq_cst) const noexcept
    {
      memory_order __b = __m & __memory_order_mask;
      ;
      ;
      return __atomic_load_n(&_M_p, int(__m));
    }
    inline __attribute__((__always_inline__)) __pointer_type load(memory_order __m = memory_order_seq_cst) const
        volatile noexcept
    {
      memory_order __b = __m & __memory_order_mask;
      ;
      ;
      return __atomic_load_n(&_M_p, int(__m));
    }
    inline __attribute__((__always_inline__)) __pointer_type exchange(__pointer_type __p,
                                                                      memory_order __m = memory_order_seq_cst) noexcept
    {
      return __atomic_exchange_n(&_M_p, __p, int(__m));
    }
    inline __attribute__((__always_inline__)) __pointer_type exchange(
        __pointer_type __p,
        memory_order __m = memory_order_seq_cst) volatile noexcept
    {
      return __atomic_exchange_n(&_M_p, __p, int(__m));
    }
    inline __attribute__((__always_inline__)) bool compare_exchange_strong(__pointer_type& __p1,
                                                                           __pointer_type __p2,
                                                                           memory_order __m1,
                                                                           memory_order __m2) noexcept
    {
      memory_order __b2 = __m2 & __memory_order_mask;
      memory_order __b1 = __m1 & __memory_order_mask;
      ;
      ;
      ;
      return __atomic_compare_exchange_n(&_M_p, &__p1, __p2, 0, int(__m1), int(__m2));
    }
    inline __attribute__((__always_inline__)) bool compare_exchange_strong(__pointer_type& __p1,
                                                                           __pointer_type __p2,
                                                                           memory_order __m1,
                                                                           memory_order __m2) volatile noexcept
    {
      memory_order __b2 = __m2 & __memory_order_mask;
      memory_order __b1 = __m1 & __memory_order_mask;
      ;
      ;
      ;
      return __atomic_compare_exchange_n(&_M_p, &__p1, __p2, 0, int(__m1), int(__m2));
    }
    inline __attribute__((__always_inline__)) __pointer_type fetch_add(ptrdiff_t __d,
                                                                       memory_order __m = memory_order_seq_cst) noexcept
    {
      return __atomic_fetch_add(&_M_p, _M_type_size(__d), int(__m));
    }
    inline __attribute__((__always_inline__)) __pointer_type fetch_add(
        ptrdiff_t __d,
        memory_order __m = memory_order_seq_cst) volatile noexcept
    {
      return __atomic_fetch_add(&_M_p, _M_type_size(__d), int(__m));
    }
    inline __attribute__((__always_inline__)) __pointer_type fetch_sub(ptrdiff_t __d,
                                                                       memory_order __m = memory_order_seq_cst) noexcept
    {
      return __atomic_fetch_sub(&_M_p, _M_type_size(__d), int(__m));
    }
    inline __attribute__((__always_inline__)) __pointer_type fetch_sub(
        ptrdiff_t __d,
        memory_order __m = memory_order_seq_cst) volatile noexcept
    {
      return __atomic_fetch_sub(&_M_p, _M_type_size(__d), int(__m));
    }
  };
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  struct _Sp_locker
  {
    _Sp_locker(const _Sp_locker&) = delete;
    _Sp_locker& operator=(const _Sp_locker&) = delete;
    explicit _Sp_locker(const void*) noexcept;
    _Sp_locker(const void*, const void*) noexcept;
    ~_Sp_locker();

  private:
    unsigned char _M_key1;
    unsigned char _M_key2;
  };
  template <typename _Tp, _Lock_policy _Lp>
  inline bool atomic_is_lock_free(const __shared_ptr<_Tp, _Lp>* __p)
  {
    return __gthread_active_p() == 0;
  }
  template <typename _Tp>
  inline bool atomic_is_lock_free(const shared_ptr<_Tp>* __p)
  {
    return std::atomic_is_lock_free<_Tp, __default_lock_policy>(__p);
  }
  template <typename _Tp>
  inline shared_ptr<_Tp> atomic_load_explicit(const shared_ptr<_Tp>* __p, memory_order)
  {
    _Sp_locker __lock{__p};
    return *__p;
  }
  template <typename _Tp>
  inline shared_ptr<_Tp> atomic_load(const shared_ptr<_Tp>* __p)
  {
    return std::atomic_load_explicit(__p, memory_order_seq_cst);
  }
  template <typename _Tp, _Lock_policy _Lp>
  inline __shared_ptr<_Tp, _Lp> atomic_load_explicit(const __shared_ptr<_Tp, _Lp>* __p, memory_order)
  {
    _Sp_locker __lock{__p};
    return *__p;
  }
  template <typename _Tp, _Lock_policy _Lp>
  inline __shared_ptr<_Tp, _Lp> atomic_load(const __shared_ptr<_Tp, _Lp>* __p)
  {
    return std::atomic_load_explicit(__p, memory_order_seq_cst);
  }
  template <typename _Tp>
  inline void atomic_store_explicit(shared_ptr<_Tp> * __p, shared_ptr<_Tp> __r, memory_order)
  {
    _Sp_locker __lock{__p};
    __p->swap(__r);
  }
  template <typename _Tp>
  inline void atomic_store(shared_ptr<_Tp> * __p, shared_ptr<_Tp> __r)
  {
    std::atomic_store_explicit(__p, std::move(__r), memory_order_seq_cst);
  }
  template <typename _Tp, _Lock_policy _Lp>
  inline void atomic_store_explicit(__shared_ptr<_Tp, _Lp> * __p, __shared_ptr<_Tp, _Lp> __r, memory_order)
  {
    _Sp_locker __lock{__p};
    __p->swap(__r);
  }
  template <typename _Tp, _Lock_policy _Lp>
  inline void atomic_store(__shared_ptr<_Tp, _Lp> * __p, __shared_ptr<_Tp, _Lp> __r)
  {
    std::atomic_store_explicit(__p, std::move(__r), memory_order_seq_cst);
  }
  template <typename _Tp>
  inline shared_ptr<_Tp> atomic_exchange_explicit(shared_ptr<_Tp> * __p, shared_ptr<_Tp> __r, memory_order)
  {
    _Sp_locker __lock{__p};
    __p->swap(__r);
    return __r;
  }
  template <typename _Tp>
  inline shared_ptr<_Tp> atomic_exchange(shared_ptr<_Tp> * __p, shared_ptr<_Tp> __r)
  {
    return std::atomic_exchange_explicit(__p, std::move(__r), memory_order_seq_cst);
  }
  template <typename _Tp, _Lock_policy _Lp>
  inline __shared_ptr<_Tp, _Lp> atomic_exchange_explicit(
      __shared_ptr<_Tp, _Lp> * __p, __shared_ptr<_Tp, _Lp> __r, memory_order)
  {
    _Sp_locker __lock{__p};
    __p->swap(__r);
    return __r;
  }
  template <typename _Tp, _Lock_policy _Lp>
  inline __shared_ptr<_Tp, _Lp> atomic_exchange(__shared_ptr<_Tp, _Lp> * __p, __shared_ptr<_Tp, _Lp> __r)
  {
    return std::atomic_exchange_explicit(__p, std::move(__r), memory_order_seq_cst);
  }
  template <typename _Tp>
  bool atomic_compare_exchange_strong_explicit(
      shared_ptr<_Tp> * __p, shared_ptr<_Tp> * __v, shared_ptr<_Tp> __w, memory_order, memory_order)
  {
    shared_ptr<_Tp> __x;
    _Sp_locker __lock{__p, __v};
    owner_less<shared_ptr<_Tp>> __less;
    if (*__p == *__v && !__less(*__p, *__v) && !__less(*__v, *__p))
    {
      __x = std::move(*__p);
      *__p = std::move(__w);
      return true;
    }
    __x = std::move(*__v);
    *__v = *__p;
    return false;
  }
  template <typename _Tp>
  inline bool atomic_compare_exchange_strong(shared_ptr<_Tp> * __p, shared_ptr<_Tp> * __v, shared_ptr<_Tp> __w)
  {
    return std::atomic_compare_exchange_strong_explicit(
        __p, __v, std::move(__w), memory_order_seq_cst, memory_order_seq_cst);
  }
  template <typename _Tp>
  inline bool atomic_compare_exchange_weak_explicit(
      shared_ptr<_Tp> * __p, shared_ptr<_Tp> * __v, shared_ptr<_Tp> __w, memory_order __success, memory_order __failure)
  {
    return std::atomic_compare_exchange_strong_explicit(__p, __v, std::move(__w), __success, __failure);
  }
  template <typename _Tp>
  inline bool atomic_compare_exchange_weak(shared_ptr<_Tp> * __p, shared_ptr<_Tp> * __v, shared_ptr<_Tp> __w)
  {
    return std::atomic_compare_exchange_weak_explicit(
        __p, __v, std::move(__w), memory_order_seq_cst, memory_order_seq_cst);
  }
  template <typename _Tp, _Lock_policy _Lp>
  bool atomic_compare_exchange_strong_explicit(__shared_ptr<_Tp, _Lp> * __p,
                                               __shared_ptr<_Tp, _Lp> * __v,
                                               __shared_ptr<_Tp, _Lp> __w,
                                               memory_order,
                                               memory_order)
  {
    __shared_ptr<_Tp, _Lp> __x;
    _Sp_locker __lock{__p, __v};
    owner_less<__shared_ptr<_Tp, _Lp>> __less;
    if (*__p == *__v && !__less(*__p, *__v) && !__less(*__v, *__p))
    {
      __x = std::move(*__p);
      *__p = std::move(__w);
      return true;
    }
    __x = std::move(*__v);
    *__v = *__p;
    return false;
  }
  template <typename _Tp, _Lock_policy _Lp>
  inline bool atomic_compare_exchange_strong(
      __shared_ptr<_Tp, _Lp> * __p, __shared_ptr<_Tp, _Lp> * __v, __shared_ptr<_Tp, _Lp> __w)
  {
    return std::atomic_compare_exchange_strong_explicit(
        __p, __v, std::move(__w), memory_order_seq_cst, memory_order_seq_cst);
  }
  template <typename _Tp, _Lock_policy _Lp>
  inline bool atomic_compare_exchange_weak_explicit(__shared_ptr<_Tp, _Lp> * __p,
                                                    __shared_ptr<_Tp, _Lp> * __v,
                                                    __shared_ptr<_Tp, _Lp> __w,
                                                    memory_order __success,
                                                    memory_order __failure)
  {
    return std::atomic_compare_exchange_strong_explicit(__p, __v, std::move(__w), __success, __failure);
  }
  template <typename _Tp, _Lock_policy _Lp>
  inline bool atomic_compare_exchange_weak(
      __shared_ptr<_Tp, _Lp> * __p, __shared_ptr<_Tp, _Lp> * __v, __shared_ptr<_Tp, _Lp> __w)
  {
    return std::atomic_compare_exchange_weak_explicit(
        __p, __v, std::move(__w), memory_order_seq_cst, memory_order_seq_cst);
  }
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  template <typename _Tp1>
  struct auto_ptr_ref
  {
    _Tp1* _M_ptr;
    explicit auto_ptr_ref(_Tp1* __p) : _M_ptr(__p) {}
  } __attribute__((__deprecated__));
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
  template <typename _Tp>
  class auto_ptr
  {
  private:
    _Tp* _M_ptr;

  public:
    typedef _Tp element_type;
    explicit auto_ptr(element_type* __p = 0) throw() : _M_ptr(__p) {}
    auto_ptr(auto_ptr& __a) throw() : _M_ptr(__a.release()) {}
    template <typename _Tp1>
    auto_ptr(auto_ptr<_Tp1>& __a) throw() : _M_ptr(__a.release())
    {
    }
    auto_ptr& operator=(auto_ptr& __a) throw()
    {
      reset(__a.release());
      return *this;
    }
    template <typename _Tp1>
    auto_ptr& operator=(auto_ptr<_Tp1>& __a) throw()
    {
      reset(__a.release());
      return *this;
    }
    ~auto_ptr() { delete _M_ptr; }
    element_type& operator*() const throw()
    {
      ;
      return *_M_ptr;
    }
    element_type* operator->() const throw()
    {
      ;
      return _M_ptr;
    }
    element_type* get() const throw() { return _M_ptr; }
    element_type* release() throw()
    {
      element_type* __tmp = _M_ptr;
      _M_ptr = 0;
      return __tmp;
    }
    void reset(element_type* __p = 0) throw()
    {
      if (__p != _M_ptr)
      {
        delete _M_ptr;
        _M_ptr = __p;
      }
    }
    auto_ptr(auto_ptr_ref<element_type> __ref) throw() : _M_ptr(__ref._M_ptr) {}
    auto_ptr& operator=(auto_ptr_ref<element_type> __ref) throw()
    {
      if (__ref._M_ptr != this->get())
      {
        delete _M_ptr;
        _M_ptr = __ref._M_ptr;
      }
      return *this;
    }
    template <typename _Tp1>
    operator auto_ptr_ref<_Tp1>() throw()
    {
      return auto_ptr_ref<_Tp1>(this->release());
    }
    template <typename _Tp1>
    operator auto_ptr<_Tp1>() throw()
    {
      return auto_ptr<_Tp1>(this->release());
    }
  } __attribute__((__deprecated__));
  template <>
  class auto_ptr<void>
  {
  public:
    typedef void element_type;
  } __attribute__((__deprecated__));
  template <_Lock_policy _Lp>
  template <typename _Tp>
  inline __shared_count<_Lp>::__shared_count(std::auto_ptr<_Tp> && __r)
      : _M_pi(new _Sp_counted_ptr<_Tp*, _Lp>(__r.get()))
  {
    __r.release();
  }
  template <typename _Tp, _Lock_policy _Lp>
  template <typename _Tp1, typename>
  inline __shared_ptr<_Tp, _Lp>::__shared_ptr(std::auto_ptr<_Tp1> && __r) : _M_ptr(__r.get()), _M_refcount()
  {
    static_assert(sizeof(_Tp1) > 0, "incomplete type");
    _Tp1* __tmp = __r.get();
    _M_refcount = __shared_count<_Lp>(std::move(__r));
    _M_enable_shared_from_this_with(__tmp);
  }
  template <typename _Tp>
  template <typename _Tp1, typename>
  inline shared_ptr<_Tp>::shared_ptr(std::auto_ptr<_Tp1> && __r) : __shared_ptr<_Tp>(std::move(__r))
  {
  }
  template <typename _Tp, typename _Dp>
  template <typename _Up, typename>
  inline unique_ptr<_Tp, _Dp>::unique_ptr(auto_ptr<_Up> && __u) noexcept : _M_t(__u.release(), deleter_type())
  {
  }
#pragma GCC diagnostic pop
}  // namespace )
namespace std __attribute__((__visibility__("default")))
{
  inline void* align(size_t __align, size_t __size, void*& __ptr, size_t& __space) noexcept
  {
    const auto __intptr = reinterpret_cast<uintptr_t>(__ptr);
    const auto __aligned = (__intptr - 1u + __align) & -__align;
    const auto __diff = __aligned - __intptr;
    if ((__size + __diff) > __space)
      return nullptr;
    else
    {
      __space -= __diff;
      return __ptr = reinterpret_cast<void*>(__aligned);
    }
  }
  enum class pointer_safety
  {
    relaxed,
    preferred,
    strict
  };
  inline void declare_reachable(void*) {}
  template <typename _Tp>
  inline _Tp* undeclare_reachable(_Tp * __p)
  {
    return __p;
  }
  inline void declare_no_pointers(char*, size_t) {}
  inline void undeclare_no_pointers(char*, size_t) {}
  inline pointer_safety get_pointer_safety() noexcept { return pointer_safety::relaxed; }
}  // namespace )
namespace std
{
template <class _ExecutionPolicy, class _InputIterator, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
uninitialized_copy(_ExecutionPolicy&& __exec, _InputIterator __first, _InputIterator __last, _ForwardIterator __result);
template <class _ExecutionPolicy, class _InputIterator, class _Size, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
uninitialized_copy_n(_ExecutionPolicy&& __exec, _InputIterator __first, _Size __n, _ForwardIterator __result);
template <class _ExecutionPolicy, class _InputIterator, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
uninitialized_move(_ExecutionPolicy&& __exec, _InputIterator __first, _InputIterator __last, _ForwardIterator __result);
template <class _ExecutionPolicy, class _InputIterator, class _Size, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
uninitialized_move_n(_ExecutionPolicy&& __exec, _InputIterator __first, _Size __n, _ForwardIterator __result);
template <class _ExecutionPolicy, class _ForwardIterator, class _Tp>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void> uninitialized_fill(_ExecutionPolicy&& __exec,
                                                                                            _ForwardIterator __first,
                                                                                            _ForwardIterator __last,
                                                                                            const _Tp& __value);
template <class _ExecutionPolicy, class _ForwardIterator, class _Size, class _Tp>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
uninitialized_fill_n(_ExecutionPolicy&& __exec, _ForwardIterator __first, _Size __n, const _Tp& __value);
template <class _ExecutionPolicy, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void> destroy(_ExecutionPolicy&& __exec,
                                                                                 _ForwardIterator __first,
                                                                                 _ForwardIterator __last);
template <class _ExecutionPolicy, class _ForwardIterator, class _Size>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
destroy_n(_ExecutionPolicy&& __exec, _ForwardIterator __first, _Size __n);
template <class _ExecutionPolicy, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void>
uninitialized_default_construct(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last);
template <class _ExecutionPolicy, class _ForwardIterator, class _Size>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
uninitialized_default_construct_n(_ExecutionPolicy&& __exec, _ForwardIterator __first, _Size __n);
template <class _ExecutionPolicy, class _ForwardIterator>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void>
uninitialized_value_construct(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last);
template <class _ExecutionPolicy, class _ForwardIterator, class _Size>
__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, _ForwardIterator>
uninitialized_value_construct_n(_ExecutionPolicy&& __exec, _ForwardIterator __first, _Size __n);
}  // namespace std
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wsign-conversion"
namespace gsl
{
constexpr const std::ptrdiff_t dynamic_extent = -1;
template <class ElementType, std::ptrdiff_t Extent = dynamic_extent>
class span;
namespace details
{
template <class T>
struct is_span_oracle : std::false_type
{
};
template <class ElementType, std::ptrdiff_t Extent>
struct is_span_oracle<gsl::span<ElementType, Extent>> : std::true_type
{
};
template <class T>
struct is_span : public is_span_oracle<std::remove_cv_t<T>>
{
};
template <class T>
struct is_std_array_oracle : std::false_type
{
};
template <class ElementType, std::size_t Extent>
struct is_std_array_oracle<std::array<ElementType, Extent>> : std::true_type
{
};
template <class T>
struct is_std_array : public is_std_array_oracle<std::remove_cv_t<T>>
{
};
template <std::ptrdiff_t From, std::ptrdiff_t To>
struct is_allowed_extent_conversion
    : public std::integral_constant<bool, From == To || From == gsl::dynamic_extent || To == gsl::dynamic_extent>
{
};
template <class From, class To>
struct is_allowed_element_type_conversion
    : public std::integral_constant<bool, std::is_convertible<From (*)[], To (*)[]>::value>
{
};
template <class Span, bool IsConst>
class span_iterator
{
  using element_type_ = typename Span::element_type;

public:
  using iterator_category = std::random_access_iterator_tag;
  using value_type = std::remove_cv_t<element_type_>;
  using difference_type = typename Span::index_type;
  using reference = std::conditional_t<IsConst, const element_type_, element_type_>&;
  using pointer = std::add_pointer_t<reference>;
  span_iterator() = default;
  constexpr span_iterator(const Span* span, typename Span::index_type idx) noexcept : span_(span), index_(idx) {}
  friend span_iterator<Span, true>;
  template <bool B, std::enable_if_t<!B && IsConst>* = nullptr>
  constexpr span_iterator(const span_iterator<Span, B>& other) noexcept : span_iterator(other.span_, other.index_)
  {
  }
  constexpr reference operator*() const
  {
    (__builtin_expect(!!(index_ != span_->size()), 1) ? static_cast<void>(0) : gsl::details::terminate());
    return *(span_->data() + index_);
  }
  constexpr pointer operator->() const
  {
    (__builtin_expect(!!(index_ != span_->size()), 1) ? static_cast<void>(0) : gsl::details::terminate());
    return span_->data() + index_;
  }
  constexpr span_iterator& operator++()
  {
    (__builtin_expect(!!(0 <= index_ && index_ != span_->size()), 1) ? static_cast<void>(0)
                                                                     : gsl::details::terminate());
    ++index_;
    return *this;
  }
  constexpr span_iterator operator++(int)
  {
    auto ret = *this;
    ++(*this);
    return ret;
  }
  constexpr span_iterator& operator--()
  {
    (__builtin_expect(!!(index_ != 0 && index_ <= span_->size()), 1) ? static_cast<void>(0)
                                                                     : gsl::details::terminate());
    --index_;
    return *this;
  }
  constexpr span_iterator operator--(int)
  {
    auto ret = *this;
    --(*this);
    return ret;
  }
  constexpr span_iterator operator+(difference_type n) const
  {
    auto ret = *this;
    return ret += n;
  }
  friend constexpr span_iterator operator+(difference_type n, span_iterator const& rhs) { return rhs + n; }
  constexpr span_iterator& operator+=(difference_type n)
  {
    (__builtin_expect(!!((index_ + n) >= 0 && (index_ + n) <= span_->size()), 1) ? static_cast<void>(0)
                                                                                 : gsl::details::terminate());
    index_ += n;
    return *this;
  }
  constexpr span_iterator operator-(difference_type n) const
  {
    auto ret = *this;
    return ret -= n;
  }
  constexpr span_iterator& operator-=(difference_type n) { return *this += -n; }
  constexpr difference_type operator-(span_iterator rhs) const
  {
    (__builtin_expect(!!(span_ == rhs.span_), 1) ? static_cast<void>(0) : gsl::details::terminate());
    return index_ - rhs.index_;
  }
  constexpr reference operator[](difference_type n) const { return *(*this + n); }
  constexpr friend bool operator==(span_iterator lhs, span_iterator rhs) noexcept
  {
    return lhs.span_ == rhs.span_ && lhs.index_ == rhs.index_;
  }
  constexpr friend bool operator!=(span_iterator lhs, span_iterator rhs) noexcept { return !(lhs == rhs); }
  constexpr friend bool operator<(span_iterator lhs, span_iterator rhs) noexcept { return lhs.index_ < rhs.index_; }
  constexpr friend bool operator<=(span_iterator lhs, span_iterator rhs) noexcept { return !(rhs < lhs); }
  constexpr friend bool operator>(span_iterator lhs, span_iterator rhs) noexcept { return rhs < lhs; }
  constexpr friend bool operator>=(span_iterator lhs, span_iterator rhs) noexcept { return !(rhs > lhs); }

protected:
  const Span* span_ = nullptr;
  std::ptrdiff_t index_ = 0;
};
template <std::ptrdiff_t Ext>
class extent_type
{
public:
  using index_type = std::ptrdiff_t;
  static_assert(Ext >= 0, "A fixed-size span must be >= 0 in size.");
  constexpr extent_type() noexcept {}
  template <index_type Other>
  constexpr extent_type(extent_type<Other> ext)
  {
    static_assert(Other == Ext || Other == dynamic_extent,
                  "Mismatch between fixed-size extent and size of initializing data.");
    (__builtin_expect(!!(ext.size() == Ext), 1) ? static_cast<void>(0) : gsl::details::terminate());
  }
  constexpr extent_type(index_type size)
  {
    (__builtin_expect(!!(size == Ext), 1) ? static_cast<void>(0) : gsl::details::terminate());
  }
  constexpr index_type size() const noexcept { return Ext; }
};
template <>
class extent_type<dynamic_extent>
{
public:
  using index_type = std::ptrdiff_t;
  template <index_type Other>
  explicit constexpr extent_type(extent_type<Other> ext) : size_(ext.size())
  {
  }
  explicit constexpr extent_type(index_type size) : size_(size)
  {
    (__builtin_expect(!!(size >= 0), 1) ? static_cast<void>(0) : gsl::details::terminate());
  }
  constexpr index_type size() const noexcept { return size_; }

private:
  index_type size_;
};
template <class ElementType, std::ptrdiff_t Extent, std::ptrdiff_t Offset, std::ptrdiff_t Count>
struct calculate_subspan_type
{
  using type =
      span<ElementType, Count != dynamic_extent ? Count : (Extent != dynamic_extent ? Extent - Offset : Extent)>;
};
}  // namespace details
template <class ElementType, std::ptrdiff_t Extent>
class span
{
public:
  using element_type = ElementType;
  using value_type = std::remove_cv_t<ElementType>;
  using index_type = std::ptrdiff_t;
  using pointer = element_type*;
  using reference = element_type&;
  using iterator = details::span_iterator<span<ElementType, Extent>, false>;
  using const_iterator = details::span_iterator<span<ElementType, Extent>, true>;
  using reverse_iterator = std::reverse_iterator<iterator>;
  using const_reverse_iterator = std::reverse_iterator<const_iterator>;
  using size_type = index_type;
  static constexpr index_type extent{Extent};
  template <bool Dependent = false, class = std::enable_if_t<(Dependent || Extent <= 0)>>
  constexpr span() noexcept : storage_(nullptr, details::extent_type<0>())
  {
  }
  constexpr span(pointer ptr, index_type count) : storage_(ptr, count) {}
  constexpr span(pointer firstElem, pointer lastElem) : storage_(firstElem, std::distance(firstElem, lastElem)) {}
  template <std::size_t N>
  constexpr span(element_type (&arr)[N]) noexcept
      : storage_(KnownNotNull{std::addressof(arr[0])}, details::extent_type<N>())
  {
  }
  template <std::size_t N, class = std::enable_if_t<(N > 0)>>
  constexpr span(std::array<std::remove_const_t<element_type>, N>& arr) noexcept
      : storage_(KnownNotNull{arr.data()}, details::extent_type<N>())
  {
  }
  constexpr span(std::array<std::remove_const_t<element_type>, 0>&) noexcept
      : storage_(static_cast<pointer>(nullptr), details::extent_type<0>())
  {
  }
  template <std::size_t N, class = std::enable_if_t<(N > 0)>>
  constexpr span(const std::array<std::remove_const_t<element_type>, N>& arr) noexcept
      : storage_(KnownNotNull{arr.data()}, details::extent_type<N>())
  {
  }
  constexpr span(const std::array<std::remove_const_t<element_type>, 0>&) noexcept
      : storage_(static_cast<pointer>(nullptr), details::extent_type<0>())
  {
  }
  template <class Container,
            class = std::enable_if_t<
                !details::is_span<Container>::value && !details::is_std_array<Container>::value &&
                std::is_convertible<typename Container::pointer, pointer>::value &&
                std::is_convertible<typename Container::pointer, decltype(std::declval<Container>().data())>::value>>
  constexpr span(Container& cont) : span(cont.data(), narrow<index_type>(cont.size()))
  {
  }
  template <class Container,
            class = std::enable_if_t<
                std::is_const<element_type>::value && !details::is_span<Container>::value &&
                std::is_convertible<typename Container::pointer, pointer>::value &&
                std::is_convertible<typename Container::pointer, decltype(std::declval<Container>().data())>::value>>
  constexpr span(const Container& cont) : span(cont.data(), narrow<index_type>(cont.size()))
  {
  }
  constexpr span(const span& other) noexcept = default;
  template <
      class OtherElementType,
      std::ptrdiff_t OtherExtent,
      class = std::enable_if_t<details::is_allowed_extent_conversion<OtherExtent, Extent>::value &&
                               details::is_allowed_element_type_conversion<OtherElementType, element_type>::value>>
  constexpr span(const span<OtherElementType, OtherExtent>& other)
      : storage_(other.data(), details::extent_type<OtherExtent>(other.size()))
  {
  }
  ~span() noexcept = default;
  constexpr span& operator=(const span& other) noexcept = default;
  template <std::ptrdiff_t Count>
  constexpr span<element_type, Count> first() const
  {
    (__builtin_expect(!!(Count >= 0 && Count <= size()), 1) ? static_cast<void>(0) : gsl::details::terminate());
    return {data(), Count};
  }
  template <std::ptrdiff_t Count>
  constexpr span<element_type, Count> last() const
  {
    (__builtin_expect(!!(Count >= 0 && size() - Count >= 0), 1) ? static_cast<void>(0) : gsl::details::terminate());
    return {data() + (size() - Count), Count};
  }
  template <std::ptrdiff_t Offset, std::ptrdiff_t Count = dynamic_extent>
  constexpr auto subspan() const -> typename details::calculate_subspan_type<ElementType, Extent, Offset, Count>::type
  {
    (__builtin_expect(!!((Offset >= 0 && size() - Offset >= 0) &&
                         (Count == dynamic_extent || (Count >= 0 && Offset + Count <= size()))),
                      1)
         ? static_cast<void>(0)
         : gsl::details::terminate());
    return {data() + Offset, Count == dynamic_extent ? size() - Offset : Count};
  }
  constexpr span<element_type, dynamic_extent> first(index_type count) const
  {
    (__builtin_expect(!!(count >= 0 && count <= size()), 1) ? static_cast<void>(0) : gsl::details::terminate());
    return {data(), count};
  }
  constexpr span<element_type, dynamic_extent> last(index_type count) const
  {
    return make_subspan(size() - count, dynamic_extent, subspan_selector<Extent>{});
  }
  constexpr span<element_type, dynamic_extent> subspan(index_type offset, index_type count = dynamic_extent) const
  {
    return make_subspan(offset, count, subspan_selector<Extent>{});
  }
  constexpr index_type size() const noexcept { return storage_.size(); }
  constexpr index_type size_bytes() const noexcept { return size() * narrow_cast<index_type>(sizeof(element_type)); }
  constexpr bool empty() const noexcept { return size() == 0; }
  constexpr reference operator[](index_type idx) const
  {
    (__builtin_expect(!!(CheckRange(idx, storage_.size())), 1) ? static_cast<void>(0) : gsl::details::terminate());
    return data()[idx];
  }
  constexpr reference at(index_type idx) const { return this->operator[](idx); }
  constexpr reference operator()(index_type idx) const { return this->operator[](idx); }
  constexpr pointer data() const noexcept { return storage_.data(); }
  constexpr iterator begin() const noexcept { return {this, 0}; }
  constexpr iterator end() const noexcept { return {this, size()}; }
  constexpr const_iterator cbegin() const noexcept { return {this, 0}; }
  constexpr const_iterator cend() const noexcept { return {this, size()}; }
  constexpr reverse_iterator rbegin() const noexcept { return reverse_iterator{end()}; }
  constexpr reverse_iterator rend() const noexcept { return reverse_iterator{begin()}; }
  constexpr const_reverse_iterator crbegin() const noexcept { return const_reverse_iterator{cend()}; }
  constexpr const_reverse_iterator crend() const noexcept { return const_reverse_iterator{cbegin()}; }

private:
  static bool CheckRange(index_type idx, index_type size) noexcept
  {
    if constexpr (sizeof(index_type) <= sizeof(size_t))
    {
      return narrow_cast<size_t>(idx) < narrow_cast<size_t>(size);
    }
    else
    {
      return idx >= 0 && idx < size;
    }
  }
  struct KnownNotNull
  {
    pointer p;
  };
  template <class ExtentType>
  class storage_type : public ExtentType
  {
  public:
    template <class OtherExtentType>
    constexpr storage_type(KnownNotNull data, OtherExtentType ext) : ExtentType(ext), data_(data.p)
    {
      (__builtin_expect(!!(ExtentType::size() >= 0), 1) ? static_cast<void>(0) : gsl::details::terminate());
    }
    template <class OtherExtentType>
    constexpr storage_type(pointer data, OtherExtentType ext) : ExtentType(ext), data_(data)
    {
      (__builtin_expect(!!(ExtentType::size() >= 0), 1) ? static_cast<void>(0) : gsl::details::terminate());
      (__builtin_expect(!!(data || ExtentType::size() == 0), 1) ? static_cast<void>(0) : gsl::details::terminate());
    }
    constexpr pointer data() const noexcept { return data_; }

  private:
    pointer data_;
  };
  storage_type<details::extent_type<Extent>> storage_;
  constexpr span(KnownNotNull ptr, index_type count) : storage_(ptr, count) {}
  template <std::ptrdiff_t CallerExtent>
  class subspan_selector
  {
  };
  template <std::ptrdiff_t CallerExtent>
  span<element_type, dynamic_extent> make_subspan(index_type offset,
                                                  index_type count,
                                                  subspan_selector<CallerExtent>) const
  {
    const span<element_type, dynamic_extent> tmp(*this);
    return tmp.subspan(offset, count);
  }
  span<element_type, dynamic_extent> make_subspan(index_type offset,
                                                  index_type count,
                                                  subspan_selector<dynamic_extent>) const
  {
    (__builtin_expect(!!(offset >= 0 && size() - offset >= 0), 1) ? static_cast<void>(0) : gsl::details::terminate());
    if (count == dynamic_extent)
    {
      return {KnownNotNull{data() + offset}, size() - offset};
    }
    (__builtin_expect(!!(count >= 0 && size() - offset >= count), 1) ? static_cast<void>(0)
                                                                     : gsl::details::terminate());
    return {KnownNotNull{data() + offset}, count};
  }
};
template <class ElementType, std::ptrdiff_t FirstExtent, std::ptrdiff_t SecondExtent>
constexpr bool operator==(span<ElementType, FirstExtent> l, span<ElementType, SecondExtent> r)
{
  return std::equal(l.begin(), l.end(), r.begin(), r.end());
}
template <class ElementType, std::ptrdiff_t Extent>
constexpr bool operator!=(span<ElementType, Extent> l, span<ElementType, Extent> r)
{
  return !(l == r);
}
template <class ElementType, std::ptrdiff_t Extent>
constexpr bool operator<(span<ElementType, Extent> l, span<ElementType, Extent> r)
{
  return std::lexicographical_compare(l.begin(), l.end(), r.begin(), r.end());
}
template <class ElementType, std::ptrdiff_t Extent>
constexpr bool operator<=(span<ElementType, Extent> l, span<ElementType, Extent> r)
{
  return !(l > r);
}
template <class ElementType, std::ptrdiff_t Extent>
constexpr bool operator>(span<ElementType, Extent> l, span<ElementType, Extent> r)
{
  return r < l;
}
template <class ElementType, std::ptrdiff_t Extent>
constexpr bool operator>=(span<ElementType, Extent> l, span<ElementType, Extent> r)
{
  return !(l < r);
}
namespace details
{
template <class ElementType, std::ptrdiff_t Extent>
struct calculate_byte_size
    : std::integral_constant<std::ptrdiff_t,
                             static_cast<std::ptrdiff_t>(sizeof(ElementType) * static_cast<std::size_t>(Extent))>
{
};
template <class ElementType>
struct calculate_byte_size<ElementType, dynamic_extent> : std::integral_constant<std::ptrdiff_t, dynamic_extent>
{
};
}  // namespace details
template <class ElementType, std::ptrdiff_t Extent>
span<const byte, details::calculate_byte_size<ElementType, Extent>::value> as_bytes(
    span<ElementType, Extent> s) noexcept
{
  return {reinterpret_cast<const byte*>(s.data()), s.size_bytes()};
}
template <class ElementType, std::ptrdiff_t Extent, class = std::enable_if_t<!std::is_const<ElementType>::value>>
span<byte, details::calculate_byte_size<ElementType, Extent>::value> as_writeable_bytes(
    span<ElementType, Extent> s) noexcept
{
  return {reinterpret_cast<byte*>(s.data()), s.size_bytes()};
}
template <class ElementType>
constexpr span<ElementType> make_span(ElementType* ptr, typename span<ElementType>::index_type count)
{
  return span<ElementType>(ptr, count);
}
template <class ElementType>
constexpr span<ElementType> make_span(ElementType* firstElem, ElementType* lastElem)
{
  return span<ElementType>(firstElem, lastElem);
}
template <class ElementType, std::size_t N>
constexpr span<ElementType, N> make_span(ElementType (&arr)[N]) noexcept
{
  return span<ElementType, N>(arr);
}
template <class Container>
constexpr span<typename Container::value_type> make_span(Container& cont)
{
  return span<typename Container::value_type>(cont);
}
template <class Container>
constexpr span<const typename Container::value_type> make_span(const Container& cont)
{
  return span<const typename Container::value_type>(cont);
}
template <class Ptr>
constexpr span<typename Ptr::element_type> make_span(Ptr& cont, std::ptrdiff_t count)
{
  return span<typename Ptr::element_type>(cont, count);
}
template <class Ptr>
constexpr span<typename Ptr::element_type> make_span(Ptr& cont)
{
  return span<typename Ptr::element_type>(cont);
}
template <class ElementType, std::ptrdiff_t Extent>
constexpr ElementType& at(span<ElementType, Extent> s, index i)
{
  return s[i];
}
}  // namespace gsl
#pragma GCC diagnostic pop
namespace nonstd
{
using std::in_place;
using std::in_place_index;
using std::in_place_index_t;
using std::in_place_t;
using std::in_place_type;
using std::in_place_type_t;
}  // namespace nonstd
#pragma GCC diagnostic push
namespace nonstd
{
namespace expected_lite
{
namespace std17
{
using std::conjunction;
using std::is_nothrow_swappable;
using std::is_swappable;
}  // namespace std17
namespace std20
{
template <typename T>
struct remove_cvref
{
  typedef typename std::remove_cv<typename std::remove_reference<T>::type>::type type;
};
}  // namespace std20
template <typename T, typename E>
class expected;
namespace detail
{
template <typename T, typename E>
class storage_t_impl
{
  template <typename, typename>
  friend class nonstd::expected_lite::expected;

public:
  using value_type = T;
  using error_type = E;
  storage_t_impl() {}
  ~storage_t_impl() {}
  explicit storage_t_impl(bool has_value) : m_has_value(has_value) {}
  void construct_value(value_type const& e) { new (&m_value) value_type(e); }
  void construct_value(value_type&& e) { new (&m_value) value_type(std::move(e)); }
  template <class... Args>
  void emplace_value(Args&&... args)
  {
    new (&m_value) value_type(std::forward<Args>(args)...);
  }
  template <class U, class... Args>
  void emplace_value(std::initializer_list<U> il, Args&&... args)
  {
    new (&m_value) value_type(il, std::forward<Args>(args)...);
  }
  void destruct_value() { m_value.~value_type(); }
  void construct_error(error_type const& e) { new (&m_error) error_type(e); }
  void construct_error(error_type&& e) { new (&m_error) error_type(std::move(e)); }
  template <class... Args>
  void emplace_error(Args&&... args)
  {
    new (&m_error) error_type(std::forward<Args>(args)...);
  }
  template <class U, class... Args>
  void emplace_error(std::initializer_list<U> il, Args&&... args)
  {
    new (&m_error) error_type(il, std::forward<Args>(args)...);
  }
  void destruct_error() { m_error.~error_type(); }
  constexpr value_type const& value() const& { return m_value; }
  value_type& value() & { return m_value; }
  constexpr value_type const&& value() const&& { return std::move(m_value); }
  constexpr value_type&& value() && { return std::move(m_value); }
  value_type const* value_ptr() const { return &m_value; }
  value_type* value_ptr() { return &m_value; }
  error_type const& error() const& { return m_error; }
  error_type& error() & { return m_error; }
  constexpr error_type const&& error() const&& { return std::move(m_error); }
  constexpr error_type&& error() && { return std::move(m_error); }
  bool has_value() const { return m_has_value; }
  void set_has_value(bool v) { m_has_value = v; }

private:
  union
  {
    value_type m_value;
    error_type m_error;
  };
  bool m_has_value = false;
};
template <typename E>
struct storage_t_impl<void, E>
{
  template <typename, typename>
  friend class nonstd::expected_lite::expected;

public:
  using value_type = void;
  using error_type = E;
  storage_t_impl() {}
  ~storage_t_impl() {}
  explicit storage_t_impl(bool has_value) : m_has_value(has_value) {}
  void construct_error(error_type const& e) { new (&m_error) error_type(e); }
  void construct_error(error_type&& e) { new (&m_error) error_type(std::move(e)); }
  template <class... Args>
  void emplace_error(Args&&... args)
  {
    new (&m_error) error_type(std::forward<Args>(args)...);
  }
  template <class U, class... Args>
  void emplace_error(std::initializer_list<U> il, Args&&... args)
  {
    new (&m_error) error_type(il, std::forward<Args>(args)...);
  }
  void destruct_error() { m_error.~error_type(); }
  error_type const& error() const& { return m_error; }
  error_type& error() & { return m_error; }
  constexpr error_type const&& error() const&& { return std::move(m_error); }
  constexpr error_type&& error() && { return std::move(m_error); }
  bool has_value() const { return m_has_value; }
  void set_has_value(bool v) { m_has_value = v; }

private:
  union
  {
    char m_dummy;
    error_type m_error;
  };
  bool m_has_value = false;
};
template <typename T, typename E, bool isConstructable, bool isMoveable>
class storage_t
{
public:
  storage_t() = default;
  ~storage_t() = default;
  explicit storage_t(bool has_value) : storage_t_impl<T, E>(has_value) {}
  storage_t(storage_t const& other) = delete;
  storage_t(storage_t&& other) = delete;
};
template <typename T, typename E>
class storage_t<T, E, true, true> : public storage_t_impl<T, E>
{
public:
  storage_t() = default;
  ~storage_t() = default;
  explicit storage_t(bool has_value) : storage_t_impl<T, E>(has_value) {}
  storage_t(storage_t const& other) : storage_t_impl<T, E>(other.has_value())
  {
    if (this->has_value())
      this->construct_value(other.value());
    else
      this->construct_error(other.error());
  }
  storage_t(storage_t&& other) : storage_t_impl<T, E>(other.has_value())
  {
    if (this->has_value())
      this->construct_value(std::move(other.value()));
    else
      this->construct_error(std::move(other.error()));
  }
};
template <typename E>
class storage_t<void, E, true, true> : public storage_t_impl<void, E>
{
public:
  storage_t() = default;
  ~storage_t() = default;
  explicit storage_t(bool has_value) : storage_t_impl<void, E>(has_value) {}
  storage_t(storage_t const& other) : storage_t_impl<void, E>(other.has_value())
  {
    if (this->has_value())
      ;
    else
      this->construct_error(other.error());
  }
  storage_t(storage_t&& other) : storage_t_impl<void, E>(other.has_value())
  {
    if (this->has_value())
      ;
    else
      this->construct_error(std::move(other.error()));
  }
};
template <typename T, typename E>
class storage_t<T, E, true, false> : public storage_t_impl<T, E>
{
public:
  storage_t() = default;
  ~storage_t() = default;
  explicit storage_t(bool has_value) : storage_t_impl<T, E>(has_value) {}
  storage_t(storage_t const& other) : storage_t_impl<T, E>(other.has_value())
  {
    if (this->has_value())
      this->construct_value(other.value());
    else
      this->construct_error(other.error());
  }
  storage_t(storage_t&& other) = delete;
};
template <typename E>
class storage_t<void, E, true, false> : public storage_t_impl<void, E>
{
public:
  storage_t() = default;
  ~storage_t() = default;
  explicit storage_t(bool has_value) : storage_t_impl<void, E>(has_value) {}
  storage_t(storage_t const& other) : storage_t_impl<void, E>(other.has_value())
  {
    if (this->has_value())
      ;
    else
      this->construct_error(other.error());
  }
  storage_t(storage_t&& other) = delete;
};
template <typename T, typename E>
class storage_t<T, E, false, true> : public storage_t_impl<T, E>
{
public:
  storage_t() = default;
  ~storage_t() = default;
  explicit storage_t(bool has_value) : storage_t_impl<T, E>(has_value) {}
  storage_t(storage_t const& other) = delete;
  storage_t(storage_t&& other) : storage_t_impl<T, E>(other.has_value())
  {
    if (this->has_value())
      this->construct_value(std::move(other.value()));
    else
      this->construct_error(std::move(other.error()));
  }
};
template <typename E>
class storage_t<void, E, false, true> : public storage_t_impl<void, E>
{
public:
  storage_t() = default;
  ~storage_t() = default;
  explicit storage_t(bool has_value) : storage_t_impl<void, E>(has_value) {}
  storage_t(storage_t const& other) = delete;
  storage_t(storage_t&& other) : storage_t_impl<void, E>(other.has_value())
  {
    if (this->has_value())
      ;
    else
      this->construct_error(std::move(other.error()));
  }
};
}  // namespace detail
template <typename E>
class unexpected_type
{
public:
  using error_type = E;
  constexpr unexpected_type(unexpected_type const&) = default;
  constexpr unexpected_type(unexpected_type&&) = default;
  template <typename... Args, typename std::enable_if<(std::is_constructible<E, Args&&...>::value), int>::type = 0>
  constexpr explicit unexpected_type(std::in_place_t, Args&&... args) : m_error(std::forward<Args>(args)...)
  {
  }
  template <
      typename U,
      typename... Args,
      typename std::enable_if<(std::is_constructible<E, std::initializer_list<U>, Args&&...>::value), int>::type = 0>
  constexpr explicit unexpected_type(std::in_place_t, std::initializer_list<U> il, Args&&... args)
      : m_error(il, std::forward<Args>(args)...)
  {
  }
  template <typename E2,
            typename std::enable_if<(std::is_constructible<E, E2>::value &&
                                     !std::is_same<typename std20::remove_cvref<E2>::type, std::in_place_t>::value &&
                                     !std::is_same<typename std20::remove_cvref<E2>::type, unexpected_type>::value),
                                    int>::type = 0>
  constexpr explicit unexpected_type(E2&& error) : m_error(std::forward<E2>(error))
  {
  }
  template <
      typename E2,
      typename std::enable_if<
          (std::is_constructible<E, E2>::value && !std::is_constructible<E, unexpected_type<E2>&>::value &&
           !std::is_constructible<E, unexpected_type<E2>>::value &&
           !std::is_constructible<E, unexpected_type<E2> const&>::value &&
           !std::is_constructible<E, unexpected_type<E2> const>::value &&
           !std::is_convertible<unexpected_type<E2>&, E>::value &&
           !std::is_convertible<unexpected_type<E2>, E>::value &&
           !std::is_convertible<unexpected_type<E2> const&, E>::value &&
           !std::is_convertible<unexpected_type<E2> const, E>::value && !std::is_convertible<E2 const&, E>::value),
          int>::type = 0>
  constexpr explicit unexpected_type(unexpected_type<E2> const& error) : m_error(E{error.value()})
  {
  }
  template <typename E2,
            typename std::enable_if<
                (std::is_constructible<E, E2>::value && !std::is_constructible<E, unexpected_type<E2>&>::value &&
                 !std::is_constructible<E, unexpected_type<E2>>::value &&
                 !std::is_constructible<E, unexpected_type<E2> const&>::value &&
                 !std::is_constructible<E, unexpected_type<E2> const>::value &&
                 !std::is_convertible<unexpected_type<E2>&, E>::value &&
                 !std::is_convertible<unexpected_type<E2>, E>::value &&
                 !std::is_convertible<unexpected_type<E2> const&, E>::value &&
                 !std::is_convertible<unexpected_type<E2> const, E>::value && std::is_convertible<E2 const&, E>::value),
                int>::type = 0>
  constexpr unexpected_type(unexpected_type<E2> const& error) : m_error(error.value())
  {
  }
  template <
      typename E2,
      typename std::enable_if<
          (std::is_constructible<E, E2>::value && !std::is_constructible<E, unexpected_type<E2>&>::value &&
           !std::is_constructible<E, unexpected_type<E2>>::value &&
           !std::is_constructible<E, unexpected_type<E2> const&>::value &&
           !std::is_constructible<E, unexpected_type<E2> const>::value &&
           !std::is_convertible<unexpected_type<E2>&, E>::value &&
           !std::is_convertible<unexpected_type<E2>, E>::value &&
           !std::is_convertible<unexpected_type<E2> const&, E>::value &&
           !std::is_convertible<unexpected_type<E2> const, E>::value && !std::is_convertible<E2 const&, E>::value),
          int>::type = 0>
  constexpr explicit unexpected_type(unexpected_type<E2>&& error) : m_error(E{std::move(error.value())})
  {
  }
  template <typename E2,
            typename std::enable_if<
                (std::is_constructible<E, E2>::value && !std::is_constructible<E, unexpected_type<E2>&>::value &&
                 !std::is_constructible<E, unexpected_type<E2>>::value &&
                 !std::is_constructible<E, unexpected_type<E2> const&>::value &&
                 !std::is_constructible<E, unexpected_type<E2> const>::value &&
                 !std::is_convertible<unexpected_type<E2>&, E>::value &&
                 !std::is_convertible<unexpected_type<E2>, E>::value &&
                 !std::is_convertible<unexpected_type<E2> const&, E>::value &&
                 !std::is_convertible<unexpected_type<E2> const, E>::value && std::is_convertible<E2 const&, E>::value),
                int>::type = 0>
  constexpr unexpected_type(unexpected_type<E2>&& error) : m_error(std::move(error.value()))
  {
  }
  constexpr unexpected_type& operator=(unexpected_type const&) = default;
  constexpr unexpected_type& operator=(unexpected_type&&) = default;
  template <typename E2 = E>
  constexpr unexpected_type& operator=(unexpected_type<E2> const& other)
  {
    unexpected_type{other.value()}.swap(*this);
    return *this;
  }
  template <typename E2 = E>
  constexpr unexpected_type& operator=(unexpected_type<E2>&& other)
  {
    unexpected_type{std::move(other.value())}.swap(*this);
    return *this;
  }
  constexpr E& value() & noexcept { return m_error; }
  constexpr E const& value() const& noexcept { return m_error; }
  constexpr E&& value() && noexcept { return std::move(m_error); }
  constexpr E const&& value() const&& noexcept { return std::move(m_error); }
  typename std::enable_if<(std17::is_swappable<E>::value), void>::type swap(unexpected_type& other) noexcept(
      std17::is_nothrow_swappable<E>::value)
  {
    using std::swap;
    swap(m_error, other.m_error);
  }

private:
  error_type m_error;
};
template <typename E>
unexpected_type(E) -> unexpected_type<E>;
template <typename E1, typename E2>
constexpr bool operator==(unexpected_type<E1> const& x, unexpected_type<E2> const& y)
{
  return x.value() == y.value();
}
template <typename E1, typename E2>
constexpr bool operator!=(unexpected_type<E1> const& x, unexpected_type<E2> const& y)
{
  return !(x == y);
}
template <typename E, typename std::enable_if<(std17::is_swappable<E>::value), int>::type = 0>
void swap(unexpected_type<E>& x, unexpected_type<E>& y) noexcept(noexcept(x.swap(y)))
{
  x.swap(y);
}
template <typename E>
constexpr auto make_unexpected(E&& value) -> unexpected_type<typename std::decay<E>::type>
{
  return unexpected_type<typename std::decay<E>::type>(std::forward<E>(value));
}
template <typename E>
class bad_expected_access;
template <>
class bad_expected_access<void> : public std::exception
{
public:
  explicit bad_expected_access() : std::exception() {}
};
template <typename E>
class bad_expected_access : public bad_expected_access<void>
{
public:
  using error_type = E;
  explicit bad_expected_access(error_type error) : m_error(error) {}
  virtual char const* what() const noexcept override { return "bad_expected_access"; }
  constexpr error_type& error() & { return m_error; }
  constexpr error_type const& error() const& { return m_error; }
  constexpr error_type&& error() && { return std::move(m_error); }
  constexpr error_type const&& error() const&& { return std::move(m_error); }

private:
  error_type m_error;
};
struct unexpect_t
{
};
using in_place_unexpected_t = unexpect_t;
inline constexpr unexpect_t unexpect{};
inline constexpr unexpect_t in_place_unexpected{};
template <typename Error>
struct error_traits
{
  static void rethrow(Error const& e) { throw bad_expected_access<Error>{e}; }
};
template <>
struct error_traits<std::exception_ptr>
{
  static void rethrow(std::exception_ptr const& e) { std::rethrow_exception(e); }
};
template <>
struct error_traits<std::error_code>
{
  static void rethrow(std::error_code const& e) { throw std::system_error(e); }
};
}  // namespace expected_lite
using expected_lite::unexpected_type;
namespace expected_lite
{
template <typename T, typename E>
class expected
{
private:
  template <typename, typename>
  friend class expected;

public:
  using value_type = T;
  using error_type = E;
  using unexpected_type = nonstd::unexpected_type<E>;
  template <typename U>
  struct rebind
  {
    using type = expected<U, error_type>;
  };
  template <bool B = (std::is_default_constructible<T>::value), typename std::enable_if<B, int>::type = 0>
  constexpr expected() : contained(true)
  {
    contained.construct_value(value_type());
  }
  constexpr expected(expected const&) = default;
  constexpr expected(expected&&) = default;
  template <
      typename U,
      typename G,
      typename std::enable_if<
          (std::is_constructible<T, U const&>::value && std::is_constructible<E, G const&>::value &&
           !std::is_constructible<T, expected<U, G>&>::value && !std::is_constructible<T, expected<U, G>&&>::value &&
           !std::is_constructible<T, expected<U, G> const&>::value &&
           !std::is_constructible<T, expected<U, G> const&&>::value &&
           !std::is_convertible<expected<U, G>&, T>::value && !std::is_convertible<expected<U, G>&&, T>::value &&
           !std::is_convertible<expected<U, G> const&, T>::value &&
           !std::is_convertible<expected<U, G> const&&, T>::value &&
           (!std::is_convertible<U const&, T>::value || !std::is_convertible<G const&, E>::value)),
          int>::type = 0>
  constexpr explicit expected(expected<U, G> const& other) : contained(other.has_value())
  {
    if (has_value())
      contained.construct_value(T{other.contained.value()});
    else
      contained.construct_error(E{other.contained.error()});
  }
  template <
      typename U,
      typename G,
      typename std::enable_if<
          (std::is_constructible<T, U const&>::value && std::is_constructible<E, G const&>::value &&
           !std::is_constructible<T, expected<U, G>&>::value && !std::is_constructible<T, expected<U, G>&&>::value &&
           !std::is_constructible<T, expected<U, G> const&>::value &&
           !std::is_constructible<T, expected<U, G> const&&>::value &&
           !std::is_convertible<expected<U, G>&, T>::value && !std::is_convertible<expected<U, G>&&, T>::value &&
           !std::is_convertible<expected<U, G> const&, T>::value &&
           !std::is_convertible<expected<U, G> const&&, T>::value &&
           !(!std::is_convertible<U const&, T>::value || !std::is_convertible<G const&, E>::value)),
          int>::type = 0>
  constexpr expected(expected<U, G> const& other) : contained(other.has_value())
  {
    if (has_value())
      contained.construct_value(other.contained.value());
    else
      contained.construct_error(other.contained.error());
  }
  template <
      typename U,
      typename G,
      typename std::enable_if<
          (std::is_constructible<T, U>::value && std::is_constructible<E, G>::value &&
           !std::is_constructible<T, expected<U, G>&>::value && !std::is_constructible<T, expected<U, G>&&>::value &&
           !std::is_constructible<T, expected<U, G> const&>::value &&
           !std::is_constructible<T, expected<U, G> const&&>::value &&
           !std::is_convertible<expected<U, G>&, T>::value && !std::is_convertible<expected<U, G>&&, T>::value &&
           !std::is_convertible<expected<U, G> const&, T>::value &&
           !std::is_convertible<expected<U, G> const&&, T>::value &&
           (!std::is_convertible<U, T>::value || !std::is_convertible<G, E>::value)),
          int>::type = 0>
  constexpr explicit expected(expected<U, G>&& other) : contained(other.has_value())
  {
    if (has_value())
      contained.construct_value(T{std::move(other.contained.value())});
    else
      contained.construct_error(E{std::move(other.contained.error())});
  }
  template <
      typename U,
      typename G,
      typename std::enable_if<
          (std::is_constructible<T, U>::value && std::is_constructible<E, G>::value &&
           !std::is_constructible<T, expected<U, G>&>::value && !std::is_constructible<T, expected<U, G>&&>::value &&
           !std::is_constructible<T, expected<U, G> const&>::value &&
           !std::is_constructible<T, expected<U, G> const&&>::value &&
           !std::is_convertible<expected<U, G>&, T>::value && !std::is_convertible<expected<U, G>&&, T>::value &&
           !std::is_convertible<expected<U, G> const&, T>::value &&
           !std::is_convertible<expected<U, G> const&&, T>::value &&
           !(!std::is_convertible<U, T>::value || !std::is_convertible<G, E>::value)),
          int>::type = 0>
  constexpr expected(expected<U, G>&& other) : contained(other.has_value())
  {
    if (has_value())
      contained.construct_value(std::move(other.contained.value()));
    else
      contained.construct_error(std::move(other.contained.error()));
  }
  template <typename U = T, typename std::enable_if<(std::is_copy_constructible<U>::value), int>::type = 0>
  constexpr expected(value_type const& value) : contained(true)
  {
    contained.construct_value(value);
  }
  template <typename U = T,
            typename std::enable_if<
                (std::is_constructible<T, U&&>::value &&
                 !std::is_same<typename std20::remove_cvref<U>::type, std::in_place_t>::value &&
                 !std::is_same<expected<T, E>, typename std20::remove_cvref<U>::type>::value &&
                 !std::is_same<nonstd::unexpected_type<E>, typename std20::remove_cvref<U>::type>::value &&
                 !std::is_convertible<U&&, T>::value),
                int>::type = 0>
  constexpr explicit expected(U&& value) noexcept(
      std::is_nothrow_move_constructible<U>::value&& std::is_nothrow_move_constructible<E>::value)
      : contained(true)
  {
    contained.construct_value(T{std::forward<U>(value)});
  }
  template <typename U = T,
            typename std::enable_if<
                (std::is_constructible<T, U&&>::value &&
                 !std::is_same<typename std20::remove_cvref<U>::type, std::in_place_t>::value &&
                 !std::is_same<expected<T, E>, typename std20::remove_cvref<U>::type>::value &&
                 !std::is_same<nonstd::unexpected_type<E>, typename std20::remove_cvref<U>::type>::value &&
                 std::is_convertible<U&&, T>::value),
                int>::type = 0>
  constexpr expected(U&& value) noexcept(
      std::is_nothrow_move_constructible<U>::value&& std::is_nothrow_move_constructible<E>::value)
      : contained(true)
  {
    contained.construct_value(std::forward<U>(value));
  }
  template <
      typename G = E,
      typename std::enable_if<(std::is_constructible<E, G const&>::value && !std::is_convertible<G const&, E>::value),
                              int>::type = 0>
  constexpr explicit expected(nonstd::unexpected_type<G> const& error) : contained(false)
  {
    contained.construct_error(E{error.value()});
  }
  template <
      typename G = E,
      typename std::enable_if<(std::is_constructible<E, G const&>::value && std::is_convertible<G const&, E>::value),
                              int>::type = 0>
  constexpr expected(nonstd::unexpected_type<G> const& error) : contained(false)
  {
    contained.construct_error(error.value());
  }
  template <typename G = E,
            typename std::enable_if<(std::is_constructible<E, G&&>::value && !std::is_convertible<G&&, E>::value),
                                    int>::type = 0>
  constexpr explicit expected(nonstd::unexpected_type<G>&& error) : contained(false)
  {
    contained.construct_error(E{std::move(error.value())});
  }
  template <typename G = E,
            typename std::enable_if<(std::is_constructible<E, G&&>::value && std::is_convertible<G&&, E>::value),
                                    int>::type = 0>
  constexpr expected(nonstd::unexpected_type<G>&& error) : contained(false)
  {
    contained.construct_error(std::move(error.value()));
  }
  template <typename... Args, typename std::enable_if<(std::is_constructible<T, Args&&...>::value), int>::type = 0>
  constexpr explicit expected(std::in_place_t, Args&&... args) : contained(true)
  {
    contained.emplace_value(std::forward<Args>(args)...);
  }
  template <
      typename U,
      typename... Args,
      typename std::enable_if<(std::is_constructible<T, std::initializer_list<U>, Args&&...>::value), int>::type = 0>
  constexpr explicit expected(std::in_place_t, std::initializer_list<U> il, Args&&... args) : contained(true)
  {
    contained.emplace_value(il, std::forward<Args>(args)...);
  }
  template <typename... Args, typename std::enable_if<(std::is_constructible<E, Args&&...>::value), int>::type = 0>
  constexpr explicit expected(unexpect_t, Args&&... args) : contained(false)
  {
    contained.emplace_error(std::forward<Args>(args)...);
  }
  template <
      typename U,
      typename... Args,
      typename std::enable_if<(std::is_constructible<E, std::initializer_list<U>, Args&&...>::value), int>::type = 0>
  constexpr explicit expected(unexpect_t, std::initializer_list<U> il, Args&&... args) : contained(false)
  {
    contained.emplace_error(il, std::forward<Args>(args)...);
  }
  ~expected()
  {
    if (has_value())
      contained.destruct_value();
    else
      contained.destruct_error();
  }
  expected& operator=(expected const& other)
  {
    expected(other).swap(*this);
    return *this;
  }
  expected& operator=(expected&& other) noexcept(
      std::is_nothrow_move_constructible<T>::value&& std::is_nothrow_move_assignable<T>::value&&
          std::is_nothrow_move_constructible<E>::value&& std::is_nothrow_move_assignable<E>::value)
  {
    expected(std::move(other)).swap(*this);
    return *this;
  }
  template <typename U,
            typename std::enable_if<(!std::is_same<expected<T, E>, typename std20::remove_cvref<U>::type>::value &&
                                     std17::conjunction<std::is_scalar<T>, std::is_same<T, std::decay<U>>>::value &&
                                     std::is_constructible<T, U>::value && std::is_assignable<T&, U>::value &&
                                     std::is_nothrow_move_constructible<E>::value),
                                    int>::type = 0>
  expected& operator=(U&& value)
  {
    expected(std::forward<U>(value)).swap(*this);
    return *this;
  }
  template <typename G = E,
            typename std::enable_if<(std::is_constructible<E, G const&>::value &&
                                     std::is_copy_constructible<G>::value && std::is_copy_assignable<G>::value),
                                    int>::type = 0>
  expected& operator=(nonstd::unexpected_type<G> const& error)
  {
    expected(unexpect, error.value()).swap(*this);
    return *this;
  }
  template <typename G = E,
            typename std::enable_if<(std::is_constructible<E, G&&>::value && std::is_move_constructible<G>::value &&
                                     std::is_move_assignable<G>::value),
                                    int>::type = 0>
  expected& operator=(nonstd::unexpected_type<G>&& error)
  {
    expected(unexpect, std::move(error.value())).swap(*this);
    return *this;
  }
  template <typename... Args,
            typename std::enable_if<(std::is_nothrow_constructible<T, Args&&...>::value), int>::type = 0>
  value_type& emplace(Args&&... args)
  {
    expected(std::in_place_t{}, std::forward<Args>(args)...).swap(*this);
    return value();
  }
  template <typename U,
            typename... Args,
            typename std::enable_if<(std::is_nothrow_constructible<T, std::initializer_list<U>&, Args&&...>::value),
                                    int>::type = 0>
  value_type& emplace(std::initializer_list<U> il, Args&&... args)
  {
    expected(std::in_place_t{}, il, std::forward<Args>(args)...).swap(*this);
    return value();
  }
  template <typename U = T, typename G = E>
  typename std::enable_if<(std17::is_swappable<U>::value && std17::is_swappable<G>::value &&
                           (std::is_move_constructible<U>::value || std::is_move_constructible<G>::value)),
                          void>::type
  swap(expected& other) noexcept(
      std::is_nothrow_move_constructible<T>::value&& std17::is_nothrow_swappable<T&>::value&&
          std::is_nothrow_move_constructible<E>::value&& std17::is_nothrow_swappable<E&>::value)
  {
    using std::swap;
    if (bool(*this) && bool(other))
    {
      swap(contained.value(), other.contained.value());
    }
    else if (!bool(*this) && !bool(other))
    {
      swap(contained.error(), other.contained.error());
    }
    else if (bool(*this) && !bool(other))
    {
      error_type t(std::move(other.error()));
      other.contained.destruct_error();
      other.contained.construct_value(std::move(contained.value()));
      contained.destruct_value();
      contained.construct_error(std::move(t));
      bool has_value = contained.has_value();
      bool other_has_value = other.has_value();
      other.contained.set_has_value(has_value);
      contained.set_has_value(other_has_value);
    }
    else if (!bool(*this) && bool(other))
    {
      other.swap(*this);
    }
  }
  constexpr value_type const* operator->() const { return (static_cast<void>(0)), contained.value_ptr(); }
  value_type* operator->() { return (static_cast<void>(0)), contained.value_ptr(); }
  constexpr value_type const& operator*() const& { return (static_cast<void>(0)), contained.value(); }
  value_type& operator*() & { return (static_cast<void>(0)), contained.value(); }
  constexpr value_type const&& operator*() const&& { return std::move(((static_cast<void>(0)), contained.value())); }
  constexpr value_type&& operator*() && { return std::move(((static_cast<void>(0)), contained.value())); }
  constexpr explicit operator bool() const noexcept { return has_value(); }
  constexpr bool has_value() const noexcept { return contained.has_value(); }
  constexpr value_type const& value() const&
  {
    return has_value() ? (contained.value())
                       : (error_traits<error_type>::rethrow(contained.error()), contained.value());
  }
  value_type& value() &
  {
    return has_value() ? (contained.value())
                       : (error_traits<error_type>::rethrow(contained.error()), contained.value());
  }
  constexpr value_type const&& value() const&&
  {
    return std::move(has_value() ? (contained.value())
                                 : (error_traits<error_type>::rethrow(contained.error()), contained.value()));
  }
  constexpr value_type&& value() &&
  {
    return std::move(has_value() ? (contained.value())
                                 : (error_traits<error_type>::rethrow(contained.error()), contained.value()));
  }
  constexpr error_type const& error() const& { return (static_cast<void>(0)), contained.error(); }
  error_type& error() & { return (static_cast<void>(0)), contained.error(); }
  constexpr error_type const&& error() const&& { return std::move(((static_cast<void>(0)), contained.error())); }
  error_type&& error() && { return std::move(((static_cast<void>(0)), contained.error())); }
  constexpr unexpected_type get_unexpected() const { return make_unexpected(contained.error()); }
  template <typename Ex>
  bool has_exception() const
  {
    using ContainedEx = typename std::remove_reference<decltype(get_unexpected().value())>::type;
    return !has_value() && std::is_base_of<Ex, ContainedEx>::value;
  }
  template <typename U,
            typename std::enable_if<(std::is_copy_constructible<T>::value && std::is_convertible<U&&, T>::value),
                                    int>::type = 0>
  value_type value_or(U&& v) const&
  {
    return has_value() ? contained.value() : static_cast<T>(std::forward<U>(v));
  }
  template <typename U,
            typename std::enable_if<(std::is_move_constructible<T>::value && std::is_convertible<U&&, T>::value),
                                    int>::type = 0>
  value_type value_or(U&& v) &&
  {
    return has_value() ? std::move(contained.value()) : static_cast<T>(std::forward<U>(v));
  }

private:
  detail::storage_t<T,
                    E,
                    std::is_copy_constructible<T>::value && std::is_copy_constructible<E>::value,
                    std::is_move_constructible<T>::value && std::is_move_constructible<E>::value>
      contained;
};
template <typename E>
class expected<void, E>
{
private:
  template <typename, typename>
  friend class expected;

public:
  using value_type = void;
  using error_type = E;
  using unexpected_type = nonstd::unexpected_type<E>;
  constexpr expected() noexcept : contained(true) {}
  constexpr expected(expected const& other) = default;
  constexpr expected(expected&& other) = default;
  constexpr explicit expected(std::in_place_t) : contained(true) {}
  template <typename G = E, typename std::enable_if<(!std::is_convertible<G const&, E>::value), int>::type = 0>
  constexpr explicit expected(nonstd::unexpected_type<G> const& error) : contained(false)
  {
    contained.construct_error(E{error.value()});
  }
  template <typename G = E, typename std::enable_if<(std::is_convertible<G const&, E>::value), int>::type = 0>
  constexpr expected(nonstd::unexpected_type<G> const& error) : contained(false)
  {
    contained.construct_error(error.value());
  }
  template <typename G = E, typename std::enable_if<(!std::is_convertible<G&&, E>::value), int>::type = 0>
  constexpr explicit expected(nonstd::unexpected_type<G>&& error) : contained(false)
  {
    contained.construct_error(E{std::move(error.value())});
  }
  template <typename G = E, typename std::enable_if<(std::is_convertible<G&&, E>::value), int>::type = 0>
  constexpr expected(nonstd::unexpected_type<G>&& error) : contained(false)
  {
    contained.construct_error(std::move(error.value()));
  }
  template <typename... Args, typename std::enable_if<(std::is_constructible<E, Args&&...>::value), int>::type = 0>
  constexpr explicit expected(unexpect_t, Args&&... args) : contained(false)
  {
    contained.emplace_error(std::forward<Args>(args)...);
  }
  template <
      typename U,
      typename... Args,
      typename std::enable_if<(std::is_constructible<E, std::initializer_list<U>, Args&&...>::value), int>::type = 0>
  constexpr explicit expected(unexpect_t, std::initializer_list<U> il, Args&&... args) : contained(false)
  {
    contained.emplace_error(il, std::forward<Args>(args)...);
  }
  ~expected()
  {
    if (!has_value())
    {
      contained.destruct_error();
    }
  }
  expected& operator=(expected const& other)
  {
    expected(other).swap(*this);
    return *this;
  }
  expected& operator=(expected&& other) noexcept(
      std::is_nothrow_move_assignable<E>::value&& std::is_nothrow_move_constructible<E>::value)
  {
    expected(std::move(other)).swap(*this);
    return *this;
  }
  void emplace() { expected().swap(*this); }
  template <typename G = E>
  typename std::enable_if<(std17::is_swappable<G>::value && std::is_move_constructible<G>::value), void>::type swap(
      expected& other) noexcept(std::is_nothrow_move_constructible<E>::value&& std17::is_nothrow_swappable<E&>::value)
  {
    using std::swap;
    if (!bool(*this) && !bool(other))
    {
      swap(contained.error(), other.contained.error());
    }
    else if (bool(*this) && !bool(other))
    {
      contained.construct_error(std::move(other.error()));
      bool has_value = contained.has_value();
      bool other_has_value = other.has_value();
      other.contained.set_has_value(has_value);
      contained.set_has_value(other_has_value);
    }
    else if (!bool(*this) && bool(other))
    {
      other.swap(*this);
    }
  }
  constexpr explicit operator bool() const noexcept { return has_value(); }
  constexpr bool has_value() const noexcept { return contained.has_value(); }
  void value() const
  {
    if (!has_value())
    {
      error_traits<error_type>::rethrow(contained.error());
    }
  }
  constexpr error_type const& error() const& { return (static_cast<void>(0)), contained.error(); }
  error_type& error() & { return (static_cast<void>(0)), contained.error(); }
  constexpr error_type const&& error() const&& { return std::move(((static_cast<void>(0)), contained.error())); }
  error_type&& error() && { return std::move(((static_cast<void>(0)), contained.error())); }
  constexpr unexpected_type get_unexpected() const { return make_unexpected(contained.error()); }
  template <typename Ex>
  bool has_exception() const
  {
    using ContainedEx = typename std::remove_reference<decltype(get_unexpected().value())>::type;
    return !has_value() && std::is_base_of<Ex, ContainedEx>::value;
  }

private:
  detail::storage_t<void, E, std::is_copy_constructible<E>::value, std::is_move_constructible<E>::value> contained;
};
template <typename T1, typename E1, typename T2, typename E2>
constexpr bool operator==(expected<T1, E1> const& x, expected<T2, E2> const& y)
{
  return bool(x) != bool(y) ? false : bool(x) == false ? x.error() == y.error() : *x == *y;
}
template <typename T1, typename E1, typename T2, typename E2>
constexpr bool operator!=(expected<T1, E1> const& x, expected<T2, E2> const& y)
{
  return !(x == y);
}
template <typename E1, typename E2>
constexpr bool operator==(expected<void, E1> const& x, expected<void, E1> const& y)
{
  return bool(x) != bool(y) ? false : bool(x) == false ? x.error() == y.error() : true;
}
template <typename T1, typename E1, typename T2>
constexpr bool operator==(expected<T1, E1> const& x, T2 const& v)
{
  return bool(x) ? *x == v : false;
}
template <typename T1, typename E1, typename T2>
constexpr bool operator==(T2 const& v, expected<T1, E1> const& x)
{
  return bool(x) ? v == *x : false;
}
template <typename T1, typename E1, typename T2>
constexpr bool operator!=(expected<T1, E1> const& x, T2 const& v)
{
  return bool(x) ? *x != v : true;
}
template <typename T1, typename E1, typename T2>
constexpr bool operator!=(T2 const& v, expected<T1, E1> const& x)
{
  return bool(x) ? v != *x : true;
}
template <typename T1, typename E1, typename E2>
constexpr bool operator==(expected<T1, E1> const& x, unexpected_type<E2> const& u)
{
  return (!x) ? x.get_unexpected() == u : false;
}
template <typename T1, typename E1, typename E2>
constexpr bool operator==(unexpected_type<E2> const& u, expected<T1, E1> const& x)
{
  return (x == u);
}
template <typename T1, typename E1, typename E2>
constexpr bool operator!=(expected<T1, E1> const& x, unexpected_type<E2> const& u)
{
  return !(x == u);
}
template <typename T1, typename E1, typename E2>
constexpr bool operator!=(unexpected_type<E2> const& u, expected<T1, E1> const& x)
{
  return !(x == u);
}
template <typename T,
          typename E,
          typename std::enable_if<((std::is_void<T>::value || std::is_move_constructible<T>::value) &&
                                   std::is_move_constructible<E>::value && std17::is_swappable<T>::value &&
                                   std17::is_swappable<E>::value),
                                  int>::type = 0>
void swap(expected<T, E>& x, expected<T, E>& y) noexcept(noexcept(x.swap(y)))
{
  x.swap(y);
}
}  // namespace expected_lite
using namespace expected_lite;
}  // namespace nonstd
namespace std
{
template <typename T, typename E>
struct hash<nonstd::expected<T, E>>
{
  using result_type = std::size_t;
  using argument_type = nonstd::expected<T, E>;
  constexpr result_type operator()(argument_type const& arg) const
  {
    return arg ? std::hash<T>{}(*arg) : result_type{};
  }
};
template <typename T, typename E>
struct hash<nonstd::expected<T&, E>>
{
  using result_type = std::size_t;
  using argument_type = nonstd::expected<T&, E>;
  constexpr result_type operator()(argument_type const& arg) const
  {
    return arg ? std::hash<T>{}(*arg) : result_type{};
  }
};
template <typename E>
struct hash<nonstd::expected<void, E>>
{
};
}  // namespace std
namespace nonstd
{
template <typename E>
using unexpected = unexpected_type<E>;
}
#pragma GCC diagnostic pop
typedef struct ZenClientHandle
{
  uintptr_t handle;
} ZenClientHandle_t;
typedef struct ZenSensorHandle
{
  uintptr_t handle;
} ZenSensorHandle_t;
typedef struct ZenComponentHandle
{
  uintptr_t handle;
} ZenComponentHandle_t;
typedef int ZenError_t;
typedef enum ZenError
{
  ZenError_None = 0,
  ZenError_Unknown = 1,
  ZenError_IsNull = 10,
  ZenError_NotNull = 11,
  ZenError_WrongDataType = 12,
  ZenError_BufferTooSmall = 13,
  ZenError_InvalidArgument = 14,
  ZenError_NotSupported = 15,
  ZenError_AlreadyInitialized = 20,
  ZenError_NotInitialized = 21,
  ZenError_Device_IoTypeInvalid = 30,
  ZenError_Sensor_VersionNotSupported = 31,
  ZenError_Device_ListingFailed = 32,
  ZenError_Device_Listing = 35,
  ZenError_WrongSensorType = 40,
  ZenError_WrongIoType = 41,
  ZenError_UnknownDeviceId = 42,
  ZenError_Io_AlreadyInitialized = 800,
  ZenError_Io_NotInitialized = 801,
  ZenError_Io_InitFailed = 802,
  ZenError_Io_DeinitFailed = 803,
  ZenError_Io_ReadFailed = 804,
  ZenError_Io_SendFailed = 805,
  ZenError_Io_GetFailed = 806,
  ZenError_Io_SetFailed = 807,
  ZenError_Io_Busy = 811,
  ZenError_Io_Timeout = 812,
  ZenError_Io_UnexpectedFunction = 813,
  ZenError_Io_UnsupportedFunction = 814,
  ZenError_Io_MsgCorrupt = 815,
  ZenError_Io_MsgTooBig = 816,
  ZenError_Io_ExpectedAck = 820,
  ZenError_Io_BaudratesUnknown = 821,
  ZenError_UnknownProperty = 850,
  ZenError_UnknownCommandMode = 851,
  ZenError_UnsupportedEvent = 852,
  ZenError_FW_FunctionFailed = 900,
  ZenError_Can_BusError = 1001,
  ZenError_Can_OutOfAddresses = 1002,
  ZenError_Can_ResetFailed = 1006,
  ZenError_Can_AddressOutOfRange = 1009,
  ZenError_InvalidClientHandle = 2000,
  ZenError_InvalidSensorHandle = 2001,
  ZenError_InvalidComponentHandle = 2002,
  ZenError_Max
} ZenError;
typedef enum ZenSensorInitError
{
  ZenSensorInitError_None = 0,
  ZenSensorInitError_InvalidHandle,
  ZenSensorInitError_IsNull,
  ZenSensorInitError_UnknownIdentifier,
  ZenSensorInitError_UnsupportedComponent,
  ZenSensorInitError_UnsupportedDataFormat,
  ZenSensorInitError_UnsupportedIoType,
  ZenSensorInitError_UnsupportedProtocol,
  ZenSensorInitError_UnsupportedFunction,
  ZenSensorInitError_ConnectFailed,
  ZenSensorInitError_IoFailed,
  ZenSensorInitError_RetrieveFailed,
  ZenSensorInitError_SetBaudRateFailed,
  ZenSensorInitError_SendFailed,
  ZenSensorInitError_Timeout,
  ZenSensorInitError_IncompatibleBaudRates,
  ZenSensorInitError_InvalidAddress,
  ZenSensorInitError_InvalidConfig,
  ZenSensorInitError_NoConfiguration,
  ZenSensorInitError_Max
} ZenSensorInitError;
typedef enum ZenAsyncStatus
{
  ZenAsync_Finished,
  ZenAsync_ThreadBusy,
  ZenAsync_InvalidArgument,
  ZenAsync_Updating,
  ZenAsync_Failed,
  ZenAsync_Max
} ZenAsyncStatus;
typedef enum ZenLogLevel
{
  ZenLogLevel_Off,
  ZenLogLevel_Error,
  ZenLogLevel_Warning,
  ZenLogLevel_Info,
  ZenLogLevel_Debug,
  ZenLogLevel_Max
} ZenLogLevel;
typedef struct ZenImuData
{
  int frameCount;
  double timestamp;
  float a[3];
  float g[3];
  float b[3];
  float aRaw[3];
  float gRaw[3];
  float bRaw[3];
  float w[3];
  float r[3];
  float q[4];
  float rotationM[9];
  float rotOffsetM[9];
  float pressure;
  float linAcc[3];
  float gTemp;
  float altitude;
  float temperature;
  float heaveMotion;
} ZenImuData;
typedef ZenImuData ZenEventData_Imu;
typedef enum ZenGnssFixType
{
  ZenGnssFixType_NoFix = 0,
  ZenGnssFixType_DeadReckoningOnly = 1,
  ZenGnssFixType_2dFix = 2,
  ZenGnssFixType_3dFix = 3,
  ZenGnssFixType_GnssAndDeadReckoning = 4,
  ZenGnssFixType_TimeOnlyFix = 5,
  ZenGnssFixType_Max
} ZenGnssFixType;
typedef enum ZenGnssFixCarrierPhaseSolution
{
  ZenGnssFixCarrierPhaseSolution_None = 0,
  ZenGnssFixCarrierPhaseSolution_FloatAmbiguities = 1,
  ZenGnssFixCarrierPhaseSolution_FixedAmbiguities = 2,
} ZenGnssFixCarrierPhaseSolution;
typedef struct ZenGnssData
{
  int frameCount;
  double timestamp;
  double latitude;
  double horizontalAccuracy;
  double longitude;
  double verticalAccuracy;
  double height;
  double headingOfMotion;
  double headingOfVehicle;
  double headingAccuracy;
  double velocity;
  double velocityAccuracy;
  ZenGnssFixType fixType;
  ZenGnssFixCarrierPhaseSolution carrierPhaseSolution;
  uint8_t numberSatellitesUsed;
  uint16_t year;
  uint8_t month;
  uint8_t day;
  uint8_t hour;
  uint8_t minute;
  uint8_t second;
  int32_t nanoSecondCorrection;
} ZenGnssData;
typedef ZenGnssData ZenEventData_Gnss;
typedef struct ZenSensorDesc
{
  char name[256];
  char serialNumber[64];
  char ioType[64];
  char identifier[64];
  uint32_t baudRate;
} ZenSensorDesc;
typedef struct ZenEventData_SensorDisconnected
{
  ZenError_t error;
} ZenEventData_SensorDisconnected;
typedef ZenSensorDesc ZenEventData_SensorFound;
typedef struct ZenEventData_SensorListingProgress
{
  float progress;
  char complete;
} ZenEventData_SensorListingProgress;
typedef union
{
  ZenEventData_Imu imuData;
  ZenEventData_Gnss gnssData;
  ZenEventData_SensorDisconnected sensorDisconnected;
  ZenEventData_SensorFound sensorFound;
  ZenEventData_SensorListingProgress sensorListingProgress;
} ZenEventData;
typedef enum ZenEventType
{
  ZenEventType_None = 0,
  ZenEventType_SensorFound = 1,
  ZenEventType_SensorListingProgress = 2,
  ZenEventType_SensorDisconnected = 3,
  ZenEventType_ImuData = 100,
  ZenEventType_GnssData = 200,
  ZenEventType_SensorSpecific_Start = 1000,
  ZenEventType_SensorSpecific_End = 1999,
  ZenEventType_ImuComponentSpecific_Start = 2000,
  ZenEventType_ImuComponentSpecific_End = 2999,
  ZenEventType_GnssComponentSpecific_Start = 3000,
  ZenEventType_GnssComponentSpecific_End = 3999,
  ZenEventType_Max
} ZenEventType;
typedef struct ZenEvent
{
  ZenEventType eventType;
  ZenSensorHandle_t sensor;
  ZenComponentHandle_t component;
  ZenEventData data;
} ZenEvent;
typedef int ZenProperty_t;
typedef enum EZenSensorProperty
{
  ZenSensorProperty_Invalid = 0,
  ZenSensorProperty_DeviceName = 1000,
  ZenSensorProperty_FirmwareInfo,
  ZenSensorProperty_FirmwareVersion,
  ZenSensorProperty_SerialNumber,
  ZenSensorProperty_RestoreFactorySettings,
  ZenSensorProperty_StoreSettingsInFlash,
  ZenSensorProperty_BatteryCharging,
  ZenSensorProperty_BatteryLevel,
  ZenSensorProperty_BatteryVoltage,
  ZenSensorProperty_BaudRate,
  ZenSensorProperty_SupportedBaudRates,
  ZenSensorProperty_DataMode,
  ZenSensorProperty_TimeOffset,
  ZenSensorProperty_SensorModel,
  ZenSensorProperty_SensorSpecific_Start = 10000,
  ZenSensorProperty_SensorSpecific_End = 19999,
  ZenSensorProperty_Max
} EZenSensorProperty;
typedef enum EZenImuProperty
{
  ZenImuProperty_Invalid = 0,
  ZenImuProperty_StreamData = 1000,
  ZenImuProperty_SamplingRate,
  ZenImuProperty_SupportedSamplingRates,
  ZenImuProperty_PollSensorData,
  ZenImuProperty_CalibrateGyro,
  ZenImuProperty_ResetOrientationOffset,
  ZenImuProperty_CentricCompensationRate,
  ZenImuProperty_LinearCompensationRate,
  ZenImuProperty_FieldRadius,
  ZenImuProperty_FilterMode,
  ZenImuProperty_SupportedFilterModes,
  ZenImuProperty_FilterPreset,
  ZenImuProperty_OrientationOffsetMode,
  ZenImuProperty_AccAlignment,
  ZenImuProperty_AccBias,
  ZenImuProperty_AccRange,
  ZenImuProperty_AccSupportedRanges,
  ZenImuProperty_GyrAlignment,
  ZenImuProperty_GyrBias,
  ZenImuProperty_GyrRange,
  ZenImuProperty_GyrSupportedRanges,
  ZenImuProperty_GyrUseAutoCalibration,
  ZenImuProperty_GyrUseThreshold,
  ZenImuProperty_MagAlignment,
  ZenImuProperty_MagBias,
  ZenImuProperty_MagRange,
  ZenImuProperty_MagSupportedRanges,
  ZenImuProperty_MagReference,
  ZenImuProperty_MagHardIronOffset,
  ZenImuProperty_MagSoftIronMatrix,
  ZenImuProperty_OutputLowPrecision,
  ZenImuProperty_OutputRawAcc,
  ZenImuProperty_OutputRawGyr,
  ZenImuProperty_OutputRawMag,
  ZenImuProperty_OutputEuler,
  ZenImuProperty_OutputQuat,
  ZenImuProperty_OutputAngularVel,
  ZenImuProperty_OutputLinearAcc,
  ZenImuProperty_OutputHeaveMotion,
  ZenImuProperty_OutputAltitude,
  ZenImuProperty_OutputPressure,
  ZenImuProperty_OutputTemperature,
  ZenImuProperty_OutputAccCalibrated,
  ZenImuProperty_OutputRawGyr0,
  ZenImuProperty_OutputRawGyr1,
  ZenImuProperty_OutputGyr0BiasCalib,
  ZenImuProperty_OutputGyr1BiasCalib,
  ZenImuProperty_OutputGyr0AlignCalib,
  ZenImuProperty_OutputGyr1AlignCalib,
  ZenImuProperty_OutputMagCalib,
  ZenImuProperty_DegRadOutput,
  ZenImuProperty_CanChannelMode,
  ZenImuProperty_CanPointMode,
  ZenImuProperty_CanStartId,
  ZenImuProperty_CanBaudrate,
  ZenImuProperty_CanMapping,
  ZenImuProperty_CanHeartbeat,
  ZenImuProperty_UartBaudRate,
  ZenImuProperty_UartFormat,
  ZenImuProperty_StartSensorSync,
  ZenImuProperty_StopSensorSync,
  ZenImuProperty_Max
} EZenImuProperty;
typedef enum EZenGnssProperty
{
  ZenGnssProperty_Invalid = 0,
  ZenGnssProperty_OutputNavPvtiTOW,
  ZenGnssProperty_OutputNavPvtYear,
  ZenGnssProperty_OutputNavPvtMonth,
  ZenGnssProperty_OutputNavPvtDay,
  ZenGnssProperty_OutputNavPvtHour,
  ZenGnssProperty_OutputNavPvtMinute,
  ZenGnssProperty_OutputNavPvtSecond,
  ZenGnssProperty_OutputNavPvtValid,
  ZenGnssProperty_OutputNavPvttAcc,
  ZenGnssProperty_OutputNavPvtNano,
  ZenGnssProperty_OutputNavPvtFixType,
  ZenGnssProperty_OutputNavPvtFlags,
  ZenGnssProperty_OutputNavPvtFlags2,
  ZenGnssProperty_OutputNavPvtNumSV,
  ZenGnssProperty_OutputNavPvtLongitude,
  ZenGnssProperty_OutputNavPvtLatitude,
  ZenGnssProperty_OutputNavPvtHeight,
  ZenGnssProperty_OutputNavPvthMSL,
  ZenGnssProperty_OutputNavPvthAcc,
  ZenGnssProperty_OutputNavPvtvAcc,
  ZenGnssProperty_OutputNavPvtVelN,
  ZenGnssProperty_OutputNavPvtVelE,
  ZenGnssProperty_OutputNavPvtVelD,
  ZenGnssProperty_OutputNavPvtgSpeed,
  ZenGnssProperty_OutputNavPvtHeadMot,
  ZenGnssProperty_OutputNavPvtsAcc,
  ZenGnssProperty_OutputNavPvtHeadAcc,
  ZenGnssProperty_OutputNavPvtpDOP,
  ZenGnssProperty_OutputNavPvtHeadVeh,
  ZenGnssProperty_OutputNavAttiTOW,
  ZenGnssProperty_OutputNavAttVersion,
  ZenGnssProperty_OutputNavAttRoll,
  ZenGnssProperty_OutputNavAttPitch,
  ZenGnssProperty_OutputNavAttHeading,
  ZenGnssProperty_OutputNavAttAccRoll,
  ZenGnssProperty_OutputNavAttAccPitch,
  ZenGnssProperty_OutputNavAttAccHeading,
  ZenGnssProperty_OutputEsfStatusiTOW,
  ZenGnssProperty_OutputEsfStatusVersion,
  ZenGnssProperty_OutputEsfStatusInitStatus1,
  ZenGnssProperty_OutputEsfStatusInitStatus2,
  ZenGnssProperty_OutputEsfStatusFusionMode,
  ZenGnssProperty_OutputEsfStatusNumSens,
  ZenGnssProperty_OutputEsfStatusSensStatus,
  ZenGnssProperty_Max
} EZenGnssProperty;
typedef enum ZenOrientationOffsetMode
{
  ZenOrientationOffsetMode_Object = 0,
  ZenOrientationOffsetMode_Heading = 1,
  ZenOrientationOffsetMode_Alignment = 2,
  ZenOrientationOffsetMode_Max
} ZenOrientationOffsetMode;
typedef enum ZenPropertyType
{
  ZenPropertyType_Invalid = 0,
  ZenPropertyType_Byte = 1,
  ZenPropertyType_Bool = 2,
  ZenPropertyType_Float = 3,
  ZenPropertyType_Int32 = 4,
  ZenPropertyType_UInt64 = 5,
  ZenPropertyType_Max
} ZenPropertyType;
static const char g_zenSensorType_Imu[] = "imu";
static const char g_zenSensorType_Gnss[] = "gnss";
namespace zen
{
using SensorPropertyValue = std::variant<bool, float, int32_t, uint64_t, gsl::span<const std::byte>>;
using SensorPropertyChangeCallback = std::function<void(SensorPropertyValue)>;
class ISensorProperties
{
public:
  virtual ~ISensorProperties() = default;
  virtual ZenError execute(ZenProperty_t property) noexcept = 0;
  virtual std::pair<ZenError, size_t> getArray(ZenProperty_t, ZenPropertyType, gsl::span<std::byte>) noexcept
  {
    return std::make_pair(ZenError_UnknownProperty, 0);
  }
  virtual nonstd::expected<bool, ZenError> getBool(ZenProperty_t) noexcept
  {
    return nonstd::make_unexpected(ZenError_UnknownProperty);
  }
  virtual nonstd::expected<float, ZenError> getFloat(ZenProperty_t) noexcept
  {
    return nonstd::make_unexpected(ZenError_UnknownProperty);
  }
  virtual nonstd::expected<int32_t, ZenError> getInt32(ZenProperty_t) noexcept
  {
    return nonstd::make_unexpected(ZenError_UnknownProperty);
  }
  virtual nonstd::expected<uint64_t, ZenError> getUInt64(ZenProperty_t) noexcept
  {
    return nonstd::make_unexpected(ZenError_UnknownProperty);
  }
  virtual ZenError setArray(ZenProperty_t, ZenPropertyType, gsl::span<const std::byte>) noexcept
  {
    return ZenError_UnknownProperty;
  }
  virtual ZenError setBool(ZenProperty_t, bool) noexcept { return ZenError_UnknownProperty; }
  virtual ZenError setFloat(ZenProperty_t, float) noexcept { return ZenError_UnknownProperty; }
  virtual ZenError setInt32(ZenProperty_t, int32_t) noexcept { return ZenError_UnknownProperty; }
  virtual ZenError setUInt64(ZenProperty_t, uint64_t) { return ZenError_UnknownProperty; }
  virtual bool isArray(ZenProperty_t) const noexcept { return false; }
  virtual bool isConstant(ZenProperty_t) const noexcept { return false; }
  virtual bool isExecutable(ZenProperty_t) const noexcept { return false; }
  virtual ZenPropertyType type(ZenProperty_t) const noexcept = 0;
  void subscribeToPropertyChanges(ZenProperty_t property, SensorPropertyChangeCallback callback) noexcept;

protected:
  void notifyPropertyChange(ZenProperty_t property, SensorPropertyValue value) const noexcept;

private:
  std::unordered_map<ZenProperty_t, std::vector<SensorPropertyChangeCallback>> m_subscriberCallbacks;
};
}  // namespace zen
namespace zen
{
void ISensorProperties::subscribeToPropertyChanges(ZenProperty_t property,
                                                   SensorPropertyChangeCallback callback) noexcept
{
  auto it = m_subscriberCallbacks.find(property);
  if (it == m_subscriberCallbacks.end())
    it = m_subscriberCallbacks.emplace(property, std::vector<SensorPropertyChangeCallback>()).first;
  it->second.emplace_back(std::move(callback));
}
void ISensorProperties::notifyPropertyChange(ZenProperty_t property, SensorPropertyValue value) const noexcept
{
  auto it = m_subscriberCallbacks.find(property);
  if (it != m_subscriberCallbacks.end())
    for (const auto& callback : it->second)
      callback(value);
}
}  // namespace zen
